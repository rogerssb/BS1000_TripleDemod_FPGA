// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"

#define AP_INT_MAX_W 32678

#include "ap_int.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
extern  bool clk;
extern  bool cs;
extern  bool dout;
extern  bool din;


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "size_V"
#define AUTOTB_TVIN_size_V  "../tv/cdatafile/c.setupLDPC.autotvin_size_V.dat"
// wrapc file define: "rate_V"
#define AUTOTB_TVIN_rate_V  "../tv/cdatafile/c.setupLDPC.autotvin_rate_V.dat"
// wrapc file define: "nR_M_V"
#define AUTOTB_TVOUT_nR_M_V  "../tv/cdatafile/c.setupLDPC.autotvout_nR_M_V.dat"
// wrapc file define: "etaIndexM_M_V"
#define AUTOTB_TVOUT_etaIndexM_M_V  "../tv/cdatafile/c.setupLDPC.autotvout_etaIndexM_M_V.dat"
// wrapc file define: "etaIndexN_M_V"
#define AUTOTB_TVOUT_etaIndexN_M_V  "../tv/cdatafile/c.setupLDPC.autotvout_etaIndexN_M_V.dat"
// wrapc file define: "pCodeM_V"
#define AUTOTB_TVOUT_pCodeM_V  "../tv/cdatafile/c.setupLDPC.autotvout_pCodeM_V.dat"
// wrapc file define: "pMaxIterations_V"
#define AUTOTB_TVOUT_pMaxIterations_V  "../tv/cdatafile/c.setupLDPC.autotvout_pMaxIterations_V.dat"
// wrapc file define: "etaIndexM_V"
#define AUTOTB_TVOUT_etaIndexM_V  "../tv/cdatafile/c.setupLDPC.autotvout_etaIndexM_V.dat"
#define AUTOTB_TVIN_etaIndexM_V  "../tv/cdatafile/c.setupLDPC.autotvin_etaIndexM_V.dat"
// wrapc file define: "etaIndexN_V"
#define AUTOTB_TVOUT_etaIndexN_V  "../tv/cdatafile/c.setupLDPC.autotvout_etaIndexN_V.dat"
#define AUTOTB_TVIN_etaIndexN_V  "../tv/cdatafile/c.setupLDPC.autotvin_etaIndexN_V.dat"
// wrapc file define: "lambdaIndexM_V"
#define AUTOTB_TVOUT_lambdaIndexM_V  "../tv/cdatafile/c.setupLDPC.autotvout_lambdaIndexM_V.dat"
#define AUTOTB_TVIN_lambdaIndexM_V  "../tv/cdatafile/c.setupLDPC.autotvin_lambdaIndexM_V.dat"
// wrapc file define: "dout"
#define AUTOTB_TVOUT_dout  "../tv/cdatafile/c.setupLDPC.autotvout_dout.dat"
// wrapc file define: "din"
#define AUTOTB_TVIN_din  "../tv/cdatafile/c.setupLDPC.autotvin_din.dat"
// wrapc file define: "cs"
#define AUTOTB_TVOUT_cs  "../tv/cdatafile/c.setupLDPC.autotvout_cs.dat"
// wrapc file define: "clk"
#define AUTOTB_TVOUT_clk  "../tv/cdatafile/c.setupLDPC.autotvout_clk.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "nR_M_V"
#define AUTOTB_TVOUT_PC_nR_M_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_nR_M_V.dat"
// tvout file define: "etaIndexM_M_V"
#define AUTOTB_TVOUT_PC_etaIndexM_M_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_etaIndexM_M_V.dat"
// tvout file define: "etaIndexN_M_V"
#define AUTOTB_TVOUT_PC_etaIndexN_M_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_etaIndexN_M_V.dat"
// tvout file define: "pCodeM_V"
#define AUTOTB_TVOUT_PC_pCodeM_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_pCodeM_V.dat"
// tvout file define: "pMaxIterations_V"
#define AUTOTB_TVOUT_PC_pMaxIterations_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_pMaxIterations_V.dat"
// tvout file define: "etaIndexM_V"
#define AUTOTB_TVOUT_PC_etaIndexM_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_etaIndexM_V.dat"
// tvout file define: "etaIndexN_V"
#define AUTOTB_TVOUT_PC_etaIndexN_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_etaIndexN_V.dat"
// tvout file define: "lambdaIndexM_V"
#define AUTOTB_TVOUT_PC_lambdaIndexM_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_lambdaIndexM_V.dat"
// tvout file define: "dout"
#define AUTOTB_TVOUT_PC_dout  "../tv/rtldatafile/rtl.setupLDPC.autotvout_dout.dat"
// tvout file define: "cs"
#define AUTOTB_TVOUT_PC_cs  "../tv/rtldatafile/rtl.setupLDPC.autotvout_cs.dat"
// tvout file define: "clk"
#define AUTOTB_TVOUT_PC_clk  "../tv/rtldatafile/rtl.setupLDPC.autotvout_clk.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			size_V_depth = 0;
			rate_V_depth = 0;
			nR_M_V_depth = 0;
			etaIndexM_M_V_depth = 0;
			etaIndexN_M_V_depth = 0;
			pCodeM_V_depth = 0;
			pMaxIterations_V_depth = 0;
			etaIndexM_V_depth = 0;
			etaIndexN_V_depth = 0;
			lambdaIndexM_V_depth = 0;
			dout_depth = 0;
			din_depth = 0;
			cs_depth = 0;
			clk_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{size_V " << size_V_depth << "}\n";
			total_list << "{rate_V " << rate_V_depth << "}\n";
			total_list << "{nR_M_V " << nR_M_V_depth << "}\n";
			total_list << "{etaIndexM_M_V " << etaIndexM_M_V_depth << "}\n";
			total_list << "{etaIndexN_M_V " << etaIndexN_M_V_depth << "}\n";
			total_list << "{pCodeM_V " << pCodeM_V_depth << "}\n";
			total_list << "{pMaxIterations_V " << pMaxIterations_V_depth << "}\n";
			total_list << "{etaIndexM_V " << etaIndexM_V_depth << "}\n";
			total_list << "{etaIndexN_V " << etaIndexN_V_depth << "}\n";
			total_list << "{lambdaIndexM_V " << lambdaIndexM_V_depth << "}\n";
			total_list << "{dout " << dout_depth << "}\n";
			total_list << "{din " << din_depth << "}\n";
			total_list << "{cs " << cs_depth << "}\n";
			total_list << "{clk " << clk_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int size_V_depth;
		int rate_V_depth;
		int nR_M_V_depth;
		int etaIndexM_M_V_depth;
		int etaIndexN_M_V_depth;
		int pCodeM_V_depth;
		int pMaxIterations_V_depth;
		int etaIndexM_V_depth;
		int etaIndexN_V_depth;
		int lambdaIndexM_V_depth;
		int dout_depth;
		int din_depth;
		int cs_depth;
		int clk_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define setupLDPC AESL_ORIG_DUT_setupLDPC
extern void setupLDPC (ap_uint<2> size, ap_uint<2> rate, ap_uint<16>* nR_M, ap_uint<16>* etaIndexM_M, ap_uint<16>* etaIndexN_M, ap_uint<16>* pCodeM, ap_uint<16>* pMaxIterations, ap_uint<16> etaIndexM[36864], ap_uint<16> etaIndexN[40960], ap_uint<16> lambdaIndexM[36864]);
#undef setupLDPC

void setupLDPC (ap_uint<2> size, ap_uint<2> rate, ap_uint<16>* nR_M, ap_uint<16>* etaIndexM_M, ap_uint<16>* etaIndexN_M, ap_uint<16>* pCodeM, ap_uint<16>* pMaxIterations, ap_uint<16> etaIndexM[36864], ap_uint<16> etaIndexN[40960], ap_uint<16> lambdaIndexM[36864])
{
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "nR_M_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_nR_M_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_nR_M_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_nR_M_V, AESL_token); // data

			sc_bv<16> *nR_M_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'nR_M_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'nR_M_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					nR_M_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_nR_M_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_nR_M_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: nR_M_V
				{
					// bitslice(15, 0)
					// {
						// celement: nR_M.V(15, 0)
						// {
							sc_lv<16>* nR_M_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: nR_M.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(nR_M[0]) != NULL) // check the null address if the c port is array or others
								{
									nR_M_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(nR_M_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: nR_M.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(nR_M[0]) != NULL) // check the null address if the c port is array or others
								{
									nR_M[i_0] = (nR_M_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] nR_M_V_pc_buffer;
		}

		// output port post check: "etaIndexM_M_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_M_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_M_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_M_V, AESL_token); // data

			sc_bv<16> *etaIndexM_M_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'etaIndexM_M_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'etaIndexM_M_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					etaIndexM_M_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_M_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_etaIndexM_M_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: etaIndexM_M_V
				{
					// bitslice(15, 0)
					// {
						// celement: etaIndexM_M.V(15, 0)
						// {
							sc_lv<16>* etaIndexM_M_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: etaIndexM_M.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(etaIndexM_M[0]) != NULL) // check the null address if the c port is array or others
								{
									etaIndexM_M_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(etaIndexM_M_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: etaIndexM_M.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(etaIndexM_M[0]) != NULL) // check the null address if the c port is array or others
								{
									etaIndexM_M[i_0] = (etaIndexM_M_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] etaIndexM_M_V_pc_buffer;
		}

		// output port post check: "etaIndexN_M_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexN_M_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexN_M_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexN_M_V, AESL_token); // data

			sc_bv<16> *etaIndexN_M_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'etaIndexN_M_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'etaIndexN_M_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					etaIndexN_M_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexN_M_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_etaIndexN_M_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: etaIndexN_M_V
				{
					// bitslice(15, 0)
					// {
						// celement: etaIndexN_M.V(15, 0)
						// {
							sc_lv<16>* etaIndexN_M_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: etaIndexN_M.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(etaIndexN_M[0]) != NULL) // check the null address if the c port is array or others
								{
									etaIndexN_M_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(etaIndexN_M_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: etaIndexN_M.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(etaIndexN_M[0]) != NULL) // check the null address if the c port is array or others
								{
									etaIndexN_M[i_0] = (etaIndexN_M_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] etaIndexN_M_V_pc_buffer;
		}

		// output port post check: "pCodeM_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_pCodeM_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_pCodeM_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_pCodeM_V, AESL_token); // data

			sc_bv<16> *pCodeM_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'pCodeM_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'pCodeM_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					pCodeM_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_pCodeM_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_pCodeM_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: pCodeM_V
				{
					// bitslice(15, 0)
					// {
						// celement: pCodeM.V(15, 0)
						// {
							sc_lv<16>* pCodeM_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: pCodeM.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(pCodeM[0]) != NULL) // check the null address if the c port is array or others
								{
									pCodeM_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(pCodeM_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: pCodeM.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(pCodeM[0]) != NULL) // check the null address if the c port is array or others
								{
									pCodeM[i_0] = (pCodeM_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] pCodeM_V_pc_buffer;
		}

		// output port post check: "pMaxIterations_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_pMaxIterations_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_pMaxIterations_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_pMaxIterations_V, AESL_token); // data

			sc_bv<16> *pMaxIterations_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'pMaxIterations_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'pMaxIterations_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					pMaxIterations_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_pMaxIterations_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_pMaxIterations_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: pMaxIterations_V
				{
					// bitslice(15, 0)
					// {
						// celement: pMaxIterations.V(15, 0)
						// {
							sc_lv<16>* pMaxIterations_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: pMaxIterations.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(pMaxIterations[0]) != NULL) // check the null address if the c port is array or others
								{
									pMaxIterations_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(pMaxIterations_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: pMaxIterations.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(pMaxIterations[0]) != NULL) // check the null address if the c port is array or others
								{
									pMaxIterations[i_0] = (pMaxIterations_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] pMaxIterations_V_pc_buffer;
		}

		// output port post check: "etaIndexM_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_V, AESL_token); // data

			sc_bv<16> *etaIndexM_V_pc_buffer = new sc_bv<16>[36864];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'etaIndexM_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'etaIndexM_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					etaIndexM_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_etaIndexM_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: etaIndexM_V
				{
					// bitslice(15, 0)
					// {
						// celement: etaIndexM.V(15, 0)
						// {
							sc_lv<16>* etaIndexM_V_lv0_0_36863_1 = new sc_lv<16>[36864];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: etaIndexM.V(15, 0)
						{
							// carray: (0) => (36863) @ (1)
							for (int i_0 = 0; i_0 <= 36863; i_0 += 1)
							{
								if (&(etaIndexM[0]) != NULL) // check the null address if the c port is array or others
								{
									etaIndexM_V_lv0_0_36863_1[hls_map_index++].range(15, 0) = sc_bv<16>(etaIndexM_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: etaIndexM.V(15, 0)
						{
							// carray: (0) => (36863) @ (1)
							for (int i_0 = 0; i_0 <= 36863; i_0 += 1)
							{
								if (&(etaIndexM[0]) != NULL) // check the null address if the c port is array or others
								{
									etaIndexM[i_0] = (etaIndexM_V_lv0_0_36863_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] etaIndexM_V_pc_buffer;
		}

		// output port post check: "etaIndexN_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexN_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexN_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexN_V, AESL_token); // data

			sc_bv<16> *etaIndexN_V_pc_buffer = new sc_bv<16>[40960];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'etaIndexN_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'etaIndexN_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					etaIndexN_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexN_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_etaIndexN_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: etaIndexN_V
				{
					// bitslice(15, 0)
					// {
						// celement: etaIndexN.V(15, 0)
						// {
							sc_lv<16>* etaIndexN_V_lv0_0_40959_1 = new sc_lv<16>[40960];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: etaIndexN.V(15, 0)
						{
							// carray: (0) => (40959) @ (1)
							for (int i_0 = 0; i_0 <= 40959; i_0 += 1)
							{
								if (&(etaIndexN[0]) != NULL) // check the null address if the c port is array or others
								{
									etaIndexN_V_lv0_0_40959_1[hls_map_index++].range(15, 0) = sc_bv<16>(etaIndexN_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: etaIndexN.V(15, 0)
						{
							// carray: (0) => (40959) @ (1)
							for (int i_0 = 0; i_0 <= 40959; i_0 += 1)
							{
								if (&(etaIndexN[0]) != NULL) // check the null address if the c port is array or others
								{
									etaIndexN[i_0] = (etaIndexN_V_lv0_0_40959_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] etaIndexN_V_pc_buffer;
		}

		// output port post check: "lambdaIndexM_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_lambdaIndexM_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_lambdaIndexM_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_lambdaIndexM_V, AESL_token); // data

			sc_bv<16> *lambdaIndexM_V_pc_buffer = new sc_bv<16>[36864];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'lambdaIndexM_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'lambdaIndexM_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					lambdaIndexM_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_lambdaIndexM_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_lambdaIndexM_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: lambdaIndexM_V
				{
					// bitslice(15, 0)
					// {
						// celement: lambdaIndexM.V(15, 0)
						// {
							sc_lv<16>* lambdaIndexM_V_lv0_0_36863_1 = new sc_lv<16>[36864];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: lambdaIndexM.V(15, 0)
						{
							// carray: (0) => (36863) @ (1)
							for (int i_0 = 0; i_0 <= 36863; i_0 += 1)
							{
								if (&(lambdaIndexM[0]) != NULL) // check the null address if the c port is array or others
								{
									lambdaIndexM_V_lv0_0_36863_1[hls_map_index++].range(15, 0) = sc_bv<16>(lambdaIndexM_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: lambdaIndexM.V(15, 0)
						{
							// carray: (0) => (36863) @ (1)
							for (int i_0 = 0; i_0 <= 36863; i_0 += 1)
							{
								if (&(lambdaIndexM[0]) != NULL) // check the null address if the c port is array or others
								{
									lambdaIndexM[i_0] = (lambdaIndexM_V_lv0_0_36863_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] lambdaIndexM_V_pc_buffer;
		}

		// output port post check: "dout"
		aesl_fh.read(AUTOTB_TVOUT_PC_dout, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dout, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dout, AESL_token); // data

			sc_bv<1> *dout_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'dout', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'dout', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dout_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dout, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dout))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dout
				{
					// bitslice(0, 0)
					// {
						// celement: dout(0, 0)
						// {
							sc_lv<1>* dout_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: dout(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(dout) != NULL) // check the null address if the c port is array or others
								{
									dout_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(dout_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: dout(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(dout) != NULL) // check the null address if the c port is array or others
								{
									dout = (dout_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] dout_pc_buffer;
		}

		// output port post check: "cs"
		aesl_fh.read(AUTOTB_TVOUT_PC_cs, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_cs, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_cs, AESL_token); // data

			sc_bv<1> *cs_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'cs', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'cs', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					cs_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_cs, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_cs))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: cs
				{
					// bitslice(0, 0)
					// {
						// celement: cs(0, 0)
						// {
							sc_lv<1>* cs_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: cs(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(cs) != NULL) // check the null address if the c port is array or others
								{
									cs_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(cs_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: cs(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(cs) != NULL) // check the null address if the c port is array or others
								{
									cs = (cs_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] cs_pc_buffer;
		}

		// output port post check: "clk"
		aesl_fh.read(AUTOTB_TVOUT_PC_clk, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_clk, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_clk, AESL_token); // data

			sc_bv<1> *clk_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'clk', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'clk', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					clk_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_clk, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_clk))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: clk
				{
					// bitslice(0, 0)
					// {
						// celement: clk(0, 0)
						// {
							sc_lv<1>* clk_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: clk(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(clk) != NULL) // check the null address if the c port is array or others
								{
									clk_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(clk_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: clk(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(clk) != NULL) // check the null address if the c port is array or others
								{
									clk = (clk_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] clk_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "size_V"
		char* tvin_size_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_size_V);

		// "rate_V"
		char* tvin_rate_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_rate_V);

		// "nR_M_V"
		char* tvout_nR_M_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_nR_M_V);

		// "etaIndexM_M_V"
		char* tvout_etaIndexM_M_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_etaIndexM_M_V);

		// "etaIndexN_M_V"
		char* tvout_etaIndexN_M_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_etaIndexN_M_V);

		// "pCodeM_V"
		char* tvout_pCodeM_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_pCodeM_V);

		// "pMaxIterations_V"
		char* tvout_pMaxIterations_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_pMaxIterations_V);

		// "etaIndexM_V"
		char* tvin_etaIndexM_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_etaIndexM_V);
		char* tvout_etaIndexM_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_etaIndexM_V);

		// "etaIndexN_V"
		char* tvin_etaIndexN_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_etaIndexN_V);
		char* tvout_etaIndexN_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_etaIndexN_V);

		// "lambdaIndexM_V"
		char* tvin_lambdaIndexM_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_lambdaIndexM_V);
		char* tvout_lambdaIndexM_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_lambdaIndexM_V);

		// "dout"
		char* tvout_dout = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dout);

		// "din"
		char* tvin_din = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_din);

		// "cs"
		char* tvout_cs = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_cs);

		// "clk"
		char* tvout_clk = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_clk);

		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_size_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_size_V, tvin_size_V);

		sc_bv<2> size_V_tvin_wrapc_buffer;

		// RTL Name: size_V
		{
			// bitslice(1, 0)
			{
				// celement: size.V(1, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						if (&(size) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> size_V_tmp_mem;
							size_V_tmp_mem = (size).to_string(2).c_str();
							size_V_tvin_wrapc_buffer.range(1, 0) = size_V_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_size_V, "%s\n", (size_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_size_V, tvin_size_V);
		}

		tcl_file.set_num(1, &tcl_file.size_V_depth);
		sprintf(tvin_size_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_size_V, tvin_size_V);

		// [[transaction]]
		sprintf(tvin_rate_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_rate_V, tvin_rate_V);

		sc_bv<2> rate_V_tvin_wrapc_buffer;

		// RTL Name: rate_V
		{
			// bitslice(1, 0)
			{
				// celement: rate.V(1, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						if (&(rate) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> rate_V_tmp_mem;
							rate_V_tmp_mem = (rate).to_string(2).c_str();
							rate_V_tvin_wrapc_buffer.range(1, 0) = rate_V_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_rate_V, "%s\n", (rate_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_rate_V, tvin_rate_V);
		}

		tcl_file.set_num(1, &tcl_file.rate_V_depth);
		sprintf(tvin_rate_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_rate_V, tvin_rate_V);

		// [[transaction]]
		sprintf(tvin_etaIndexM_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_etaIndexM_V, tvin_etaIndexM_V);

		sc_bv<16>* etaIndexM_V_tvin_wrapc_buffer = new sc_bv<16>[36864];

		// RTL Name: etaIndexM_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: etaIndexM.V(15, 0)
				{
					// carray: (0) => (36863) @ (1)
					for (int i_0 = 0; i_0 <= 36863; i_0 += 1)
					{
						if (&(etaIndexM[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> etaIndexM_V_tmp_mem;
							etaIndexM_V_tmp_mem = (etaIndexM[i_0]).to_string(2).c_str();
							etaIndexM_V_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = etaIndexM_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 36864; i++)
		{
			sprintf(tvin_etaIndexM_V, "%s\n", (etaIndexM_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_etaIndexM_V, tvin_etaIndexM_V);
		}

		tcl_file.set_num(36864, &tcl_file.etaIndexM_V_depth);
		sprintf(tvin_etaIndexM_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_etaIndexM_V, tvin_etaIndexM_V);

		// release memory allocation
		delete [] etaIndexM_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_etaIndexN_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_etaIndexN_V, tvin_etaIndexN_V);

		sc_bv<16>* etaIndexN_V_tvin_wrapc_buffer = new sc_bv<16>[40960];

		// RTL Name: etaIndexN_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: etaIndexN.V(15, 0)
				{
					// carray: (0) => (40959) @ (1)
					for (int i_0 = 0; i_0 <= 40959; i_0 += 1)
					{
						if (&(etaIndexN[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> etaIndexN_V_tmp_mem;
							etaIndexN_V_tmp_mem = (etaIndexN[i_0]).to_string(2).c_str();
							etaIndexN_V_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = etaIndexN_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 40960; i++)
		{
			sprintf(tvin_etaIndexN_V, "%s\n", (etaIndexN_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_etaIndexN_V, tvin_etaIndexN_V);
		}

		tcl_file.set_num(40960, &tcl_file.etaIndexN_V_depth);
		sprintf(tvin_etaIndexN_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_etaIndexN_V, tvin_etaIndexN_V);

		// release memory allocation
		delete [] etaIndexN_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_lambdaIndexM_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_lambdaIndexM_V, tvin_lambdaIndexM_V);

		sc_bv<16>* lambdaIndexM_V_tvin_wrapc_buffer = new sc_bv<16>[36864];

		// RTL Name: lambdaIndexM_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: lambdaIndexM.V(15, 0)
				{
					// carray: (0) => (36863) @ (1)
					for (int i_0 = 0; i_0 <= 36863; i_0 += 1)
					{
						if (&(lambdaIndexM[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> lambdaIndexM_V_tmp_mem;
							lambdaIndexM_V_tmp_mem = (lambdaIndexM[i_0]).to_string(2).c_str();
							lambdaIndexM_V_tvin_wrapc_buffer[hls_map_index++].range(15, 0) = lambdaIndexM_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 36864; i++)
		{
			sprintf(tvin_lambdaIndexM_V, "%s\n", (lambdaIndexM_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_lambdaIndexM_V, tvin_lambdaIndexM_V);
		}

		tcl_file.set_num(36864, &tcl_file.lambdaIndexM_V_depth);
		sprintf(tvin_lambdaIndexM_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_lambdaIndexM_V, tvin_lambdaIndexM_V);

		// release memory allocation
		delete [] lambdaIndexM_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_din, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_din, tvin_din);

		sc_bv<1>* din_tvin_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: din
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: din(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						if (&(din) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> din_tmp_mem;
							din_tmp_mem = din;
							din_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = din_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_din, "%s\n", (din_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_din, tvin_din);
		}

		tcl_file.set_num(1, &tcl_file.din_depth);
		sprintf(tvin_din, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_din, tvin_din);

		// release memory allocation
		delete [] din_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		AESL_ORIG_DUT_setupLDPC(size, rate, nR_M, etaIndexM_M, etaIndexN_M, pCodeM, pMaxIterations, etaIndexM, etaIndexN, lambdaIndexM);


		// [[transaction]]
		sprintf(tvout_nR_M_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_nR_M_V, tvout_nR_M_V);

		sc_bv<16>* nR_M_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: nR_M_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: nR_M.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						if (&(nR_M[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> nR_M_V_tmp_mem;
							nR_M_V_tmp_mem = (nR_M[i_0]).to_string(2).c_str();
							nR_M_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = nR_M_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_nR_M_V, "%s\n", (nR_M_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_nR_M_V, tvout_nR_M_V);
		}

		tcl_file.set_num(1, &tcl_file.nR_M_V_depth);
		sprintf(tvout_nR_M_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_nR_M_V, tvout_nR_M_V);

		// release memory allocation
		delete [] nR_M_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_etaIndexM_M_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_etaIndexM_M_V, tvout_etaIndexM_M_V);

		sc_bv<16>* etaIndexM_M_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: etaIndexM_M_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: etaIndexM_M.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						if (&(etaIndexM_M[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> etaIndexM_M_V_tmp_mem;
							etaIndexM_M_V_tmp_mem = (etaIndexM_M[i_0]).to_string(2).c_str();
							etaIndexM_M_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = etaIndexM_M_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_etaIndexM_M_V, "%s\n", (etaIndexM_M_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_etaIndexM_M_V, tvout_etaIndexM_M_V);
		}

		tcl_file.set_num(1, &tcl_file.etaIndexM_M_V_depth);
		sprintf(tvout_etaIndexM_M_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_etaIndexM_M_V, tvout_etaIndexM_M_V);

		// release memory allocation
		delete [] etaIndexM_M_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_etaIndexN_M_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_etaIndexN_M_V, tvout_etaIndexN_M_V);

		sc_bv<16>* etaIndexN_M_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: etaIndexN_M_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: etaIndexN_M.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						if (&(etaIndexN_M[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> etaIndexN_M_V_tmp_mem;
							etaIndexN_M_V_tmp_mem = (etaIndexN_M[i_0]).to_string(2).c_str();
							etaIndexN_M_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = etaIndexN_M_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_etaIndexN_M_V, "%s\n", (etaIndexN_M_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_etaIndexN_M_V, tvout_etaIndexN_M_V);
		}

		tcl_file.set_num(1, &tcl_file.etaIndexN_M_V_depth);
		sprintf(tvout_etaIndexN_M_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_etaIndexN_M_V, tvout_etaIndexN_M_V);

		// release memory allocation
		delete [] etaIndexN_M_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_pCodeM_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_pCodeM_V, tvout_pCodeM_V);

		sc_bv<16>* pCodeM_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: pCodeM_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: pCodeM.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						if (&(pCodeM[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> pCodeM_V_tmp_mem;
							pCodeM_V_tmp_mem = (pCodeM[i_0]).to_string(2).c_str();
							pCodeM_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = pCodeM_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_pCodeM_V, "%s\n", (pCodeM_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_pCodeM_V, tvout_pCodeM_V);
		}

		tcl_file.set_num(1, &tcl_file.pCodeM_V_depth);
		sprintf(tvout_pCodeM_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_pCodeM_V, tvout_pCodeM_V);

		// release memory allocation
		delete [] pCodeM_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_pMaxIterations_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_pMaxIterations_V, tvout_pMaxIterations_V);

		sc_bv<16>* pMaxIterations_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: pMaxIterations_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: pMaxIterations.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						if (&(pMaxIterations[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> pMaxIterations_V_tmp_mem;
							pMaxIterations_V_tmp_mem = (pMaxIterations[i_0]).to_string(2).c_str();
							pMaxIterations_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = pMaxIterations_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_pMaxIterations_V, "%s\n", (pMaxIterations_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_pMaxIterations_V, tvout_pMaxIterations_V);
		}

		tcl_file.set_num(1, &tcl_file.pMaxIterations_V_depth);
		sprintf(tvout_pMaxIterations_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_pMaxIterations_V, tvout_pMaxIterations_V);

		// release memory allocation
		delete [] pMaxIterations_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_etaIndexM_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_etaIndexM_V, tvout_etaIndexM_V);

		sc_bv<16>* etaIndexM_V_tvout_wrapc_buffer = new sc_bv<16>[36864];

		// RTL Name: etaIndexM_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: etaIndexM.V(15, 0)
				{
					// carray: (0) => (36863) @ (1)
					for (int i_0 = 0; i_0 <= 36863; i_0 += 1)
					{
						if (&(etaIndexM[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> etaIndexM_V_tmp_mem;
							etaIndexM_V_tmp_mem = (etaIndexM[i_0]).to_string(2).c_str();
							etaIndexM_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = etaIndexM_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 36864; i++)
		{
			sprintf(tvout_etaIndexM_V, "%s\n", (etaIndexM_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_etaIndexM_V, tvout_etaIndexM_V);
		}

		tcl_file.set_num(36864, &tcl_file.etaIndexM_V_depth);
		sprintf(tvout_etaIndexM_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_etaIndexM_V, tvout_etaIndexM_V);

		// release memory allocation
		delete [] etaIndexM_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_etaIndexN_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_etaIndexN_V, tvout_etaIndexN_V);

		sc_bv<16>* etaIndexN_V_tvout_wrapc_buffer = new sc_bv<16>[40960];

		// RTL Name: etaIndexN_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: etaIndexN.V(15, 0)
				{
					// carray: (0) => (40959) @ (1)
					for (int i_0 = 0; i_0 <= 40959; i_0 += 1)
					{
						if (&(etaIndexN[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> etaIndexN_V_tmp_mem;
							etaIndexN_V_tmp_mem = (etaIndexN[i_0]).to_string(2).c_str();
							etaIndexN_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = etaIndexN_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 40960; i++)
		{
			sprintf(tvout_etaIndexN_V, "%s\n", (etaIndexN_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_etaIndexN_V, tvout_etaIndexN_V);
		}

		tcl_file.set_num(40960, &tcl_file.etaIndexN_V_depth);
		sprintf(tvout_etaIndexN_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_etaIndexN_V, tvout_etaIndexN_V);

		// release memory allocation
		delete [] etaIndexN_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_lambdaIndexM_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_lambdaIndexM_V, tvout_lambdaIndexM_V);

		sc_bv<16>* lambdaIndexM_V_tvout_wrapc_buffer = new sc_bv<16>[36864];

		// RTL Name: lambdaIndexM_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: lambdaIndexM.V(15, 0)
				{
					// carray: (0) => (36863) @ (1)
					for (int i_0 = 0; i_0 <= 36863; i_0 += 1)
					{
						if (&(lambdaIndexM[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> lambdaIndexM_V_tmp_mem;
							lambdaIndexM_V_tmp_mem = (lambdaIndexM[i_0]).to_string(2).c_str();
							lambdaIndexM_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = lambdaIndexM_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 36864; i++)
		{
			sprintf(tvout_lambdaIndexM_V, "%s\n", (lambdaIndexM_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_lambdaIndexM_V, tvout_lambdaIndexM_V);
		}

		tcl_file.set_num(36864, &tcl_file.lambdaIndexM_V_depth);
		sprintf(tvout_lambdaIndexM_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_lambdaIndexM_V, tvout_lambdaIndexM_V);

		// release memory allocation
		delete [] lambdaIndexM_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_dout, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dout, tvout_dout);

		sc_bv<1>* dout_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: dout
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: dout(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						if (&(dout) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> dout_tmp_mem;
							dout_tmp_mem = dout;
							dout_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = dout_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_dout, "%s\n", (dout_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dout, tvout_dout);
		}

		tcl_file.set_num(1, &tcl_file.dout_depth);
		sprintf(tvout_dout, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dout, tvout_dout);

		// release memory allocation
		delete [] dout_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_cs, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_cs, tvout_cs);

		sc_bv<1>* cs_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: cs
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: cs(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						if (&(cs) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> cs_tmp_mem;
							cs_tmp_mem = cs;
							cs_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = cs_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_cs, "%s\n", (cs_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_cs, tvout_cs);
		}

		tcl_file.set_num(1, &tcl_file.cs_depth);
		sprintf(tvout_cs, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_cs, tvout_cs);

		// release memory allocation
		delete [] cs_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_clk, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_clk, tvout_clk);

		sc_bv<1>* clk_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: clk
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: clk(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						if (&(clk) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> clk_tmp_mem;
							clk_tmp_mem = clk;
							clk_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = clk_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_clk, "%s\n", (clk_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_clk, tvout_clk);
		}

		tcl_file.set_num(1, &tcl_file.clk_depth);
		sprintf(tvout_clk, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_clk, tvout_clk);

		// release memory allocation
		delete [] clk_tvout_wrapc_buffer;

		// release memory allocation: "size_V"
		delete [] tvin_size_V;
		// release memory allocation: "rate_V"
		delete [] tvin_rate_V;
		// release memory allocation: "nR_M_V"
		delete [] tvout_nR_M_V;
		// release memory allocation: "etaIndexM_M_V"
		delete [] tvout_etaIndexM_M_V;
		// release memory allocation: "etaIndexN_M_V"
		delete [] tvout_etaIndexN_M_V;
		// release memory allocation: "pCodeM_V"
		delete [] tvout_pCodeM_V;
		// release memory allocation: "pMaxIterations_V"
		delete [] tvout_pMaxIterations_V;
		// release memory allocation: "etaIndexM_V"
		delete [] tvout_etaIndexM_V;
		delete [] tvin_etaIndexM_V;
		// release memory allocation: "etaIndexN_V"
		delete [] tvout_etaIndexN_V;
		delete [] tvin_etaIndexN_V;
		// release memory allocation: "lambdaIndexM_V"
		delete [] tvout_lambdaIndexM_V;
		delete [] tvin_lambdaIndexM_V;
		// release memory allocation: "dout"
		delete [] tvout_dout;
		// release memory allocation: "din"
		delete [] tvin_din;
		// release memory allocation: "cs"
		delete [] tvout_cs;
		// release memory allocation: "clk"
		delete [] tvout_clk;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

