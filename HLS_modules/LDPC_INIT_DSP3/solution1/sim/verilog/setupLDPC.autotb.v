// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      setupLDPC
`define AUTOTB_DUT_INST AESL_inst_setupLDPC
`define AUTOTB_TOP      apatb_setupLDPC_top
`define AUTOTB_LAT_RESULT_FILE "setupLDPC.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "setupLDPC.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_setupLDPC_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  1
`define AUTOTB_CLOCK_PERIOD 10.000000
`define LENGTH_size_V 1
`define LENGTH_rate_V 1
`define LENGTH_nR_M_V 1
`define LENGTH_etaIndexM_M_V 1
`define LENGTH_etaIndexN_M_V 1
`define LENGTH_pCodeM_V 1
`define LENGTH_pMaxIterations_V 1
`define LENGTH_etaIndexM_V 36864
`define LENGTH_etaIndexN_V 40960
`define LENGTH_lambdaIndexM_V 36864
`define LENGTH_dout 1
`define LENGTH_din 1
`define LENGTH_cs 1
`define LENGTH_clk 1

`define   AESL_DEPTH_size_V 1
`define   AESL_DEPTH_rate_V 1
`define   AESL_DEPTH_nR_M_V 1
`define   AESL_DEPTH_etaIndexM_M_V 1
`define   AESL_DEPTH_etaIndexN_M_V 1
`define   AESL_DEPTH_pCodeM_V 1
`define   AESL_DEPTH_pMaxIterations_V 1
`define	AESL_MEM_etaIndexM_V AESL_automem_etaIndexM_V
`define	AESL_MEM_INST_etaIndexM_V mem_inst_etaIndexM_V
`define	AESL_MEM_etaIndexN_V AESL_automem_etaIndexN_V
`define	AESL_MEM_INST_etaIndexN_V mem_inst_etaIndexN_V
`define	AESL_MEM_lambdaIndexM_V AESL_automem_lambdaIndexM_V
`define	AESL_MEM_INST_lambdaIndexM_V mem_inst_lambdaIndexM_V
`define   AESL_DEPTH_dout 1
`define   AESL_DEPTH_din 1
`define   AESL_DEPTH_cs 1
`define   AESL_DEPTH_clk 1
`define AUTOTB_TVIN_size_V  "../tv/cdatafile/c.setupLDPC.autotvin_size_V.dat"
`define AUTOTB_TVIN_rate_V  "../tv/cdatafile/c.setupLDPC.autotvin_rate_V.dat"
`define AUTOTB_TVIN_etaIndexM_V  "../tv/cdatafile/c.setupLDPC.autotvin_etaIndexM_V.dat"
`define AUTOTB_TVIN_etaIndexN_V  "../tv/cdatafile/c.setupLDPC.autotvin_etaIndexN_V.dat"
`define AUTOTB_TVIN_lambdaIndexM_V  "../tv/cdatafile/c.setupLDPC.autotvin_lambdaIndexM_V.dat"
`define AUTOTB_TVIN_din  "../tv/cdatafile/c.setupLDPC.autotvin_din.dat"
`define AUTOTB_TVIN_size_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvin_size_V.dat"
`define AUTOTB_TVIN_rate_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvin_rate_V.dat"
`define AUTOTB_TVIN_etaIndexM_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvin_etaIndexM_V.dat"
`define AUTOTB_TVIN_etaIndexN_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvin_etaIndexN_V.dat"
`define AUTOTB_TVIN_lambdaIndexM_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvin_lambdaIndexM_V.dat"
`define AUTOTB_TVIN_din_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvin_din.dat"
`define AUTOTB_TVOUT_nR_M_V  "../tv/cdatafile/c.setupLDPC.autotvout_nR_M_V.dat"
`define AUTOTB_TVOUT_etaIndexM_M_V  "../tv/cdatafile/c.setupLDPC.autotvout_etaIndexM_M_V.dat"
`define AUTOTB_TVOUT_etaIndexN_M_V  "../tv/cdatafile/c.setupLDPC.autotvout_etaIndexN_M_V.dat"
`define AUTOTB_TVOUT_pCodeM_V  "../tv/cdatafile/c.setupLDPC.autotvout_pCodeM_V.dat"
`define AUTOTB_TVOUT_pMaxIterations_V  "../tv/cdatafile/c.setupLDPC.autotvout_pMaxIterations_V.dat"
`define AUTOTB_TVOUT_etaIndexM_V  "../tv/cdatafile/c.setupLDPC.autotvout_etaIndexM_V.dat"
`define AUTOTB_TVOUT_etaIndexN_V  "../tv/cdatafile/c.setupLDPC.autotvout_etaIndexN_V.dat"
`define AUTOTB_TVOUT_lambdaIndexM_V  "../tv/cdatafile/c.setupLDPC.autotvout_lambdaIndexM_V.dat"
`define AUTOTB_TVOUT_dout  "../tv/cdatafile/c.setupLDPC.autotvout_dout.dat"
`define AUTOTB_TVOUT_cs  "../tv/cdatafile/c.setupLDPC.autotvout_cs.dat"
`define AUTOTB_TVOUT_clk  "../tv/cdatafile/c.setupLDPC.autotvout_clk.dat"
`define AUTOTB_TVOUT_nR_M_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_nR_M_V.dat"
`define AUTOTB_TVOUT_etaIndexM_M_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_etaIndexM_M_V.dat"
`define AUTOTB_TVOUT_etaIndexN_M_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_etaIndexN_M_V.dat"
`define AUTOTB_TVOUT_pCodeM_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_pCodeM_V.dat"
`define AUTOTB_TVOUT_pMaxIterations_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_pMaxIterations_V.dat"
`define AUTOTB_TVOUT_etaIndexM_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_etaIndexM_V.dat"
`define AUTOTB_TVOUT_etaIndexN_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_etaIndexN_V.dat"
`define AUTOTB_TVOUT_lambdaIndexM_V_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_lambdaIndexM_V.dat"
`define AUTOTB_TVOUT_dout_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_dout.dat"
`define AUTOTB_TVOUT_cs_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_cs.dat"
`define AUTOTB_TVOUT_clk_out_wrapc  "../tv/rtldatafile/rtl.setupLDPC.autotvout_clk.dat"

module `AUTOTB_TOP;
task read_token;
    input integer fp;
    output reg [207 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg [22 - 1 : 0] AESL_clk_ready[0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [22 - 1 : 0] AESL_clk_done[0 : `AUTOTB_TRANSACTION_NUM + 1];

reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire ap_clk;
wire ap_rst;
wire ap_start;
wire ap_done;
wire ap_idle;
wire ap_ready;
wire [1 : 0] size_V;
wire [1 : 0] rate_V;
wire [15 : 0] nR_M_V;
wire  nR_M_V_ap_vld;
wire [15 : 0] etaIndexM_M_V;
wire  etaIndexM_M_V_ap_vld;
wire [15 : 0] etaIndexN_M_V;
wire  etaIndexN_M_V_ap_vld;
wire [15 : 0] pCodeM_V;
wire  pCodeM_V_ap_vld;
wire [15 : 0] pMaxIterations_V;
wire  pMaxIterations_V_ap_vld;
wire [15 : 0] etaIndexM_V_address0;
wire  etaIndexM_V_ce0;
wire  etaIndexM_V_we0;
wire [15 : 0] etaIndexM_V_d0;
wire [15 : 0] etaIndexN_V_address0;
wire  etaIndexN_V_ce0;
wire  etaIndexN_V_we0;
wire [15 : 0] etaIndexN_V_d0;
wire [15 : 0] lambdaIndexM_V_address0;
wire  lambdaIndexM_V_ce0;
wire  lambdaIndexM_V_we0;
wire [15 : 0] lambdaIndexM_V_d0;
wire [0 : 0] dout;
wire  dout_ap_vld;
wire [0 : 0] din;
wire [0 : 0] cs;
wire  cs_ap_vld;
wire [0 : 0] clk;
wire  clk_ap_vld;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
.ap_clk(ap_clk),
.ap_rst(ap_rst),
.ap_start(ap_start),
.ap_done(ap_done),
.ap_idle(ap_idle),
.ap_ready(ap_ready),
.size_V(size_V),
.rate_V(rate_V),
.nR_M_V(nR_M_V),
.nR_M_V_ap_vld(nR_M_V_ap_vld),
.etaIndexM_M_V(etaIndexM_M_V),
.etaIndexM_M_V_ap_vld(etaIndexM_M_V_ap_vld),
.etaIndexN_M_V(etaIndexN_M_V),
.etaIndexN_M_V_ap_vld(etaIndexN_M_V_ap_vld),
.pCodeM_V(pCodeM_V),
.pCodeM_V_ap_vld(pCodeM_V_ap_vld),
.pMaxIterations_V(pMaxIterations_V),
.pMaxIterations_V_ap_vld(pMaxIterations_V_ap_vld),
.etaIndexM_V_address0(etaIndexM_V_address0),
.etaIndexM_V_ce0(etaIndexM_V_ce0),
.etaIndexM_V_we0(etaIndexM_V_we0),
.etaIndexM_V_d0(etaIndexM_V_d0),
.etaIndexN_V_address0(etaIndexN_V_address0),
.etaIndexN_V_ce0(etaIndexN_V_ce0),
.etaIndexN_V_we0(etaIndexN_V_we0),
.etaIndexN_V_d0(etaIndexN_V_d0),
.lambdaIndexM_V_address0(lambdaIndexM_V_address0),
.lambdaIndexM_V_ce0(lambdaIndexM_V_ce0),
.lambdaIndexM_V_we0(lambdaIndexM_V_we0),
.lambdaIndexM_V_d0(lambdaIndexM_V_d0),
.dout(dout),
.dout_ap_vld(dout_ap_vld),
.din(din),
.cs(cs),
.cs_ap_vld(cs_ap_vld),
.clk(clk),
.clk_ap_vld(clk_ap_vld)
);

// Assignment for control signal
  assign ap_clk = AESL_clock;
  assign ap_rst = AESL_reset;
  assign ap_rst_n = ~AESL_reset;
  assign AESL_reset = rst;
  assign ap_start = AESL_start;
  assign AESL_start = start;
  assign AESL_done = ap_done;
  assign AESL_idle = ap_idle;
  assign AESL_ready = ap_ready;
  assign AESL_ce = ce;
  assign AESL_continue = continue;
  always @(posedge AESL_clock)
  begin
    if(AESL_reset)
      ;
      else begin
          if ( AESL_done !== 1 && AESL_done !== 0 ) begin 
              $display("ERROR: Control signal AESL_done is invalid!");
              $finish;
          end
      end
  end
  always @(posedge AESL_clock)
  begin
    if(AESL_reset)
      ;
      else begin
          if ( AESL_ready !== 1 && AESL_ready !== 0 ) begin 
              $display("ERROR: Control signal AESL_ready is invalid!");
              $finish;
          end
      end
  end
// The signal of port size_V
reg [1: 0] AESL_REG_size_V = 0;
assign size_V = AESL_REG_size_V;
initial begin : read_file_process_size_V
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [207  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_size_V,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_size_V);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin // Illegal format
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
	          $finish;
        end
        read_token(fp, token);  // skip transaction number
	      read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_size_V);
	          if (ret != 1) begin
	              $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
	              $finish;
	          end
            @(posedge AESL_clock);
	          read_token(fp, token);
        end
	      read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port rate_V
reg [1: 0] AESL_REG_rate_V = 0;
assign rate_V = AESL_REG_rate_V;
initial begin : read_file_process_rate_V
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [207  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_rate_V,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_rate_V);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin // Illegal format
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
	          $finish;
        end
        read_token(fp, token);  // skip transaction number
	      read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_rate_V);
	          if (ret != 1) begin
	              $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
	              $finish;
	          end
            @(posedge AESL_clock);
	          read_token(fp, token);
        end
	      read_token(fp, token);
    end
    $fclose(fp);
end


reg AESL_REG_nR_M_V_ap_vld = 0;
// The signal of port nR_M_V
reg [15: 0] AESL_REG_nR_M_V = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_nR_M_V = 0; 
    else if(nR_M_V_ap_vld) begin
        AESL_REG_nR_M_V <= nR_M_V;
        AESL_REG_nR_M_V_ap_vld <= 1;
    end
end 

initial begin : write_file_process_nR_M_V
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer rand;
    integer nR_M_V_count;
    reg [207  : 0] token;
    integer transaction_idx;
    reg [ 8*5 : 1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_nR_M_V_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_nR_M_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_nR_M_V_ap_vld)  begin
	      $fdisplay(fp,"0x%x", AESL_REG_nR_M_V);
        AESL_REG_nR_M_V_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


reg AESL_REG_etaIndexM_M_V_ap_vld = 0;
// The signal of port etaIndexM_M_V
reg [15: 0] AESL_REG_etaIndexM_M_V = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_etaIndexM_M_V = 0; 
    else if(etaIndexM_M_V_ap_vld) begin
        AESL_REG_etaIndexM_M_V <= etaIndexM_M_V;
        AESL_REG_etaIndexM_M_V_ap_vld <= 1;
    end
end 

initial begin : write_file_process_etaIndexM_M_V
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer rand;
    integer etaIndexM_M_V_count;
    reg [207  : 0] token;
    integer transaction_idx;
    reg [ 8*5 : 1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_etaIndexM_M_V_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_etaIndexM_M_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_etaIndexM_M_V_ap_vld)  begin
	      $fdisplay(fp,"0x%x", AESL_REG_etaIndexM_M_V);
        AESL_REG_etaIndexM_M_V_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


reg AESL_REG_etaIndexN_M_V_ap_vld = 0;
// The signal of port etaIndexN_M_V
reg [15: 0] AESL_REG_etaIndexN_M_V = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_etaIndexN_M_V = 0; 
    else if(etaIndexN_M_V_ap_vld) begin
        AESL_REG_etaIndexN_M_V <= etaIndexN_M_V;
        AESL_REG_etaIndexN_M_V_ap_vld <= 1;
    end
end 

initial begin : write_file_process_etaIndexN_M_V
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer rand;
    integer etaIndexN_M_V_count;
    reg [207  : 0] token;
    integer transaction_idx;
    reg [ 8*5 : 1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_etaIndexN_M_V_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_etaIndexN_M_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_etaIndexN_M_V_ap_vld)  begin
	      $fdisplay(fp,"0x%x", AESL_REG_etaIndexN_M_V);
        AESL_REG_etaIndexN_M_V_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


reg AESL_REG_pCodeM_V_ap_vld = 0;
// The signal of port pCodeM_V
reg [15: 0] AESL_REG_pCodeM_V = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_pCodeM_V = 0; 
    else if(pCodeM_V_ap_vld) begin
        AESL_REG_pCodeM_V <= pCodeM_V;
        AESL_REG_pCodeM_V_ap_vld <= 1;
    end
end 

initial begin : write_file_process_pCodeM_V
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer rand;
    integer pCodeM_V_count;
    reg [207  : 0] token;
    integer transaction_idx;
    reg [ 8*5 : 1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_pCodeM_V_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pCodeM_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_pCodeM_V_ap_vld)  begin
	      $fdisplay(fp,"0x%x", AESL_REG_pCodeM_V);
        AESL_REG_pCodeM_V_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


reg AESL_REG_pMaxIterations_V_ap_vld = 0;
// The signal of port pMaxIterations_V
reg [15: 0] AESL_REG_pMaxIterations_V = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_pMaxIterations_V = 0; 
    else if(pMaxIterations_V_ap_vld) begin
        AESL_REG_pMaxIterations_V <= pMaxIterations_V;
        AESL_REG_pMaxIterations_V_ap_vld <= 1;
    end
end 

initial begin : write_file_process_pMaxIterations_V
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer rand;
    integer pMaxIterations_V_count;
    reg [207  : 0] token;
    integer transaction_idx;
    reg [ 8*5 : 1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_pMaxIterations_V_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pMaxIterations_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_pMaxIterations_V_ap_vld)  begin
	      $fdisplay(fp,"0x%x", AESL_REG_pMaxIterations_V);
        AESL_REG_pMaxIterations_V_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


//------------------------arrayetaIndexM_V Instantiation--------------

// The input and output of arrayetaIndexM_V
wire    arrayetaIndexM_V_ce0, arrayetaIndexM_V_ce1;
wire	arrayetaIndexM_V_we0, arrayetaIndexM_V_we1;
wire    [15 : 0]	arrayetaIndexM_V_address0, arrayetaIndexM_V_address1;
wire	[15 : 0]	arrayetaIndexM_V_din0, arrayetaIndexM_V_din1;
wire    [15 : 0]	arrayetaIndexM_V_dout0, arrayetaIndexM_V_dout1;
wire	arrayetaIndexM_V_ready;
wire	arrayetaIndexM_V_done;

`AESL_MEM_etaIndexM_V `AESL_MEM_INST_etaIndexM_V(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayetaIndexM_V_ce0),
    .we0        (arrayetaIndexM_V_we0),
    .address0   (arrayetaIndexM_V_address0),
    .din0       (arrayetaIndexM_V_din0),
    .dout0      (arrayetaIndexM_V_dout0),
    .ce1        (arrayetaIndexM_V_ce1),
    .we1        (arrayetaIndexM_V_we1),
    .address1   (arrayetaIndexM_V_address1),
    .din1       (arrayetaIndexM_V_din1),
    .dout1      (arrayetaIndexM_V_dout1),
    .ready	  (arrayetaIndexM_V_ready),
    .done	(arrayetaIndexM_V_done)
);

// Assignment between dut and arrayetaIndexM_V
assign arrayetaIndexM_V_address0 = etaIndexM_V_address0;
assign arrayetaIndexM_V_ce0 = etaIndexM_V_ce0;
assign arrayetaIndexM_V_we0 = etaIndexM_V_we0;
assign arrayetaIndexM_V_din0 = etaIndexM_V_d0;
assign arrayetaIndexM_V_we1 = 0;
assign arrayetaIndexM_V_din1 = 0;
assign arrayetaIndexM_V_ready= ready_initial | arrayetaIndexM_V_done;
assign arrayetaIndexM_V_done =	AESL_done_delay;


//------------------------arrayetaIndexN_V Instantiation--------------

// The input and output of arrayetaIndexN_V
wire    arrayetaIndexN_V_ce0, arrayetaIndexN_V_ce1;
wire	arrayetaIndexN_V_we0, arrayetaIndexN_V_we1;
wire    [15 : 0]	arrayetaIndexN_V_address0, arrayetaIndexN_V_address1;
wire	[15 : 0]	arrayetaIndexN_V_din0, arrayetaIndexN_V_din1;
wire    [15 : 0]	arrayetaIndexN_V_dout0, arrayetaIndexN_V_dout1;
wire	arrayetaIndexN_V_ready;
wire	arrayetaIndexN_V_done;

`AESL_MEM_etaIndexN_V `AESL_MEM_INST_etaIndexN_V(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayetaIndexN_V_ce0),
    .we0        (arrayetaIndexN_V_we0),
    .address0   (arrayetaIndexN_V_address0),
    .din0       (arrayetaIndexN_V_din0),
    .dout0      (arrayetaIndexN_V_dout0),
    .ce1        (arrayetaIndexN_V_ce1),
    .we1        (arrayetaIndexN_V_we1),
    .address1   (arrayetaIndexN_V_address1),
    .din1       (arrayetaIndexN_V_din1),
    .dout1      (arrayetaIndexN_V_dout1),
    .ready	  (arrayetaIndexN_V_ready),
    .done	(arrayetaIndexN_V_done)
);

// Assignment between dut and arrayetaIndexN_V
assign arrayetaIndexN_V_address0 = etaIndexN_V_address0;
assign arrayetaIndexN_V_ce0 = etaIndexN_V_ce0;
assign arrayetaIndexN_V_we0 = etaIndexN_V_we0;
assign arrayetaIndexN_V_din0 = etaIndexN_V_d0;
assign arrayetaIndexN_V_we1 = 0;
assign arrayetaIndexN_V_din1 = 0;
assign arrayetaIndexN_V_ready= ready_initial | arrayetaIndexN_V_done;
assign arrayetaIndexN_V_done =	AESL_done_delay;


//------------------------arraylambdaIndexM_V Instantiation--------------

// The input and output of arraylambdaIndexM_V
wire    arraylambdaIndexM_V_ce0, arraylambdaIndexM_V_ce1;
wire	arraylambdaIndexM_V_we0, arraylambdaIndexM_V_we1;
wire    [15 : 0]	arraylambdaIndexM_V_address0, arraylambdaIndexM_V_address1;
wire	[15 : 0]	arraylambdaIndexM_V_din0, arraylambdaIndexM_V_din1;
wire    [15 : 0]	arraylambdaIndexM_V_dout0, arraylambdaIndexM_V_dout1;
wire	arraylambdaIndexM_V_ready;
wire	arraylambdaIndexM_V_done;

`AESL_MEM_lambdaIndexM_V `AESL_MEM_INST_lambdaIndexM_V(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraylambdaIndexM_V_ce0),
    .we0        (arraylambdaIndexM_V_we0),
    .address0   (arraylambdaIndexM_V_address0),
    .din0       (arraylambdaIndexM_V_din0),
    .dout0      (arraylambdaIndexM_V_dout0),
    .ce1        (arraylambdaIndexM_V_ce1),
    .we1        (arraylambdaIndexM_V_we1),
    .address1   (arraylambdaIndexM_V_address1),
    .din1       (arraylambdaIndexM_V_din1),
    .dout1      (arraylambdaIndexM_V_dout1),
    .ready	  (arraylambdaIndexM_V_ready),
    .done	(arraylambdaIndexM_V_done)
);

// Assignment between dut and arraylambdaIndexM_V
assign arraylambdaIndexM_V_address0 = lambdaIndexM_V_address0;
assign arraylambdaIndexM_V_ce0 = lambdaIndexM_V_ce0;
assign arraylambdaIndexM_V_we0 = lambdaIndexM_V_we0;
assign arraylambdaIndexM_V_din0 = lambdaIndexM_V_d0;
assign arraylambdaIndexM_V_we1 = 0;
assign arraylambdaIndexM_V_din1 = 0;
assign arraylambdaIndexM_V_ready= ready_initial | arraylambdaIndexM_V_done;
assign arraylambdaIndexM_V_done =	AESL_done_delay;


reg AESL_REG_dout_ap_vld = 0;
// The signal of port dout
reg [0: 0] AESL_REG_dout = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_dout = 0; 
    else if(dout_ap_vld) begin
        AESL_REG_dout <= dout;
        AESL_REG_dout_ap_vld <= 1;
    end
end 

initial begin : write_file_process_dout
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer rand;
    integer dout_count;
    reg [207  : 0] token;
    integer transaction_idx;
    reg [ 8*5 : 1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_dout_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_dout_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_dout_ap_vld)  begin
	      $fdisplay(fp,"0x%x", AESL_REG_dout);
        AESL_REG_dout_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


// The signal of port din
reg [0: 0] AESL_REG_din = 0;
assign din = AESL_REG_din;
initial begin : read_file_process_din
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [207  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_din,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_din);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin // Illegal format
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
	          $finish;
        end
        read_token(fp, token);  // skip transaction number
	      read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_din);
	          if (ret != 1) begin
	              $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
	              $finish;
	          end
            @(posedge AESL_clock);
	          read_token(fp, token);
        end
	      read_token(fp, token);
    end
    $fclose(fp);
end


reg AESL_REG_cs_ap_vld = 0;
// The signal of port cs
reg [0: 0] AESL_REG_cs = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_cs = 0; 
    else if(cs_ap_vld) begin
        AESL_REG_cs <= cs;
        AESL_REG_cs_ap_vld <= 1;
    end
end 

initial begin : write_file_process_cs
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer rand;
    integer cs_count;
    reg [207  : 0] token;
    integer transaction_idx;
    reg [ 8*5 : 1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_cs_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_cs_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_cs_ap_vld)  begin
	      $fdisplay(fp,"0x%x", AESL_REG_cs);
        AESL_REG_cs_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


reg AESL_REG_clk_ap_vld = 0;
// The signal of port clk
reg [0: 0] AESL_REG_clk = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_clk = 0; 
    else if(clk_ap_vld) begin
        AESL_REG_clk <= clk;
        AESL_REG_clk_ap_vld <= 1;
    end
end 

initial begin : write_file_process_clk
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer rand;
    integer clk_count;
    reg [207  : 0] token;
    integer transaction_idx;
    reg [ 8*5 : 1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_clk_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_clk_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_clk_ap_vld)  begin
	      $fdisplay(fp,"0x%x", AESL_REG_clk);
        AESL_REG_clk_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 0);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_ready_cnt_proc
    ready_cnt = 0;
    wait(AESL_reset === 0);
    while(ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        ready_cnt = ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_done_cnt_proc
    done_cnt = 0;
    wait(AESL_reset === 0);
    while(done_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_done !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        done_cnt = done_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
    @(posedge AESL_clock);
    # 0.4;
    $finish;
end

initial fork
    AESL_clock = 0;
    forever #(`AUTOTB_CLOCK_PERIOD/2) AESL_clock = ~AESL_clock;
join

initial begin : initial_process
    integer rand;
    rst = 1;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 0;
end

initial begin : start_process
  integer rand;
  start = 0;
  ce = 1;
    wait(AESL_reset === 0);
  @(posedge AESL_clock);
  start <= 1;
  while(ready_cnt != `AUTOTB_TRANSACTION_NUM + 1) begin
      @(posedge AESL_clock);
      if(AESL_ready == 1) begin
          start <= 0;
          start <= 1;
      end
  end
  start <= 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt != `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
// Write "[[[runtime]]]" and "[[[/runtime]]]" for output-only transactor 
initial begin : write_output_transactor_etaIndexM_V_runtime_process
    integer fp;
    fp = $fopen(`AUTOTB_TVOUT_etaIndexM_V_out_wrapc, "w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_etaIndexM_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait(done_cnt == `AUTOTB_TRANSACTION_NUM)
	  repeat(2) @(posedge AESL_clock);
    # 0.2;
    fp = $fopen(`AUTOTB_TVOUT_etaIndexM_V_out_wrapc, "a");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_etaIndexM_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

// Write "[[[runtime]]]" and "[[[/runtime]]]" for output-only transactor 
initial begin : write_output_transactor_etaIndexN_V_runtime_process
    integer fp;
    fp = $fopen(`AUTOTB_TVOUT_etaIndexN_V_out_wrapc, "w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_etaIndexN_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait(done_cnt == `AUTOTB_TRANSACTION_NUM)
	  repeat(2) @(posedge AESL_clock);
    # 0.2;
    fp = $fopen(`AUTOTB_TVOUT_etaIndexN_V_out_wrapc, "a");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_etaIndexN_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

// Write "[[[runtime]]]" and "[[[/runtime]]]" for output-only transactor 
initial begin : write_output_transactor_lambdaIndexM_V_runtime_process
    integer fp;
    fp = $fopen(`AUTOTB_TVOUT_lambdaIndexM_V_out_wrapc, "w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_lambdaIndexM_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait(done_cnt == `AUTOTB_TRANSACTION_NUM)
	  repeat(2) @(posedge AESL_clock);
    # 0.2;
    fp = $fopen(`AUTOTB_TVOUT_lambdaIndexM_V_out_wrapc, "a");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_lambdaIndexM_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

always @ (negedge AESL_clock) begin
    if(AESL_reset)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end    
end

always @ (posedge AESL_clock or posedge AESL_reset) begin
    if(AESL_reset)
    begin
        AESL_mLatCnterOut_addr = 0;
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
        reported_stuck_cnt <= 0;
    end
    else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
        AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
        reported_stuck <= 0;
    end
    else if (reported_stuck == 0 && reported_stuck_cnt < 4) begin
        if ( AESL_mLatCnterIn_addr > AESL_mLatCnterOut_addr ) begin
          if ( AESL_clk_counter - AESL_mLatCnterIn[AESL_mLatCnterOut_addr] > 10 * 2064494 ) begin
              $display("WARNING: The latency is much larger than expected. Simulation may stuck.");
              reported_stuck <= 1;
              reported_stuck_cnt <= reported_stuck_cnt + 1;
          end
        end
    end
end

always @ (posedge AESL_clock or posedge AESL_reset) begin
    if(AESL_reset)
    begin
        AESL_mLatCnterIn_addr = 0;
    end
    else begin
        if (AESL_start && AESL_mLatCnterIn_addr == 0) begin
            AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
            AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
        end
        if (AESL_ready && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1 ) begin
            AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
            AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
        end
    end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];


	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);
	@(negedge AESL_reset);
	while (done_cnt != `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	if (AESL_mLatCnterIn_addr == 0) begin
		latmax  = 0;
		latmin  = 0;
		lataver = 0;
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		lat_array[0] = 0;
		thr_array[0] = 0;
	end else if (AESL_mLatCnterOut_addr == 1 || AESL_mLatCnterOut_addr == 0 ) begin
		latmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		latmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		lataver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thrmax  = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
		thrmin  = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
		thraver = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
		lat_array[0] = lataver;
		thr_array[0] = thraver;
	end else begin
		// LATENCY
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
			if (i > 0) latthistime = (latthistime < 1) ? 0 : (latthistime - 1);
			lattotal = lattotal + latthistime;
			lat_array[i] = latthistime;
			if (latthistime > latmax) latmax = latthistime;
			if (latthistime < latmin) latmin = latthistime;
		end
		// II
		for (i = 0; i < AESL_mLatCnterIn_addr - 1; i = i + 1) begin
			thrthistime = AESL_mLatCnterIn[i + 1] - AESL_mLatCnterIn[i];
			if (i == 0) thrthistime = thrthistime + 1;
			thrtotal = thrtotal + thrthistime;
			thr_array[i] = thrthistime;
			if (thrthistime > thrmax) thrmax = thrthistime;
			if (thrthistime < thrmin) thrmin = thrthistime;
		end

		thr_array[AESL_mLatCnterIn_addr - 1] = 0;
		lataver = lattotal / (AESL_mLatCnterOut_addr);
		thraver = thrtotal / (AESL_mLatCnterIn_addr - 1);
	end

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax );
	$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin );
	$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver );
	$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax );
	$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin );
	$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver );
	$fclose(fp);
	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end

	$fclose(fp);
end
endmodule
