-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity setupLDPC_load_etaIndexN is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num : IN STD_LOGIC_VECTOR (16 downto 0);
    etaIndexN_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    etaIndexN_V_ce0 : OUT STD_LOGIC;
    etaIndexN_V_we0 : OUT STD_LOGIC;
    etaIndexN_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_ap_vld : OUT STD_LOGIC;
    din : IN STD_LOGIC_VECTOR (0 downto 0);
    cs : OUT STD_LOGIC_VECTOR (0 downto 0);
    cs_ap_vld : OUT STD_LOGIC;
    clk : OUT STD_LOGIC_VECTOR (0 downto 0);
    clk_ap_vld : OUT STD_LOGIC );
end;


architecture behav of setupLDPC_load_etaIndexN is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal loop_3_fu_150_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_55 : BOOLEAN;
    signal read_1_fu_170_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond5_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_4_fu_182_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_70 : BOOLEAN;
    signal pos_1_fu_203_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal pos_1_reg_290 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal tmp_3_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_5_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal data_V_2_fu_249_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_reg_76 : STD_LOGIC_VECTOR (3 downto 0);
    signal read_reg_87 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_1_reg_98 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_reg_109 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_s_reg_121 : STD_LOGIC_VECTOR (15 downto 0);
    signal loop_2_reg_133 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_cast_fu_194_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_237_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_1_fu_243_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- loop_1_reg_98 assign process. --
    loop_1_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond5_fu_144_p2 = ap_const_lv1_0)))) then 
                loop_1_reg_98 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond6_fu_176_p2))) then 
                loop_1_reg_98 <= loop_4_fu_182_p2;
            end if; 
        end if;
    end process;

    -- loop_2_reg_133 assign process. --
    loop_2_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_3_fu_198_p2)))) then 
                loop_2_reg_133 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_225_p2))) then 
                loop_2_reg_133 <= loop_5_fu_231_p2;
            end if; 
        end if;
    end process;

    -- loop_reg_76 assign process. --
    loop_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond5_fu_144_p2 = ap_const_lv1_0))) then 
                loop_reg_76 <= loop_3_fu_150_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                loop_reg_76 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- p_s_reg_121 assign process. --
    p_s_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_3_fu_198_p2)))) then 
                p_s_reg_121 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_225_p2))) then 
                p_s_reg_121 <= data_V_2_fu_249_p3;
            end if; 
        end if;
    end process;

    -- pos_reg_109 assign process. --
    pos_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond6_fu_176_p2)))) then 
                pos_reg_109 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_225_p2)))) then 
                pos_reg_109 <= pos_1_reg_290;
            end if; 
        end if;
    end process;

    -- read_reg_87 assign process. --
    read_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond5_fu_144_p2 = ap_const_lv1_0))) then 
                read_reg_87 <= read_1_fu_170_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                read_reg_87 <= ap_const_lv8_3;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                pos_1_reg_290 <= pos_1_fu_203_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond5_fu_144_p2, tmp_3_fu_198_p2, exitcond_fu_225_p2, exitcond6_fu_176_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond5_fu_144_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond6_fu_176_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = tmp_3_fu_198_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond_fu_225_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st4_fsm_3, tmp_3_fu_198_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_3_fu_198_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, tmp_3_fu_198_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_3_fu_198_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_55 assign process. --
    ap_sig_bdd_55_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_55 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_70 assign process. --
    ap_sig_bdd_70_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_70 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_55)
    begin
        if (ap_sig_bdd_55) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_70)
    begin
        if (ap_sig_bdd_70) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    clk <= ap_const_lv1_0;

    -- clk_ap_vld assign process. --
    clk_ap_vld_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, tmp_3_fu_198_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_3_fu_198_p2))) then 
            clk_ap_vld <= ap_const_logic_1;
        else 
            clk_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    cs <= ap_const_lv1_1;

    -- cs_ap_vld assign process. --
    cs_ap_vld_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, tmp_3_fu_198_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_3_fu_198_p2))) then 
            cs_ap_vld <= ap_const_logic_1;
        else 
            cs_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_V_1_fu_243_p2 <= (r_V_fu_237_p2 or ap_const_lv16_1);
    data_V_2_fu_249_p3 <= 
        data_V_1_fu_243_p2 when (din(0) = '1') else 
        r_V_fu_237_p2;

    -- dout assign process. --
    dout_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond5_fu_144_p2, ap_sig_cseq_ST_st3_fsm_2, read_reg_87, exitcond6_fu_176_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond6_fu_176_p2))) then 
            dout <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond5_fu_144_p2 = ap_const_lv1_0))) then 
            dout <= read_reg_87(7 downto 7);
        else 
            dout <= "X";
        end if; 
    end process;


    -- dout_ap_vld assign process. --
    dout_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond5_fu_144_p2, ap_sig_cseq_ST_st3_fsm_2, exitcond6_fu_176_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond5_fu_144_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond6_fu_176_p2)))) then 
            dout_ap_vld <= ap_const_logic_1;
        else 
            dout_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    etaIndexN_V_address0 <= tmp_4_fu_256_p1(16 - 1 downto 0);

    -- etaIndexN_V_ce0 assign process. --
    etaIndexN_V_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            etaIndexN_V_ce0 <= ap_const_logic_1;
        else 
            etaIndexN_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    etaIndexN_V_d0 <= p_s_reg_121;

    -- etaIndexN_V_we0 assign process. --
    etaIndexN_V_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, exitcond_fu_225_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_225_p2))))) then 
            etaIndexN_V_we0 <= ap_const_logic_1;
        else 
            etaIndexN_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_fu_144_p2 <= "1" when (loop_reg_76 = ap_const_lv4_8) else "0";
    exitcond6_fu_176_p2 <= "1" when (loop_1_reg_98 = ap_const_lv5_18) else "0";
    exitcond_fu_225_p2 <= "1" when (loop_2_reg_133 = ap_const_lv5_10) else "0";
    loop_3_fu_150_p2 <= std_logic_vector(unsigned(loop_reg_76) + unsigned(ap_const_lv4_1));
    loop_4_fu_182_p2 <= std_logic_vector(unsigned(loop_1_reg_98) + unsigned(ap_const_lv5_1));
    loop_5_fu_231_p2 <= std_logic_vector(unsigned(loop_2_reg_133) + unsigned(ap_const_lv5_1));
    pos_1_fu_203_p2 <= std_logic_vector(unsigned(pos_reg_109) + unsigned(ap_const_lv16_1));
    pos_cast_fu_194_p1 <= std_logic_vector(resize(unsigned(pos_reg_109),17));
    r_V_fu_237_p2 <= std_logic_vector(shift_left(unsigned(p_s_reg_121),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    read_1_fu_170_p2 <= std_logic_vector(shift_left(unsigned(read_reg_87),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_3_fu_198_p2 <= "1" when (signed(pos_cast_fu_194_p1) < signed(num)) else "0";
    tmp_4_fu_256_p1 <= std_logic_vector(resize(unsigned(pos_reg_109),64));
end behav;
