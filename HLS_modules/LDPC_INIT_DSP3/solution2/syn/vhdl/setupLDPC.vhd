-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity setupLDPC is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    size_V : IN STD_LOGIC_VECTOR (1 downto 0);
    rate_V : IN STD_LOGIC_VECTOR (1 downto 0);
    nR_M_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    nR_M_V_ap_vld : OUT STD_LOGIC;
    etaIndexM_M_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    etaIndexM_M_V_ap_vld : OUT STD_LOGIC;
    pCodeM_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    pCodeM_V_ap_vld : OUT STD_LOGIC;
    pMaxIterations_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    pMaxIterations_V_ap_vld : OUT STD_LOGIC;
    numbits_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    numbits_V_ap_vld : OUT STD_LOGIC;
    split_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    split_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of setupLDPC is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "setupLDPC,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tffv676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.881000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=104}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv16_2800 : STD_LOGIC_VECTOR (15 downto 0) := "0010100000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv16_1C00 : STD_LOGIC_VECTOR (15 downto 0) := "0001110000000000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv16_1600 : STD_LOGIC_VECTOR (15 downto 0) := "0001011000000000";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv16_A00 : STD_LOGIC_VECTOR (15 downto 0) := "0000101000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_700 : STD_LOGIC_VECTOR (15 downto 0) := "0000011100000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv16_580 : STD_LOGIC_VECTOR (15 downto 0) := "0000010110000000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv16_9000 : STD_LOGIC_VECTOR (15 downto 0) := "1001000000000000";
    constant ap_const_lv16_6800 : STD_LOGIC_VECTOR (15 downto 0) := "0110100000000000";
    constant ap_const_lv16_5400 : STD_LOGIC_VECTOR (15 downto 0) := "0101010000000000";
    constant ap_const_lv16_2400 : STD_LOGIC_VECTOR (15 downto 0) := "0010010000000000";
    constant ap_const_lv16_1A00 : STD_LOGIC_VECTOR (15 downto 0) := "0001101000000000";
    constant ap_const_lv16_1500 : STD_LOGIC_VECTOR (15 downto 0) := "0001010100000000";
    constant ap_const_lv16_1800 : STD_LOGIC_VECTOR (15 downto 0) := "0001100000000000";
    constant ap_const_lv16_C00 : STD_LOGIC_VECTOR (15 downto 0) := "0000110000000000";
    constant ap_const_lv16_600 : STD_LOGIC_VECTOR (15 downto 0) := "0000011000000000";
    constant ap_const_lv16_300 : STD_LOGIC_VECTOR (15 downto 0) := "0000001100000000";
    constant ap_const_lv16_180 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110000000";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_1E : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    constant ap_const_lv16_2000 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_const_lv16_1400 : STD_LOGIC_VECTOR (15 downto 0) := "0001010000000000";
    constant ap_const_lv16_800 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_const_lv16_500 : STD_LOGIC_VECTOR (15 downto 0) := "0000010100000000";
    constant ap_const_lv16_400 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv16_C0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011000000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";

    signal mode_fu_231_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_199_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_207_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast2_fu_195_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast_fu_217_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp1_fu_221_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_211_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_cast_fu_227_p1 : STD_LOGIC_VECTOR (4 downto 0);


begin



    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;

    etaIndexM_M_V_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if (not((ap_start = ap_const_logic_0))) then
            if ((mode_fu_231_p2 = ap_const_lv5_3)) then 
                etaIndexM_M_V <= ap_const_lv16_1500;
            elsif ((mode_fu_231_p2 = ap_const_lv5_2)) then 
                etaIndexM_M_V <= ap_const_lv16_1A00;
            elsif ((mode_fu_231_p2 = ap_const_lv5_1)) then 
                etaIndexM_M_V <= ap_const_lv16_2400;
            elsif ((mode_fu_231_p2 = ap_const_lv5_6)) then 
                etaIndexM_M_V <= ap_const_lv16_5400;
            elsif ((mode_fu_231_p2 = ap_const_lv5_5)) then 
                etaIndexM_M_V <= ap_const_lv16_6800;
            elsif ((mode_fu_231_p2 = ap_const_lv5_4)) then 
                etaIndexM_M_V <= ap_const_lv16_9000;
            else 
                etaIndexM_M_V <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            etaIndexM_M_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    etaIndexM_M_V_ap_vld_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if (((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_4)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_5)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_6)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_1)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_2)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_3)))) then 
            etaIndexM_M_V_ap_vld <= ap_const_logic_1;
        else 
            etaIndexM_M_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mode_fu_231_p2 <= std_logic_vector(unsigned(tmp_1_fu_211_p2) + unsigned(tmp1_cast_fu_227_p1));

    nR_M_V_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if (not((ap_start = ap_const_logic_0))) then
            if ((mode_fu_231_p2 = ap_const_lv5_3)) then 
                nR_M_V <= ap_const_lv16_580;
            elsif ((mode_fu_231_p2 = ap_const_lv5_2)) then 
                nR_M_V <= ap_const_lv16_700;
            elsif ((mode_fu_231_p2 = ap_const_lv5_1)) then 
                nR_M_V <= ap_const_lv16_A00;
            elsif ((mode_fu_231_p2 = ap_const_lv5_6)) then 
                nR_M_V <= ap_const_lv16_1600;
            elsif ((mode_fu_231_p2 = ap_const_lv5_5)) then 
                nR_M_V <= ap_const_lv16_1C00;
            elsif ((mode_fu_231_p2 = ap_const_lv5_4)) then 
                nR_M_V <= ap_const_lv16_2800;
            else 
                nR_M_V <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            nR_M_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    nR_M_V_ap_vld_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if (((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_4)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_5)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_6)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_1)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_2)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_3)))) then 
            nR_M_V_ap_vld <= ap_const_logic_1;
        else 
            nR_M_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    numbits_V_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if (not((ap_start = ap_const_logic_0))) then
            if ((mode_fu_231_p2 = ap_const_lv5_3)) then 
                numbits_V <= ap_const_lv16_500;
            elsif ((mode_fu_231_p2 = ap_const_lv5_2)) then 
                numbits_V <= ap_const_lv16_600;
            elsif ((mode_fu_231_p2 = ap_const_lv5_1)) then 
                numbits_V <= ap_const_lv16_800;
            elsif ((mode_fu_231_p2 = ap_const_lv5_6)) then 
                numbits_V <= ap_const_lv16_1400;
            elsif ((mode_fu_231_p2 = ap_const_lv5_5)) then 
                numbits_V <= ap_const_lv16_1800;
            elsif ((mode_fu_231_p2 = ap_const_lv5_4)) then 
                numbits_V <= ap_const_lv16_2000;
            else 
                numbits_V <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            numbits_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    numbits_V_ap_vld_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if (((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_4)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_5)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_6)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_1)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_2)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_3)))) then 
            numbits_V_ap_vld <= ap_const_logic_1;
        else 
            numbits_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pCodeM_V_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if ((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_3))) then 
            pCodeM_V <= ap_const_lv16_180;
        elsif ((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_2))) then 
            pCodeM_V <= ap_const_lv16_300;
        elsif (((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_6)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_1)))) then 
            pCodeM_V <= ap_const_lv16_600;
        elsif ((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_5))) then 
            pCodeM_V <= ap_const_lv16_C00;
        elsif ((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_4))) then 
            pCodeM_V <= ap_const_lv16_1800;
        else 
            pCodeM_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pCodeM_V_ap_vld_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if (((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_4)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_5)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_6)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_1)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_2)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_3)))) then 
            pCodeM_V_ap_vld <= ap_const_logic_1;
        else 
            pCodeM_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pMaxIterations_V_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if ((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_3))) then 
            pMaxIterations_V <= ap_const_lv16_1E;
        elsif (((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_4)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_5)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_6)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_1)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_2)))) then 
            pMaxIterations_V <= ap_const_lv16_3;
        else 
            pMaxIterations_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pMaxIterations_V_ap_vld_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if (((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_4)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_5)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_6)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_1)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_2)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_3)))) then 
            pMaxIterations_V_ap_vld <= ap_const_logic_1;
        else 
            pMaxIterations_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_207_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_199_p3),5));
    p_shl_fu_199_p3 <= (size_V & ap_const_lv2_0);

    split_V_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if (not((ap_start = ap_const_logic_0))) then
            if ((mode_fu_231_p2 = ap_const_lv5_3)) then 
                split_V <= ap_const_lv16_80;
            elsif ((mode_fu_231_p2 = ap_const_lv5_2)) then 
                split_V <= ap_const_lv16_C0;
            elsif ((mode_fu_231_p2 = ap_const_lv5_1)) then 
                split_V <= ap_const_lv16_100;
            elsif ((mode_fu_231_p2 = ap_const_lv5_6)) then 
                split_V <= ap_const_lv16_200;
            elsif ((mode_fu_231_p2 = ap_const_lv5_5)) then 
                split_V <= ap_const_lv16_300;
            elsif ((mode_fu_231_p2 = ap_const_lv5_4)) then 
                split_V <= ap_const_lv16_400;
            else 
                split_V <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            split_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    split_V_ap_vld_assign_proc : process(ap_start, mode_fu_231_p2)
    begin
        if (((not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_4)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_5)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_6)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_1)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_2)) or (not((ap_start = ap_const_logic_0)) and (mode_fu_231_p2 = ap_const_lv5_3)))) then 
            split_V_ap_vld <= ap_const_logic_1;
        else 
            split_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        tmp1_cast_fu_227_p1 <= std_logic_vector(resize(signed(tmp1_fu_221_p2),5));

    tmp1_fu_221_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_217_p1) + unsigned(ap_const_lv3_5));
    tmp_1_fu_211_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_207_p1) - unsigned(tmp_cast2_fu_195_p1));
    tmp_2_cast_fu_217_p1 <= std_logic_vector(resize(unsigned(rate_V),3));
    tmp_cast2_fu_195_p1 <= std_logic_vector(resize(unsigned(size_V),5));
end behav;
