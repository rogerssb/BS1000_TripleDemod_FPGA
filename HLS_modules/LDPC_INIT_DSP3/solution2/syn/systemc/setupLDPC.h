// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _setupLDPC_HH_
#define _setupLDPC_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct setupLDPC : public sc_module {
    // Port declarations 18
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<2> > size_V;
    sc_in< sc_lv<2> > rate_V;
    sc_out< sc_lv<16> > nR_M_V;
    sc_out< sc_logic > nR_M_V_ap_vld;
    sc_out< sc_lv<16> > etaIndexM_M_V;
    sc_out< sc_logic > etaIndexM_M_V_ap_vld;
    sc_out< sc_lv<16> > pCodeM_V;
    sc_out< sc_logic > pCodeM_V_ap_vld;
    sc_out< sc_lv<16> > pMaxIterations_V;
    sc_out< sc_logic > pMaxIterations_V_ap_vld;
    sc_out< sc_lv<16> > numbits_V;
    sc_out< sc_logic > numbits_V_ap_vld;
    sc_out< sc_lv<16> > split_V;
    sc_out< sc_logic > split_V_ap_vld;
    // Port declarations for the virtual clock. 
    sc_in_clk ap_virtual_clock;


    // Module declarations
    setupLDPC(sc_module_name name);
    SC_HAS_PROCESS(setupLDPC);

    ~setupLDPC();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > mode_fu_231_p2;
    sc_signal< sc_lv<4> > p_shl_fu_199_p3;
    sc_signal< sc_lv<5> > p_shl_cast_fu_207_p1;
    sc_signal< sc_lv<5> > tmp_cast2_fu_195_p1;
    sc_signal< sc_lv<3> > tmp_2_cast_fu_217_p1;
    sc_signal< sc_lv<3> > tmp1_fu_221_p2;
    sc_signal< sc_lv<5> > tmp_1_fu_211_p2;
    sc_signal< sc_lv<5> > tmp1_cast_fu_227_p1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_const_lv16_2800;
    static const sc_lv<5> ap_const_lv5_4;
    static const sc_lv<16> ap_const_lv16_1C00;
    static const sc_lv<5> ap_const_lv5_5;
    static const sc_lv<16> ap_const_lv16_1600;
    static const sc_lv<5> ap_const_lv5_6;
    static const sc_lv<16> ap_const_lv16_A00;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<16> ap_const_lv16_700;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<16> ap_const_lv16_580;
    static const sc_lv<5> ap_const_lv5_3;
    static const sc_lv<16> ap_const_lv16_9000;
    static const sc_lv<16> ap_const_lv16_6800;
    static const sc_lv<16> ap_const_lv16_5400;
    static const sc_lv<16> ap_const_lv16_2400;
    static const sc_lv<16> ap_const_lv16_1A00;
    static const sc_lv<16> ap_const_lv16_1500;
    static const sc_lv<16> ap_const_lv16_1800;
    static const sc_lv<16> ap_const_lv16_C00;
    static const sc_lv<16> ap_const_lv16_600;
    static const sc_lv<16> ap_const_lv16_300;
    static const sc_lv<16> ap_const_lv16_180;
    static const sc_lv<16> ap_const_lv16_3;
    static const sc_lv<16> ap_const_lv16_1E;
    static const sc_lv<16> ap_const_lv16_2000;
    static const sc_lv<16> ap_const_lv16_1400;
    static const sc_lv<16> ap_const_lv16_800;
    static const sc_lv<16> ap_const_lv16_500;
    static const sc_lv<16> ap_const_lv16_400;
    static const sc_lv<16> ap_const_lv16_200;
    static const sc_lv<16> ap_const_lv16_100;
    static const sc_lv<16> ap_const_lv16_C0;
    static const sc_lv<16> ap_const_lv16_80;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_5;
    // Thread declarations
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_etaIndexM_M_V();
    void thread_etaIndexM_M_V_ap_vld();
    void thread_mode_fu_231_p2();
    void thread_nR_M_V();
    void thread_nR_M_V_ap_vld();
    void thread_numbits_V();
    void thread_numbits_V_ap_vld();
    void thread_pCodeM_V();
    void thread_pCodeM_V_ap_vld();
    void thread_pMaxIterations_V();
    void thread_pMaxIterations_V_ap_vld();
    void thread_p_shl_cast_fu_207_p1();
    void thread_p_shl_fu_199_p3();
    void thread_split_V();
    void thread_split_V_ap_vld();
    void thread_tmp1_cast_fu_227_p1();
    void thread_tmp1_fu_221_p2();
    void thread_tmp_1_fu_211_p2();
    void thread_tmp_2_cast_fu_217_p1();
    void thread_tmp_cast2_fu_195_p1();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
