// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "size_V"
#define AUTOTB_TVIN_size_V  "../tv/cdatafile/c.setupLDPC.autotvin_size_V.dat"
// wrapc file define: "rate_V"
#define AUTOTB_TVIN_rate_V  "../tv/cdatafile/c.setupLDPC.autotvin_rate_V.dat"
// wrapc file define: "nR_M_V"
#define AUTOTB_TVOUT_nR_M_V  "../tv/cdatafile/c.setupLDPC.autotvout_nR_M_V.dat"
// wrapc file define: "etaIndexM_M_V"
#define AUTOTB_TVOUT_etaIndexM_M_V  "../tv/cdatafile/c.setupLDPC.autotvout_etaIndexM_M_V.dat"
// wrapc file define: "pCodeM_V"
#define AUTOTB_TVOUT_pCodeM_V  "../tv/cdatafile/c.setupLDPC.autotvout_pCodeM_V.dat"
// wrapc file define: "pMaxIterations_V"
#define AUTOTB_TVOUT_pMaxIterations_V  "../tv/cdatafile/c.setupLDPC.autotvout_pMaxIterations_V.dat"
// wrapc file define: "numbits_V"
#define AUTOTB_TVOUT_numbits_V  "../tv/cdatafile/c.setupLDPC.autotvout_numbits_V.dat"
// wrapc file define: "split_V"
#define AUTOTB_TVOUT_split_V  "../tv/cdatafile/c.setupLDPC.autotvout_split_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "nR_M_V"
#define AUTOTB_TVOUT_PC_nR_M_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_nR_M_V.dat"
// tvout file define: "etaIndexM_M_V"
#define AUTOTB_TVOUT_PC_etaIndexM_M_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_etaIndexM_M_V.dat"
// tvout file define: "pCodeM_V"
#define AUTOTB_TVOUT_PC_pCodeM_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_pCodeM_V.dat"
// tvout file define: "pMaxIterations_V"
#define AUTOTB_TVOUT_PC_pMaxIterations_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_pMaxIterations_V.dat"
// tvout file define: "numbits_V"
#define AUTOTB_TVOUT_PC_numbits_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_numbits_V.dat"
// tvout file define: "split_V"
#define AUTOTB_TVOUT_PC_split_V  "../tv/rtldatafile/rtl.setupLDPC.autotvout_split_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			size_V_depth = 0;
			rate_V_depth = 0;
			nR_M_V_depth = 0;
			etaIndexM_M_V_depth = 0;
			pCodeM_V_depth = 0;
			pMaxIterations_V_depth = 0;
			numbits_V_depth = 0;
			split_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{size_V " << size_V_depth << "}\n";
			total_list << "{rate_V " << rate_V_depth << "}\n";
			total_list << "{nR_M_V " << nR_M_V_depth << "}\n";
			total_list << "{etaIndexM_M_V " << etaIndexM_M_V_depth << "}\n";
			total_list << "{pCodeM_V " << pCodeM_V_depth << "}\n";
			total_list << "{pMaxIterations_V " << pMaxIterations_V_depth << "}\n";
			total_list << "{numbits_V " << numbits_V_depth << "}\n";
			total_list << "{split_V " << split_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int size_V_depth;
		int rate_V_depth;
		int nR_M_V_depth;
		int etaIndexM_M_V_depth;
		int pCodeM_V_depth;
		int pMaxIterations_V_depth;
		int numbits_V_depth;
		int split_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void setupLDPC (
ap_uint<2> size,
ap_uint<2> rate,
ap_uint<16>* nR_M,
ap_uint<16>* etaIndexM_M,
ap_uint<16>* pCodeM,
ap_uint<16>* pMaxIterations,
ap_uint<16>* numbits,
ap_uint<16>* split);

void AESL_WRAP_setupLDPC (
ap_uint<2> size,
ap_uint<2> rate,
ap_uint<16>* nR_M,
ap_uint<16>* etaIndexM_M,
ap_uint<16>* pCodeM,
ap_uint<16>* pMaxIterations,
ap_uint<16>* numbits,
ap_uint<16>* split)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "nR_M_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_nR_M_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_nR_M_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_nR_M_V, AESL_token); // data

			sc_bv<16> *nR_M_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'nR_M_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'nR_M_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					nR_M_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_nR_M_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_nR_M_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: nR_M_V
				{
					// bitslice(15, 0)
					// {
						// celement: nR_M.V(15, 0)
						// {
							sc_lv<16>* nR_M_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: nR_M.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(nR_M[0]) != NULL) // check the null address if the c port is array or others
								{
									nR_M_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(nR_M_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: nR_M.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : nR_M[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : nR_M[0]
								// output_left_conversion : nR_M[i_0]
								// output_type_conversion : (nR_M_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(nR_M[0]) != NULL) // check the null address if the c port is array or others
								{
									nR_M[i_0] = (nR_M_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] nR_M_V_pc_buffer;
		}

		// output port post check: "etaIndexM_M_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_M_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_M_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_M_V, AESL_token); // data

			sc_bv<16> *etaIndexM_M_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'etaIndexM_M_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'etaIndexM_M_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					etaIndexM_M_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_etaIndexM_M_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_etaIndexM_M_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: etaIndexM_M_V
				{
					// bitslice(15, 0)
					// {
						// celement: etaIndexM_M.V(15, 0)
						// {
							sc_lv<16>* etaIndexM_M_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: etaIndexM_M.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(etaIndexM_M[0]) != NULL) // check the null address if the c port is array or others
								{
									etaIndexM_M_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(etaIndexM_M_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: etaIndexM_M.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : etaIndexM_M[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : etaIndexM_M[0]
								// output_left_conversion : etaIndexM_M[i_0]
								// output_type_conversion : (etaIndexM_M_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(etaIndexM_M[0]) != NULL) // check the null address if the c port is array or others
								{
									etaIndexM_M[i_0] = (etaIndexM_M_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] etaIndexM_M_V_pc_buffer;
		}

		// output port post check: "pCodeM_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_pCodeM_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_pCodeM_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_pCodeM_V, AESL_token); // data

			sc_bv<16> *pCodeM_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'pCodeM_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'pCodeM_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					pCodeM_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_pCodeM_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_pCodeM_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: pCodeM_V
				{
					// bitslice(15, 0)
					// {
						// celement: pCodeM.V(15, 0)
						// {
							sc_lv<16>* pCodeM_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: pCodeM.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(pCodeM[0]) != NULL) // check the null address if the c port is array or others
								{
									pCodeM_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(pCodeM_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: pCodeM.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : pCodeM[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : pCodeM[0]
								// output_left_conversion : pCodeM[i_0]
								// output_type_conversion : (pCodeM_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(pCodeM[0]) != NULL) // check the null address if the c port is array or others
								{
									pCodeM[i_0] = (pCodeM_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] pCodeM_V_pc_buffer;
		}

		// output port post check: "pMaxIterations_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_pMaxIterations_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_pMaxIterations_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_pMaxIterations_V, AESL_token); // data

			sc_bv<16> *pMaxIterations_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'pMaxIterations_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'pMaxIterations_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					pMaxIterations_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_pMaxIterations_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_pMaxIterations_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: pMaxIterations_V
				{
					// bitslice(15, 0)
					// {
						// celement: pMaxIterations.V(15, 0)
						// {
							sc_lv<16>* pMaxIterations_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: pMaxIterations.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(pMaxIterations[0]) != NULL) // check the null address if the c port is array or others
								{
									pMaxIterations_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(pMaxIterations_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: pMaxIterations.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : pMaxIterations[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : pMaxIterations[0]
								// output_left_conversion : pMaxIterations[i_0]
								// output_type_conversion : (pMaxIterations_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(pMaxIterations[0]) != NULL) // check the null address if the c port is array or others
								{
									pMaxIterations[i_0] = (pMaxIterations_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] pMaxIterations_V_pc_buffer;
		}

		// output port post check: "numbits_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_numbits_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_numbits_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_numbits_V, AESL_token); // data

			sc_bv<16> *numbits_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'numbits_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'numbits_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					numbits_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_numbits_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_numbits_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: numbits_V
				{
					// bitslice(15, 0)
					// {
						// celement: numbits.V(15, 0)
						// {
							sc_lv<16>* numbits_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: numbits.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(numbits[0]) != NULL) // check the null address if the c port is array or others
								{
									numbits_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(numbits_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: numbits.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : numbits[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : numbits[0]
								// output_left_conversion : numbits[i_0]
								// output_type_conversion : (numbits_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(numbits[0]) != NULL) // check the null address if the c port is array or others
								{
									numbits[i_0] = (numbits_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] numbits_V_pc_buffer;
		}

		// output port post check: "split_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_split_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_split_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_split_V, AESL_token); // data

			sc_bv<16> *split_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'split_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'split_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					split_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_split_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_split_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: split_V
				{
					// bitslice(15, 0)
					// {
						// celement: split.V(15, 0)
						// {
							sc_lv<16>* split_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: split.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(split[0]) != NULL) // check the null address if the c port is array or others
								{
									split_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(split_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: split.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : split[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : split[0]
								// output_left_conversion : split[i_0]
								// output_type_conversion : (split_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(split[0]) != NULL) // check the null address if the c port is array or others
								{
									split[i_0] = (split_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] split_V_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "size_V"
		char* tvin_size_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_size_V);

		// "rate_V"
		char* tvin_rate_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_rate_V);

		// "nR_M_V"
		char* tvout_nR_M_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_nR_M_V);

		// "etaIndexM_M_V"
		char* tvout_etaIndexM_M_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_etaIndexM_M_V);

		// "pCodeM_V"
		char* tvout_pCodeM_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_pCodeM_V);

		// "pMaxIterations_V"
		char* tvout_pMaxIterations_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_pMaxIterations_V);

		// "numbits_V"
		char* tvout_numbits_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_numbits_V);

		// "split_V"
		char* tvout_split_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_split_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_size_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_size_V, tvin_size_V);

		sc_bv<2> size_V_tvin_wrapc_buffer;

		// RTL Name: size_V
		{
			// bitslice(1, 0)
			{
				// celement: size.V(1, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : size
						// sub_1st_elem          : 
						// ori_name_1st_elem     : size
						// regulate_c_name       : size_V
						// input_type_conversion : (size).to_string(2).c_str()
						if (&(size) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> size_V_tmp_mem;
							size_V_tmp_mem = (size).to_string(2).c_str();
							size_V_tvin_wrapc_buffer.range(1, 0) = size_V_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_size_V, "%s\n", (size_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_size_V, tvin_size_V);
		}

		tcl_file.set_num(1, &tcl_file.size_V_depth);
		sprintf(tvin_size_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_size_V, tvin_size_V);

		// [[transaction]]
		sprintf(tvin_rate_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_rate_V, tvin_rate_V);

		sc_bv<2> rate_V_tvin_wrapc_buffer;

		// RTL Name: rate_V
		{
			// bitslice(1, 0)
			{
				// celement: rate.V(1, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : rate
						// sub_1st_elem          : 
						// ori_name_1st_elem     : rate
						// regulate_c_name       : rate_V
						// input_type_conversion : (rate).to_string(2).c_str()
						if (&(rate) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> rate_V_tmp_mem;
							rate_V_tmp_mem = (rate).to_string(2).c_str();
							rate_V_tvin_wrapc_buffer.range(1, 0) = rate_V_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_rate_V, "%s\n", (rate_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_rate_V, tvin_rate_V);
		}

		tcl_file.set_num(1, &tcl_file.rate_V_depth);
		sprintf(tvin_rate_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_rate_V, tvin_rate_V);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		setupLDPC(size, rate, nR_M, etaIndexM_M, pCodeM, pMaxIterations, numbits, split);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_nR_M_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_nR_M_V, tvout_nR_M_V);

		sc_bv<16>* nR_M_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: nR_M_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: nR_M.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : nR_M[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : nR_M[0]
						// regulate_c_name       : nR_M_V
						// input_type_conversion : (nR_M[i_0]).to_string(2).c_str()
						if (&(nR_M[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> nR_M_V_tmp_mem;
							nR_M_V_tmp_mem = (nR_M[i_0]).to_string(2).c_str();
							nR_M_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = nR_M_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_nR_M_V, "%s\n", (nR_M_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_nR_M_V, tvout_nR_M_V);
		}

		tcl_file.set_num(1, &tcl_file.nR_M_V_depth);
		sprintf(tvout_nR_M_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_nR_M_V, tvout_nR_M_V);

		// release memory allocation
		delete [] nR_M_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_etaIndexM_M_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_etaIndexM_M_V, tvout_etaIndexM_M_V);

		sc_bv<16>* etaIndexM_M_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: etaIndexM_M_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: etaIndexM_M.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : etaIndexM_M[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : etaIndexM_M[0]
						// regulate_c_name       : etaIndexM_M_V
						// input_type_conversion : (etaIndexM_M[i_0]).to_string(2).c_str()
						if (&(etaIndexM_M[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> etaIndexM_M_V_tmp_mem;
							etaIndexM_M_V_tmp_mem = (etaIndexM_M[i_0]).to_string(2).c_str();
							etaIndexM_M_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = etaIndexM_M_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_etaIndexM_M_V, "%s\n", (etaIndexM_M_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_etaIndexM_M_V, tvout_etaIndexM_M_V);
		}

		tcl_file.set_num(1, &tcl_file.etaIndexM_M_V_depth);
		sprintf(tvout_etaIndexM_M_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_etaIndexM_M_V, tvout_etaIndexM_M_V);

		// release memory allocation
		delete [] etaIndexM_M_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_pCodeM_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_pCodeM_V, tvout_pCodeM_V);

		sc_bv<16>* pCodeM_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: pCodeM_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: pCodeM.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : pCodeM[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : pCodeM[0]
						// regulate_c_name       : pCodeM_V
						// input_type_conversion : (pCodeM[i_0]).to_string(2).c_str()
						if (&(pCodeM[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> pCodeM_V_tmp_mem;
							pCodeM_V_tmp_mem = (pCodeM[i_0]).to_string(2).c_str();
							pCodeM_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = pCodeM_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_pCodeM_V, "%s\n", (pCodeM_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_pCodeM_V, tvout_pCodeM_V);
		}

		tcl_file.set_num(1, &tcl_file.pCodeM_V_depth);
		sprintf(tvout_pCodeM_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_pCodeM_V, tvout_pCodeM_V);

		// release memory allocation
		delete [] pCodeM_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_pMaxIterations_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_pMaxIterations_V, tvout_pMaxIterations_V);

		sc_bv<16>* pMaxIterations_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: pMaxIterations_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: pMaxIterations.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : pMaxIterations[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : pMaxIterations[0]
						// regulate_c_name       : pMaxIterations_V
						// input_type_conversion : (pMaxIterations[i_0]).to_string(2).c_str()
						if (&(pMaxIterations[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> pMaxIterations_V_tmp_mem;
							pMaxIterations_V_tmp_mem = (pMaxIterations[i_0]).to_string(2).c_str();
							pMaxIterations_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = pMaxIterations_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_pMaxIterations_V, "%s\n", (pMaxIterations_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_pMaxIterations_V, tvout_pMaxIterations_V);
		}

		tcl_file.set_num(1, &tcl_file.pMaxIterations_V_depth);
		sprintf(tvout_pMaxIterations_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_pMaxIterations_V, tvout_pMaxIterations_V);

		// release memory allocation
		delete [] pMaxIterations_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_numbits_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_numbits_V, tvout_numbits_V);

		sc_bv<16>* numbits_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: numbits_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: numbits.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : numbits[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : numbits[0]
						// regulate_c_name       : numbits_V
						// input_type_conversion : (numbits[i_0]).to_string(2).c_str()
						if (&(numbits[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> numbits_V_tmp_mem;
							numbits_V_tmp_mem = (numbits[i_0]).to_string(2).c_str();
							numbits_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = numbits_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_numbits_V, "%s\n", (numbits_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_numbits_V, tvout_numbits_V);
		}

		tcl_file.set_num(1, &tcl_file.numbits_V_depth);
		sprintf(tvout_numbits_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_numbits_V, tvout_numbits_V);

		// release memory allocation
		delete [] numbits_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_split_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_split_V, tvout_split_V);

		sc_bv<16>* split_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: split_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: split.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : split[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : split[0]
						// regulate_c_name       : split_V
						// input_type_conversion : (split[i_0]).to_string(2).c_str()
						if (&(split[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> split_V_tmp_mem;
							split_V_tmp_mem = (split[i_0]).to_string(2).c_str();
							split_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = split_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_split_V, "%s\n", (split_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_split_V, tvout_split_V);
		}

		tcl_file.set_num(1, &tcl_file.split_V_depth);
		sprintf(tvout_split_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_split_V, tvout_split_V);

		// release memory allocation
		delete [] split_V_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "size_V"
		delete [] tvin_size_V;
		// release memory allocation: "rate_V"
		delete [] tvin_rate_V;
		// release memory allocation: "nR_M_V"
		delete [] tvout_nR_M_V;
		// release memory allocation: "etaIndexM_M_V"
		delete [] tvout_etaIndexM_M_V;
		// release memory allocation: "pCodeM_V"
		delete [] tvout_pCodeM_V;
		// release memory allocation: "pMaxIterations_V"
		delete [] tvout_pMaxIterations_V;
		// release memory allocation: "numbits_V"
		delete [] tvout_numbits_V;
		// release memory allocation: "split_V"
		delete [] tvout_split_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

