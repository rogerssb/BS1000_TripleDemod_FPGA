// LDPC Block 1024 Rate 4/5 
// Auto code 

void autocalc()
{
	short vMetric, vArg, minval, min, last, est[20], test, flag;
	tab_int jSparse, nLenNset, nSparse;

	// ******* Begin  M loop = 0     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1024] + pEtaPrev[3712];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1280] + pEtaPrev[4224];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1377] + pEtaPrev[4806];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3712] = minval;
		else
			pEta[3712] = -minval;
	}
	else
		pEta[3712] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4224] = minval;
		else
			pEta[4224] = -minval;
	}
	else
		pEta[4224] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4806] = minval;
		else
			pEta[4806] = -minval;
	}
	else
		pEta[4806] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 1     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1025] + pEtaPrev[3713];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1281] + pEtaPrev[4230];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1378] + pEtaPrev[4812];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3713] = minval;
		else
			pEta[3713] = -minval;
	}
	else
		pEta[3713] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4230] = minval;
		else
			pEta[4230] = -minval;
	}
	else
		pEta[4230] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4812] = minval;
		else
			pEta[4812] = -minval;
	}
	else
		pEta[4812] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 2     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1026] + pEtaPrev[3714];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1282] + pEtaPrev[4236];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1379] + pEtaPrev[4818];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3714] = minval;
		else
			pEta[3714] = -minval;
	}
	else
		pEta[3714] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4236] = minval;
		else
			pEta[4236] = -minval;
	}
	else
		pEta[4236] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4818] = minval;
		else
			pEta[4818] = -minval;
	}
	else
		pEta[4818] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 3     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1027] + pEtaPrev[3715];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1283] + pEtaPrev[4242];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1380] + pEtaPrev[4824];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3715] = minval;
		else
			pEta[3715] = -minval;
	}
	else
		pEta[3715] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4242] = minval;
		else
			pEta[4242] = -minval;
	}
	else
		pEta[4242] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4824] = minval;
		else
			pEta[4824] = -minval;
	}
	else
		pEta[4824] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 4     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1028] + pEtaPrev[3716];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1284] + pEtaPrev[4248];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1381] + pEtaPrev[4830];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3716] = minval;
		else
			pEta[3716] = -minval;
	}
	else
		pEta[3716] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4248] = minval;
		else
			pEta[4248] = -minval;
	}
	else
		pEta[4248] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4830] = minval;
		else
			pEta[4830] = -minval;
	}
	else
		pEta[4830] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 5     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1029] + pEtaPrev[3717];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1285] + pEtaPrev[4254];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1382] + pEtaPrev[4836];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3717] = minval;
		else
			pEta[3717] = -minval;
	}
	else
		pEta[3717] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4254] = minval;
		else
			pEta[4254] = -minval;
	}
	else
		pEta[4254] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4836] = minval;
		else
			pEta[4836] = -minval;
	}
	else
		pEta[4836] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 6     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1030] + pEtaPrev[3718];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1286] + pEtaPrev[4260];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1383] + pEtaPrev[4842];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3718] = minval;
		else
			pEta[3718] = -minval;
	}
	else
		pEta[3718] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4260] = minval;
		else
			pEta[4260] = -minval;
	}
	else
		pEta[4260] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4842] = minval;
		else
			pEta[4842] = -minval;
	}
	else
		pEta[4842] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 7     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1031] + pEtaPrev[3719];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1287] + pEtaPrev[4266];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1384] + pEtaPrev[4848];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3719] = minval;
		else
			pEta[3719] = -minval;
	}
	else
		pEta[3719] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4266] = minval;
		else
			pEta[4266] = -minval;
	}
	else
		pEta[4266] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4848] = minval;
		else
			pEta[4848] = -minval;
	}
	else
		pEta[4848] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 8     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1032] + pEtaPrev[3720];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1288] + pEtaPrev[4272];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1385] + pEtaPrev[4854];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3720] = minval;
		else
			pEta[3720] = -minval;
	}
	else
		pEta[3720] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4272] = minval;
		else
			pEta[4272] = -minval;
	}
	else
		pEta[4272] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4854] = minval;
		else
			pEta[4854] = -minval;
	}
	else
		pEta[4854] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 9     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1033] + pEtaPrev[3721];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1289] + pEtaPrev[4278];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1386] + pEtaPrev[4860];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3721] = minval;
		else
			pEta[3721] = -minval;
	}
	else
		pEta[3721] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4278] = minval;
		else
			pEta[4278] = -minval;
	}
	else
		pEta[4278] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4860] = minval;
		else
			pEta[4860] = -minval;
	}
	else
		pEta[4860] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 10     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1034] + pEtaPrev[3722];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1290] + pEtaPrev[4284];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1387] + pEtaPrev[4866];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3722] = minval;
		else
			pEta[3722] = -minval;
	}
	else
		pEta[3722] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4284] = minval;
		else
			pEta[4284] = -minval;
	}
	else
		pEta[4284] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4866] = minval;
		else
			pEta[4866] = -minval;
	}
	else
		pEta[4866] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 11     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1035] + pEtaPrev[3723];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1291] + pEtaPrev[4290];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1388] + pEtaPrev[4872];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3723] = minval;
		else
			pEta[3723] = -minval;
	}
	else
		pEta[3723] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4290] = minval;
		else
			pEta[4290] = -minval;
	}
	else
		pEta[4290] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4872] = minval;
		else
			pEta[4872] = -minval;
	}
	else
		pEta[4872] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 12     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1036] + pEtaPrev[3724];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1292] + pEtaPrev[4296];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1389] + pEtaPrev[4878];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3724] = minval;
		else
			pEta[3724] = -minval;
	}
	else
		pEta[3724] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4296] = minval;
		else
			pEta[4296] = -minval;
	}
	else
		pEta[4296] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4878] = minval;
		else
			pEta[4878] = -minval;
	}
	else
		pEta[4878] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 13     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1037] + pEtaPrev[3725];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1293] + pEtaPrev[4302];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1390] + pEtaPrev[4884];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3725] = minval;
		else
			pEta[3725] = -minval;
	}
	else
		pEta[3725] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4302] = minval;
		else
			pEta[4302] = -minval;
	}
	else
		pEta[4302] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4884] = minval;
		else
			pEta[4884] = -minval;
	}
	else
		pEta[4884] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 14     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1038] + pEtaPrev[3726];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1294] + pEtaPrev[4308];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1391] + pEtaPrev[4890];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3726] = minval;
		else
			pEta[3726] = -minval;
	}
	else
		pEta[3726] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4308] = minval;
		else
			pEta[4308] = -minval;
	}
	else
		pEta[4308] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4890] = minval;
		else
			pEta[4890] = -minval;
	}
	else
		pEta[4890] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 15     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1039] + pEtaPrev[3727];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1295] + pEtaPrev[4314];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1392] + pEtaPrev[4896];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3727] = minval;
		else
			pEta[3727] = -minval;
	}
	else
		pEta[3727] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4314] = minval;
		else
			pEta[4314] = -minval;
	}
	else
		pEta[4314] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4896] = minval;
		else
			pEta[4896] = -minval;
	}
	else
		pEta[4896] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 16     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1040] + pEtaPrev[3728];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1296] + pEtaPrev[4320];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1393] + pEtaPrev[4902];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3728] = minval;
		else
			pEta[3728] = -minval;
	}
	else
		pEta[3728] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4320] = minval;
		else
			pEta[4320] = -minval;
	}
	else
		pEta[4320] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4902] = minval;
		else
			pEta[4902] = -minval;
	}
	else
		pEta[4902] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 17     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1041] + pEtaPrev[3729];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1297] + pEtaPrev[4326];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1394] + pEtaPrev[4908];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3729] = minval;
		else
			pEta[3729] = -minval;
	}
	else
		pEta[3729] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4326] = minval;
		else
			pEta[4326] = -minval;
	}
	else
		pEta[4326] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4908] = minval;
		else
			pEta[4908] = -minval;
	}
	else
		pEta[4908] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 18     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1042] + pEtaPrev[3730];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1298] + pEtaPrev[4332];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1395] + pEtaPrev[4914];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3730] = minval;
		else
			pEta[3730] = -minval;
	}
	else
		pEta[3730] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4332] = minval;
		else
			pEta[4332] = -minval;
	}
	else
		pEta[4332] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4914] = minval;
		else
			pEta[4914] = -minval;
	}
	else
		pEta[4914] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 19     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1043] + pEtaPrev[3731];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1299] + pEtaPrev[4338];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1396] + pEtaPrev[4920];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3731] = minval;
		else
			pEta[3731] = -minval;
	}
	else
		pEta[3731] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4338] = minval;
		else
			pEta[4338] = -minval;
	}
	else
		pEta[4338] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4920] = minval;
		else
			pEta[4920] = -minval;
	}
	else
		pEta[4920] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 20     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1044] + pEtaPrev[3732];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1300] + pEtaPrev[4344];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1397] + pEtaPrev[4926];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3732] = minval;
		else
			pEta[3732] = -minval;
	}
	else
		pEta[3732] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4344] = minval;
		else
			pEta[4344] = -minval;
	}
	else
		pEta[4344] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4926] = minval;
		else
			pEta[4926] = -minval;
	}
	else
		pEta[4926] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 21     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1045] + pEtaPrev[3733];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1301] + pEtaPrev[4350];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1398] + pEtaPrev[4932];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3733] = minval;
		else
			pEta[3733] = -minval;
	}
	else
		pEta[3733] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4350] = minval;
		else
			pEta[4350] = -minval;
	}
	else
		pEta[4350] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4932] = minval;
		else
			pEta[4932] = -minval;
	}
	else
		pEta[4932] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 22     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1046] + pEtaPrev[3734];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1302] + pEtaPrev[4356];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1399] + pEtaPrev[4938];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3734] = minval;
		else
			pEta[3734] = -minval;
	}
	else
		pEta[3734] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4356] = minval;
		else
			pEta[4356] = -minval;
	}
	else
		pEta[4356] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4938] = minval;
		else
			pEta[4938] = -minval;
	}
	else
		pEta[4938] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 23     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1047] + pEtaPrev[3735];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1303] + pEtaPrev[4362];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1400] + pEtaPrev[4944];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3735] = minval;
		else
			pEta[3735] = -minval;
	}
	else
		pEta[3735] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4362] = minval;
		else
			pEta[4362] = -minval;
	}
	else
		pEta[4362] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4944] = minval;
		else
			pEta[4944] = -minval;
	}
	else
		pEta[4944] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 24     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1048] + pEtaPrev[3736];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1304] + pEtaPrev[4368];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1401] + pEtaPrev[4950];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3736] = minval;
		else
			pEta[3736] = -minval;
	}
	else
		pEta[3736] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4368] = minval;
		else
			pEta[4368] = -minval;
	}
	else
		pEta[4368] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4950] = minval;
		else
			pEta[4950] = -minval;
	}
	else
		pEta[4950] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 25     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1049] + pEtaPrev[3737];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1305] + pEtaPrev[4374];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1402] + pEtaPrev[4956];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3737] = minval;
		else
			pEta[3737] = -minval;
	}
	else
		pEta[3737] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4374] = minval;
		else
			pEta[4374] = -minval;
	}
	else
		pEta[4374] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4956] = minval;
		else
			pEta[4956] = -minval;
	}
	else
		pEta[4956] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 26     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1050] + pEtaPrev[3738];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1306] + pEtaPrev[4380];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1403] + pEtaPrev[4962];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3738] = minval;
		else
			pEta[3738] = -minval;
	}
	else
		pEta[3738] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4380] = minval;
		else
			pEta[4380] = -minval;
	}
	else
		pEta[4380] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4962] = minval;
		else
			pEta[4962] = -minval;
	}
	else
		pEta[4962] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 27     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1051] + pEtaPrev[3739];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1307] + pEtaPrev[4386];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1404] + pEtaPrev[4968];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3739] = minval;
		else
			pEta[3739] = -minval;
	}
	else
		pEta[3739] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4386] = minval;
		else
			pEta[4386] = -minval;
	}
	else
		pEta[4386] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4968] = minval;
		else
			pEta[4968] = -minval;
	}
	else
		pEta[4968] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 28     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1052] + pEtaPrev[3740];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1308] + pEtaPrev[4392];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1405] + pEtaPrev[4974];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3740] = minval;
		else
			pEta[3740] = -minval;
	}
	else
		pEta[3740] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4392] = minval;
		else
			pEta[4392] = -minval;
	}
	else
		pEta[4392] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4974] = minval;
		else
			pEta[4974] = -minval;
	}
	else
		pEta[4974] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 29     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1053] + pEtaPrev[3741];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1309] + pEtaPrev[4398];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1406] + pEtaPrev[4980];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3741] = minval;
		else
			pEta[3741] = -minval;
	}
	else
		pEta[3741] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4398] = minval;
		else
			pEta[4398] = -minval;
	}
	else
		pEta[4398] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4980] = minval;
		else
			pEta[4980] = -minval;
	}
	else
		pEta[4980] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 30     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1054] + pEtaPrev[3742];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1310] + pEtaPrev[4404];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1407] + pEtaPrev[4986];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3742] = minval;
		else
			pEta[3742] = -minval;
	}
	else
		pEta[3742] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4404] = minval;
		else
			pEta[4404] = -minval;
	}
	else
		pEta[4404] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4986] = minval;
		else
			pEta[4986] = -minval;
	}
	else
		pEta[4986] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 31     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1055] + pEtaPrev[3743];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1311] + pEtaPrev[4410];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1376] + pEtaPrev[4800];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3743] = minval;
		else
			pEta[3743] = -minval;
	}
	else
		pEta[3743] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4410] = minval;
		else
			pEta[4410] = -minval;
	}
	else
		pEta[4410] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4800] = minval;
		else
			pEta[4800] = -minval;
	}
	else
		pEta[4800] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 32     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1056] + pEtaPrev[3744];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1280] + pEtaPrev[4225];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1312] + pEtaPrev[4416];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3744] = minval;
		else
			pEta[3744] = -minval;
	}
	else
		pEta[3744] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4225] = minval;
		else
			pEta[4225] = -minval;
	}
	else
		pEta[4225] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4416] = minval;
		else
			pEta[4416] = -minval;
	}
	else
		pEta[4416] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 33     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1057] + pEtaPrev[3745];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1281] + pEtaPrev[4231];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1313] + pEtaPrev[4422];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3745] = minval;
		else
			pEta[3745] = -minval;
	}
	else
		pEta[3745] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4231] = minval;
		else
			pEta[4231] = -minval;
	}
	else
		pEta[4231] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4422] = minval;
		else
			pEta[4422] = -minval;
	}
	else
		pEta[4422] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 34     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1058] + pEtaPrev[3746];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1282] + pEtaPrev[4237];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1314] + pEtaPrev[4428];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3746] = minval;
		else
			pEta[3746] = -minval;
	}
	else
		pEta[3746] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4237] = minval;
		else
			pEta[4237] = -minval;
	}
	else
		pEta[4237] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4428] = minval;
		else
			pEta[4428] = -minval;
	}
	else
		pEta[4428] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 35     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1059] + pEtaPrev[3747];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1283] + pEtaPrev[4243];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1315] + pEtaPrev[4434];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3747] = minval;
		else
			pEta[3747] = -minval;
	}
	else
		pEta[3747] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4243] = minval;
		else
			pEta[4243] = -minval;
	}
	else
		pEta[4243] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4434] = minval;
		else
			pEta[4434] = -minval;
	}
	else
		pEta[4434] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 36     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1060] + pEtaPrev[3748];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1284] + pEtaPrev[4249];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1316] + pEtaPrev[4440];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3748] = minval;
		else
			pEta[3748] = -minval;
	}
	else
		pEta[3748] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4249] = minval;
		else
			pEta[4249] = -minval;
	}
	else
		pEta[4249] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4440] = minval;
		else
			pEta[4440] = -minval;
	}
	else
		pEta[4440] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 37     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1061] + pEtaPrev[3749];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1285] + pEtaPrev[4255];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1317] + pEtaPrev[4446];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3749] = minval;
		else
			pEta[3749] = -minval;
	}
	else
		pEta[3749] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4255] = minval;
		else
			pEta[4255] = -minval;
	}
	else
		pEta[4255] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4446] = minval;
		else
			pEta[4446] = -minval;
	}
	else
		pEta[4446] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 38     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1062] + pEtaPrev[3750];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1286] + pEtaPrev[4261];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1318] + pEtaPrev[4452];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3750] = minval;
		else
			pEta[3750] = -minval;
	}
	else
		pEta[3750] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4261] = minval;
		else
			pEta[4261] = -minval;
	}
	else
		pEta[4261] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4452] = minval;
		else
			pEta[4452] = -minval;
	}
	else
		pEta[4452] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 39     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1063] + pEtaPrev[3751];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1287] + pEtaPrev[4267];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1319] + pEtaPrev[4458];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3751] = minval;
		else
			pEta[3751] = -minval;
	}
	else
		pEta[3751] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4267] = minval;
		else
			pEta[4267] = -minval;
	}
	else
		pEta[4267] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4458] = minval;
		else
			pEta[4458] = -minval;
	}
	else
		pEta[4458] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 40     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1064] + pEtaPrev[3752];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1288] + pEtaPrev[4273];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1320] + pEtaPrev[4464];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3752] = minval;
		else
			pEta[3752] = -minval;
	}
	else
		pEta[3752] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4273] = minval;
		else
			pEta[4273] = -minval;
	}
	else
		pEta[4273] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4464] = minval;
		else
			pEta[4464] = -minval;
	}
	else
		pEta[4464] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 41     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1065] + pEtaPrev[3753];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1289] + pEtaPrev[4279];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1321] + pEtaPrev[4470];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3753] = minval;
		else
			pEta[3753] = -minval;
	}
	else
		pEta[3753] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4279] = minval;
		else
			pEta[4279] = -minval;
	}
	else
		pEta[4279] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4470] = minval;
		else
			pEta[4470] = -minval;
	}
	else
		pEta[4470] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 42     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1066] + pEtaPrev[3754];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1290] + pEtaPrev[4285];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1322] + pEtaPrev[4476];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3754] = minval;
		else
			pEta[3754] = -minval;
	}
	else
		pEta[3754] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4285] = minval;
		else
			pEta[4285] = -minval;
	}
	else
		pEta[4285] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4476] = minval;
		else
			pEta[4476] = -minval;
	}
	else
		pEta[4476] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 43     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1067] + pEtaPrev[3755];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1291] + pEtaPrev[4291];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1323] + pEtaPrev[4482];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3755] = minval;
		else
			pEta[3755] = -minval;
	}
	else
		pEta[3755] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4291] = minval;
		else
			pEta[4291] = -minval;
	}
	else
		pEta[4291] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4482] = minval;
		else
			pEta[4482] = -minval;
	}
	else
		pEta[4482] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 44     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1068] + pEtaPrev[3756];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1292] + pEtaPrev[4297];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1324] + pEtaPrev[4488];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3756] = minval;
		else
			pEta[3756] = -minval;
	}
	else
		pEta[3756] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4297] = minval;
		else
			pEta[4297] = -minval;
	}
	else
		pEta[4297] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4488] = minval;
		else
			pEta[4488] = -minval;
	}
	else
		pEta[4488] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 45     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1069] + pEtaPrev[3757];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1293] + pEtaPrev[4303];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1325] + pEtaPrev[4494];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3757] = minval;
		else
			pEta[3757] = -minval;
	}
	else
		pEta[3757] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4303] = minval;
		else
			pEta[4303] = -minval;
	}
	else
		pEta[4303] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4494] = minval;
		else
			pEta[4494] = -minval;
	}
	else
		pEta[4494] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 46     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1070] + pEtaPrev[3758];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1294] + pEtaPrev[4309];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1326] + pEtaPrev[4500];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3758] = minval;
		else
			pEta[3758] = -minval;
	}
	else
		pEta[3758] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4309] = minval;
		else
			pEta[4309] = -minval;
	}
	else
		pEta[4309] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4500] = minval;
		else
			pEta[4500] = -minval;
	}
	else
		pEta[4500] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 47     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1071] + pEtaPrev[3759];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1295] + pEtaPrev[4315];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1327] + pEtaPrev[4506];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3759] = minval;
		else
			pEta[3759] = -minval;
	}
	else
		pEta[3759] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4315] = minval;
		else
			pEta[4315] = -minval;
	}
	else
		pEta[4315] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4506] = minval;
		else
			pEta[4506] = -minval;
	}
	else
		pEta[4506] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 48     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1072] + pEtaPrev[3760];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1296] + pEtaPrev[4321];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1328] + pEtaPrev[4512];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3760] = minval;
		else
			pEta[3760] = -minval;
	}
	else
		pEta[3760] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4321] = minval;
		else
			pEta[4321] = -minval;
	}
	else
		pEta[4321] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4512] = minval;
		else
			pEta[4512] = -minval;
	}
	else
		pEta[4512] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 49     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1073] + pEtaPrev[3761];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1297] + pEtaPrev[4327];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1329] + pEtaPrev[4518];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3761] = minval;
		else
			pEta[3761] = -minval;
	}
	else
		pEta[3761] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4327] = minval;
		else
			pEta[4327] = -minval;
	}
	else
		pEta[4327] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4518] = minval;
		else
			pEta[4518] = -minval;
	}
	else
		pEta[4518] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 50     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1074] + pEtaPrev[3762];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1298] + pEtaPrev[4333];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1330] + pEtaPrev[4524];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3762] = minval;
		else
			pEta[3762] = -minval;
	}
	else
		pEta[3762] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4333] = minval;
		else
			pEta[4333] = -minval;
	}
	else
		pEta[4333] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4524] = minval;
		else
			pEta[4524] = -minval;
	}
	else
		pEta[4524] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 51     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1075] + pEtaPrev[3763];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1299] + pEtaPrev[4339];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1331] + pEtaPrev[4530];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3763] = minval;
		else
			pEta[3763] = -minval;
	}
	else
		pEta[3763] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4339] = minval;
		else
			pEta[4339] = -minval;
	}
	else
		pEta[4339] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4530] = minval;
		else
			pEta[4530] = -minval;
	}
	else
		pEta[4530] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 52     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1076] + pEtaPrev[3764];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1300] + pEtaPrev[4345];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1332] + pEtaPrev[4536];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3764] = minval;
		else
			pEta[3764] = -minval;
	}
	else
		pEta[3764] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4345] = minval;
		else
			pEta[4345] = -minval;
	}
	else
		pEta[4345] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4536] = minval;
		else
			pEta[4536] = -minval;
	}
	else
		pEta[4536] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 53     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1077] + pEtaPrev[3765];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1301] + pEtaPrev[4351];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1333] + pEtaPrev[4542];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3765] = minval;
		else
			pEta[3765] = -minval;
	}
	else
		pEta[3765] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4351] = minval;
		else
			pEta[4351] = -minval;
	}
	else
		pEta[4351] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4542] = minval;
		else
			pEta[4542] = -minval;
	}
	else
		pEta[4542] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 54     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1078] + pEtaPrev[3766];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1302] + pEtaPrev[4357];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1334] + pEtaPrev[4548];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3766] = minval;
		else
			pEta[3766] = -minval;
	}
	else
		pEta[3766] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4357] = minval;
		else
			pEta[4357] = -minval;
	}
	else
		pEta[4357] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4548] = minval;
		else
			pEta[4548] = -minval;
	}
	else
		pEta[4548] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 55     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1079] + pEtaPrev[3767];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1303] + pEtaPrev[4363];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1335] + pEtaPrev[4554];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3767] = minval;
		else
			pEta[3767] = -minval;
	}
	else
		pEta[3767] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4363] = minval;
		else
			pEta[4363] = -minval;
	}
	else
		pEta[4363] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4554] = minval;
		else
			pEta[4554] = -minval;
	}
	else
		pEta[4554] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 56     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1080] + pEtaPrev[3768];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1304] + pEtaPrev[4369];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1336] + pEtaPrev[4560];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3768] = minval;
		else
			pEta[3768] = -minval;
	}
	else
		pEta[3768] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4369] = minval;
		else
			pEta[4369] = -minval;
	}
	else
		pEta[4369] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4560] = minval;
		else
			pEta[4560] = -minval;
	}
	else
		pEta[4560] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 57     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1081] + pEtaPrev[3769];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1305] + pEtaPrev[4375];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1337] + pEtaPrev[4566];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3769] = minval;
		else
			pEta[3769] = -minval;
	}
	else
		pEta[3769] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4375] = minval;
		else
			pEta[4375] = -minval;
	}
	else
		pEta[4375] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4566] = minval;
		else
			pEta[4566] = -minval;
	}
	else
		pEta[4566] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 58     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1082] + pEtaPrev[3770];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1306] + pEtaPrev[4381];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1338] + pEtaPrev[4572];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3770] = minval;
		else
			pEta[3770] = -minval;
	}
	else
		pEta[3770] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4381] = minval;
		else
			pEta[4381] = -minval;
	}
	else
		pEta[4381] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4572] = minval;
		else
			pEta[4572] = -minval;
	}
	else
		pEta[4572] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 59     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1083] + pEtaPrev[3771];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1307] + pEtaPrev[4387];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1339] + pEtaPrev[4578];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3771] = minval;
		else
			pEta[3771] = -minval;
	}
	else
		pEta[3771] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4387] = minval;
		else
			pEta[4387] = -minval;
	}
	else
		pEta[4387] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4578] = minval;
		else
			pEta[4578] = -minval;
	}
	else
		pEta[4578] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 60     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1084] + pEtaPrev[3772];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1308] + pEtaPrev[4393];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1340] + pEtaPrev[4584];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3772] = minval;
		else
			pEta[3772] = -minval;
	}
	else
		pEta[3772] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4393] = minval;
		else
			pEta[4393] = -minval;
	}
	else
		pEta[4393] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4584] = minval;
		else
			pEta[4584] = -minval;
	}
	else
		pEta[4584] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 61     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1085] + pEtaPrev[3773];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1309] + pEtaPrev[4399];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1341] + pEtaPrev[4590];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3773] = minval;
		else
			pEta[3773] = -minval;
	}
	else
		pEta[3773] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4399] = minval;
		else
			pEta[4399] = -minval;
	}
	else
		pEta[4399] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4590] = minval;
		else
			pEta[4590] = -minval;
	}
	else
		pEta[4590] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 62     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1086] + pEtaPrev[3774];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1310] + pEtaPrev[4405];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1342] + pEtaPrev[4596];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3774] = minval;
		else
			pEta[3774] = -minval;
	}
	else
		pEta[3774] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4405] = minval;
		else
			pEta[4405] = -minval;
	}
	else
		pEta[4405] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4596] = minval;
		else
			pEta[4596] = -minval;
	}
	else
		pEta[4596] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 63     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1087] + pEtaPrev[3775];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1311] + pEtaPrev[4411];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1343] + pEtaPrev[4602];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3775] = minval;
		else
			pEta[3775] = -minval;
	}
	else
		pEta[3775] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4411] = minval;
		else
			pEta[4411] = -minval;
	}
	else
		pEta[4411] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4602] = minval;
		else
			pEta[4602] = -minval;
	}
	else
		pEta[4602] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 64     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1088] + pEtaPrev[3776];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1312] + pEtaPrev[4417];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1344] + pEtaPrev[4608];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3776] = minval;
		else
			pEta[3776] = -minval;
	}
	else
		pEta[3776] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4417] = minval;
		else
			pEta[4417] = -minval;
	}
	else
		pEta[4417] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4608] = minval;
		else
			pEta[4608] = -minval;
	}
	else
		pEta[4608] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 65     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1089] + pEtaPrev[3777];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1313] + pEtaPrev[4423];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1345] + pEtaPrev[4614];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3777] = minval;
		else
			pEta[3777] = -minval;
	}
	else
		pEta[3777] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4423] = minval;
		else
			pEta[4423] = -minval;
	}
	else
		pEta[4423] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4614] = minval;
		else
			pEta[4614] = -minval;
	}
	else
		pEta[4614] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 66     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1090] + pEtaPrev[3778];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1314] + pEtaPrev[4429];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1346] + pEtaPrev[4620];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3778] = minval;
		else
			pEta[3778] = -minval;
	}
	else
		pEta[3778] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4429] = minval;
		else
			pEta[4429] = -minval;
	}
	else
		pEta[4429] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4620] = minval;
		else
			pEta[4620] = -minval;
	}
	else
		pEta[4620] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 67     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1091] + pEtaPrev[3779];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1315] + pEtaPrev[4435];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1347] + pEtaPrev[4626];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3779] = minval;
		else
			pEta[3779] = -minval;
	}
	else
		pEta[3779] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4435] = minval;
		else
			pEta[4435] = -minval;
	}
	else
		pEta[4435] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4626] = minval;
		else
			pEta[4626] = -minval;
	}
	else
		pEta[4626] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 68     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1092] + pEtaPrev[3780];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1316] + pEtaPrev[4441];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1348] + pEtaPrev[4632];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3780] = minval;
		else
			pEta[3780] = -minval;
	}
	else
		pEta[3780] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4441] = minval;
		else
			pEta[4441] = -minval;
	}
	else
		pEta[4441] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4632] = minval;
		else
			pEta[4632] = -minval;
	}
	else
		pEta[4632] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 69     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1093] + pEtaPrev[3781];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1317] + pEtaPrev[4447];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1349] + pEtaPrev[4638];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3781] = minval;
		else
			pEta[3781] = -minval;
	}
	else
		pEta[3781] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4447] = minval;
		else
			pEta[4447] = -minval;
	}
	else
		pEta[4447] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4638] = minval;
		else
			pEta[4638] = -minval;
	}
	else
		pEta[4638] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 70     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1094] + pEtaPrev[3782];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1318] + pEtaPrev[4453];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1350] + pEtaPrev[4644];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3782] = minval;
		else
			pEta[3782] = -minval;
	}
	else
		pEta[3782] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4453] = minval;
		else
			pEta[4453] = -minval;
	}
	else
		pEta[4453] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4644] = minval;
		else
			pEta[4644] = -minval;
	}
	else
		pEta[4644] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 71     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1095] + pEtaPrev[3783];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1319] + pEtaPrev[4459];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1351] + pEtaPrev[4650];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3783] = minval;
		else
			pEta[3783] = -minval;
	}
	else
		pEta[3783] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4459] = minval;
		else
			pEta[4459] = -minval;
	}
	else
		pEta[4459] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4650] = minval;
		else
			pEta[4650] = -minval;
	}
	else
		pEta[4650] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 72     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1096] + pEtaPrev[3784];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1320] + pEtaPrev[4465];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1352] + pEtaPrev[4656];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3784] = minval;
		else
			pEta[3784] = -minval;
	}
	else
		pEta[3784] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4465] = minval;
		else
			pEta[4465] = -minval;
	}
	else
		pEta[4465] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4656] = minval;
		else
			pEta[4656] = -minval;
	}
	else
		pEta[4656] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 73     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1097] + pEtaPrev[3785];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1321] + pEtaPrev[4471];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1353] + pEtaPrev[4662];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3785] = minval;
		else
			pEta[3785] = -minval;
	}
	else
		pEta[3785] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4471] = minval;
		else
			pEta[4471] = -minval;
	}
	else
		pEta[4471] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4662] = minval;
		else
			pEta[4662] = -minval;
	}
	else
		pEta[4662] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 74     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1098] + pEtaPrev[3786];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1322] + pEtaPrev[4477];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1354] + pEtaPrev[4668];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3786] = minval;
		else
			pEta[3786] = -minval;
	}
	else
		pEta[3786] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4477] = minval;
		else
			pEta[4477] = -minval;
	}
	else
		pEta[4477] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4668] = minval;
		else
			pEta[4668] = -minval;
	}
	else
		pEta[4668] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 75     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1099] + pEtaPrev[3787];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1323] + pEtaPrev[4483];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1355] + pEtaPrev[4674];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3787] = minval;
		else
			pEta[3787] = -minval;
	}
	else
		pEta[3787] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4483] = minval;
		else
			pEta[4483] = -minval;
	}
	else
		pEta[4483] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4674] = minval;
		else
			pEta[4674] = -minval;
	}
	else
		pEta[4674] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 76     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1100] + pEtaPrev[3788];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1324] + pEtaPrev[4489];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1356] + pEtaPrev[4680];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3788] = minval;
		else
			pEta[3788] = -minval;
	}
	else
		pEta[3788] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4489] = minval;
		else
			pEta[4489] = -minval;
	}
	else
		pEta[4489] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4680] = minval;
		else
			pEta[4680] = -minval;
	}
	else
		pEta[4680] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 77     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1101] + pEtaPrev[3789];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1325] + pEtaPrev[4495];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1357] + pEtaPrev[4686];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3789] = minval;
		else
			pEta[3789] = -minval;
	}
	else
		pEta[3789] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4495] = minval;
		else
			pEta[4495] = -minval;
	}
	else
		pEta[4495] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4686] = minval;
		else
			pEta[4686] = -minval;
	}
	else
		pEta[4686] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 78     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1102] + pEtaPrev[3790];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1326] + pEtaPrev[4501];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1358] + pEtaPrev[4692];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3790] = minval;
		else
			pEta[3790] = -minval;
	}
	else
		pEta[3790] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4501] = minval;
		else
			pEta[4501] = -minval;
	}
	else
		pEta[4501] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4692] = minval;
		else
			pEta[4692] = -minval;
	}
	else
		pEta[4692] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 79     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1103] + pEtaPrev[3791];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1327] + pEtaPrev[4507];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1359] + pEtaPrev[4698];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3791] = minval;
		else
			pEta[3791] = -minval;
	}
	else
		pEta[3791] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4507] = minval;
		else
			pEta[4507] = -minval;
	}
	else
		pEta[4507] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4698] = minval;
		else
			pEta[4698] = -minval;
	}
	else
		pEta[4698] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 80     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1104] + pEtaPrev[3792];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1328] + pEtaPrev[4513];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1360] + pEtaPrev[4704];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3792] = minval;
		else
			pEta[3792] = -minval;
	}
	else
		pEta[3792] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4513] = minval;
		else
			pEta[4513] = -minval;
	}
	else
		pEta[4513] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4704] = minval;
		else
			pEta[4704] = -minval;
	}
	else
		pEta[4704] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 81     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1105] + pEtaPrev[3793];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1329] + pEtaPrev[4519];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1361] + pEtaPrev[4710];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3793] = minval;
		else
			pEta[3793] = -minval;
	}
	else
		pEta[3793] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4519] = minval;
		else
			pEta[4519] = -minval;
	}
	else
		pEta[4519] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4710] = minval;
		else
			pEta[4710] = -minval;
	}
	else
		pEta[4710] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 82     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1106] + pEtaPrev[3794];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1330] + pEtaPrev[4525];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1362] + pEtaPrev[4716];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3794] = minval;
		else
			pEta[3794] = -minval;
	}
	else
		pEta[3794] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4525] = minval;
		else
			pEta[4525] = -minval;
	}
	else
		pEta[4525] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4716] = minval;
		else
			pEta[4716] = -minval;
	}
	else
		pEta[4716] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 83     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1107] + pEtaPrev[3795];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1331] + pEtaPrev[4531];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1363] + pEtaPrev[4722];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3795] = minval;
		else
			pEta[3795] = -minval;
	}
	else
		pEta[3795] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4531] = minval;
		else
			pEta[4531] = -minval;
	}
	else
		pEta[4531] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4722] = minval;
		else
			pEta[4722] = -minval;
	}
	else
		pEta[4722] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 84     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1108] + pEtaPrev[3796];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1332] + pEtaPrev[4537];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1364] + pEtaPrev[4728];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3796] = minval;
		else
			pEta[3796] = -minval;
	}
	else
		pEta[3796] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4537] = minval;
		else
			pEta[4537] = -minval;
	}
	else
		pEta[4537] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4728] = minval;
		else
			pEta[4728] = -minval;
	}
	else
		pEta[4728] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 85     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1109] + pEtaPrev[3797];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1333] + pEtaPrev[4543];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1365] + pEtaPrev[4734];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3797] = minval;
		else
			pEta[3797] = -minval;
	}
	else
		pEta[3797] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4543] = minval;
		else
			pEta[4543] = -minval;
	}
	else
		pEta[4543] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4734] = minval;
		else
			pEta[4734] = -minval;
	}
	else
		pEta[4734] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 86     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1110] + pEtaPrev[3798];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1334] + pEtaPrev[4549];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1366] + pEtaPrev[4740];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3798] = minval;
		else
			pEta[3798] = -minval;
	}
	else
		pEta[3798] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4549] = minval;
		else
			pEta[4549] = -minval;
	}
	else
		pEta[4549] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4740] = minval;
		else
			pEta[4740] = -minval;
	}
	else
		pEta[4740] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 87     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1111] + pEtaPrev[3799];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1335] + pEtaPrev[4555];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1367] + pEtaPrev[4746];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3799] = minval;
		else
			pEta[3799] = -minval;
	}
	else
		pEta[3799] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4555] = minval;
		else
			pEta[4555] = -minval;
	}
	else
		pEta[4555] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4746] = minval;
		else
			pEta[4746] = -minval;
	}
	else
		pEta[4746] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 88     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1112] + pEtaPrev[3800];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1336] + pEtaPrev[4561];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1368] + pEtaPrev[4752];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3800] = minval;
		else
			pEta[3800] = -minval;
	}
	else
		pEta[3800] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4561] = minval;
		else
			pEta[4561] = -minval;
	}
	else
		pEta[4561] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4752] = minval;
		else
			pEta[4752] = -minval;
	}
	else
		pEta[4752] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 89     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1113] + pEtaPrev[3801];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1337] + pEtaPrev[4567];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1369] + pEtaPrev[4758];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3801] = minval;
		else
			pEta[3801] = -minval;
	}
	else
		pEta[3801] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4567] = minval;
		else
			pEta[4567] = -minval;
	}
	else
		pEta[4567] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4758] = minval;
		else
			pEta[4758] = -minval;
	}
	else
		pEta[4758] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 90     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1114] + pEtaPrev[3802];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1338] + pEtaPrev[4573];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1370] + pEtaPrev[4764];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3802] = minval;
		else
			pEta[3802] = -minval;
	}
	else
		pEta[3802] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4573] = minval;
		else
			pEta[4573] = -minval;
	}
	else
		pEta[4573] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4764] = minval;
		else
			pEta[4764] = -minval;
	}
	else
		pEta[4764] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 91     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1115] + pEtaPrev[3803];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1339] + pEtaPrev[4579];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1371] + pEtaPrev[4770];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3803] = minval;
		else
			pEta[3803] = -minval;
	}
	else
		pEta[3803] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4579] = minval;
		else
			pEta[4579] = -minval;
	}
	else
		pEta[4579] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4770] = minval;
		else
			pEta[4770] = -minval;
	}
	else
		pEta[4770] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 92     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1116] + pEtaPrev[3804];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1340] + pEtaPrev[4585];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1372] + pEtaPrev[4776];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3804] = minval;
		else
			pEta[3804] = -minval;
	}
	else
		pEta[3804] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4585] = minval;
		else
			pEta[4585] = -minval;
	}
	else
		pEta[4585] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4776] = minval;
		else
			pEta[4776] = -minval;
	}
	else
		pEta[4776] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 93     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1117] + pEtaPrev[3805];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1341] + pEtaPrev[4591];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1373] + pEtaPrev[4782];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3805] = minval;
		else
			pEta[3805] = -minval;
	}
	else
		pEta[3805] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4591] = minval;
		else
			pEta[4591] = -minval;
	}
	else
		pEta[4591] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4782] = minval;
		else
			pEta[4782] = -minval;
	}
	else
		pEta[4782] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 94     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1118] + pEtaPrev[3806];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1342] + pEtaPrev[4597];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1374] + pEtaPrev[4788];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3806] = minval;
		else
			pEta[3806] = -minval;
	}
	else
		pEta[3806] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4597] = minval;
		else
			pEta[4597] = -minval;
	}
	else
		pEta[4597] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4788] = minval;
		else
			pEta[4788] = -minval;
	}
	else
		pEta[4788] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 95     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1119] + pEtaPrev[3807];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1343] + pEtaPrev[4603];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1375] + pEtaPrev[4794];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3807] = minval;
		else
			pEta[3807] = -minval;
	}
	else
		pEta[3807] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4603] = minval;
		else
			pEta[4603] = -minval;
	}
	else
		pEta[4603] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4794] = minval;
		else
			pEta[4794] = -minval;
	}
	else
		pEta[4794] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 96     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1120] + pEtaPrev[3808];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1344] + pEtaPrev[4609];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1376] + pEtaPrev[4801];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3808] = minval;
		else
			pEta[3808] = -minval;
	}
	else
		pEta[3808] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4609] = minval;
		else
			pEta[4609] = -minval;
	}
	else
		pEta[4609] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4801] = minval;
		else
			pEta[4801] = -minval;
	}
	else
		pEta[4801] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 97     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1121] + pEtaPrev[3809];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1345] + pEtaPrev[4615];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1377] + pEtaPrev[4807];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3809] = minval;
		else
			pEta[3809] = -minval;
	}
	else
		pEta[3809] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4615] = minval;
		else
			pEta[4615] = -minval;
	}
	else
		pEta[4615] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4807] = minval;
		else
			pEta[4807] = -minval;
	}
	else
		pEta[4807] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 98     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1122] + pEtaPrev[3810];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1346] + pEtaPrev[4621];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1378] + pEtaPrev[4813];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3810] = minval;
		else
			pEta[3810] = -minval;
	}
	else
		pEta[3810] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4621] = minval;
		else
			pEta[4621] = -minval;
	}
	else
		pEta[4621] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4813] = minval;
		else
			pEta[4813] = -minval;
	}
	else
		pEta[4813] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 99     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1123] + pEtaPrev[3811];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1347] + pEtaPrev[4627];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1379] + pEtaPrev[4819];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3811] = minval;
		else
			pEta[3811] = -minval;
	}
	else
		pEta[3811] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4627] = minval;
		else
			pEta[4627] = -minval;
	}
	else
		pEta[4627] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4819] = minval;
		else
			pEta[4819] = -minval;
	}
	else
		pEta[4819] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 100     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1124] + pEtaPrev[3812];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1348] + pEtaPrev[4633];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1380] + pEtaPrev[4825];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3812] = minval;
		else
			pEta[3812] = -minval;
	}
	else
		pEta[3812] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4633] = minval;
		else
			pEta[4633] = -minval;
	}
	else
		pEta[4633] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4825] = minval;
		else
			pEta[4825] = -minval;
	}
	else
		pEta[4825] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 101     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1125] + pEtaPrev[3813];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1349] + pEtaPrev[4639];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1381] + pEtaPrev[4831];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3813] = minval;
		else
			pEta[3813] = -minval;
	}
	else
		pEta[3813] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4639] = minval;
		else
			pEta[4639] = -minval;
	}
	else
		pEta[4639] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4831] = minval;
		else
			pEta[4831] = -minval;
	}
	else
		pEta[4831] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 102     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1126] + pEtaPrev[3814];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1350] + pEtaPrev[4645];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1382] + pEtaPrev[4837];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3814] = minval;
		else
			pEta[3814] = -minval;
	}
	else
		pEta[3814] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4645] = minval;
		else
			pEta[4645] = -minval;
	}
	else
		pEta[4645] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4837] = minval;
		else
			pEta[4837] = -minval;
	}
	else
		pEta[4837] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 103     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1127] + pEtaPrev[3815];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1351] + pEtaPrev[4651];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1383] + pEtaPrev[4843];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3815] = minval;
		else
			pEta[3815] = -minval;
	}
	else
		pEta[3815] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4651] = minval;
		else
			pEta[4651] = -minval;
	}
	else
		pEta[4651] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4843] = minval;
		else
			pEta[4843] = -minval;
	}
	else
		pEta[4843] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 104     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1128] + pEtaPrev[3816];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1352] + pEtaPrev[4657];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1384] + pEtaPrev[4849];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3816] = minval;
		else
			pEta[3816] = -minval;
	}
	else
		pEta[3816] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4657] = minval;
		else
			pEta[4657] = -minval;
	}
	else
		pEta[4657] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4849] = minval;
		else
			pEta[4849] = -minval;
	}
	else
		pEta[4849] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 105     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1129] + pEtaPrev[3817];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1353] + pEtaPrev[4663];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1385] + pEtaPrev[4855];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3817] = minval;
		else
			pEta[3817] = -minval;
	}
	else
		pEta[3817] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4663] = minval;
		else
			pEta[4663] = -minval;
	}
	else
		pEta[4663] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4855] = minval;
		else
			pEta[4855] = -minval;
	}
	else
		pEta[4855] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 106     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1130] + pEtaPrev[3818];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1354] + pEtaPrev[4669];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1386] + pEtaPrev[4861];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3818] = minval;
		else
			pEta[3818] = -minval;
	}
	else
		pEta[3818] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4669] = minval;
		else
			pEta[4669] = -minval;
	}
	else
		pEta[4669] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4861] = minval;
		else
			pEta[4861] = -minval;
	}
	else
		pEta[4861] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 107     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1131] + pEtaPrev[3819];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1355] + pEtaPrev[4675];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1387] + pEtaPrev[4867];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3819] = minval;
		else
			pEta[3819] = -minval;
	}
	else
		pEta[3819] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4675] = minval;
		else
			pEta[4675] = -minval;
	}
	else
		pEta[4675] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4867] = minval;
		else
			pEta[4867] = -minval;
	}
	else
		pEta[4867] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 108     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1132] + pEtaPrev[3820];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1356] + pEtaPrev[4681];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1388] + pEtaPrev[4873];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3820] = minval;
		else
			pEta[3820] = -minval;
	}
	else
		pEta[3820] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4681] = minval;
		else
			pEta[4681] = -minval;
	}
	else
		pEta[4681] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4873] = minval;
		else
			pEta[4873] = -minval;
	}
	else
		pEta[4873] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 109     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1133] + pEtaPrev[3821];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1357] + pEtaPrev[4687];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1389] + pEtaPrev[4879];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3821] = minval;
		else
			pEta[3821] = -minval;
	}
	else
		pEta[3821] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4687] = minval;
		else
			pEta[4687] = -minval;
	}
	else
		pEta[4687] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4879] = minval;
		else
			pEta[4879] = -minval;
	}
	else
		pEta[4879] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 110     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1134] + pEtaPrev[3822];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1358] + pEtaPrev[4693];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1390] + pEtaPrev[4885];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3822] = minval;
		else
			pEta[3822] = -minval;
	}
	else
		pEta[3822] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4693] = minval;
		else
			pEta[4693] = -minval;
	}
	else
		pEta[4693] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4885] = minval;
		else
			pEta[4885] = -minval;
	}
	else
		pEta[4885] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 111     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1135] + pEtaPrev[3823];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1359] + pEtaPrev[4699];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1391] + pEtaPrev[4891];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3823] = minval;
		else
			pEta[3823] = -minval;
	}
	else
		pEta[3823] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4699] = minval;
		else
			pEta[4699] = -minval;
	}
	else
		pEta[4699] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4891] = minval;
		else
			pEta[4891] = -minval;
	}
	else
		pEta[4891] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 112     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1136] + pEtaPrev[3824];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1360] + pEtaPrev[4705];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1392] + pEtaPrev[4897];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3824] = minval;
		else
			pEta[3824] = -minval;
	}
	else
		pEta[3824] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4705] = minval;
		else
			pEta[4705] = -minval;
	}
	else
		pEta[4705] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4897] = minval;
		else
			pEta[4897] = -minval;
	}
	else
		pEta[4897] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 113     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1137] + pEtaPrev[3825];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1361] + pEtaPrev[4711];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1393] + pEtaPrev[4903];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3825] = minval;
		else
			pEta[3825] = -minval;
	}
	else
		pEta[3825] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4711] = minval;
		else
			pEta[4711] = -minval;
	}
	else
		pEta[4711] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4903] = minval;
		else
			pEta[4903] = -minval;
	}
	else
		pEta[4903] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 114     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1138] + pEtaPrev[3826];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1362] + pEtaPrev[4717];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1394] + pEtaPrev[4909];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3826] = minval;
		else
			pEta[3826] = -minval;
	}
	else
		pEta[3826] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4717] = minval;
		else
			pEta[4717] = -minval;
	}
	else
		pEta[4717] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4909] = minval;
		else
			pEta[4909] = -minval;
	}
	else
		pEta[4909] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 115     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1139] + pEtaPrev[3827];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1363] + pEtaPrev[4723];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1395] + pEtaPrev[4915];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3827] = minval;
		else
			pEta[3827] = -minval;
	}
	else
		pEta[3827] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4723] = minval;
		else
			pEta[4723] = -minval;
	}
	else
		pEta[4723] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4915] = minval;
		else
			pEta[4915] = -minval;
	}
	else
		pEta[4915] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 116     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1140] + pEtaPrev[3828];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1364] + pEtaPrev[4729];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1396] + pEtaPrev[4921];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3828] = minval;
		else
			pEta[3828] = -minval;
	}
	else
		pEta[3828] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4729] = minval;
		else
			pEta[4729] = -minval;
	}
	else
		pEta[4729] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4921] = minval;
		else
			pEta[4921] = -minval;
	}
	else
		pEta[4921] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 117     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1141] + pEtaPrev[3829];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1365] + pEtaPrev[4735];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1397] + pEtaPrev[4927];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3829] = minval;
		else
			pEta[3829] = -minval;
	}
	else
		pEta[3829] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4735] = minval;
		else
			pEta[4735] = -minval;
	}
	else
		pEta[4735] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4927] = minval;
		else
			pEta[4927] = -minval;
	}
	else
		pEta[4927] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 118     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1142] + pEtaPrev[3830];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1366] + pEtaPrev[4741];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1398] + pEtaPrev[4933];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3830] = minval;
		else
			pEta[3830] = -minval;
	}
	else
		pEta[3830] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4741] = minval;
		else
			pEta[4741] = -minval;
	}
	else
		pEta[4741] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4933] = minval;
		else
			pEta[4933] = -minval;
	}
	else
		pEta[4933] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 119     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1143] + pEtaPrev[3831];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1367] + pEtaPrev[4747];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1399] + pEtaPrev[4939];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3831] = minval;
		else
			pEta[3831] = -minval;
	}
	else
		pEta[3831] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4747] = minval;
		else
			pEta[4747] = -minval;
	}
	else
		pEta[4747] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4939] = minval;
		else
			pEta[4939] = -minval;
	}
	else
		pEta[4939] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 120     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1144] + pEtaPrev[3832];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1368] + pEtaPrev[4753];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1400] + pEtaPrev[4945];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3832] = minval;
		else
			pEta[3832] = -minval;
	}
	else
		pEta[3832] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4753] = minval;
		else
			pEta[4753] = -minval;
	}
	else
		pEta[4753] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4945] = minval;
		else
			pEta[4945] = -minval;
	}
	else
		pEta[4945] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 121     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1145] + pEtaPrev[3833];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1369] + pEtaPrev[4759];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1401] + pEtaPrev[4951];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3833] = minval;
		else
			pEta[3833] = -minval;
	}
	else
		pEta[3833] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4759] = minval;
		else
			pEta[4759] = -minval;
	}
	else
		pEta[4759] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4951] = minval;
		else
			pEta[4951] = -minval;
	}
	else
		pEta[4951] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 122     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1146] + pEtaPrev[3834];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1370] + pEtaPrev[4765];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1402] + pEtaPrev[4957];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3834] = minval;
		else
			pEta[3834] = -minval;
	}
	else
		pEta[3834] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4765] = minval;
		else
			pEta[4765] = -minval;
	}
	else
		pEta[4765] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4957] = minval;
		else
			pEta[4957] = -minval;
	}
	else
		pEta[4957] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 123     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1147] + pEtaPrev[3835];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1371] + pEtaPrev[4771];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1403] + pEtaPrev[4963];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3835] = minval;
		else
			pEta[3835] = -minval;
	}
	else
		pEta[3835] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4771] = minval;
		else
			pEta[4771] = -minval;
	}
	else
		pEta[4771] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4963] = minval;
		else
			pEta[4963] = -minval;
	}
	else
		pEta[4963] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 124     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1148] + pEtaPrev[3836];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1372] + pEtaPrev[4777];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1404] + pEtaPrev[4969];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3836] = minval;
		else
			pEta[3836] = -minval;
	}
	else
		pEta[3836] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4777] = minval;
		else
			pEta[4777] = -minval;
	}
	else
		pEta[4777] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4969] = minval;
		else
			pEta[4969] = -minval;
	}
	else
		pEta[4969] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 125     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1149] + pEtaPrev[3837];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1373] + pEtaPrev[4783];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1405] + pEtaPrev[4975];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3837] = minval;
		else
			pEta[3837] = -minval;
	}
	else
		pEta[3837] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4783] = minval;
		else
			pEta[4783] = -minval;
	}
	else
		pEta[4783] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4975] = minval;
		else
			pEta[4975] = -minval;
	}
	else
		pEta[4975] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 126     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1150] + pEtaPrev[3838];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1374] + pEtaPrev[4789];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1406] + pEtaPrev[4981];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3838] = minval;
		else
			pEta[3838] = -minval;
	}
	else
		pEta[3838] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4789] = minval;
		else
			pEta[4789] = -minval;
	}
	else
		pEta[4789] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4981] = minval;
		else
			pEta[4981] = -minval;
	}
	else
		pEta[4981] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 127     nLenNset loop = 3  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1151] + pEtaPrev[3839];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[1375] + pEtaPrev[4795];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[1407] + pEtaPrev[4987];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3839] = minval;
		else
			pEta[3839] = -minval;
	}
	else
		pEta[3839] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[4795] = minval;
		else
			pEta[4795] = -minval;
	}
	else
		pEta[4795] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[4987] = minval;
		else
			pEta[4987] = -minval;
	}
	else
		pEta[4987] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 128     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[4] + pEtaPrev[16];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[51] + pEtaPrev[204];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[71] + pEtaPrev[284];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[128] + pEtaPrev[512];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[258] + pEtaPrev[1032];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[315] + pEtaPrev[1260];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[327] + pEtaPrev[1308];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[384] + pEtaPrev[1536];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[515] + pEtaPrev[2060];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[566] + pEtaPrev[2264];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[579] + pEtaPrev[2316];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[640] + pEtaPrev[2560];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[768] + pEtaPrev[3072];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[896] + pEtaPrev[3328];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1152] + pEtaPrev[3840];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1302] + pEtaPrev[4358];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1312] + pEtaPrev[4418];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1370] + pEtaPrev[4766];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[16] = minval;
		else
			pEta[16] = -minval;
	}
	else
		pEta[16] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[204] = minval;
		else
			pEta[204] = -minval;
	}
	else
		pEta[204] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[284] = minval;
		else
			pEta[284] = -minval;
	}
	else
		pEta[284] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[512] = minval;
		else
			pEta[512] = -minval;
	}
	else
		pEta[512] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1032] = minval;
		else
			pEta[1032] = -minval;
	}
	else
		pEta[1032] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1260] = minval;
		else
			pEta[1260] = -minval;
	}
	else
		pEta[1260] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1308] = minval;
		else
			pEta[1308] = -minval;
	}
	else
		pEta[1308] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1536] = minval;
		else
			pEta[1536] = -minval;
	}
	else
		pEta[1536] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2060] = minval;
		else
			pEta[2060] = -minval;
	}
	else
		pEta[2060] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2264] = minval;
		else
			pEta[2264] = -minval;
	}
	else
		pEta[2264] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2316] = minval;
		else
			pEta[2316] = -minval;
	}
	else
		pEta[2316] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2560] = minval;
		else
			pEta[2560] = -minval;
	}
	else
		pEta[2560] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3072] = minval;
		else
			pEta[3072] = -minval;
	}
	else
		pEta[3072] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3328] = minval;
		else
			pEta[3328] = -minval;
	}
	else
		pEta[3328] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3840] = minval;
		else
			pEta[3840] = -minval;
	}
	else
		pEta[3840] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4358] = minval;
		else
			pEta[4358] = -minval;
	}
	else
		pEta[4358] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4418] = minval;
		else
			pEta[4418] = -minval;
	}
	else
		pEta[4418] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4766] = minval;
		else
			pEta[4766] = -minval;
	}
	else
		pEta[4766] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 129     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[5] + pEtaPrev[20];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[52] + pEtaPrev[208];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[72] + pEtaPrev[288];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[129] + pEtaPrev[516];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[259] + pEtaPrev[1036];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[316] + pEtaPrev[1264];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[328] + pEtaPrev[1312];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[385] + pEtaPrev[1540];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[516] + pEtaPrev[2064];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[567] + pEtaPrev[2268];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[580] + pEtaPrev[2320];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[641] + pEtaPrev[2564];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[769] + pEtaPrev[3074];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[897] + pEtaPrev[3331];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1153] + pEtaPrev[3843];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1303] + pEtaPrev[4364];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1313] + pEtaPrev[4424];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1371] + pEtaPrev[4772];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[20] = minval;
		else
			pEta[20] = -minval;
	}
	else
		pEta[20] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[208] = minval;
		else
			pEta[208] = -minval;
	}
	else
		pEta[208] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[288] = minval;
		else
			pEta[288] = -minval;
	}
	else
		pEta[288] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[516] = minval;
		else
			pEta[516] = -minval;
	}
	else
		pEta[516] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1036] = minval;
		else
			pEta[1036] = -minval;
	}
	else
		pEta[1036] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1264] = minval;
		else
			pEta[1264] = -minval;
	}
	else
		pEta[1264] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1312] = minval;
		else
			pEta[1312] = -minval;
	}
	else
		pEta[1312] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1540] = minval;
		else
			pEta[1540] = -minval;
	}
	else
		pEta[1540] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2064] = minval;
		else
			pEta[2064] = -minval;
	}
	else
		pEta[2064] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2268] = minval;
		else
			pEta[2268] = -minval;
	}
	else
		pEta[2268] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2320] = minval;
		else
			pEta[2320] = -minval;
	}
	else
		pEta[2320] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2564] = minval;
		else
			pEta[2564] = -minval;
	}
	else
		pEta[2564] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3074] = minval;
		else
			pEta[3074] = -minval;
	}
	else
		pEta[3074] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3331] = minval;
		else
			pEta[3331] = -minval;
	}
	else
		pEta[3331] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3843] = minval;
		else
			pEta[3843] = -minval;
	}
	else
		pEta[3843] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4364] = minval;
		else
			pEta[4364] = -minval;
	}
	else
		pEta[4364] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4424] = minval;
		else
			pEta[4424] = -minval;
	}
	else
		pEta[4424] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4772] = minval;
		else
			pEta[4772] = -minval;
	}
	else
		pEta[4772] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 130     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[6] + pEtaPrev[24];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[53] + pEtaPrev[212];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[73] + pEtaPrev[292];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[130] + pEtaPrev[520];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[260] + pEtaPrev[1040];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[317] + pEtaPrev[1268];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[329] + pEtaPrev[1316];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[386] + pEtaPrev[1544];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[517] + pEtaPrev[2068];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[568] + pEtaPrev[2272];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[581] + pEtaPrev[2324];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[642] + pEtaPrev[2568];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[770] + pEtaPrev[3076];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[898] + pEtaPrev[3334];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1154] + pEtaPrev[3846];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1304] + pEtaPrev[4370];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1314] + pEtaPrev[4430];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1372] + pEtaPrev[4778];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[24] = minval;
		else
			pEta[24] = -minval;
	}
	else
		pEta[24] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[212] = minval;
		else
			pEta[212] = -minval;
	}
	else
		pEta[212] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[292] = minval;
		else
			pEta[292] = -minval;
	}
	else
		pEta[292] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[520] = minval;
		else
			pEta[520] = -minval;
	}
	else
		pEta[520] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1040] = minval;
		else
			pEta[1040] = -minval;
	}
	else
		pEta[1040] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1268] = minval;
		else
			pEta[1268] = -minval;
	}
	else
		pEta[1268] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1316] = minval;
		else
			pEta[1316] = -minval;
	}
	else
		pEta[1316] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1544] = minval;
		else
			pEta[1544] = -minval;
	}
	else
		pEta[1544] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2068] = minval;
		else
			pEta[2068] = -minval;
	}
	else
		pEta[2068] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2272] = minval;
		else
			pEta[2272] = -minval;
	}
	else
		pEta[2272] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2324] = minval;
		else
			pEta[2324] = -minval;
	}
	else
		pEta[2324] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2568] = minval;
		else
			pEta[2568] = -minval;
	}
	else
		pEta[2568] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3076] = minval;
		else
			pEta[3076] = -minval;
	}
	else
		pEta[3076] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3334] = minval;
		else
			pEta[3334] = -minval;
	}
	else
		pEta[3334] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3846] = minval;
		else
			pEta[3846] = -minval;
	}
	else
		pEta[3846] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4370] = minval;
		else
			pEta[4370] = -minval;
	}
	else
		pEta[4370] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4430] = minval;
		else
			pEta[4430] = -minval;
	}
	else
		pEta[4430] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4778] = minval;
		else
			pEta[4778] = -minval;
	}
	else
		pEta[4778] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 131     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[7] + pEtaPrev[28];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[54] + pEtaPrev[216];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[74] + pEtaPrev[296];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[131] + pEtaPrev[524];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[261] + pEtaPrev[1044];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[318] + pEtaPrev[1272];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[330] + pEtaPrev[1320];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[387] + pEtaPrev[1548];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[518] + pEtaPrev[2072];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[569] + pEtaPrev[2276];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[582] + pEtaPrev[2328];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[643] + pEtaPrev[2572];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[771] + pEtaPrev[3078];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[899] + pEtaPrev[3337];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1155] + pEtaPrev[3849];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1305] + pEtaPrev[4376];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1315] + pEtaPrev[4436];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1373] + pEtaPrev[4784];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[28] = minval;
		else
			pEta[28] = -minval;
	}
	else
		pEta[28] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[216] = minval;
		else
			pEta[216] = -minval;
	}
	else
		pEta[216] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[296] = minval;
		else
			pEta[296] = -minval;
	}
	else
		pEta[296] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[524] = minval;
		else
			pEta[524] = -minval;
	}
	else
		pEta[524] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1044] = minval;
		else
			pEta[1044] = -minval;
	}
	else
		pEta[1044] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1272] = minval;
		else
			pEta[1272] = -minval;
	}
	else
		pEta[1272] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1320] = minval;
		else
			pEta[1320] = -minval;
	}
	else
		pEta[1320] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1548] = minval;
		else
			pEta[1548] = -minval;
	}
	else
		pEta[1548] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2072] = minval;
		else
			pEta[2072] = -minval;
	}
	else
		pEta[2072] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2276] = minval;
		else
			pEta[2276] = -minval;
	}
	else
		pEta[2276] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2328] = minval;
		else
			pEta[2328] = -minval;
	}
	else
		pEta[2328] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2572] = minval;
		else
			pEta[2572] = -minval;
	}
	else
		pEta[2572] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3078] = minval;
		else
			pEta[3078] = -minval;
	}
	else
		pEta[3078] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3337] = minval;
		else
			pEta[3337] = -minval;
	}
	else
		pEta[3337] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3849] = minval;
		else
			pEta[3849] = -minval;
	}
	else
		pEta[3849] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4376] = minval;
		else
			pEta[4376] = -minval;
	}
	else
		pEta[4376] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4436] = minval;
		else
			pEta[4436] = -minval;
	}
	else
		pEta[4436] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4784] = minval;
		else
			pEta[4784] = -minval;
	}
	else
		pEta[4784] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 132     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[8] + pEtaPrev[32];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[55] + pEtaPrev[220];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[75] + pEtaPrev[300];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[132] + pEtaPrev[528];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[262] + pEtaPrev[1048];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[319] + pEtaPrev[1276];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[331] + pEtaPrev[1324];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[388] + pEtaPrev[1552];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[519] + pEtaPrev[2076];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[570] + pEtaPrev[2280];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[583] + pEtaPrev[2332];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[644] + pEtaPrev[2576];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[772] + pEtaPrev[3080];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[900] + pEtaPrev[3340];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1156] + pEtaPrev[3852];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1306] + pEtaPrev[4382];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1316] + pEtaPrev[4442];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1374] + pEtaPrev[4790];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[32] = minval;
		else
			pEta[32] = -minval;
	}
	else
		pEta[32] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[220] = minval;
		else
			pEta[220] = -minval;
	}
	else
		pEta[220] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[300] = minval;
		else
			pEta[300] = -minval;
	}
	else
		pEta[300] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[528] = minval;
		else
			pEta[528] = -minval;
	}
	else
		pEta[528] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1048] = minval;
		else
			pEta[1048] = -minval;
	}
	else
		pEta[1048] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1276] = minval;
		else
			pEta[1276] = -minval;
	}
	else
		pEta[1276] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1324] = minval;
		else
			pEta[1324] = -minval;
	}
	else
		pEta[1324] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1552] = minval;
		else
			pEta[1552] = -minval;
	}
	else
		pEta[1552] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2076] = minval;
		else
			pEta[2076] = -minval;
	}
	else
		pEta[2076] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2280] = minval;
		else
			pEta[2280] = -minval;
	}
	else
		pEta[2280] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2332] = minval;
		else
			pEta[2332] = -minval;
	}
	else
		pEta[2332] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2576] = minval;
		else
			pEta[2576] = -minval;
	}
	else
		pEta[2576] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3080] = minval;
		else
			pEta[3080] = -minval;
	}
	else
		pEta[3080] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3340] = minval;
		else
			pEta[3340] = -minval;
	}
	else
		pEta[3340] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3852] = minval;
		else
			pEta[3852] = -minval;
	}
	else
		pEta[3852] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4382] = minval;
		else
			pEta[4382] = -minval;
	}
	else
		pEta[4382] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4442] = minval;
		else
			pEta[4442] = -minval;
	}
	else
		pEta[4442] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4790] = minval;
		else
			pEta[4790] = -minval;
	}
	else
		pEta[4790] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 133     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[9] + pEtaPrev[36];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[56] + pEtaPrev[224];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[76] + pEtaPrev[304];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[133] + pEtaPrev[532];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[263] + pEtaPrev[1052];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[288] + pEtaPrev[1152];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[332] + pEtaPrev[1328];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[389] + pEtaPrev[1556];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[520] + pEtaPrev[2080];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[571] + pEtaPrev[2284];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[584] + pEtaPrev[2336];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[645] + pEtaPrev[2580];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[773] + pEtaPrev[3082];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[901] + pEtaPrev[3343];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1157] + pEtaPrev[3855];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1307] + pEtaPrev[4388];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1317] + pEtaPrev[4448];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1375] + pEtaPrev[4796];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[36] = minval;
		else
			pEta[36] = -minval;
	}
	else
		pEta[36] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[224] = minval;
		else
			pEta[224] = -minval;
	}
	else
		pEta[224] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[304] = minval;
		else
			pEta[304] = -minval;
	}
	else
		pEta[304] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[532] = minval;
		else
			pEta[532] = -minval;
	}
	else
		pEta[532] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1052] = minval;
		else
			pEta[1052] = -minval;
	}
	else
		pEta[1052] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1152] = minval;
		else
			pEta[1152] = -minval;
	}
	else
		pEta[1152] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1328] = minval;
		else
			pEta[1328] = -minval;
	}
	else
		pEta[1328] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1556] = minval;
		else
			pEta[1556] = -minval;
	}
	else
		pEta[1556] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2080] = minval;
		else
			pEta[2080] = -minval;
	}
	else
		pEta[2080] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2284] = minval;
		else
			pEta[2284] = -minval;
	}
	else
		pEta[2284] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2336] = minval;
		else
			pEta[2336] = -minval;
	}
	else
		pEta[2336] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2580] = minval;
		else
			pEta[2580] = -minval;
	}
	else
		pEta[2580] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3082] = minval;
		else
			pEta[3082] = -minval;
	}
	else
		pEta[3082] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3343] = minval;
		else
			pEta[3343] = -minval;
	}
	else
		pEta[3343] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3855] = minval;
		else
			pEta[3855] = -minval;
	}
	else
		pEta[3855] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4388] = minval;
		else
			pEta[4388] = -minval;
	}
	else
		pEta[4388] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4448] = minval;
		else
			pEta[4448] = -minval;
	}
	else
		pEta[4448] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4796] = minval;
		else
			pEta[4796] = -minval;
	}
	else
		pEta[4796] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 134     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[10] + pEtaPrev[40];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[57] + pEtaPrev[228];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[77] + pEtaPrev[308];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[134] + pEtaPrev[536];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[264] + pEtaPrev[1056];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[289] + pEtaPrev[1156];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[333] + pEtaPrev[1332];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[390] + pEtaPrev[1560];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[521] + pEtaPrev[2084];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[572] + pEtaPrev[2288];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[585] + pEtaPrev[2340];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[646] + pEtaPrev[2584];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[774] + pEtaPrev[3084];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[902] + pEtaPrev[3346];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1158] + pEtaPrev[3858];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1308] + pEtaPrev[4394];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1318] + pEtaPrev[4454];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1344] + pEtaPrev[4610];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[40] = minval;
		else
			pEta[40] = -minval;
	}
	else
		pEta[40] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[228] = minval;
		else
			pEta[228] = -minval;
	}
	else
		pEta[228] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[308] = minval;
		else
			pEta[308] = -minval;
	}
	else
		pEta[308] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[536] = minval;
		else
			pEta[536] = -minval;
	}
	else
		pEta[536] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1056] = minval;
		else
			pEta[1056] = -minval;
	}
	else
		pEta[1056] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1156] = minval;
		else
			pEta[1156] = -minval;
	}
	else
		pEta[1156] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1332] = minval;
		else
			pEta[1332] = -minval;
	}
	else
		pEta[1332] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1560] = minval;
		else
			pEta[1560] = -minval;
	}
	else
		pEta[1560] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2084] = minval;
		else
			pEta[2084] = -minval;
	}
	else
		pEta[2084] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2288] = minval;
		else
			pEta[2288] = -minval;
	}
	else
		pEta[2288] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2340] = minval;
		else
			pEta[2340] = -minval;
	}
	else
		pEta[2340] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2584] = minval;
		else
			pEta[2584] = -minval;
	}
	else
		pEta[2584] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3084] = minval;
		else
			pEta[3084] = -minval;
	}
	else
		pEta[3084] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3346] = minval;
		else
			pEta[3346] = -minval;
	}
	else
		pEta[3346] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3858] = minval;
		else
			pEta[3858] = -minval;
	}
	else
		pEta[3858] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4394] = minval;
		else
			pEta[4394] = -minval;
	}
	else
		pEta[4394] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4454] = minval;
		else
			pEta[4454] = -minval;
	}
	else
		pEta[4454] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4610] = minval;
		else
			pEta[4610] = -minval;
	}
	else
		pEta[4610] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 135     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[11] + pEtaPrev[44];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[58] + pEtaPrev[232];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[78] + pEtaPrev[312];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[135] + pEtaPrev[540];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[265] + pEtaPrev[1060];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[290] + pEtaPrev[1160];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[334] + pEtaPrev[1336];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[391] + pEtaPrev[1564];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[522] + pEtaPrev[2088];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[573] + pEtaPrev[2292];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[586] + pEtaPrev[2344];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[647] + pEtaPrev[2588];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[775] + pEtaPrev[3086];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[903] + pEtaPrev[3349];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1159] + pEtaPrev[3861];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1309] + pEtaPrev[4400];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1319] + pEtaPrev[4460];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1345] + pEtaPrev[4616];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[44] = minval;
		else
			pEta[44] = -minval;
	}
	else
		pEta[44] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[232] = minval;
		else
			pEta[232] = -minval;
	}
	else
		pEta[232] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[312] = minval;
		else
			pEta[312] = -minval;
	}
	else
		pEta[312] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[540] = minval;
		else
			pEta[540] = -minval;
	}
	else
		pEta[540] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1060] = minval;
		else
			pEta[1060] = -minval;
	}
	else
		pEta[1060] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1160] = minval;
		else
			pEta[1160] = -minval;
	}
	else
		pEta[1160] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1336] = minval;
		else
			pEta[1336] = -minval;
	}
	else
		pEta[1336] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1564] = minval;
		else
			pEta[1564] = -minval;
	}
	else
		pEta[1564] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2088] = minval;
		else
			pEta[2088] = -minval;
	}
	else
		pEta[2088] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2292] = minval;
		else
			pEta[2292] = -minval;
	}
	else
		pEta[2292] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2344] = minval;
		else
			pEta[2344] = -minval;
	}
	else
		pEta[2344] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2588] = minval;
		else
			pEta[2588] = -minval;
	}
	else
		pEta[2588] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3086] = minval;
		else
			pEta[3086] = -minval;
	}
	else
		pEta[3086] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3349] = minval;
		else
			pEta[3349] = -minval;
	}
	else
		pEta[3349] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3861] = minval;
		else
			pEta[3861] = -minval;
	}
	else
		pEta[3861] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4400] = minval;
		else
			pEta[4400] = -minval;
	}
	else
		pEta[4400] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4460] = minval;
		else
			pEta[4460] = -minval;
	}
	else
		pEta[4460] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4616] = minval;
		else
			pEta[4616] = -minval;
	}
	else
		pEta[4616] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 136     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[12] + pEtaPrev[48];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[59] + pEtaPrev[236];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[79] + pEtaPrev[316];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[136] + pEtaPrev[544];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[266] + pEtaPrev[1064];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[291] + pEtaPrev[1164];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[335] + pEtaPrev[1340];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[392] + pEtaPrev[1568];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[523] + pEtaPrev[2092];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[574] + pEtaPrev[2296];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[587] + pEtaPrev[2348];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[648] + pEtaPrev[2592];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[776] + pEtaPrev[3088];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[904] + pEtaPrev[3352];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1160] + pEtaPrev[3864];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1310] + pEtaPrev[4406];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1320] + pEtaPrev[4466];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1346] + pEtaPrev[4622];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[48] = minval;
		else
			pEta[48] = -minval;
	}
	else
		pEta[48] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[236] = minval;
		else
			pEta[236] = -minval;
	}
	else
		pEta[236] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[316] = minval;
		else
			pEta[316] = -minval;
	}
	else
		pEta[316] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[544] = minval;
		else
			pEta[544] = -minval;
	}
	else
		pEta[544] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1064] = minval;
		else
			pEta[1064] = -minval;
	}
	else
		pEta[1064] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1164] = minval;
		else
			pEta[1164] = -minval;
	}
	else
		pEta[1164] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1340] = minval;
		else
			pEta[1340] = -minval;
	}
	else
		pEta[1340] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1568] = minval;
		else
			pEta[1568] = -minval;
	}
	else
		pEta[1568] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2092] = minval;
		else
			pEta[2092] = -minval;
	}
	else
		pEta[2092] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2296] = minval;
		else
			pEta[2296] = -minval;
	}
	else
		pEta[2296] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2348] = minval;
		else
			pEta[2348] = -minval;
	}
	else
		pEta[2348] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2592] = minval;
		else
			pEta[2592] = -minval;
	}
	else
		pEta[2592] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3088] = minval;
		else
			pEta[3088] = -minval;
	}
	else
		pEta[3088] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3352] = minval;
		else
			pEta[3352] = -minval;
	}
	else
		pEta[3352] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3864] = minval;
		else
			pEta[3864] = -minval;
	}
	else
		pEta[3864] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4406] = minval;
		else
			pEta[4406] = -minval;
	}
	else
		pEta[4406] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4466] = minval;
		else
			pEta[4466] = -minval;
	}
	else
		pEta[4466] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4622] = minval;
		else
			pEta[4622] = -minval;
	}
	else
		pEta[4622] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 137     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[13] + pEtaPrev[52];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[60] + pEtaPrev[240];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[80] + pEtaPrev[320];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[137] + pEtaPrev[548];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[267] + pEtaPrev[1068];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[292] + pEtaPrev[1168];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[336] + pEtaPrev[1344];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[393] + pEtaPrev[1572];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[524] + pEtaPrev[2096];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[575] + pEtaPrev[2300];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[588] + pEtaPrev[2352];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[649] + pEtaPrev[2596];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[777] + pEtaPrev[3090];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[905] + pEtaPrev[3355];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1161] + pEtaPrev[3867];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1311] + pEtaPrev[4412];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1321] + pEtaPrev[4472];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1347] + pEtaPrev[4628];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[52] = minval;
		else
			pEta[52] = -minval;
	}
	else
		pEta[52] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[240] = minval;
		else
			pEta[240] = -minval;
	}
	else
		pEta[240] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[320] = minval;
		else
			pEta[320] = -minval;
	}
	else
		pEta[320] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[548] = minval;
		else
			pEta[548] = -minval;
	}
	else
		pEta[548] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1068] = minval;
		else
			pEta[1068] = -minval;
	}
	else
		pEta[1068] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1168] = minval;
		else
			pEta[1168] = -minval;
	}
	else
		pEta[1168] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1344] = minval;
		else
			pEta[1344] = -minval;
	}
	else
		pEta[1344] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1572] = minval;
		else
			pEta[1572] = -minval;
	}
	else
		pEta[1572] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2096] = minval;
		else
			pEta[2096] = -minval;
	}
	else
		pEta[2096] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2300] = minval;
		else
			pEta[2300] = -minval;
	}
	else
		pEta[2300] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2352] = minval;
		else
			pEta[2352] = -minval;
	}
	else
		pEta[2352] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2596] = minval;
		else
			pEta[2596] = -minval;
	}
	else
		pEta[2596] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3090] = minval;
		else
			pEta[3090] = -minval;
	}
	else
		pEta[3090] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3355] = minval;
		else
			pEta[3355] = -minval;
	}
	else
		pEta[3355] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3867] = minval;
		else
			pEta[3867] = -minval;
	}
	else
		pEta[3867] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4412] = minval;
		else
			pEta[4412] = -minval;
	}
	else
		pEta[4412] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4472] = minval;
		else
			pEta[4472] = -minval;
	}
	else
		pEta[4472] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4628] = minval;
		else
			pEta[4628] = -minval;
	}
	else
		pEta[4628] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 138     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[14] + pEtaPrev[56];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[61] + pEtaPrev[244];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[81] + pEtaPrev[324];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[138] + pEtaPrev[552];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[268] + pEtaPrev[1072];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[293] + pEtaPrev[1172];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[337] + pEtaPrev[1348];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[394] + pEtaPrev[1576];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[525] + pEtaPrev[2100];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[544] + pEtaPrev[2176];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[589] + pEtaPrev[2356];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[650] + pEtaPrev[2600];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[778] + pEtaPrev[3092];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[906] + pEtaPrev[3358];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1162] + pEtaPrev[3870];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1280] + pEtaPrev[4226];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1322] + pEtaPrev[4478];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1348] + pEtaPrev[4634];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[56] = minval;
		else
			pEta[56] = -minval;
	}
	else
		pEta[56] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[244] = minval;
		else
			pEta[244] = -minval;
	}
	else
		pEta[244] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[324] = minval;
		else
			pEta[324] = -minval;
	}
	else
		pEta[324] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[552] = minval;
		else
			pEta[552] = -minval;
	}
	else
		pEta[552] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1072] = minval;
		else
			pEta[1072] = -minval;
	}
	else
		pEta[1072] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1172] = minval;
		else
			pEta[1172] = -minval;
	}
	else
		pEta[1172] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1348] = minval;
		else
			pEta[1348] = -minval;
	}
	else
		pEta[1348] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1576] = minval;
		else
			pEta[1576] = -minval;
	}
	else
		pEta[1576] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2100] = minval;
		else
			pEta[2100] = -minval;
	}
	else
		pEta[2100] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2176] = minval;
		else
			pEta[2176] = -minval;
	}
	else
		pEta[2176] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2356] = minval;
		else
			pEta[2356] = -minval;
	}
	else
		pEta[2356] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2600] = minval;
		else
			pEta[2600] = -minval;
	}
	else
		pEta[2600] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3092] = minval;
		else
			pEta[3092] = -minval;
	}
	else
		pEta[3092] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3358] = minval;
		else
			pEta[3358] = -minval;
	}
	else
		pEta[3358] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3870] = minval;
		else
			pEta[3870] = -minval;
	}
	else
		pEta[3870] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4226] = minval;
		else
			pEta[4226] = -minval;
	}
	else
		pEta[4226] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4478] = minval;
		else
			pEta[4478] = -minval;
	}
	else
		pEta[4478] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4634] = minval;
		else
			pEta[4634] = -minval;
	}
	else
		pEta[4634] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 139     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[15] + pEtaPrev[60];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[62] + pEtaPrev[248];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[82] + pEtaPrev[328];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[139] + pEtaPrev[556];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[269] + pEtaPrev[1076];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[294] + pEtaPrev[1176];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[338] + pEtaPrev[1352];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[395] + pEtaPrev[1580];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[526] + pEtaPrev[2104];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[545] + pEtaPrev[2180];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[590] + pEtaPrev[2360];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[651] + pEtaPrev[2604];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[779] + pEtaPrev[3094];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[907] + pEtaPrev[3361];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1163] + pEtaPrev[3873];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1281] + pEtaPrev[4232];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1323] + pEtaPrev[4484];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1349] + pEtaPrev[4640];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[60] = minval;
		else
			pEta[60] = -minval;
	}
	else
		pEta[60] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[248] = minval;
		else
			pEta[248] = -minval;
	}
	else
		pEta[248] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[328] = minval;
		else
			pEta[328] = -minval;
	}
	else
		pEta[328] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[556] = minval;
		else
			pEta[556] = -minval;
	}
	else
		pEta[556] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1076] = minval;
		else
			pEta[1076] = -minval;
	}
	else
		pEta[1076] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1176] = minval;
		else
			pEta[1176] = -minval;
	}
	else
		pEta[1176] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1352] = minval;
		else
			pEta[1352] = -minval;
	}
	else
		pEta[1352] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1580] = minval;
		else
			pEta[1580] = -minval;
	}
	else
		pEta[1580] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2104] = minval;
		else
			pEta[2104] = -minval;
	}
	else
		pEta[2104] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2180] = minval;
		else
			pEta[2180] = -minval;
	}
	else
		pEta[2180] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2360] = minval;
		else
			pEta[2360] = -minval;
	}
	else
		pEta[2360] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2604] = minval;
		else
			pEta[2604] = -minval;
	}
	else
		pEta[2604] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3094] = minval;
		else
			pEta[3094] = -minval;
	}
	else
		pEta[3094] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3361] = minval;
		else
			pEta[3361] = -minval;
	}
	else
		pEta[3361] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3873] = minval;
		else
			pEta[3873] = -minval;
	}
	else
		pEta[3873] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4232] = minval;
		else
			pEta[4232] = -minval;
	}
	else
		pEta[4232] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4484] = minval;
		else
			pEta[4484] = -minval;
	}
	else
		pEta[4484] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4640] = minval;
		else
			pEta[4640] = -minval;
	}
	else
		pEta[4640] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 140     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[16] + pEtaPrev[64];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[63] + pEtaPrev[252];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[83] + pEtaPrev[332];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[140] + pEtaPrev[560];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[270] + pEtaPrev[1080];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[295] + pEtaPrev[1180];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[339] + pEtaPrev[1356];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[396] + pEtaPrev[1584];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[527] + pEtaPrev[2108];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[546] + pEtaPrev[2184];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[591] + pEtaPrev[2364];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[652] + pEtaPrev[2608];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[780] + pEtaPrev[3096];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[908] + pEtaPrev[3364];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1164] + pEtaPrev[3876];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1282] + pEtaPrev[4238];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1324] + pEtaPrev[4490];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1350] + pEtaPrev[4646];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[64] = minval;
		else
			pEta[64] = -minval;
	}
	else
		pEta[64] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[252] = minval;
		else
			pEta[252] = -minval;
	}
	else
		pEta[252] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[332] = minval;
		else
			pEta[332] = -minval;
	}
	else
		pEta[332] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[560] = minval;
		else
			pEta[560] = -minval;
	}
	else
		pEta[560] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1080] = minval;
		else
			pEta[1080] = -minval;
	}
	else
		pEta[1080] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1180] = minval;
		else
			pEta[1180] = -minval;
	}
	else
		pEta[1180] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1356] = minval;
		else
			pEta[1356] = -minval;
	}
	else
		pEta[1356] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1584] = minval;
		else
			pEta[1584] = -minval;
	}
	else
		pEta[1584] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2108] = minval;
		else
			pEta[2108] = -minval;
	}
	else
		pEta[2108] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2184] = minval;
		else
			pEta[2184] = -minval;
	}
	else
		pEta[2184] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2364] = minval;
		else
			pEta[2364] = -minval;
	}
	else
		pEta[2364] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2608] = minval;
		else
			pEta[2608] = -minval;
	}
	else
		pEta[2608] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3096] = minval;
		else
			pEta[3096] = -minval;
	}
	else
		pEta[3096] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3364] = minval;
		else
			pEta[3364] = -minval;
	}
	else
		pEta[3364] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3876] = minval;
		else
			pEta[3876] = -minval;
	}
	else
		pEta[3876] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4238] = minval;
		else
			pEta[4238] = -minval;
	}
	else
		pEta[4238] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4490] = minval;
		else
			pEta[4490] = -minval;
	}
	else
		pEta[4490] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4646] = minval;
		else
			pEta[4646] = -minval;
	}
	else
		pEta[4646] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 141     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[17] + pEtaPrev[68];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[32] + pEtaPrev[128];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[84] + pEtaPrev[336];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[141] + pEtaPrev[564];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[271] + pEtaPrev[1084];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[296] + pEtaPrev[1184];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[340] + pEtaPrev[1360];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[397] + pEtaPrev[1588];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[528] + pEtaPrev[2112];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[547] + pEtaPrev[2188];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[592] + pEtaPrev[2368];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[653] + pEtaPrev[2612];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[781] + pEtaPrev[3098];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[909] + pEtaPrev[3367];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1165] + pEtaPrev[3879];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1283] + pEtaPrev[4244];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1325] + pEtaPrev[4496];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1351] + pEtaPrev[4652];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[68] = minval;
		else
			pEta[68] = -minval;
	}
	else
		pEta[68] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[128] = minval;
		else
			pEta[128] = -minval;
	}
	else
		pEta[128] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[336] = minval;
		else
			pEta[336] = -minval;
	}
	else
		pEta[336] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[564] = minval;
		else
			pEta[564] = -minval;
	}
	else
		pEta[564] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1084] = minval;
		else
			pEta[1084] = -minval;
	}
	else
		pEta[1084] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1184] = minval;
		else
			pEta[1184] = -minval;
	}
	else
		pEta[1184] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1360] = minval;
		else
			pEta[1360] = -minval;
	}
	else
		pEta[1360] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1588] = minval;
		else
			pEta[1588] = -minval;
	}
	else
		pEta[1588] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2112] = minval;
		else
			pEta[2112] = -minval;
	}
	else
		pEta[2112] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2188] = minval;
		else
			pEta[2188] = -minval;
	}
	else
		pEta[2188] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2368] = minval;
		else
			pEta[2368] = -minval;
	}
	else
		pEta[2368] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2612] = minval;
		else
			pEta[2612] = -minval;
	}
	else
		pEta[2612] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3098] = minval;
		else
			pEta[3098] = -minval;
	}
	else
		pEta[3098] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3367] = minval;
		else
			pEta[3367] = -minval;
	}
	else
		pEta[3367] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3879] = minval;
		else
			pEta[3879] = -minval;
	}
	else
		pEta[3879] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4244] = minval;
		else
			pEta[4244] = -minval;
	}
	else
		pEta[4244] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4496] = minval;
		else
			pEta[4496] = -minval;
	}
	else
		pEta[4496] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4652] = minval;
		else
			pEta[4652] = -minval;
	}
	else
		pEta[4652] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 142     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[18] + pEtaPrev[72];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[33] + pEtaPrev[132];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[85] + pEtaPrev[340];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[142] + pEtaPrev[568];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[272] + pEtaPrev[1088];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[297] + pEtaPrev[1188];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[341] + pEtaPrev[1364];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[398] + pEtaPrev[1592];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[529] + pEtaPrev[2116];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[548] + pEtaPrev[2192];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[593] + pEtaPrev[2372];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[654] + pEtaPrev[2616];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[782] + pEtaPrev[3100];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[910] + pEtaPrev[3370];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1166] + pEtaPrev[3882];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1284] + pEtaPrev[4250];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1326] + pEtaPrev[4502];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1352] + pEtaPrev[4658];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[72] = minval;
		else
			pEta[72] = -minval;
	}
	else
		pEta[72] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[132] = minval;
		else
			pEta[132] = -minval;
	}
	else
		pEta[132] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[340] = minval;
		else
			pEta[340] = -minval;
	}
	else
		pEta[340] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[568] = minval;
		else
			pEta[568] = -minval;
	}
	else
		pEta[568] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1088] = minval;
		else
			pEta[1088] = -minval;
	}
	else
		pEta[1088] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1188] = minval;
		else
			pEta[1188] = -minval;
	}
	else
		pEta[1188] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1364] = minval;
		else
			pEta[1364] = -minval;
	}
	else
		pEta[1364] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1592] = minval;
		else
			pEta[1592] = -minval;
	}
	else
		pEta[1592] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2116] = minval;
		else
			pEta[2116] = -minval;
	}
	else
		pEta[2116] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2192] = minval;
		else
			pEta[2192] = -minval;
	}
	else
		pEta[2192] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2372] = minval;
		else
			pEta[2372] = -minval;
	}
	else
		pEta[2372] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2616] = minval;
		else
			pEta[2616] = -minval;
	}
	else
		pEta[2616] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3100] = minval;
		else
			pEta[3100] = -minval;
	}
	else
		pEta[3100] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3370] = minval;
		else
			pEta[3370] = -minval;
	}
	else
		pEta[3370] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3882] = minval;
		else
			pEta[3882] = -minval;
	}
	else
		pEta[3882] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4250] = minval;
		else
			pEta[4250] = -minval;
	}
	else
		pEta[4250] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4502] = minval;
		else
			pEta[4502] = -minval;
	}
	else
		pEta[4502] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4658] = minval;
		else
			pEta[4658] = -minval;
	}
	else
		pEta[4658] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 143     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[19] + pEtaPrev[76];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[34] + pEtaPrev[136];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[86] + pEtaPrev[344];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[143] + pEtaPrev[572];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[273] + pEtaPrev[1092];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[298] + pEtaPrev[1192];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[342] + pEtaPrev[1368];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[399] + pEtaPrev[1596];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[530] + pEtaPrev[2120];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[549] + pEtaPrev[2196];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[594] + pEtaPrev[2376];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[655] + pEtaPrev[2620];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[783] + pEtaPrev[3102];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[911] + pEtaPrev[3373];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1167] + pEtaPrev[3885];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1285] + pEtaPrev[4256];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1327] + pEtaPrev[4508];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1353] + pEtaPrev[4664];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[76] = minval;
		else
			pEta[76] = -minval;
	}
	else
		pEta[76] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[136] = minval;
		else
			pEta[136] = -minval;
	}
	else
		pEta[136] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[344] = minval;
		else
			pEta[344] = -minval;
	}
	else
		pEta[344] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[572] = minval;
		else
			pEta[572] = -minval;
	}
	else
		pEta[572] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1092] = minval;
		else
			pEta[1092] = -minval;
	}
	else
		pEta[1092] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1192] = minval;
		else
			pEta[1192] = -minval;
	}
	else
		pEta[1192] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1368] = minval;
		else
			pEta[1368] = -minval;
	}
	else
		pEta[1368] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1596] = minval;
		else
			pEta[1596] = -minval;
	}
	else
		pEta[1596] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2120] = minval;
		else
			pEta[2120] = -minval;
	}
	else
		pEta[2120] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2196] = minval;
		else
			pEta[2196] = -minval;
	}
	else
		pEta[2196] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2376] = minval;
		else
			pEta[2376] = -minval;
	}
	else
		pEta[2376] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2620] = minval;
		else
			pEta[2620] = -minval;
	}
	else
		pEta[2620] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3102] = minval;
		else
			pEta[3102] = -minval;
	}
	else
		pEta[3102] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3373] = minval;
		else
			pEta[3373] = -minval;
	}
	else
		pEta[3373] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3885] = minval;
		else
			pEta[3885] = -minval;
	}
	else
		pEta[3885] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4256] = minval;
		else
			pEta[4256] = -minval;
	}
	else
		pEta[4256] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4508] = minval;
		else
			pEta[4508] = -minval;
	}
	else
		pEta[4508] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4664] = minval;
		else
			pEta[4664] = -minval;
	}
	else
		pEta[4664] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 144     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[20] + pEtaPrev[80];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[35] + pEtaPrev[140];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[87] + pEtaPrev[348];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[144] + pEtaPrev[576];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[274] + pEtaPrev[1096];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[299] + pEtaPrev[1196];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[343] + pEtaPrev[1372];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[400] + pEtaPrev[1600];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[531] + pEtaPrev[2124];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[550] + pEtaPrev[2200];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[595] + pEtaPrev[2380];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[656] + pEtaPrev[2624];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[784] + pEtaPrev[3104];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[912] + pEtaPrev[3376];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1168] + pEtaPrev[3888];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1286] + pEtaPrev[4262];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1328] + pEtaPrev[4514];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1354] + pEtaPrev[4670];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[80] = minval;
		else
			pEta[80] = -minval;
	}
	else
		pEta[80] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[140] = minval;
		else
			pEta[140] = -minval;
	}
	else
		pEta[140] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[348] = minval;
		else
			pEta[348] = -minval;
	}
	else
		pEta[348] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[576] = minval;
		else
			pEta[576] = -minval;
	}
	else
		pEta[576] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1096] = minval;
		else
			pEta[1096] = -minval;
	}
	else
		pEta[1096] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1196] = minval;
		else
			pEta[1196] = -minval;
	}
	else
		pEta[1196] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1372] = minval;
		else
			pEta[1372] = -minval;
	}
	else
		pEta[1372] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1600] = minval;
		else
			pEta[1600] = -minval;
	}
	else
		pEta[1600] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2124] = minval;
		else
			pEta[2124] = -minval;
	}
	else
		pEta[2124] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2200] = minval;
		else
			pEta[2200] = -minval;
	}
	else
		pEta[2200] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2380] = minval;
		else
			pEta[2380] = -minval;
	}
	else
		pEta[2380] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2624] = minval;
		else
			pEta[2624] = -minval;
	}
	else
		pEta[2624] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3104] = minval;
		else
			pEta[3104] = -minval;
	}
	else
		pEta[3104] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3376] = minval;
		else
			pEta[3376] = -minval;
	}
	else
		pEta[3376] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3888] = minval;
		else
			pEta[3888] = -minval;
	}
	else
		pEta[3888] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4262] = minval;
		else
			pEta[4262] = -minval;
	}
	else
		pEta[4262] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4514] = minval;
		else
			pEta[4514] = -minval;
	}
	else
		pEta[4514] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4670] = minval;
		else
			pEta[4670] = -minval;
	}
	else
		pEta[4670] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 145     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[21] + pEtaPrev[84];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[36] + pEtaPrev[144];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[88] + pEtaPrev[352];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[145] + pEtaPrev[580];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[275] + pEtaPrev[1100];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[300] + pEtaPrev[1200];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[344] + pEtaPrev[1376];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[401] + pEtaPrev[1604];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[532] + pEtaPrev[2128];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[551] + pEtaPrev[2204];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[596] + pEtaPrev[2384];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[657] + pEtaPrev[2628];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[785] + pEtaPrev[3106];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[913] + pEtaPrev[3379];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1169] + pEtaPrev[3891];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1287] + pEtaPrev[4268];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1329] + pEtaPrev[4520];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1355] + pEtaPrev[4676];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[84] = minval;
		else
			pEta[84] = -minval;
	}
	else
		pEta[84] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[144] = minval;
		else
			pEta[144] = -minval;
	}
	else
		pEta[144] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[352] = minval;
		else
			pEta[352] = -minval;
	}
	else
		pEta[352] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[580] = minval;
		else
			pEta[580] = -minval;
	}
	else
		pEta[580] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1100] = minval;
		else
			pEta[1100] = -minval;
	}
	else
		pEta[1100] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1200] = minval;
		else
			pEta[1200] = -minval;
	}
	else
		pEta[1200] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1376] = minval;
		else
			pEta[1376] = -minval;
	}
	else
		pEta[1376] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1604] = minval;
		else
			pEta[1604] = -minval;
	}
	else
		pEta[1604] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2128] = minval;
		else
			pEta[2128] = -minval;
	}
	else
		pEta[2128] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2204] = minval;
		else
			pEta[2204] = -minval;
	}
	else
		pEta[2204] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2384] = minval;
		else
			pEta[2384] = -minval;
	}
	else
		pEta[2384] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2628] = minval;
		else
			pEta[2628] = -minval;
	}
	else
		pEta[2628] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3106] = minval;
		else
			pEta[3106] = -minval;
	}
	else
		pEta[3106] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3379] = minval;
		else
			pEta[3379] = -minval;
	}
	else
		pEta[3379] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3891] = minval;
		else
			pEta[3891] = -minval;
	}
	else
		pEta[3891] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4268] = minval;
		else
			pEta[4268] = -minval;
	}
	else
		pEta[4268] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4520] = minval;
		else
			pEta[4520] = -minval;
	}
	else
		pEta[4520] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4676] = minval;
		else
			pEta[4676] = -minval;
	}
	else
		pEta[4676] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 146     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[22] + pEtaPrev[88];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[37] + pEtaPrev[148];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[89] + pEtaPrev[356];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[146] + pEtaPrev[584];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[276] + pEtaPrev[1104];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[301] + pEtaPrev[1204];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[345] + pEtaPrev[1380];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[402] + pEtaPrev[1608];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[533] + pEtaPrev[2132];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[552] + pEtaPrev[2208];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[597] + pEtaPrev[2388];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[658] + pEtaPrev[2632];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[786] + pEtaPrev[3108];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[914] + pEtaPrev[3382];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1170] + pEtaPrev[3894];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1288] + pEtaPrev[4274];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1330] + pEtaPrev[4526];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1356] + pEtaPrev[4682];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[88] = minval;
		else
			pEta[88] = -minval;
	}
	else
		pEta[88] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[148] = minval;
		else
			pEta[148] = -minval;
	}
	else
		pEta[148] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[356] = minval;
		else
			pEta[356] = -minval;
	}
	else
		pEta[356] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[584] = minval;
		else
			pEta[584] = -minval;
	}
	else
		pEta[584] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1104] = minval;
		else
			pEta[1104] = -minval;
	}
	else
		pEta[1104] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1204] = minval;
		else
			pEta[1204] = -minval;
	}
	else
		pEta[1204] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1380] = minval;
		else
			pEta[1380] = -minval;
	}
	else
		pEta[1380] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1608] = minval;
		else
			pEta[1608] = -minval;
	}
	else
		pEta[1608] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2132] = minval;
		else
			pEta[2132] = -minval;
	}
	else
		pEta[2132] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2208] = minval;
		else
			pEta[2208] = -minval;
	}
	else
		pEta[2208] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2388] = minval;
		else
			pEta[2388] = -minval;
	}
	else
		pEta[2388] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2632] = minval;
		else
			pEta[2632] = -minval;
	}
	else
		pEta[2632] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3108] = minval;
		else
			pEta[3108] = -minval;
	}
	else
		pEta[3108] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3382] = minval;
		else
			pEta[3382] = -minval;
	}
	else
		pEta[3382] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3894] = minval;
		else
			pEta[3894] = -minval;
	}
	else
		pEta[3894] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4274] = minval;
		else
			pEta[4274] = -minval;
	}
	else
		pEta[4274] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4526] = minval;
		else
			pEta[4526] = -minval;
	}
	else
		pEta[4526] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4682] = minval;
		else
			pEta[4682] = -minval;
	}
	else
		pEta[4682] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 147     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[23] + pEtaPrev[92];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[38] + pEtaPrev[152];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[90] + pEtaPrev[360];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[147] + pEtaPrev[588];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[277] + pEtaPrev[1108];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[302] + pEtaPrev[1208];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[346] + pEtaPrev[1384];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[403] + pEtaPrev[1612];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[534] + pEtaPrev[2136];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[553] + pEtaPrev[2212];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[598] + pEtaPrev[2392];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[659] + pEtaPrev[2636];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[787] + pEtaPrev[3110];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[915] + pEtaPrev[3385];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1171] + pEtaPrev[3897];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1289] + pEtaPrev[4280];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1331] + pEtaPrev[4532];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1357] + pEtaPrev[4688];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[92] = minval;
		else
			pEta[92] = -minval;
	}
	else
		pEta[92] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[152] = minval;
		else
			pEta[152] = -minval;
	}
	else
		pEta[152] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[360] = minval;
		else
			pEta[360] = -minval;
	}
	else
		pEta[360] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[588] = minval;
		else
			pEta[588] = -minval;
	}
	else
		pEta[588] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1108] = minval;
		else
			pEta[1108] = -minval;
	}
	else
		pEta[1108] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1208] = minval;
		else
			pEta[1208] = -minval;
	}
	else
		pEta[1208] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1384] = minval;
		else
			pEta[1384] = -minval;
	}
	else
		pEta[1384] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1612] = minval;
		else
			pEta[1612] = -minval;
	}
	else
		pEta[1612] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2136] = minval;
		else
			pEta[2136] = -minval;
	}
	else
		pEta[2136] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2212] = minval;
		else
			pEta[2212] = -minval;
	}
	else
		pEta[2212] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2392] = minval;
		else
			pEta[2392] = -minval;
	}
	else
		pEta[2392] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2636] = minval;
		else
			pEta[2636] = -minval;
	}
	else
		pEta[2636] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3110] = minval;
		else
			pEta[3110] = -minval;
	}
	else
		pEta[3110] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3385] = minval;
		else
			pEta[3385] = -minval;
	}
	else
		pEta[3385] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3897] = minval;
		else
			pEta[3897] = -minval;
	}
	else
		pEta[3897] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4280] = minval;
		else
			pEta[4280] = -minval;
	}
	else
		pEta[4280] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4532] = minval;
		else
			pEta[4532] = -minval;
	}
	else
		pEta[4532] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4688] = minval;
		else
			pEta[4688] = -minval;
	}
	else
		pEta[4688] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 148     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[24] + pEtaPrev[96];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[39] + pEtaPrev[156];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[91] + pEtaPrev[364];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[148] + pEtaPrev[592];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[278] + pEtaPrev[1112];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[303] + pEtaPrev[1212];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[347] + pEtaPrev[1388];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[404] + pEtaPrev[1616];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[535] + pEtaPrev[2140];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[554] + pEtaPrev[2216];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[599] + pEtaPrev[2396];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[660] + pEtaPrev[2640];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[788] + pEtaPrev[3112];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[916] + pEtaPrev[3388];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1172] + pEtaPrev[3900];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1290] + pEtaPrev[4286];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1332] + pEtaPrev[4538];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1358] + pEtaPrev[4694];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[96] = minval;
		else
			pEta[96] = -minval;
	}
	else
		pEta[96] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[156] = minval;
		else
			pEta[156] = -minval;
	}
	else
		pEta[156] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[364] = minval;
		else
			pEta[364] = -minval;
	}
	else
		pEta[364] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[592] = minval;
		else
			pEta[592] = -minval;
	}
	else
		pEta[592] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1112] = minval;
		else
			pEta[1112] = -minval;
	}
	else
		pEta[1112] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1212] = minval;
		else
			pEta[1212] = -minval;
	}
	else
		pEta[1212] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1388] = minval;
		else
			pEta[1388] = -minval;
	}
	else
		pEta[1388] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1616] = minval;
		else
			pEta[1616] = -minval;
	}
	else
		pEta[1616] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2140] = minval;
		else
			pEta[2140] = -minval;
	}
	else
		pEta[2140] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2216] = minval;
		else
			pEta[2216] = -minval;
	}
	else
		pEta[2216] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2396] = minval;
		else
			pEta[2396] = -minval;
	}
	else
		pEta[2396] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2640] = minval;
		else
			pEta[2640] = -minval;
	}
	else
		pEta[2640] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3112] = minval;
		else
			pEta[3112] = -minval;
	}
	else
		pEta[3112] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3388] = minval;
		else
			pEta[3388] = -minval;
	}
	else
		pEta[3388] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3900] = minval;
		else
			pEta[3900] = -minval;
	}
	else
		pEta[3900] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4286] = minval;
		else
			pEta[4286] = -minval;
	}
	else
		pEta[4286] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4538] = minval;
		else
			pEta[4538] = -minval;
	}
	else
		pEta[4538] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4694] = minval;
		else
			pEta[4694] = -minval;
	}
	else
		pEta[4694] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 149     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[25] + pEtaPrev[100];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[40] + pEtaPrev[160];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[92] + pEtaPrev[368];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[149] + pEtaPrev[596];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[279] + pEtaPrev[1116];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[304] + pEtaPrev[1216];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[348] + pEtaPrev[1392];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[405] + pEtaPrev[1620];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[536] + pEtaPrev[2144];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[555] + pEtaPrev[2220];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[600] + pEtaPrev[2400];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[661] + pEtaPrev[2644];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[789] + pEtaPrev[3114];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[917] + pEtaPrev[3391];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1173] + pEtaPrev[3903];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1291] + pEtaPrev[4292];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1333] + pEtaPrev[4544];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1359] + pEtaPrev[4700];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[100] = minval;
		else
			pEta[100] = -minval;
	}
	else
		pEta[100] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[160] = minval;
		else
			pEta[160] = -minval;
	}
	else
		pEta[160] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[368] = minval;
		else
			pEta[368] = -minval;
	}
	else
		pEta[368] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[596] = minval;
		else
			pEta[596] = -minval;
	}
	else
		pEta[596] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1116] = minval;
		else
			pEta[1116] = -minval;
	}
	else
		pEta[1116] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1216] = minval;
		else
			pEta[1216] = -minval;
	}
	else
		pEta[1216] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1392] = minval;
		else
			pEta[1392] = -minval;
	}
	else
		pEta[1392] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1620] = minval;
		else
			pEta[1620] = -minval;
	}
	else
		pEta[1620] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2144] = minval;
		else
			pEta[2144] = -minval;
	}
	else
		pEta[2144] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2220] = minval;
		else
			pEta[2220] = -minval;
	}
	else
		pEta[2220] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2400] = minval;
		else
			pEta[2400] = -minval;
	}
	else
		pEta[2400] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2644] = minval;
		else
			pEta[2644] = -minval;
	}
	else
		pEta[2644] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3114] = minval;
		else
			pEta[3114] = -minval;
	}
	else
		pEta[3114] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3391] = minval;
		else
			pEta[3391] = -minval;
	}
	else
		pEta[3391] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3903] = minval;
		else
			pEta[3903] = -minval;
	}
	else
		pEta[3903] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4292] = minval;
		else
			pEta[4292] = -minval;
	}
	else
		pEta[4292] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4544] = minval;
		else
			pEta[4544] = -minval;
	}
	else
		pEta[4544] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4700] = minval;
		else
			pEta[4700] = -minval;
	}
	else
		pEta[4700] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 150     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[26] + pEtaPrev[104];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[41] + pEtaPrev[164];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[93] + pEtaPrev[372];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[150] + pEtaPrev[600];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[280] + pEtaPrev[1120];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[305] + pEtaPrev[1220];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[349] + pEtaPrev[1396];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[406] + pEtaPrev[1624];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[537] + pEtaPrev[2148];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[556] + pEtaPrev[2224];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[601] + pEtaPrev[2404];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[662] + pEtaPrev[2648];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[790] + pEtaPrev[3116];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[918] + pEtaPrev[3394];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1174] + pEtaPrev[3906];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1292] + pEtaPrev[4298];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1334] + pEtaPrev[4550];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1360] + pEtaPrev[4706];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[104] = minval;
		else
			pEta[104] = -minval;
	}
	else
		pEta[104] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[164] = minval;
		else
			pEta[164] = -minval;
	}
	else
		pEta[164] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[372] = minval;
		else
			pEta[372] = -minval;
	}
	else
		pEta[372] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[600] = minval;
		else
			pEta[600] = -minval;
	}
	else
		pEta[600] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1120] = minval;
		else
			pEta[1120] = -minval;
	}
	else
		pEta[1120] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1220] = minval;
		else
			pEta[1220] = -minval;
	}
	else
		pEta[1220] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1396] = minval;
		else
			pEta[1396] = -minval;
	}
	else
		pEta[1396] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1624] = minval;
		else
			pEta[1624] = -minval;
	}
	else
		pEta[1624] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2148] = minval;
		else
			pEta[2148] = -minval;
	}
	else
		pEta[2148] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2224] = minval;
		else
			pEta[2224] = -minval;
	}
	else
		pEta[2224] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2404] = minval;
		else
			pEta[2404] = -minval;
	}
	else
		pEta[2404] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2648] = minval;
		else
			pEta[2648] = -minval;
	}
	else
		pEta[2648] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3116] = minval;
		else
			pEta[3116] = -minval;
	}
	else
		pEta[3116] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3394] = minval;
		else
			pEta[3394] = -minval;
	}
	else
		pEta[3394] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3906] = minval;
		else
			pEta[3906] = -minval;
	}
	else
		pEta[3906] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4298] = minval;
		else
			pEta[4298] = -minval;
	}
	else
		pEta[4298] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4550] = minval;
		else
			pEta[4550] = -minval;
	}
	else
		pEta[4550] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4706] = minval;
		else
			pEta[4706] = -minval;
	}
	else
		pEta[4706] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 151     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[27] + pEtaPrev[108];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[42] + pEtaPrev[168];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[94] + pEtaPrev[376];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[151] + pEtaPrev[604];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[281] + pEtaPrev[1124];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[306] + pEtaPrev[1224];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[350] + pEtaPrev[1400];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[407] + pEtaPrev[1628];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[538] + pEtaPrev[2152];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[557] + pEtaPrev[2228];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[602] + pEtaPrev[2408];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[663] + pEtaPrev[2652];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[791] + pEtaPrev[3118];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[919] + pEtaPrev[3397];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1175] + pEtaPrev[3909];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1293] + pEtaPrev[4304];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1335] + pEtaPrev[4556];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1361] + pEtaPrev[4712];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[108] = minval;
		else
			pEta[108] = -minval;
	}
	else
		pEta[108] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[168] = minval;
		else
			pEta[168] = -minval;
	}
	else
		pEta[168] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[376] = minval;
		else
			pEta[376] = -minval;
	}
	else
		pEta[376] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[604] = minval;
		else
			pEta[604] = -minval;
	}
	else
		pEta[604] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1124] = minval;
		else
			pEta[1124] = -minval;
	}
	else
		pEta[1124] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1224] = minval;
		else
			pEta[1224] = -minval;
	}
	else
		pEta[1224] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1400] = minval;
		else
			pEta[1400] = -minval;
	}
	else
		pEta[1400] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1628] = minval;
		else
			pEta[1628] = -minval;
	}
	else
		pEta[1628] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2152] = minval;
		else
			pEta[2152] = -minval;
	}
	else
		pEta[2152] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2228] = minval;
		else
			pEta[2228] = -minval;
	}
	else
		pEta[2228] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2408] = minval;
		else
			pEta[2408] = -minval;
	}
	else
		pEta[2408] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2652] = minval;
		else
			pEta[2652] = -minval;
	}
	else
		pEta[2652] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3118] = minval;
		else
			pEta[3118] = -minval;
	}
	else
		pEta[3118] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3397] = minval;
		else
			pEta[3397] = -minval;
	}
	else
		pEta[3397] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3909] = minval;
		else
			pEta[3909] = -minval;
	}
	else
		pEta[3909] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4304] = minval;
		else
			pEta[4304] = -minval;
	}
	else
		pEta[4304] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4556] = minval;
		else
			pEta[4556] = -minval;
	}
	else
		pEta[4556] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4712] = minval;
		else
			pEta[4712] = -minval;
	}
	else
		pEta[4712] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 152     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[28] + pEtaPrev[112];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[43] + pEtaPrev[172];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[95] + pEtaPrev[380];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[152] + pEtaPrev[608];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[282] + pEtaPrev[1128];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[307] + pEtaPrev[1228];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[351] + pEtaPrev[1404];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[408] + pEtaPrev[1632];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[539] + pEtaPrev[2156];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[558] + pEtaPrev[2232];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[603] + pEtaPrev[2412];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[664] + pEtaPrev[2656];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[792] + pEtaPrev[3120];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[920] + pEtaPrev[3400];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1176] + pEtaPrev[3912];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1294] + pEtaPrev[4310];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1336] + pEtaPrev[4562];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1362] + pEtaPrev[4718];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[112] = minval;
		else
			pEta[112] = -minval;
	}
	else
		pEta[112] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[172] = minval;
		else
			pEta[172] = -minval;
	}
	else
		pEta[172] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[380] = minval;
		else
			pEta[380] = -minval;
	}
	else
		pEta[380] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[608] = minval;
		else
			pEta[608] = -minval;
	}
	else
		pEta[608] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1128] = minval;
		else
			pEta[1128] = -minval;
	}
	else
		pEta[1128] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1228] = minval;
		else
			pEta[1228] = -minval;
	}
	else
		pEta[1228] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1404] = minval;
		else
			pEta[1404] = -minval;
	}
	else
		pEta[1404] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1632] = minval;
		else
			pEta[1632] = -minval;
	}
	else
		pEta[1632] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2156] = minval;
		else
			pEta[2156] = -minval;
	}
	else
		pEta[2156] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2232] = minval;
		else
			pEta[2232] = -minval;
	}
	else
		pEta[2232] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2412] = minval;
		else
			pEta[2412] = -minval;
	}
	else
		pEta[2412] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2656] = minval;
		else
			pEta[2656] = -minval;
	}
	else
		pEta[2656] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3120] = minval;
		else
			pEta[3120] = -minval;
	}
	else
		pEta[3120] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3400] = minval;
		else
			pEta[3400] = -minval;
	}
	else
		pEta[3400] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3912] = minval;
		else
			pEta[3912] = -minval;
	}
	else
		pEta[3912] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4310] = minval;
		else
			pEta[4310] = -minval;
	}
	else
		pEta[4310] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4562] = minval;
		else
			pEta[4562] = -minval;
	}
	else
		pEta[4562] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4718] = minval;
		else
			pEta[4718] = -minval;
	}
	else
		pEta[4718] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 153     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[29] + pEtaPrev[116];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[44] + pEtaPrev[176];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[64] + pEtaPrev[256];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[153] + pEtaPrev[612];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[283] + pEtaPrev[1132];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[308] + pEtaPrev[1232];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[320] + pEtaPrev[1280];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[409] + pEtaPrev[1636];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[540] + pEtaPrev[2160];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[559] + pEtaPrev[2236];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[604] + pEtaPrev[2416];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[665] + pEtaPrev[2660];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[793] + pEtaPrev[3122];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[921] + pEtaPrev[3403];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1177] + pEtaPrev[3915];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1295] + pEtaPrev[4316];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1337] + pEtaPrev[4568];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1363] + pEtaPrev[4724];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[116] = minval;
		else
			pEta[116] = -minval;
	}
	else
		pEta[116] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[176] = minval;
		else
			pEta[176] = -minval;
	}
	else
		pEta[176] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[256] = minval;
		else
			pEta[256] = -minval;
	}
	else
		pEta[256] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[612] = minval;
		else
			pEta[612] = -minval;
	}
	else
		pEta[612] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1132] = minval;
		else
			pEta[1132] = -minval;
	}
	else
		pEta[1132] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1232] = minval;
		else
			pEta[1232] = -minval;
	}
	else
		pEta[1232] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1280] = minval;
		else
			pEta[1280] = -minval;
	}
	else
		pEta[1280] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1636] = minval;
		else
			pEta[1636] = -minval;
	}
	else
		pEta[1636] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2160] = minval;
		else
			pEta[2160] = -minval;
	}
	else
		pEta[2160] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2236] = minval;
		else
			pEta[2236] = -minval;
	}
	else
		pEta[2236] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2416] = minval;
		else
			pEta[2416] = -minval;
	}
	else
		pEta[2416] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2660] = minval;
		else
			pEta[2660] = -minval;
	}
	else
		pEta[2660] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3122] = minval;
		else
			pEta[3122] = -minval;
	}
	else
		pEta[3122] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3403] = minval;
		else
			pEta[3403] = -minval;
	}
	else
		pEta[3403] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3915] = minval;
		else
			pEta[3915] = -minval;
	}
	else
		pEta[3915] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4316] = minval;
		else
			pEta[4316] = -minval;
	}
	else
		pEta[4316] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4568] = minval;
		else
			pEta[4568] = -minval;
	}
	else
		pEta[4568] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4724] = minval;
		else
			pEta[4724] = -minval;
	}
	else
		pEta[4724] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 154     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[30] + pEtaPrev[120];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[45] + pEtaPrev[180];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[65] + pEtaPrev[260];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[154] + pEtaPrev[616];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[284] + pEtaPrev[1136];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[309] + pEtaPrev[1236];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[321] + pEtaPrev[1284];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[410] + pEtaPrev[1640];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[541] + pEtaPrev[2164];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[560] + pEtaPrev[2240];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[605] + pEtaPrev[2420];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[666] + pEtaPrev[2664];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[794] + pEtaPrev[3124];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[922] + pEtaPrev[3406];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1178] + pEtaPrev[3918];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1296] + pEtaPrev[4322];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1338] + pEtaPrev[4574];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1364] + pEtaPrev[4730];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[120] = minval;
		else
			pEta[120] = -minval;
	}
	else
		pEta[120] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[180] = minval;
		else
			pEta[180] = -minval;
	}
	else
		pEta[180] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[260] = minval;
		else
			pEta[260] = -minval;
	}
	else
		pEta[260] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[616] = minval;
		else
			pEta[616] = -minval;
	}
	else
		pEta[616] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1136] = minval;
		else
			pEta[1136] = -minval;
	}
	else
		pEta[1136] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1236] = minval;
		else
			pEta[1236] = -minval;
	}
	else
		pEta[1236] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1284] = minval;
		else
			pEta[1284] = -minval;
	}
	else
		pEta[1284] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1640] = minval;
		else
			pEta[1640] = -minval;
	}
	else
		pEta[1640] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2164] = minval;
		else
			pEta[2164] = -minval;
	}
	else
		pEta[2164] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2240] = minval;
		else
			pEta[2240] = -minval;
	}
	else
		pEta[2240] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2420] = minval;
		else
			pEta[2420] = -minval;
	}
	else
		pEta[2420] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2664] = minval;
		else
			pEta[2664] = -minval;
	}
	else
		pEta[2664] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3124] = minval;
		else
			pEta[3124] = -minval;
	}
	else
		pEta[3124] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3406] = minval;
		else
			pEta[3406] = -minval;
	}
	else
		pEta[3406] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3918] = minval;
		else
			pEta[3918] = -minval;
	}
	else
		pEta[3918] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4322] = minval;
		else
			pEta[4322] = -minval;
	}
	else
		pEta[4322] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4574] = minval;
		else
			pEta[4574] = -minval;
	}
	else
		pEta[4574] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4730] = minval;
		else
			pEta[4730] = -minval;
	}
	else
		pEta[4730] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 155     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[31] + pEtaPrev[124];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[46] + pEtaPrev[184];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[66] + pEtaPrev[264];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[155] + pEtaPrev[620];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[285] + pEtaPrev[1140];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[310] + pEtaPrev[1240];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[322] + pEtaPrev[1288];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[411] + pEtaPrev[1644];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[542] + pEtaPrev[2168];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[561] + pEtaPrev[2244];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[606] + pEtaPrev[2424];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[667] + pEtaPrev[2668];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[795] + pEtaPrev[3126];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[923] + pEtaPrev[3409];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1179] + pEtaPrev[3921];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1297] + pEtaPrev[4328];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1339] + pEtaPrev[4580];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1365] + pEtaPrev[4736];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[124] = minval;
		else
			pEta[124] = -minval;
	}
	else
		pEta[124] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[184] = minval;
		else
			pEta[184] = -minval;
	}
	else
		pEta[184] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[264] = minval;
		else
			pEta[264] = -minval;
	}
	else
		pEta[264] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[620] = minval;
		else
			pEta[620] = -minval;
	}
	else
		pEta[620] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1140] = minval;
		else
			pEta[1140] = -minval;
	}
	else
		pEta[1140] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1240] = minval;
		else
			pEta[1240] = -minval;
	}
	else
		pEta[1240] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1288] = minval;
		else
			pEta[1288] = -minval;
	}
	else
		pEta[1288] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1644] = minval;
		else
			pEta[1644] = -minval;
	}
	else
		pEta[1644] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2168] = minval;
		else
			pEta[2168] = -minval;
	}
	else
		pEta[2168] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2244] = minval;
		else
			pEta[2244] = -minval;
	}
	else
		pEta[2244] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2424] = minval;
		else
			pEta[2424] = -minval;
	}
	else
		pEta[2424] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2668] = minval;
		else
			pEta[2668] = -minval;
	}
	else
		pEta[2668] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3126] = minval;
		else
			pEta[3126] = -minval;
	}
	else
		pEta[3126] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3409] = minval;
		else
			pEta[3409] = -minval;
	}
	else
		pEta[3409] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3921] = minval;
		else
			pEta[3921] = -minval;
	}
	else
		pEta[3921] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4328] = minval;
		else
			pEta[4328] = -minval;
	}
	else
		pEta[4328] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4580] = minval;
		else
			pEta[4580] = -minval;
	}
	else
		pEta[4580] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4736] = minval;
		else
			pEta[4736] = -minval;
	}
	else
		pEta[4736] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 156     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[0] + pEtaPrev[0];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[47] + pEtaPrev[188];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[67] + pEtaPrev[268];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[156] + pEtaPrev[624];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[286] + pEtaPrev[1144];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[311] + pEtaPrev[1244];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[323] + pEtaPrev[1292];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[412] + pEtaPrev[1648];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[543] + pEtaPrev[2172];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[562] + pEtaPrev[2248];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[607] + pEtaPrev[2428];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[668] + pEtaPrev[2672];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[796] + pEtaPrev[3128];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[924] + pEtaPrev[3412];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1180] + pEtaPrev[3924];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1298] + pEtaPrev[4334];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1340] + pEtaPrev[4586];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1366] + pEtaPrev[4742];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[0] = minval;
		else
			pEta[0] = -minval;
	}
	else
		pEta[0] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[188] = minval;
		else
			pEta[188] = -minval;
	}
	else
		pEta[188] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[268] = minval;
		else
			pEta[268] = -minval;
	}
	else
		pEta[268] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[624] = minval;
		else
			pEta[624] = -minval;
	}
	else
		pEta[624] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1144] = minval;
		else
			pEta[1144] = -minval;
	}
	else
		pEta[1144] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1244] = minval;
		else
			pEta[1244] = -minval;
	}
	else
		pEta[1244] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1292] = minval;
		else
			pEta[1292] = -minval;
	}
	else
		pEta[1292] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1648] = minval;
		else
			pEta[1648] = -minval;
	}
	else
		pEta[1648] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2172] = minval;
		else
			pEta[2172] = -minval;
	}
	else
		pEta[2172] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2248] = minval;
		else
			pEta[2248] = -minval;
	}
	else
		pEta[2248] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2428] = minval;
		else
			pEta[2428] = -minval;
	}
	else
		pEta[2428] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2672] = minval;
		else
			pEta[2672] = -minval;
	}
	else
		pEta[2672] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3128] = minval;
		else
			pEta[3128] = -minval;
	}
	else
		pEta[3128] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3412] = minval;
		else
			pEta[3412] = -minval;
	}
	else
		pEta[3412] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3924] = minval;
		else
			pEta[3924] = -minval;
	}
	else
		pEta[3924] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4334] = minval;
		else
			pEta[4334] = -minval;
	}
	else
		pEta[4334] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4586] = minval;
		else
			pEta[4586] = -minval;
	}
	else
		pEta[4586] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4742] = minval;
		else
			pEta[4742] = -minval;
	}
	else
		pEta[4742] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 157     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1] + pEtaPrev[4];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[48] + pEtaPrev[192];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[68] + pEtaPrev[272];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[157] + pEtaPrev[628];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[287] + pEtaPrev[1148];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[312] + pEtaPrev[1248];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[324] + pEtaPrev[1296];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[413] + pEtaPrev[1652];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[512] + pEtaPrev[2048];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[563] + pEtaPrev[2252];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[576] + pEtaPrev[2304];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[669] + pEtaPrev[2676];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[797] + pEtaPrev[3130];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[925] + pEtaPrev[3415];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1181] + pEtaPrev[3927];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1299] + pEtaPrev[4340];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1341] + pEtaPrev[4592];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1367] + pEtaPrev[4748];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[4] = minval;
		else
			pEta[4] = -minval;
	}
	else
		pEta[4] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[192] = minval;
		else
			pEta[192] = -minval;
	}
	else
		pEta[192] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[272] = minval;
		else
			pEta[272] = -minval;
	}
	else
		pEta[272] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[628] = minval;
		else
			pEta[628] = -minval;
	}
	else
		pEta[628] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1148] = minval;
		else
			pEta[1148] = -minval;
	}
	else
		pEta[1148] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1248] = minval;
		else
			pEta[1248] = -minval;
	}
	else
		pEta[1248] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1296] = minval;
		else
			pEta[1296] = -minval;
	}
	else
		pEta[1296] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1652] = minval;
		else
			pEta[1652] = -minval;
	}
	else
		pEta[1652] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2048] = minval;
		else
			pEta[2048] = -minval;
	}
	else
		pEta[2048] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2252] = minval;
		else
			pEta[2252] = -minval;
	}
	else
		pEta[2252] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2304] = minval;
		else
			pEta[2304] = -minval;
	}
	else
		pEta[2304] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2676] = minval;
		else
			pEta[2676] = -minval;
	}
	else
		pEta[2676] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3130] = minval;
		else
			pEta[3130] = -minval;
	}
	else
		pEta[3130] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3415] = minval;
		else
			pEta[3415] = -minval;
	}
	else
		pEta[3415] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3927] = minval;
		else
			pEta[3927] = -minval;
	}
	else
		pEta[3927] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4340] = minval;
		else
			pEta[4340] = -minval;
	}
	else
		pEta[4340] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4592] = minval;
		else
			pEta[4592] = -minval;
	}
	else
		pEta[4592] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4748] = minval;
		else
			pEta[4748] = -minval;
	}
	else
		pEta[4748] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 158     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[2] + pEtaPrev[8];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[49] + pEtaPrev[196];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[69] + pEtaPrev[276];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[158] + pEtaPrev[632];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[256] + pEtaPrev[1024];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[313] + pEtaPrev[1252];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[325] + pEtaPrev[1300];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[414] + pEtaPrev[1656];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[513] + pEtaPrev[2052];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[564] + pEtaPrev[2256];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[577] + pEtaPrev[2308];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[670] + pEtaPrev[2680];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[798] + pEtaPrev[3132];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[926] + pEtaPrev[3418];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1182] + pEtaPrev[3930];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1300] + pEtaPrev[4346];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1342] + pEtaPrev[4598];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1368] + pEtaPrev[4754];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[8] = minval;
		else
			pEta[8] = -minval;
	}
	else
		pEta[8] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[196] = minval;
		else
			pEta[196] = -minval;
	}
	else
		pEta[196] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[276] = minval;
		else
			pEta[276] = -minval;
	}
	else
		pEta[276] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[632] = minval;
		else
			pEta[632] = -minval;
	}
	else
		pEta[632] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1024] = minval;
		else
			pEta[1024] = -minval;
	}
	else
		pEta[1024] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1252] = minval;
		else
			pEta[1252] = -minval;
	}
	else
		pEta[1252] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1300] = minval;
		else
			pEta[1300] = -minval;
	}
	else
		pEta[1300] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1656] = minval;
		else
			pEta[1656] = -minval;
	}
	else
		pEta[1656] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2052] = minval;
		else
			pEta[2052] = -minval;
	}
	else
		pEta[2052] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2256] = minval;
		else
			pEta[2256] = -minval;
	}
	else
		pEta[2256] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2308] = minval;
		else
			pEta[2308] = -minval;
	}
	else
		pEta[2308] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2680] = minval;
		else
			pEta[2680] = -minval;
	}
	else
		pEta[2680] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3132] = minval;
		else
			pEta[3132] = -minval;
	}
	else
		pEta[3132] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3418] = minval;
		else
			pEta[3418] = -minval;
	}
	else
		pEta[3418] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3930] = minval;
		else
			pEta[3930] = -minval;
	}
	else
		pEta[3930] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4346] = minval;
		else
			pEta[4346] = -minval;
	}
	else
		pEta[4346] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4598] = minval;
		else
			pEta[4598] = -minval;
	}
	else
		pEta[4598] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4754] = minval;
		else
			pEta[4754] = -minval;
	}
	else
		pEta[4754] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 159     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[3] + pEtaPrev[12];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[50] + pEtaPrev[200];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[70] + pEtaPrev[280];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[159] + pEtaPrev[636];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[257] + pEtaPrev[1028];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[314] + pEtaPrev[1256];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[326] + pEtaPrev[1304];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[415] + pEtaPrev[1660];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[514] + pEtaPrev[2056];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[565] + pEtaPrev[2260];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[578] + pEtaPrev[2312];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[671] + pEtaPrev[2684];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[799] + pEtaPrev[3134];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[927] + pEtaPrev[3421];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1183] + pEtaPrev[3933];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1301] + pEtaPrev[4352];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1343] + pEtaPrev[4604];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1369] + pEtaPrev[4760];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[12] = minval;
		else
			pEta[12] = -minval;
	}
	else
		pEta[12] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[200] = minval;
		else
			pEta[200] = -minval;
	}
	else
		pEta[200] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[280] = minval;
		else
			pEta[280] = -minval;
	}
	else
		pEta[280] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[636] = minval;
		else
			pEta[636] = -minval;
	}
	else
		pEta[636] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1028] = minval;
		else
			pEta[1028] = -minval;
	}
	else
		pEta[1028] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1256] = minval;
		else
			pEta[1256] = -minval;
	}
	else
		pEta[1256] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1304] = minval;
		else
			pEta[1304] = -minval;
	}
	else
		pEta[1304] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1660] = minval;
		else
			pEta[1660] = -minval;
	}
	else
		pEta[1660] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2056] = minval;
		else
			pEta[2056] = -minval;
	}
	else
		pEta[2056] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2260] = minval;
		else
			pEta[2260] = -minval;
	}
	else
		pEta[2260] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2312] = minval;
		else
			pEta[2312] = -minval;
	}
	else
		pEta[2312] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2684] = minval;
		else
			pEta[2684] = -minval;
	}
	else
		pEta[2684] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3134] = minval;
		else
			pEta[3134] = -minval;
	}
	else
		pEta[3134] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3421] = minval;
		else
			pEta[3421] = -minval;
	}
	else
		pEta[3421] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3933] = minval;
		else
			pEta[3933] = -minval;
	}
	else
		pEta[3933] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4352] = minval;
		else
			pEta[4352] = -minval;
	}
	else
		pEta[4352] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4604] = minval;
		else
			pEta[4604] = -minval;
	}
	else
		pEta[4604] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4760] = minval;
		else
			pEta[4760] = -minval;
	}
	else
		pEta[4760] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 160     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[34] + pEtaPrev[137];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[69] + pEtaPrev[277];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[107] + pEtaPrev[428];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[160] + pEtaPrev[640];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[303] + pEtaPrev[1213];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[342] + pEtaPrev[1369];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[383] + pEtaPrev[1532];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[416] + pEtaPrev[1664];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[570] + pEtaPrev[2281];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[600] + pEtaPrev[2401];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[612] + pEtaPrev[2448];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[672] + pEtaPrev[2688];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[800] + pEtaPrev[3136];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[928] + pEtaPrev[3424];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1184] + pEtaPrev[3936];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1339] + pEtaPrev[4581];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1374] + pEtaPrev[4791];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1404] + pEtaPrev[4970];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[137] = minval;
		else
			pEta[137] = -minval;
	}
	else
		pEta[137] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[277] = minval;
		else
			pEta[277] = -minval;
	}
	else
		pEta[277] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[428] = minval;
		else
			pEta[428] = -minval;
	}
	else
		pEta[428] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[640] = minval;
		else
			pEta[640] = -minval;
	}
	else
		pEta[640] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1213] = minval;
		else
			pEta[1213] = -minval;
	}
	else
		pEta[1213] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1369] = minval;
		else
			pEta[1369] = -minval;
	}
	else
		pEta[1369] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1532] = minval;
		else
			pEta[1532] = -minval;
	}
	else
		pEta[1532] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1664] = minval;
		else
			pEta[1664] = -minval;
	}
	else
		pEta[1664] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2281] = minval;
		else
			pEta[2281] = -minval;
	}
	else
		pEta[2281] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2401] = minval;
		else
			pEta[2401] = -minval;
	}
	else
		pEta[2401] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2448] = minval;
		else
			pEta[2448] = -minval;
	}
	else
		pEta[2448] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2688] = minval;
		else
			pEta[2688] = -minval;
	}
	else
		pEta[2688] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3136] = minval;
		else
			pEta[3136] = -minval;
	}
	else
		pEta[3136] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3424] = minval;
		else
			pEta[3424] = -minval;
	}
	else
		pEta[3424] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3936] = minval;
		else
			pEta[3936] = -minval;
	}
	else
		pEta[3936] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4581] = minval;
		else
			pEta[4581] = -minval;
	}
	else
		pEta[4581] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4791] = minval;
		else
			pEta[4791] = -minval;
	}
	else
		pEta[4791] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4970] = minval;
		else
			pEta[4970] = -minval;
	}
	else
		pEta[4970] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 161     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[35] + pEtaPrev[141];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[70] + pEtaPrev[281];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[108] + pEtaPrev[432];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[161] + pEtaPrev[644];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[304] + pEtaPrev[1217];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[343] + pEtaPrev[1373];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[352] + pEtaPrev[1408];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[417] + pEtaPrev[1668];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[571] + pEtaPrev[2285];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[601] + pEtaPrev[2405];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[613] + pEtaPrev[2452];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[673] + pEtaPrev[2692];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[801] + pEtaPrev[3138];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[929] + pEtaPrev[3427];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1185] + pEtaPrev[3939];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1340] + pEtaPrev[4587];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1375] + pEtaPrev[4797];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1405] + pEtaPrev[4976];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[141] = minval;
		else
			pEta[141] = -minval;
	}
	else
		pEta[141] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[281] = minval;
		else
			pEta[281] = -minval;
	}
	else
		pEta[281] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[432] = minval;
		else
			pEta[432] = -minval;
	}
	else
		pEta[432] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[644] = minval;
		else
			pEta[644] = -minval;
	}
	else
		pEta[644] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1217] = minval;
		else
			pEta[1217] = -minval;
	}
	else
		pEta[1217] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1373] = minval;
		else
			pEta[1373] = -minval;
	}
	else
		pEta[1373] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1408] = minval;
		else
			pEta[1408] = -minval;
	}
	else
		pEta[1408] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1668] = minval;
		else
			pEta[1668] = -minval;
	}
	else
		pEta[1668] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2285] = minval;
		else
			pEta[2285] = -minval;
	}
	else
		pEta[2285] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2405] = minval;
		else
			pEta[2405] = -minval;
	}
	else
		pEta[2405] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2452] = minval;
		else
			pEta[2452] = -minval;
	}
	else
		pEta[2452] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2692] = minval;
		else
			pEta[2692] = -minval;
	}
	else
		pEta[2692] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3138] = minval;
		else
			pEta[3138] = -minval;
	}
	else
		pEta[3138] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3427] = minval;
		else
			pEta[3427] = -minval;
	}
	else
		pEta[3427] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3939] = minval;
		else
			pEta[3939] = -minval;
	}
	else
		pEta[3939] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4587] = minval;
		else
			pEta[4587] = -minval;
	}
	else
		pEta[4587] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4797] = minval;
		else
			pEta[4797] = -minval;
	}
	else
		pEta[4797] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4976] = minval;
		else
			pEta[4976] = -minval;
	}
	else
		pEta[4976] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 162     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[36] + pEtaPrev[145];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[71] + pEtaPrev[285];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[109] + pEtaPrev[436];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[162] + pEtaPrev[648];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[305] + pEtaPrev[1221];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[344] + pEtaPrev[1377];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[353] + pEtaPrev[1412];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[418] + pEtaPrev[1672];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[572] + pEtaPrev[2289];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[602] + pEtaPrev[2409];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[614] + pEtaPrev[2456];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[674] + pEtaPrev[2696];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[802] + pEtaPrev[3140];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[930] + pEtaPrev[3430];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1186] + pEtaPrev[3942];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1341] + pEtaPrev[4593];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1344] + pEtaPrev[4611];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1406] + pEtaPrev[4982];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[145] = minval;
		else
			pEta[145] = -minval;
	}
	else
		pEta[145] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[285] = minval;
		else
			pEta[285] = -minval;
	}
	else
		pEta[285] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[436] = minval;
		else
			pEta[436] = -minval;
	}
	else
		pEta[436] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[648] = minval;
		else
			pEta[648] = -minval;
	}
	else
		pEta[648] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1221] = minval;
		else
			pEta[1221] = -minval;
	}
	else
		pEta[1221] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1377] = minval;
		else
			pEta[1377] = -minval;
	}
	else
		pEta[1377] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1412] = minval;
		else
			pEta[1412] = -minval;
	}
	else
		pEta[1412] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1672] = minval;
		else
			pEta[1672] = -minval;
	}
	else
		pEta[1672] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2289] = minval;
		else
			pEta[2289] = -minval;
	}
	else
		pEta[2289] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2409] = minval;
		else
			pEta[2409] = -minval;
	}
	else
		pEta[2409] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2456] = minval;
		else
			pEta[2456] = -minval;
	}
	else
		pEta[2456] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2696] = minval;
		else
			pEta[2696] = -minval;
	}
	else
		pEta[2696] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3140] = minval;
		else
			pEta[3140] = -minval;
	}
	else
		pEta[3140] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3430] = minval;
		else
			pEta[3430] = -minval;
	}
	else
		pEta[3430] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3942] = minval;
		else
			pEta[3942] = -minval;
	}
	else
		pEta[3942] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4593] = minval;
		else
			pEta[4593] = -minval;
	}
	else
		pEta[4593] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4611] = minval;
		else
			pEta[4611] = -minval;
	}
	else
		pEta[4611] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4982] = minval;
		else
			pEta[4982] = -minval;
	}
	else
		pEta[4982] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 163     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[37] + pEtaPrev[149];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[72] + pEtaPrev[289];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[110] + pEtaPrev[440];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[163] + pEtaPrev[652];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[306] + pEtaPrev[1225];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[345] + pEtaPrev[1381];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[354] + pEtaPrev[1416];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[419] + pEtaPrev[1676];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[573] + pEtaPrev[2293];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[603] + pEtaPrev[2413];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[615] + pEtaPrev[2460];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[675] + pEtaPrev[2700];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[803] + pEtaPrev[3142];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[931] + pEtaPrev[3433];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1187] + pEtaPrev[3945];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1342] + pEtaPrev[4599];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1345] + pEtaPrev[4617];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1407] + pEtaPrev[4988];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[149] = minval;
		else
			pEta[149] = -minval;
	}
	else
		pEta[149] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[289] = minval;
		else
			pEta[289] = -minval;
	}
	else
		pEta[289] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[440] = minval;
		else
			pEta[440] = -minval;
	}
	else
		pEta[440] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[652] = minval;
		else
			pEta[652] = -minval;
	}
	else
		pEta[652] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1225] = minval;
		else
			pEta[1225] = -minval;
	}
	else
		pEta[1225] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1381] = minval;
		else
			pEta[1381] = -minval;
	}
	else
		pEta[1381] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1416] = minval;
		else
			pEta[1416] = -minval;
	}
	else
		pEta[1416] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1676] = minval;
		else
			pEta[1676] = -minval;
	}
	else
		pEta[1676] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2293] = minval;
		else
			pEta[2293] = -minval;
	}
	else
		pEta[2293] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2413] = minval;
		else
			pEta[2413] = -minval;
	}
	else
		pEta[2413] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2460] = minval;
		else
			pEta[2460] = -minval;
	}
	else
		pEta[2460] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2700] = minval;
		else
			pEta[2700] = -minval;
	}
	else
		pEta[2700] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3142] = minval;
		else
			pEta[3142] = -minval;
	}
	else
		pEta[3142] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3433] = minval;
		else
			pEta[3433] = -minval;
	}
	else
		pEta[3433] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3945] = minval;
		else
			pEta[3945] = -minval;
	}
	else
		pEta[3945] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4599] = minval;
		else
			pEta[4599] = -minval;
	}
	else
		pEta[4599] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4617] = minval;
		else
			pEta[4617] = -minval;
	}
	else
		pEta[4617] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4988] = minval;
		else
			pEta[4988] = -minval;
	}
	else
		pEta[4988] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 164     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[38] + pEtaPrev[153];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[73] + pEtaPrev[293];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[111] + pEtaPrev[444];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[164] + pEtaPrev[656];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[307] + pEtaPrev[1229];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[346] + pEtaPrev[1385];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[355] + pEtaPrev[1420];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[420] + pEtaPrev[1680];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[574] + pEtaPrev[2297];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[604] + pEtaPrev[2417];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[616] + pEtaPrev[2464];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[676] + pEtaPrev[2704];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[804] + pEtaPrev[3144];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[932] + pEtaPrev[3436];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1188] + pEtaPrev[3948];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1343] + pEtaPrev[4605];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1346] + pEtaPrev[4623];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1376] + pEtaPrev[4802];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[153] = minval;
		else
			pEta[153] = -minval;
	}
	else
		pEta[153] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[293] = minval;
		else
			pEta[293] = -minval;
	}
	else
		pEta[293] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[444] = minval;
		else
			pEta[444] = -minval;
	}
	else
		pEta[444] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[656] = minval;
		else
			pEta[656] = -minval;
	}
	else
		pEta[656] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1229] = minval;
		else
			pEta[1229] = -minval;
	}
	else
		pEta[1229] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1385] = minval;
		else
			pEta[1385] = -minval;
	}
	else
		pEta[1385] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1420] = minval;
		else
			pEta[1420] = -minval;
	}
	else
		pEta[1420] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1680] = minval;
		else
			pEta[1680] = -minval;
	}
	else
		pEta[1680] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2297] = minval;
		else
			pEta[2297] = -minval;
	}
	else
		pEta[2297] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2417] = minval;
		else
			pEta[2417] = -minval;
	}
	else
		pEta[2417] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2464] = minval;
		else
			pEta[2464] = -minval;
	}
	else
		pEta[2464] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2704] = minval;
		else
			pEta[2704] = -minval;
	}
	else
		pEta[2704] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3144] = minval;
		else
			pEta[3144] = -minval;
	}
	else
		pEta[3144] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3436] = minval;
		else
			pEta[3436] = -minval;
	}
	else
		pEta[3436] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3948] = minval;
		else
			pEta[3948] = -minval;
	}
	else
		pEta[3948] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4605] = minval;
		else
			pEta[4605] = -minval;
	}
	else
		pEta[4605] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4623] = minval;
		else
			pEta[4623] = -minval;
	}
	else
		pEta[4623] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4802] = minval;
		else
			pEta[4802] = -minval;
	}
	else
		pEta[4802] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 165     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[39] + pEtaPrev[157];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[74] + pEtaPrev[297];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[112] + pEtaPrev[448];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[165] + pEtaPrev[660];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[308] + pEtaPrev[1233];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[347] + pEtaPrev[1389];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[356] + pEtaPrev[1424];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[421] + pEtaPrev[1684];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[575] + pEtaPrev[2301];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[605] + pEtaPrev[2421];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[617] + pEtaPrev[2468];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[677] + pEtaPrev[2708];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[805] + pEtaPrev[3146];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[933] + pEtaPrev[3439];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1189] + pEtaPrev[3951];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1312] + pEtaPrev[4419];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1347] + pEtaPrev[4629];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1377] + pEtaPrev[4808];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[157] = minval;
		else
			pEta[157] = -minval;
	}
	else
		pEta[157] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[297] = minval;
		else
			pEta[297] = -minval;
	}
	else
		pEta[297] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[448] = minval;
		else
			pEta[448] = -minval;
	}
	else
		pEta[448] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[660] = minval;
		else
			pEta[660] = -minval;
	}
	else
		pEta[660] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1233] = minval;
		else
			pEta[1233] = -minval;
	}
	else
		pEta[1233] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1389] = minval;
		else
			pEta[1389] = -minval;
	}
	else
		pEta[1389] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1424] = minval;
		else
			pEta[1424] = -minval;
	}
	else
		pEta[1424] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1684] = minval;
		else
			pEta[1684] = -minval;
	}
	else
		pEta[1684] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2301] = minval;
		else
			pEta[2301] = -minval;
	}
	else
		pEta[2301] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2421] = minval;
		else
			pEta[2421] = -minval;
	}
	else
		pEta[2421] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2468] = minval;
		else
			pEta[2468] = -minval;
	}
	else
		pEta[2468] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2708] = minval;
		else
			pEta[2708] = -minval;
	}
	else
		pEta[2708] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3146] = minval;
		else
			pEta[3146] = -minval;
	}
	else
		pEta[3146] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3439] = minval;
		else
			pEta[3439] = -minval;
	}
	else
		pEta[3439] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3951] = minval;
		else
			pEta[3951] = -minval;
	}
	else
		pEta[3951] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4419] = minval;
		else
			pEta[4419] = -minval;
	}
	else
		pEta[4419] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4629] = minval;
		else
			pEta[4629] = -minval;
	}
	else
		pEta[4629] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4808] = minval;
		else
			pEta[4808] = -minval;
	}
	else
		pEta[4808] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 166     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[40] + pEtaPrev[161];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[75] + pEtaPrev[301];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[113] + pEtaPrev[452];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[166] + pEtaPrev[664];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[309] + pEtaPrev[1237];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[348] + pEtaPrev[1393];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[357] + pEtaPrev[1428];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[422] + pEtaPrev[1688];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[544] + pEtaPrev[2177];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[606] + pEtaPrev[2425];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[618] + pEtaPrev[2472];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[678] + pEtaPrev[2712];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[806] + pEtaPrev[3148];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[934] + pEtaPrev[3442];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1190] + pEtaPrev[3954];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1313] + pEtaPrev[4425];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1348] + pEtaPrev[4635];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1378] + pEtaPrev[4814];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[161] = minval;
		else
			pEta[161] = -minval;
	}
	else
		pEta[161] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[301] = minval;
		else
			pEta[301] = -minval;
	}
	else
		pEta[301] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[452] = minval;
		else
			pEta[452] = -minval;
	}
	else
		pEta[452] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[664] = minval;
		else
			pEta[664] = -minval;
	}
	else
		pEta[664] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1237] = minval;
		else
			pEta[1237] = -minval;
	}
	else
		pEta[1237] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1393] = minval;
		else
			pEta[1393] = -minval;
	}
	else
		pEta[1393] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1428] = minval;
		else
			pEta[1428] = -minval;
	}
	else
		pEta[1428] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1688] = minval;
		else
			pEta[1688] = -minval;
	}
	else
		pEta[1688] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2177] = minval;
		else
			pEta[2177] = -minval;
	}
	else
		pEta[2177] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2425] = minval;
		else
			pEta[2425] = -minval;
	}
	else
		pEta[2425] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2472] = minval;
		else
			pEta[2472] = -minval;
	}
	else
		pEta[2472] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2712] = minval;
		else
			pEta[2712] = -minval;
	}
	else
		pEta[2712] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3148] = minval;
		else
			pEta[3148] = -minval;
	}
	else
		pEta[3148] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3442] = minval;
		else
			pEta[3442] = -minval;
	}
	else
		pEta[3442] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3954] = minval;
		else
			pEta[3954] = -minval;
	}
	else
		pEta[3954] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4425] = minval;
		else
			pEta[4425] = -minval;
	}
	else
		pEta[4425] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4635] = minval;
		else
			pEta[4635] = -minval;
	}
	else
		pEta[4635] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4814] = minval;
		else
			pEta[4814] = -minval;
	}
	else
		pEta[4814] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 167     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[41] + pEtaPrev[165];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[76] + pEtaPrev[305];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[114] + pEtaPrev[456];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[167] + pEtaPrev[668];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[310] + pEtaPrev[1241];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[349] + pEtaPrev[1397];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[358] + pEtaPrev[1432];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[423] + pEtaPrev[1692];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[545] + pEtaPrev[2181];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[607] + pEtaPrev[2429];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[619] + pEtaPrev[2476];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[679] + pEtaPrev[2716];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[807] + pEtaPrev[3150];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[935] + pEtaPrev[3445];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1191] + pEtaPrev[3957];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1314] + pEtaPrev[4431];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1349] + pEtaPrev[4641];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1379] + pEtaPrev[4820];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[165] = minval;
		else
			pEta[165] = -minval;
	}
	else
		pEta[165] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[305] = minval;
		else
			pEta[305] = -minval;
	}
	else
		pEta[305] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[456] = minval;
		else
			pEta[456] = -minval;
	}
	else
		pEta[456] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[668] = minval;
		else
			pEta[668] = -minval;
	}
	else
		pEta[668] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1241] = minval;
		else
			pEta[1241] = -minval;
	}
	else
		pEta[1241] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1397] = minval;
		else
			pEta[1397] = -minval;
	}
	else
		pEta[1397] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1432] = minval;
		else
			pEta[1432] = -minval;
	}
	else
		pEta[1432] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1692] = minval;
		else
			pEta[1692] = -minval;
	}
	else
		pEta[1692] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2181] = minval;
		else
			pEta[2181] = -minval;
	}
	else
		pEta[2181] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2429] = minval;
		else
			pEta[2429] = -minval;
	}
	else
		pEta[2429] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2476] = minval;
		else
			pEta[2476] = -minval;
	}
	else
		pEta[2476] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2716] = minval;
		else
			pEta[2716] = -minval;
	}
	else
		pEta[2716] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3150] = minval;
		else
			pEta[3150] = -minval;
	}
	else
		pEta[3150] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3445] = minval;
		else
			pEta[3445] = -minval;
	}
	else
		pEta[3445] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3957] = minval;
		else
			pEta[3957] = -minval;
	}
	else
		pEta[3957] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4431] = minval;
		else
			pEta[4431] = -minval;
	}
	else
		pEta[4431] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4641] = minval;
		else
			pEta[4641] = -minval;
	}
	else
		pEta[4641] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4820] = minval;
		else
			pEta[4820] = -minval;
	}
	else
		pEta[4820] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 168     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[42] + pEtaPrev[169];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[77] + pEtaPrev[309];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[115] + pEtaPrev[460];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[168] + pEtaPrev[672];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[311] + pEtaPrev[1245];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[350] + pEtaPrev[1401];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[359] + pEtaPrev[1436];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[424] + pEtaPrev[1696];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[546] + pEtaPrev[2185];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[576] + pEtaPrev[2305];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[620] + pEtaPrev[2480];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[680] + pEtaPrev[2720];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[808] + pEtaPrev[3152];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[936] + pEtaPrev[3448];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1192] + pEtaPrev[3960];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1315] + pEtaPrev[4437];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1350] + pEtaPrev[4647];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1380] + pEtaPrev[4826];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[169] = minval;
		else
			pEta[169] = -minval;
	}
	else
		pEta[169] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[309] = minval;
		else
			pEta[309] = -minval;
	}
	else
		pEta[309] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[460] = minval;
		else
			pEta[460] = -minval;
	}
	else
		pEta[460] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[672] = minval;
		else
			pEta[672] = -minval;
	}
	else
		pEta[672] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1245] = minval;
		else
			pEta[1245] = -minval;
	}
	else
		pEta[1245] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1401] = minval;
		else
			pEta[1401] = -minval;
	}
	else
		pEta[1401] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1436] = minval;
		else
			pEta[1436] = -minval;
	}
	else
		pEta[1436] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1696] = minval;
		else
			pEta[1696] = -minval;
	}
	else
		pEta[1696] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2185] = minval;
		else
			pEta[2185] = -minval;
	}
	else
		pEta[2185] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2305] = minval;
		else
			pEta[2305] = -minval;
	}
	else
		pEta[2305] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2480] = minval;
		else
			pEta[2480] = -minval;
	}
	else
		pEta[2480] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2720] = minval;
		else
			pEta[2720] = -minval;
	}
	else
		pEta[2720] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3152] = minval;
		else
			pEta[3152] = -minval;
	}
	else
		pEta[3152] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3448] = minval;
		else
			pEta[3448] = -minval;
	}
	else
		pEta[3448] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3960] = minval;
		else
			pEta[3960] = -minval;
	}
	else
		pEta[3960] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4437] = minval;
		else
			pEta[4437] = -minval;
	}
	else
		pEta[4437] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4647] = minval;
		else
			pEta[4647] = -minval;
	}
	else
		pEta[4647] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4826] = minval;
		else
			pEta[4826] = -minval;
	}
	else
		pEta[4826] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 169     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[43] + pEtaPrev[173];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[78] + pEtaPrev[313];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[116] + pEtaPrev[464];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[169] + pEtaPrev[676];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[312] + pEtaPrev[1249];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[351] + pEtaPrev[1405];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[360] + pEtaPrev[1440];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[425] + pEtaPrev[1700];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[547] + pEtaPrev[2189];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[577] + pEtaPrev[2309];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[621] + pEtaPrev[2484];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[681] + pEtaPrev[2724];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[809] + pEtaPrev[3154];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[937] + pEtaPrev[3451];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1193] + pEtaPrev[3963];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1316] + pEtaPrev[4443];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1351] + pEtaPrev[4653];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1381] + pEtaPrev[4832];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[173] = minval;
		else
			pEta[173] = -minval;
	}
	else
		pEta[173] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[313] = minval;
		else
			pEta[313] = -minval;
	}
	else
		pEta[313] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[464] = minval;
		else
			pEta[464] = -minval;
	}
	else
		pEta[464] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[676] = minval;
		else
			pEta[676] = -minval;
	}
	else
		pEta[676] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1249] = minval;
		else
			pEta[1249] = -minval;
	}
	else
		pEta[1249] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1405] = minval;
		else
			pEta[1405] = -minval;
	}
	else
		pEta[1405] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1440] = minval;
		else
			pEta[1440] = -minval;
	}
	else
		pEta[1440] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1700] = minval;
		else
			pEta[1700] = -minval;
	}
	else
		pEta[1700] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2189] = minval;
		else
			pEta[2189] = -minval;
	}
	else
		pEta[2189] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2309] = minval;
		else
			pEta[2309] = -minval;
	}
	else
		pEta[2309] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2484] = minval;
		else
			pEta[2484] = -minval;
	}
	else
		pEta[2484] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2724] = minval;
		else
			pEta[2724] = -minval;
	}
	else
		pEta[2724] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3154] = minval;
		else
			pEta[3154] = -minval;
	}
	else
		pEta[3154] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3451] = minval;
		else
			pEta[3451] = -minval;
	}
	else
		pEta[3451] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3963] = minval;
		else
			pEta[3963] = -minval;
	}
	else
		pEta[3963] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4443] = minval;
		else
			pEta[4443] = -minval;
	}
	else
		pEta[4443] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4653] = minval;
		else
			pEta[4653] = -minval;
	}
	else
		pEta[4653] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4832] = minval;
		else
			pEta[4832] = -minval;
	}
	else
		pEta[4832] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 170     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[44] + pEtaPrev[177];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[79] + pEtaPrev[317];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[117] + pEtaPrev[468];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[170] + pEtaPrev[680];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[313] + pEtaPrev[1253];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[320] + pEtaPrev[1281];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[361] + pEtaPrev[1444];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[426] + pEtaPrev[1704];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[548] + pEtaPrev[2193];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[578] + pEtaPrev[2313];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[622] + pEtaPrev[2488];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[682] + pEtaPrev[2728];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[810] + pEtaPrev[3156];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[938] + pEtaPrev[3454];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1194] + pEtaPrev[3966];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1317] + pEtaPrev[4449];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1352] + pEtaPrev[4659];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1382] + pEtaPrev[4838];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[177] = minval;
		else
			pEta[177] = -minval;
	}
	else
		pEta[177] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[317] = minval;
		else
			pEta[317] = -minval;
	}
	else
		pEta[317] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[468] = minval;
		else
			pEta[468] = -minval;
	}
	else
		pEta[468] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[680] = minval;
		else
			pEta[680] = -minval;
	}
	else
		pEta[680] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1253] = minval;
		else
			pEta[1253] = -minval;
	}
	else
		pEta[1253] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1281] = minval;
		else
			pEta[1281] = -minval;
	}
	else
		pEta[1281] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1444] = minval;
		else
			pEta[1444] = -minval;
	}
	else
		pEta[1444] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1704] = minval;
		else
			pEta[1704] = -minval;
	}
	else
		pEta[1704] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2193] = minval;
		else
			pEta[2193] = -minval;
	}
	else
		pEta[2193] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2313] = minval;
		else
			pEta[2313] = -minval;
	}
	else
		pEta[2313] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2488] = minval;
		else
			pEta[2488] = -minval;
	}
	else
		pEta[2488] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2728] = minval;
		else
			pEta[2728] = -minval;
	}
	else
		pEta[2728] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3156] = minval;
		else
			pEta[3156] = -minval;
	}
	else
		pEta[3156] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3454] = minval;
		else
			pEta[3454] = -minval;
	}
	else
		pEta[3454] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3966] = minval;
		else
			pEta[3966] = -minval;
	}
	else
		pEta[3966] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4449] = minval;
		else
			pEta[4449] = -minval;
	}
	else
		pEta[4449] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4659] = minval;
		else
			pEta[4659] = -minval;
	}
	else
		pEta[4659] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4838] = minval;
		else
			pEta[4838] = -minval;
	}
	else
		pEta[4838] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 171     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[45] + pEtaPrev[181];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[80] + pEtaPrev[321];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[118] + pEtaPrev[472];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[171] + pEtaPrev[684];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[314] + pEtaPrev[1257];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[321] + pEtaPrev[1285];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[362] + pEtaPrev[1448];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[427] + pEtaPrev[1708];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[549] + pEtaPrev[2197];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[579] + pEtaPrev[2317];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[623] + pEtaPrev[2492];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[683] + pEtaPrev[2732];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[811] + pEtaPrev[3158];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[939] + pEtaPrev[3457];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1195] + pEtaPrev[3969];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1318] + pEtaPrev[4455];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1353] + pEtaPrev[4665];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1383] + pEtaPrev[4844];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[181] = minval;
		else
			pEta[181] = -minval;
	}
	else
		pEta[181] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[321] = minval;
		else
			pEta[321] = -minval;
	}
	else
		pEta[321] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[472] = minval;
		else
			pEta[472] = -minval;
	}
	else
		pEta[472] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[684] = minval;
		else
			pEta[684] = -minval;
	}
	else
		pEta[684] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1257] = minval;
		else
			pEta[1257] = -minval;
	}
	else
		pEta[1257] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1285] = minval;
		else
			pEta[1285] = -minval;
	}
	else
		pEta[1285] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1448] = minval;
		else
			pEta[1448] = -minval;
	}
	else
		pEta[1448] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1708] = minval;
		else
			pEta[1708] = -minval;
	}
	else
		pEta[1708] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2197] = minval;
		else
			pEta[2197] = -minval;
	}
	else
		pEta[2197] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2317] = minval;
		else
			pEta[2317] = -minval;
	}
	else
		pEta[2317] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2492] = minval;
		else
			pEta[2492] = -minval;
	}
	else
		pEta[2492] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2732] = minval;
		else
			pEta[2732] = -minval;
	}
	else
		pEta[2732] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3158] = minval;
		else
			pEta[3158] = -minval;
	}
	else
		pEta[3158] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3457] = minval;
		else
			pEta[3457] = -minval;
	}
	else
		pEta[3457] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3969] = minval;
		else
			pEta[3969] = -minval;
	}
	else
		pEta[3969] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4455] = minval;
		else
			pEta[4455] = -minval;
	}
	else
		pEta[4455] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4665] = minval;
		else
			pEta[4665] = -minval;
	}
	else
		pEta[4665] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4844] = minval;
		else
			pEta[4844] = -minval;
	}
	else
		pEta[4844] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 172     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[46] + pEtaPrev[185];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[81] + pEtaPrev[325];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[119] + pEtaPrev[476];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[172] + pEtaPrev[688];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[315] + pEtaPrev[1261];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[322] + pEtaPrev[1289];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[363] + pEtaPrev[1452];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[428] + pEtaPrev[1712];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[550] + pEtaPrev[2201];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[580] + pEtaPrev[2321];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[624] + pEtaPrev[2496];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[684] + pEtaPrev[2736];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[812] + pEtaPrev[3160];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[940] + pEtaPrev[3460];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1196] + pEtaPrev[3972];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1319] + pEtaPrev[4461];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1354] + pEtaPrev[4671];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1384] + pEtaPrev[4850];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[185] = minval;
		else
			pEta[185] = -minval;
	}
	else
		pEta[185] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[325] = minval;
		else
			pEta[325] = -minval;
	}
	else
		pEta[325] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[476] = minval;
		else
			pEta[476] = -minval;
	}
	else
		pEta[476] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[688] = minval;
		else
			pEta[688] = -minval;
	}
	else
		pEta[688] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1261] = minval;
		else
			pEta[1261] = -minval;
	}
	else
		pEta[1261] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1289] = minval;
		else
			pEta[1289] = -minval;
	}
	else
		pEta[1289] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1452] = minval;
		else
			pEta[1452] = -minval;
	}
	else
		pEta[1452] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1712] = minval;
		else
			pEta[1712] = -minval;
	}
	else
		pEta[1712] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2201] = minval;
		else
			pEta[2201] = -minval;
	}
	else
		pEta[2201] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2321] = minval;
		else
			pEta[2321] = -minval;
	}
	else
		pEta[2321] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2496] = minval;
		else
			pEta[2496] = -minval;
	}
	else
		pEta[2496] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2736] = minval;
		else
			pEta[2736] = -minval;
	}
	else
		pEta[2736] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3160] = minval;
		else
			pEta[3160] = -minval;
	}
	else
		pEta[3160] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3460] = minval;
		else
			pEta[3460] = -minval;
	}
	else
		pEta[3460] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3972] = minval;
		else
			pEta[3972] = -minval;
	}
	else
		pEta[3972] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4461] = minval;
		else
			pEta[4461] = -minval;
	}
	else
		pEta[4461] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4671] = minval;
		else
			pEta[4671] = -minval;
	}
	else
		pEta[4671] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4850] = minval;
		else
			pEta[4850] = -minval;
	}
	else
		pEta[4850] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 173     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[47] + pEtaPrev[189];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[82] + pEtaPrev[329];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[120] + pEtaPrev[480];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[173] + pEtaPrev[692];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[316] + pEtaPrev[1265];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[323] + pEtaPrev[1293];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[364] + pEtaPrev[1456];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[429] + pEtaPrev[1716];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[551] + pEtaPrev[2205];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[581] + pEtaPrev[2325];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[625] + pEtaPrev[2500];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[685] + pEtaPrev[2740];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[813] + pEtaPrev[3162];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[941] + pEtaPrev[3463];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1197] + pEtaPrev[3975];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1320] + pEtaPrev[4467];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1355] + pEtaPrev[4677];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1385] + pEtaPrev[4856];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[189] = minval;
		else
			pEta[189] = -minval;
	}
	else
		pEta[189] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[329] = minval;
		else
			pEta[329] = -minval;
	}
	else
		pEta[329] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[480] = minval;
		else
			pEta[480] = -minval;
	}
	else
		pEta[480] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[692] = minval;
		else
			pEta[692] = -minval;
	}
	else
		pEta[692] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1265] = minval;
		else
			pEta[1265] = -minval;
	}
	else
		pEta[1265] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1293] = minval;
		else
			pEta[1293] = -minval;
	}
	else
		pEta[1293] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1456] = minval;
		else
			pEta[1456] = -minval;
	}
	else
		pEta[1456] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1716] = minval;
		else
			pEta[1716] = -minval;
	}
	else
		pEta[1716] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2205] = minval;
		else
			pEta[2205] = -minval;
	}
	else
		pEta[2205] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2325] = minval;
		else
			pEta[2325] = -minval;
	}
	else
		pEta[2325] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2500] = minval;
		else
			pEta[2500] = -minval;
	}
	else
		pEta[2500] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2740] = minval;
		else
			pEta[2740] = -minval;
	}
	else
		pEta[2740] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3162] = minval;
		else
			pEta[3162] = -minval;
	}
	else
		pEta[3162] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3463] = minval;
		else
			pEta[3463] = -minval;
	}
	else
		pEta[3463] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3975] = minval;
		else
			pEta[3975] = -minval;
	}
	else
		pEta[3975] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4467] = minval;
		else
			pEta[4467] = -minval;
	}
	else
		pEta[4467] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4677] = minval;
		else
			pEta[4677] = -minval;
	}
	else
		pEta[4677] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4856] = minval;
		else
			pEta[4856] = -minval;
	}
	else
		pEta[4856] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 174     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[48] + pEtaPrev[193];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[83] + pEtaPrev[333];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[121] + pEtaPrev[484];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[174] + pEtaPrev[696];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[317] + pEtaPrev[1269];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[324] + pEtaPrev[1297];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[365] + pEtaPrev[1460];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[430] + pEtaPrev[1720];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[552] + pEtaPrev[2209];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[582] + pEtaPrev[2329];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[626] + pEtaPrev[2504];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[686] + pEtaPrev[2744];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[814] + pEtaPrev[3164];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[942] + pEtaPrev[3466];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1198] + pEtaPrev[3978];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1321] + pEtaPrev[4473];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1356] + pEtaPrev[4683];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1386] + pEtaPrev[4862];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[193] = minval;
		else
			pEta[193] = -minval;
	}
	else
		pEta[193] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[333] = minval;
		else
			pEta[333] = -minval;
	}
	else
		pEta[333] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[484] = minval;
		else
			pEta[484] = -minval;
	}
	else
		pEta[484] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[696] = minval;
		else
			pEta[696] = -minval;
	}
	else
		pEta[696] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1269] = minval;
		else
			pEta[1269] = -minval;
	}
	else
		pEta[1269] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1297] = minval;
		else
			pEta[1297] = -minval;
	}
	else
		pEta[1297] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1460] = minval;
		else
			pEta[1460] = -minval;
	}
	else
		pEta[1460] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1720] = minval;
		else
			pEta[1720] = -minval;
	}
	else
		pEta[1720] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2209] = minval;
		else
			pEta[2209] = -minval;
	}
	else
		pEta[2209] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2329] = minval;
		else
			pEta[2329] = -minval;
	}
	else
		pEta[2329] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2504] = minval;
		else
			pEta[2504] = -minval;
	}
	else
		pEta[2504] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2744] = minval;
		else
			pEta[2744] = -minval;
	}
	else
		pEta[2744] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3164] = minval;
		else
			pEta[3164] = -minval;
	}
	else
		pEta[3164] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3466] = minval;
		else
			pEta[3466] = -minval;
	}
	else
		pEta[3466] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3978] = minval;
		else
			pEta[3978] = -minval;
	}
	else
		pEta[3978] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4473] = minval;
		else
			pEta[4473] = -minval;
	}
	else
		pEta[4473] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4683] = minval;
		else
			pEta[4683] = -minval;
	}
	else
		pEta[4683] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4862] = minval;
		else
			pEta[4862] = -minval;
	}
	else
		pEta[4862] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 175     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[49] + pEtaPrev[197];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[84] + pEtaPrev[337];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[122] + pEtaPrev[488];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[175] + pEtaPrev[700];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[318] + pEtaPrev[1273];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[325] + pEtaPrev[1301];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[366] + pEtaPrev[1464];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[431] + pEtaPrev[1724];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[553] + pEtaPrev[2213];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[583] + pEtaPrev[2333];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[627] + pEtaPrev[2508];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[687] + pEtaPrev[2748];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[815] + pEtaPrev[3166];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[943] + pEtaPrev[3469];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1199] + pEtaPrev[3981];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1322] + pEtaPrev[4479];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1357] + pEtaPrev[4689];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1387] + pEtaPrev[4868];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[197] = minval;
		else
			pEta[197] = -minval;
	}
	else
		pEta[197] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[337] = minval;
		else
			pEta[337] = -minval;
	}
	else
		pEta[337] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[488] = minval;
		else
			pEta[488] = -minval;
	}
	else
		pEta[488] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[700] = minval;
		else
			pEta[700] = -minval;
	}
	else
		pEta[700] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1273] = minval;
		else
			pEta[1273] = -minval;
	}
	else
		pEta[1273] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1301] = minval;
		else
			pEta[1301] = -minval;
	}
	else
		pEta[1301] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1464] = minval;
		else
			pEta[1464] = -minval;
	}
	else
		pEta[1464] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1724] = minval;
		else
			pEta[1724] = -minval;
	}
	else
		pEta[1724] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2213] = minval;
		else
			pEta[2213] = -minval;
	}
	else
		pEta[2213] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2333] = minval;
		else
			pEta[2333] = -minval;
	}
	else
		pEta[2333] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2508] = minval;
		else
			pEta[2508] = -minval;
	}
	else
		pEta[2508] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2748] = minval;
		else
			pEta[2748] = -minval;
	}
	else
		pEta[2748] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3166] = minval;
		else
			pEta[3166] = -minval;
	}
	else
		pEta[3166] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3469] = minval;
		else
			pEta[3469] = -minval;
	}
	else
		pEta[3469] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3981] = minval;
		else
			pEta[3981] = -minval;
	}
	else
		pEta[3981] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4479] = minval;
		else
			pEta[4479] = -minval;
	}
	else
		pEta[4479] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4689] = minval;
		else
			pEta[4689] = -minval;
	}
	else
		pEta[4689] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4868] = minval;
		else
			pEta[4868] = -minval;
	}
	else
		pEta[4868] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 176     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[50] + pEtaPrev[201];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[85] + pEtaPrev[341];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[123] + pEtaPrev[492];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[176] + pEtaPrev[704];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[319] + pEtaPrev[1277];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[326] + pEtaPrev[1305];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[367] + pEtaPrev[1468];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[432] + pEtaPrev[1728];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[554] + pEtaPrev[2217];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[584] + pEtaPrev[2337];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[628] + pEtaPrev[2512];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[688] + pEtaPrev[2752];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[816] + pEtaPrev[3168];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[944] + pEtaPrev[3472];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1200] + pEtaPrev[3984];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1323] + pEtaPrev[4485];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1358] + pEtaPrev[4695];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1388] + pEtaPrev[4874];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[201] = minval;
		else
			pEta[201] = -minval;
	}
	else
		pEta[201] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[341] = minval;
		else
			pEta[341] = -minval;
	}
	else
		pEta[341] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[492] = minval;
		else
			pEta[492] = -minval;
	}
	else
		pEta[492] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[704] = minval;
		else
			pEta[704] = -minval;
	}
	else
		pEta[704] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1277] = minval;
		else
			pEta[1277] = -minval;
	}
	else
		pEta[1277] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1305] = minval;
		else
			pEta[1305] = -minval;
	}
	else
		pEta[1305] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1468] = minval;
		else
			pEta[1468] = -minval;
	}
	else
		pEta[1468] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1728] = minval;
		else
			pEta[1728] = -minval;
	}
	else
		pEta[1728] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2217] = minval;
		else
			pEta[2217] = -minval;
	}
	else
		pEta[2217] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2337] = minval;
		else
			pEta[2337] = -minval;
	}
	else
		pEta[2337] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2512] = minval;
		else
			pEta[2512] = -minval;
	}
	else
		pEta[2512] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2752] = minval;
		else
			pEta[2752] = -minval;
	}
	else
		pEta[2752] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3168] = minval;
		else
			pEta[3168] = -minval;
	}
	else
		pEta[3168] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3472] = minval;
		else
			pEta[3472] = -minval;
	}
	else
		pEta[3472] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3984] = minval;
		else
			pEta[3984] = -minval;
	}
	else
		pEta[3984] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4485] = minval;
		else
			pEta[4485] = -minval;
	}
	else
		pEta[4485] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4695] = minval;
		else
			pEta[4695] = -minval;
	}
	else
		pEta[4695] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4874] = minval;
		else
			pEta[4874] = -minval;
	}
	else
		pEta[4874] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 177     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[51] + pEtaPrev[205];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[86] + pEtaPrev[345];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[124] + pEtaPrev[496];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[177] + pEtaPrev[708];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[288] + pEtaPrev[1153];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[327] + pEtaPrev[1309];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[368] + pEtaPrev[1472];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[433] + pEtaPrev[1732];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[555] + pEtaPrev[2221];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[585] + pEtaPrev[2341];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[629] + pEtaPrev[2516];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[689] + pEtaPrev[2756];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[817] + pEtaPrev[3170];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[945] + pEtaPrev[3475];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1201] + pEtaPrev[3987];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1324] + pEtaPrev[4491];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1359] + pEtaPrev[4701];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1389] + pEtaPrev[4880];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[205] = minval;
		else
			pEta[205] = -minval;
	}
	else
		pEta[205] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[345] = minval;
		else
			pEta[345] = -minval;
	}
	else
		pEta[345] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[496] = minval;
		else
			pEta[496] = -minval;
	}
	else
		pEta[496] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[708] = minval;
		else
			pEta[708] = -minval;
	}
	else
		pEta[708] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1153] = minval;
		else
			pEta[1153] = -minval;
	}
	else
		pEta[1153] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1309] = minval;
		else
			pEta[1309] = -minval;
	}
	else
		pEta[1309] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1472] = minval;
		else
			pEta[1472] = -minval;
	}
	else
		pEta[1472] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1732] = minval;
		else
			pEta[1732] = -minval;
	}
	else
		pEta[1732] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2221] = minval;
		else
			pEta[2221] = -minval;
	}
	else
		pEta[2221] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2341] = minval;
		else
			pEta[2341] = -minval;
	}
	else
		pEta[2341] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2516] = minval;
		else
			pEta[2516] = -minval;
	}
	else
		pEta[2516] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2756] = minval;
		else
			pEta[2756] = -minval;
	}
	else
		pEta[2756] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3170] = minval;
		else
			pEta[3170] = -minval;
	}
	else
		pEta[3170] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3475] = minval;
		else
			pEta[3475] = -minval;
	}
	else
		pEta[3475] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3987] = minval;
		else
			pEta[3987] = -minval;
	}
	else
		pEta[3987] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4491] = minval;
		else
			pEta[4491] = -minval;
	}
	else
		pEta[4491] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4701] = minval;
		else
			pEta[4701] = -minval;
	}
	else
		pEta[4701] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4880] = minval;
		else
			pEta[4880] = -minval;
	}
	else
		pEta[4880] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 178     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[52] + pEtaPrev[209];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[87] + pEtaPrev[349];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[125] + pEtaPrev[500];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[178] + pEtaPrev[712];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[289] + pEtaPrev[1157];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[328] + pEtaPrev[1313];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[369] + pEtaPrev[1476];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[434] + pEtaPrev[1736];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[556] + pEtaPrev[2225];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[586] + pEtaPrev[2345];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[630] + pEtaPrev[2520];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[690] + pEtaPrev[2760];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[818] + pEtaPrev[3172];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[946] + pEtaPrev[3478];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1202] + pEtaPrev[3990];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1325] + pEtaPrev[4497];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1360] + pEtaPrev[4707];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1390] + pEtaPrev[4886];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[209] = minval;
		else
			pEta[209] = -minval;
	}
	else
		pEta[209] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[349] = minval;
		else
			pEta[349] = -minval;
	}
	else
		pEta[349] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[500] = minval;
		else
			pEta[500] = -minval;
	}
	else
		pEta[500] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[712] = minval;
		else
			pEta[712] = -minval;
	}
	else
		pEta[712] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1157] = minval;
		else
			pEta[1157] = -minval;
	}
	else
		pEta[1157] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1313] = minval;
		else
			pEta[1313] = -minval;
	}
	else
		pEta[1313] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1476] = minval;
		else
			pEta[1476] = -minval;
	}
	else
		pEta[1476] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1736] = minval;
		else
			pEta[1736] = -minval;
	}
	else
		pEta[1736] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2225] = minval;
		else
			pEta[2225] = -minval;
	}
	else
		pEta[2225] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2345] = minval;
		else
			pEta[2345] = -minval;
	}
	else
		pEta[2345] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2520] = minval;
		else
			pEta[2520] = -minval;
	}
	else
		pEta[2520] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2760] = minval;
		else
			pEta[2760] = -minval;
	}
	else
		pEta[2760] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3172] = minval;
		else
			pEta[3172] = -minval;
	}
	else
		pEta[3172] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3478] = minval;
		else
			pEta[3478] = -minval;
	}
	else
		pEta[3478] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3990] = minval;
		else
			pEta[3990] = -minval;
	}
	else
		pEta[3990] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4497] = minval;
		else
			pEta[4497] = -minval;
	}
	else
		pEta[4497] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4707] = minval;
		else
			pEta[4707] = -minval;
	}
	else
		pEta[4707] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4886] = minval;
		else
			pEta[4886] = -minval;
	}
	else
		pEta[4886] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 179     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[53] + pEtaPrev[213];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[88] + pEtaPrev[353];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[126] + pEtaPrev[504];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[179] + pEtaPrev[716];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[290] + pEtaPrev[1161];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[329] + pEtaPrev[1317];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[370] + pEtaPrev[1480];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[435] + pEtaPrev[1740];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[557] + pEtaPrev[2229];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[587] + pEtaPrev[2349];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[631] + pEtaPrev[2524];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[691] + pEtaPrev[2764];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[819] + pEtaPrev[3174];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[947] + pEtaPrev[3481];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1203] + pEtaPrev[3993];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1326] + pEtaPrev[4503];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1361] + pEtaPrev[4713];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1391] + pEtaPrev[4892];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[213] = minval;
		else
			pEta[213] = -minval;
	}
	else
		pEta[213] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[353] = minval;
		else
			pEta[353] = -minval;
	}
	else
		pEta[353] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[504] = minval;
		else
			pEta[504] = -minval;
	}
	else
		pEta[504] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[716] = minval;
		else
			pEta[716] = -minval;
	}
	else
		pEta[716] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1161] = minval;
		else
			pEta[1161] = -minval;
	}
	else
		pEta[1161] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1317] = minval;
		else
			pEta[1317] = -minval;
	}
	else
		pEta[1317] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1480] = minval;
		else
			pEta[1480] = -minval;
	}
	else
		pEta[1480] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1740] = minval;
		else
			pEta[1740] = -minval;
	}
	else
		pEta[1740] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2229] = minval;
		else
			pEta[2229] = -minval;
	}
	else
		pEta[2229] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2349] = minval;
		else
			pEta[2349] = -minval;
	}
	else
		pEta[2349] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2524] = minval;
		else
			pEta[2524] = -minval;
	}
	else
		pEta[2524] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2764] = minval;
		else
			pEta[2764] = -minval;
	}
	else
		pEta[2764] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3174] = minval;
		else
			pEta[3174] = -minval;
	}
	else
		pEta[3174] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3481] = minval;
		else
			pEta[3481] = -minval;
	}
	else
		pEta[3481] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3993] = minval;
		else
			pEta[3993] = -minval;
	}
	else
		pEta[3993] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4503] = minval;
		else
			pEta[4503] = -minval;
	}
	else
		pEta[4503] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4713] = minval;
		else
			pEta[4713] = -minval;
	}
	else
		pEta[4713] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4892] = minval;
		else
			pEta[4892] = -minval;
	}
	else
		pEta[4892] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 180     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[54] + pEtaPrev[217];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[89] + pEtaPrev[357];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[127] + pEtaPrev[508];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[180] + pEtaPrev[720];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[291] + pEtaPrev[1165];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[330] + pEtaPrev[1321];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[371] + pEtaPrev[1484];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[436] + pEtaPrev[1744];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[558] + pEtaPrev[2233];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[588] + pEtaPrev[2353];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[632] + pEtaPrev[2528];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[692] + pEtaPrev[2768];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[820] + pEtaPrev[3176];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[948] + pEtaPrev[3484];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1204] + pEtaPrev[3996];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1327] + pEtaPrev[4509];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1362] + pEtaPrev[4719];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1392] + pEtaPrev[4898];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[217] = minval;
		else
			pEta[217] = -minval;
	}
	else
		pEta[217] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[357] = minval;
		else
			pEta[357] = -minval;
	}
	else
		pEta[357] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[508] = minval;
		else
			pEta[508] = -minval;
	}
	else
		pEta[508] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[720] = minval;
		else
			pEta[720] = -minval;
	}
	else
		pEta[720] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1165] = minval;
		else
			pEta[1165] = -minval;
	}
	else
		pEta[1165] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1321] = minval;
		else
			pEta[1321] = -minval;
	}
	else
		pEta[1321] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1484] = minval;
		else
			pEta[1484] = -minval;
	}
	else
		pEta[1484] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1744] = minval;
		else
			pEta[1744] = -minval;
	}
	else
		pEta[1744] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2233] = minval;
		else
			pEta[2233] = -minval;
	}
	else
		pEta[2233] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2353] = minval;
		else
			pEta[2353] = -minval;
	}
	else
		pEta[2353] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2528] = minval;
		else
			pEta[2528] = -minval;
	}
	else
		pEta[2528] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2768] = minval;
		else
			pEta[2768] = -minval;
	}
	else
		pEta[2768] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3176] = minval;
		else
			pEta[3176] = -minval;
	}
	else
		pEta[3176] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3484] = minval;
		else
			pEta[3484] = -minval;
	}
	else
		pEta[3484] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3996] = minval;
		else
			pEta[3996] = -minval;
	}
	else
		pEta[3996] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4509] = minval;
		else
			pEta[4509] = -minval;
	}
	else
		pEta[4509] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4719] = minval;
		else
			pEta[4719] = -minval;
	}
	else
		pEta[4719] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4898] = minval;
		else
			pEta[4898] = -minval;
	}
	else
		pEta[4898] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 181     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[55] + pEtaPrev[221];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[90] + pEtaPrev[361];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[96] + pEtaPrev[384];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[181] + pEtaPrev[724];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[292] + pEtaPrev[1169];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[331] + pEtaPrev[1325];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[372] + pEtaPrev[1488];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[437] + pEtaPrev[1748];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[559] + pEtaPrev[2237];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[589] + pEtaPrev[2357];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[633] + pEtaPrev[2532];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[693] + pEtaPrev[2772];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[821] + pEtaPrev[3178];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[949] + pEtaPrev[3487];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1205] + pEtaPrev[3999];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1328] + pEtaPrev[4515];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1363] + pEtaPrev[4725];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1393] + pEtaPrev[4904];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[221] = minval;
		else
			pEta[221] = -minval;
	}
	else
		pEta[221] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[361] = minval;
		else
			pEta[361] = -minval;
	}
	else
		pEta[361] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[384] = minval;
		else
			pEta[384] = -minval;
	}
	else
		pEta[384] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[724] = minval;
		else
			pEta[724] = -minval;
	}
	else
		pEta[724] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1169] = minval;
		else
			pEta[1169] = -minval;
	}
	else
		pEta[1169] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1325] = minval;
		else
			pEta[1325] = -minval;
	}
	else
		pEta[1325] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1488] = minval;
		else
			pEta[1488] = -minval;
	}
	else
		pEta[1488] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1748] = minval;
		else
			pEta[1748] = -minval;
	}
	else
		pEta[1748] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2237] = minval;
		else
			pEta[2237] = -minval;
	}
	else
		pEta[2237] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2357] = minval;
		else
			pEta[2357] = -minval;
	}
	else
		pEta[2357] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2532] = minval;
		else
			pEta[2532] = -minval;
	}
	else
		pEta[2532] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2772] = minval;
		else
			pEta[2772] = -minval;
	}
	else
		pEta[2772] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3178] = minval;
		else
			pEta[3178] = -minval;
	}
	else
		pEta[3178] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3487] = minval;
		else
			pEta[3487] = -minval;
	}
	else
		pEta[3487] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3999] = minval;
		else
			pEta[3999] = -minval;
	}
	else
		pEta[3999] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4515] = minval;
		else
			pEta[4515] = -minval;
	}
	else
		pEta[4515] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4725] = minval;
		else
			pEta[4725] = -minval;
	}
	else
		pEta[4725] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4904] = minval;
		else
			pEta[4904] = -minval;
	}
	else
		pEta[4904] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 182     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[56] + pEtaPrev[225];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[91] + pEtaPrev[365];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[97] + pEtaPrev[388];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[182] + pEtaPrev[728];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[293] + pEtaPrev[1173];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[332] + pEtaPrev[1329];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[373] + pEtaPrev[1492];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[438] + pEtaPrev[1752];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[560] + pEtaPrev[2241];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[590] + pEtaPrev[2361];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[634] + pEtaPrev[2536];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[694] + pEtaPrev[2776];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[822] + pEtaPrev[3180];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[950] + pEtaPrev[3490];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1206] + pEtaPrev[4002];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1329] + pEtaPrev[4521];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1364] + pEtaPrev[4731];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1394] + pEtaPrev[4910];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[225] = minval;
		else
			pEta[225] = -minval;
	}
	else
		pEta[225] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[365] = minval;
		else
			pEta[365] = -minval;
	}
	else
		pEta[365] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[388] = minval;
		else
			pEta[388] = -minval;
	}
	else
		pEta[388] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[728] = minval;
		else
			pEta[728] = -minval;
	}
	else
		pEta[728] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1173] = minval;
		else
			pEta[1173] = -minval;
	}
	else
		pEta[1173] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1329] = minval;
		else
			pEta[1329] = -minval;
	}
	else
		pEta[1329] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1492] = minval;
		else
			pEta[1492] = -minval;
	}
	else
		pEta[1492] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1752] = minval;
		else
			pEta[1752] = -minval;
	}
	else
		pEta[1752] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2241] = minval;
		else
			pEta[2241] = -minval;
	}
	else
		pEta[2241] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2361] = minval;
		else
			pEta[2361] = -minval;
	}
	else
		pEta[2361] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2536] = minval;
		else
			pEta[2536] = -minval;
	}
	else
		pEta[2536] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2776] = minval;
		else
			pEta[2776] = -minval;
	}
	else
		pEta[2776] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3180] = minval;
		else
			pEta[3180] = -minval;
	}
	else
		pEta[3180] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3490] = minval;
		else
			pEta[3490] = -minval;
	}
	else
		pEta[3490] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4002] = minval;
		else
			pEta[4002] = -minval;
	}
	else
		pEta[4002] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4521] = minval;
		else
			pEta[4521] = -minval;
	}
	else
		pEta[4521] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4731] = minval;
		else
			pEta[4731] = -minval;
	}
	else
		pEta[4731] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4910] = minval;
		else
			pEta[4910] = -minval;
	}
	else
		pEta[4910] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 183     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[57] + pEtaPrev[229];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[92] + pEtaPrev[369];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[98] + pEtaPrev[392];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[183] + pEtaPrev[732];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[294] + pEtaPrev[1177];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[333] + pEtaPrev[1333];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[374] + pEtaPrev[1496];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[439] + pEtaPrev[1756];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[561] + pEtaPrev[2245];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[591] + pEtaPrev[2365];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[635] + pEtaPrev[2540];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[695] + pEtaPrev[2780];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[823] + pEtaPrev[3182];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[951] + pEtaPrev[3493];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1207] + pEtaPrev[4005];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1330] + pEtaPrev[4527];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1365] + pEtaPrev[4737];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1395] + pEtaPrev[4916];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[229] = minval;
		else
			pEta[229] = -minval;
	}
	else
		pEta[229] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[369] = minval;
		else
			pEta[369] = -minval;
	}
	else
		pEta[369] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[392] = minval;
		else
			pEta[392] = -minval;
	}
	else
		pEta[392] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[732] = minval;
		else
			pEta[732] = -minval;
	}
	else
		pEta[732] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1177] = minval;
		else
			pEta[1177] = -minval;
	}
	else
		pEta[1177] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1333] = minval;
		else
			pEta[1333] = -minval;
	}
	else
		pEta[1333] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1496] = minval;
		else
			pEta[1496] = -minval;
	}
	else
		pEta[1496] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1756] = minval;
		else
			pEta[1756] = -minval;
	}
	else
		pEta[1756] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2245] = minval;
		else
			pEta[2245] = -minval;
	}
	else
		pEta[2245] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2365] = minval;
		else
			pEta[2365] = -minval;
	}
	else
		pEta[2365] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2540] = minval;
		else
			pEta[2540] = -minval;
	}
	else
		pEta[2540] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2780] = minval;
		else
			pEta[2780] = -minval;
	}
	else
		pEta[2780] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3182] = minval;
		else
			pEta[3182] = -minval;
	}
	else
		pEta[3182] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3493] = minval;
		else
			pEta[3493] = -minval;
	}
	else
		pEta[3493] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4005] = minval;
		else
			pEta[4005] = -minval;
	}
	else
		pEta[4005] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4527] = minval;
		else
			pEta[4527] = -minval;
	}
	else
		pEta[4527] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4737] = minval;
		else
			pEta[4737] = -minval;
	}
	else
		pEta[4737] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4916] = minval;
		else
			pEta[4916] = -minval;
	}
	else
		pEta[4916] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 184     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[58] + pEtaPrev[233];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[93] + pEtaPrev[373];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[99] + pEtaPrev[396];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[184] + pEtaPrev[736];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[295] + pEtaPrev[1181];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[334] + pEtaPrev[1337];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[375] + pEtaPrev[1500];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[440] + pEtaPrev[1760];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[562] + pEtaPrev[2249];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[592] + pEtaPrev[2369];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[636] + pEtaPrev[2544];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[696] + pEtaPrev[2784];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[824] + pEtaPrev[3184];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[952] + pEtaPrev[3496];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1208] + pEtaPrev[4008];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1331] + pEtaPrev[4533];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1366] + pEtaPrev[4743];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1396] + pEtaPrev[4922];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[233] = minval;
		else
			pEta[233] = -minval;
	}
	else
		pEta[233] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[373] = minval;
		else
			pEta[373] = -minval;
	}
	else
		pEta[373] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[396] = minval;
		else
			pEta[396] = -minval;
	}
	else
		pEta[396] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[736] = minval;
		else
			pEta[736] = -minval;
	}
	else
		pEta[736] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1181] = minval;
		else
			pEta[1181] = -minval;
	}
	else
		pEta[1181] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1337] = minval;
		else
			pEta[1337] = -minval;
	}
	else
		pEta[1337] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1500] = minval;
		else
			pEta[1500] = -minval;
	}
	else
		pEta[1500] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1760] = minval;
		else
			pEta[1760] = -minval;
	}
	else
		pEta[1760] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2249] = minval;
		else
			pEta[2249] = -minval;
	}
	else
		pEta[2249] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2369] = minval;
		else
			pEta[2369] = -minval;
	}
	else
		pEta[2369] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2544] = minval;
		else
			pEta[2544] = -minval;
	}
	else
		pEta[2544] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2784] = minval;
		else
			pEta[2784] = -minval;
	}
	else
		pEta[2784] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3184] = minval;
		else
			pEta[3184] = -minval;
	}
	else
		pEta[3184] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3496] = minval;
		else
			pEta[3496] = -minval;
	}
	else
		pEta[3496] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4008] = minval;
		else
			pEta[4008] = -minval;
	}
	else
		pEta[4008] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4533] = minval;
		else
			pEta[4533] = -minval;
	}
	else
		pEta[4533] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4743] = minval;
		else
			pEta[4743] = -minval;
	}
	else
		pEta[4743] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4922] = minval;
		else
			pEta[4922] = -minval;
	}
	else
		pEta[4922] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 185     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[59] + pEtaPrev[237];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[94] + pEtaPrev[377];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[100] + pEtaPrev[400];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[185] + pEtaPrev[740];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[296] + pEtaPrev[1185];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[335] + pEtaPrev[1341];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[376] + pEtaPrev[1504];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[441] + pEtaPrev[1764];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[563] + pEtaPrev[2253];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[593] + pEtaPrev[2373];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[637] + pEtaPrev[2548];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[697] + pEtaPrev[2788];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[825] + pEtaPrev[3186];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[953] + pEtaPrev[3499];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1209] + pEtaPrev[4011];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1332] + pEtaPrev[4539];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1367] + pEtaPrev[4749];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1397] + pEtaPrev[4928];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[237] = minval;
		else
			pEta[237] = -minval;
	}
	else
		pEta[237] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[377] = minval;
		else
			pEta[377] = -minval;
	}
	else
		pEta[377] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[400] = minval;
		else
			pEta[400] = -minval;
	}
	else
		pEta[400] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[740] = minval;
		else
			pEta[740] = -minval;
	}
	else
		pEta[740] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1185] = minval;
		else
			pEta[1185] = -minval;
	}
	else
		pEta[1185] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1341] = minval;
		else
			pEta[1341] = -minval;
	}
	else
		pEta[1341] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1504] = minval;
		else
			pEta[1504] = -minval;
	}
	else
		pEta[1504] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1764] = minval;
		else
			pEta[1764] = -minval;
	}
	else
		pEta[1764] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2253] = minval;
		else
			pEta[2253] = -minval;
	}
	else
		pEta[2253] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2373] = minval;
		else
			pEta[2373] = -minval;
	}
	else
		pEta[2373] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2548] = minval;
		else
			pEta[2548] = -minval;
	}
	else
		pEta[2548] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2788] = minval;
		else
			pEta[2788] = -minval;
	}
	else
		pEta[2788] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3186] = minval;
		else
			pEta[3186] = -minval;
	}
	else
		pEta[3186] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3499] = minval;
		else
			pEta[3499] = -minval;
	}
	else
		pEta[3499] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4011] = minval;
		else
			pEta[4011] = -minval;
	}
	else
		pEta[4011] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4539] = minval;
		else
			pEta[4539] = -minval;
	}
	else
		pEta[4539] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4749] = minval;
		else
			pEta[4749] = -minval;
	}
	else
		pEta[4749] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4928] = minval;
		else
			pEta[4928] = -minval;
	}
	else
		pEta[4928] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 186     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[60] + pEtaPrev[241];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[95] + pEtaPrev[381];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[101] + pEtaPrev[404];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[186] + pEtaPrev[744];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[297] + pEtaPrev[1189];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[336] + pEtaPrev[1345];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[377] + pEtaPrev[1508];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[442] + pEtaPrev[1768];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[564] + pEtaPrev[2257];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[594] + pEtaPrev[2377];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[638] + pEtaPrev[2552];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[698] + pEtaPrev[2792];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[826] + pEtaPrev[3188];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[954] + pEtaPrev[3502];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1210] + pEtaPrev[4014];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1333] + pEtaPrev[4545];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1368] + pEtaPrev[4755];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1398] + pEtaPrev[4934];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[241] = minval;
		else
			pEta[241] = -minval;
	}
	else
		pEta[241] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[381] = minval;
		else
			pEta[381] = -minval;
	}
	else
		pEta[381] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[404] = minval;
		else
			pEta[404] = -minval;
	}
	else
		pEta[404] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[744] = minval;
		else
			pEta[744] = -minval;
	}
	else
		pEta[744] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1189] = minval;
		else
			pEta[1189] = -minval;
	}
	else
		pEta[1189] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1345] = minval;
		else
			pEta[1345] = -minval;
	}
	else
		pEta[1345] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1508] = minval;
		else
			pEta[1508] = -minval;
	}
	else
		pEta[1508] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1768] = minval;
		else
			pEta[1768] = -minval;
	}
	else
		pEta[1768] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2257] = minval;
		else
			pEta[2257] = -minval;
	}
	else
		pEta[2257] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2377] = minval;
		else
			pEta[2377] = -minval;
	}
	else
		pEta[2377] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2552] = minval;
		else
			pEta[2552] = -minval;
	}
	else
		pEta[2552] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2792] = minval;
		else
			pEta[2792] = -minval;
	}
	else
		pEta[2792] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3188] = minval;
		else
			pEta[3188] = -minval;
	}
	else
		pEta[3188] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3502] = minval;
		else
			pEta[3502] = -minval;
	}
	else
		pEta[3502] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4014] = minval;
		else
			pEta[4014] = -minval;
	}
	else
		pEta[4014] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4545] = minval;
		else
			pEta[4545] = -minval;
	}
	else
		pEta[4545] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4755] = minval;
		else
			pEta[4755] = -minval;
	}
	else
		pEta[4755] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4934] = minval;
		else
			pEta[4934] = -minval;
	}
	else
		pEta[4934] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 187     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[61] + pEtaPrev[245];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[64] + pEtaPrev[257];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[102] + pEtaPrev[408];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[187] + pEtaPrev[748];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[298] + pEtaPrev[1193];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[337] + pEtaPrev[1349];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[378] + pEtaPrev[1512];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[443] + pEtaPrev[1772];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[565] + pEtaPrev[2261];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[595] + pEtaPrev[2381];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[639] + pEtaPrev[2556];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[699] + pEtaPrev[2796];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[827] + pEtaPrev[3190];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[955] + pEtaPrev[3505];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1211] + pEtaPrev[4017];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1334] + pEtaPrev[4551];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1369] + pEtaPrev[4761];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1399] + pEtaPrev[4940];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[245] = minval;
		else
			pEta[245] = -minval;
	}
	else
		pEta[245] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[257] = minval;
		else
			pEta[257] = -minval;
	}
	else
		pEta[257] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[408] = minval;
		else
			pEta[408] = -minval;
	}
	else
		pEta[408] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[748] = minval;
		else
			pEta[748] = -minval;
	}
	else
		pEta[748] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1193] = minval;
		else
			pEta[1193] = -minval;
	}
	else
		pEta[1193] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1349] = minval;
		else
			pEta[1349] = -minval;
	}
	else
		pEta[1349] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1512] = minval;
		else
			pEta[1512] = -minval;
	}
	else
		pEta[1512] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1772] = minval;
		else
			pEta[1772] = -minval;
	}
	else
		pEta[1772] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2261] = minval;
		else
			pEta[2261] = -minval;
	}
	else
		pEta[2261] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2381] = minval;
		else
			pEta[2381] = -minval;
	}
	else
		pEta[2381] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2556] = minval;
		else
			pEta[2556] = -minval;
	}
	else
		pEta[2556] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2796] = minval;
		else
			pEta[2796] = -minval;
	}
	else
		pEta[2796] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3190] = minval;
		else
			pEta[3190] = -minval;
	}
	else
		pEta[3190] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3505] = minval;
		else
			pEta[3505] = -minval;
	}
	else
		pEta[3505] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4017] = minval;
		else
			pEta[4017] = -minval;
	}
	else
		pEta[4017] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4551] = minval;
		else
			pEta[4551] = -minval;
	}
	else
		pEta[4551] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4761] = minval;
		else
			pEta[4761] = -minval;
	}
	else
		pEta[4761] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4940] = minval;
		else
			pEta[4940] = -minval;
	}
	else
		pEta[4940] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 188     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[62] + pEtaPrev[249];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[65] + pEtaPrev[261];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[103] + pEtaPrev[412];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[188] + pEtaPrev[752];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[299] + pEtaPrev[1197];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[338] + pEtaPrev[1353];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[379] + pEtaPrev[1516];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[444] + pEtaPrev[1776];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[566] + pEtaPrev[2265];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[596] + pEtaPrev[2385];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[608] + pEtaPrev[2432];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[700] + pEtaPrev[2800];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[828] + pEtaPrev[3192];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[956] + pEtaPrev[3508];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1212] + pEtaPrev[4020];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1335] + pEtaPrev[4557];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1370] + pEtaPrev[4767];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1400] + pEtaPrev[4946];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[249] = minval;
		else
			pEta[249] = -minval;
	}
	else
		pEta[249] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[261] = minval;
		else
			pEta[261] = -minval;
	}
	else
		pEta[261] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[412] = minval;
		else
			pEta[412] = -minval;
	}
	else
		pEta[412] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[752] = minval;
		else
			pEta[752] = -minval;
	}
	else
		pEta[752] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1197] = minval;
		else
			pEta[1197] = -minval;
	}
	else
		pEta[1197] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1353] = minval;
		else
			pEta[1353] = -minval;
	}
	else
		pEta[1353] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1516] = minval;
		else
			pEta[1516] = -minval;
	}
	else
		pEta[1516] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1776] = minval;
		else
			pEta[1776] = -minval;
	}
	else
		pEta[1776] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2265] = minval;
		else
			pEta[2265] = -minval;
	}
	else
		pEta[2265] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2385] = minval;
		else
			pEta[2385] = -minval;
	}
	else
		pEta[2385] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2432] = minval;
		else
			pEta[2432] = -minval;
	}
	else
		pEta[2432] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2800] = minval;
		else
			pEta[2800] = -minval;
	}
	else
		pEta[2800] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3192] = minval;
		else
			pEta[3192] = -minval;
	}
	else
		pEta[3192] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3508] = minval;
		else
			pEta[3508] = -minval;
	}
	else
		pEta[3508] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4020] = minval;
		else
			pEta[4020] = -minval;
	}
	else
		pEta[4020] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4557] = minval;
		else
			pEta[4557] = -minval;
	}
	else
		pEta[4557] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4767] = minval;
		else
			pEta[4767] = -minval;
	}
	else
		pEta[4767] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4946] = minval;
		else
			pEta[4946] = -minval;
	}
	else
		pEta[4946] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 189     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[63] + pEtaPrev[253];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[66] + pEtaPrev[265];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[104] + pEtaPrev[416];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[189] + pEtaPrev[756];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[300] + pEtaPrev[1201];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[339] + pEtaPrev[1357];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[380] + pEtaPrev[1520];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[445] + pEtaPrev[1780];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[567] + pEtaPrev[2269];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[597] + pEtaPrev[2389];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[609] + pEtaPrev[2436];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[701] + pEtaPrev[2804];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[829] + pEtaPrev[3194];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[957] + pEtaPrev[3511];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1213] + pEtaPrev[4023];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1336] + pEtaPrev[4563];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1371] + pEtaPrev[4773];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1401] + pEtaPrev[4952];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[253] = minval;
		else
			pEta[253] = -minval;
	}
	else
		pEta[253] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[265] = minval;
		else
			pEta[265] = -minval;
	}
	else
		pEta[265] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[416] = minval;
		else
			pEta[416] = -minval;
	}
	else
		pEta[416] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[756] = minval;
		else
			pEta[756] = -minval;
	}
	else
		pEta[756] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1201] = minval;
		else
			pEta[1201] = -minval;
	}
	else
		pEta[1201] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1357] = minval;
		else
			pEta[1357] = -minval;
	}
	else
		pEta[1357] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1520] = minval;
		else
			pEta[1520] = -minval;
	}
	else
		pEta[1520] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1780] = minval;
		else
			pEta[1780] = -minval;
	}
	else
		pEta[1780] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2269] = minval;
		else
			pEta[2269] = -minval;
	}
	else
		pEta[2269] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2389] = minval;
		else
			pEta[2389] = -minval;
	}
	else
		pEta[2389] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2436] = minval;
		else
			pEta[2436] = -minval;
	}
	else
		pEta[2436] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2804] = minval;
		else
			pEta[2804] = -minval;
	}
	else
		pEta[2804] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3194] = minval;
		else
			pEta[3194] = -minval;
	}
	else
		pEta[3194] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3511] = minval;
		else
			pEta[3511] = -minval;
	}
	else
		pEta[3511] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4023] = minval;
		else
			pEta[4023] = -minval;
	}
	else
		pEta[4023] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4563] = minval;
		else
			pEta[4563] = -minval;
	}
	else
		pEta[4563] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4773] = minval;
		else
			pEta[4773] = -minval;
	}
	else
		pEta[4773] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4952] = minval;
		else
			pEta[4952] = -minval;
	}
	else
		pEta[4952] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 190     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[32] + pEtaPrev[129];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[67] + pEtaPrev[269];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[105] + pEtaPrev[420];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[190] + pEtaPrev[760];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[301] + pEtaPrev[1205];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[340] + pEtaPrev[1361];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[381] + pEtaPrev[1524];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[446] + pEtaPrev[1784];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[568] + pEtaPrev[2273];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[598] + pEtaPrev[2393];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[610] + pEtaPrev[2440];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[702] + pEtaPrev[2808];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[830] + pEtaPrev[3196];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[958] + pEtaPrev[3514];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1214] + pEtaPrev[4026];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1337] + pEtaPrev[4569];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1372] + pEtaPrev[4779];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1402] + pEtaPrev[4958];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[129] = minval;
		else
			pEta[129] = -minval;
	}
	else
		pEta[129] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[269] = minval;
		else
			pEta[269] = -minval;
	}
	else
		pEta[269] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[420] = minval;
		else
			pEta[420] = -minval;
	}
	else
		pEta[420] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[760] = minval;
		else
			pEta[760] = -minval;
	}
	else
		pEta[760] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1205] = minval;
		else
			pEta[1205] = -minval;
	}
	else
		pEta[1205] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1361] = minval;
		else
			pEta[1361] = -minval;
	}
	else
		pEta[1361] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1524] = minval;
		else
			pEta[1524] = -minval;
	}
	else
		pEta[1524] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1784] = minval;
		else
			pEta[1784] = -minval;
	}
	else
		pEta[1784] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2273] = minval;
		else
			pEta[2273] = -minval;
	}
	else
		pEta[2273] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2393] = minval;
		else
			pEta[2393] = -minval;
	}
	else
		pEta[2393] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2440] = minval;
		else
			pEta[2440] = -minval;
	}
	else
		pEta[2440] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2808] = minval;
		else
			pEta[2808] = -minval;
	}
	else
		pEta[2808] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3196] = minval;
		else
			pEta[3196] = -minval;
	}
	else
		pEta[3196] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3514] = minval;
		else
			pEta[3514] = -minval;
	}
	else
		pEta[3514] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4026] = minval;
		else
			pEta[4026] = -minval;
	}
	else
		pEta[4026] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4569] = minval;
		else
			pEta[4569] = -minval;
	}
	else
		pEta[4569] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4779] = minval;
		else
			pEta[4779] = -minval;
	}
	else
		pEta[4779] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4958] = minval;
		else
			pEta[4958] = -minval;
	}
	else
		pEta[4958] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 191     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[33] + pEtaPrev[133];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[68] + pEtaPrev[273];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[106] + pEtaPrev[424];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[191] + pEtaPrev[764];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[302] + pEtaPrev[1209];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[341] + pEtaPrev[1365];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[382] + pEtaPrev[1528];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[447] + pEtaPrev[1788];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[569] + pEtaPrev[2277];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[599] + pEtaPrev[2397];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[611] + pEtaPrev[2444];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[703] + pEtaPrev[2812];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[831] + pEtaPrev[3198];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[959] + pEtaPrev[3517];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1215] + pEtaPrev[4029];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1338] + pEtaPrev[4575];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1373] + pEtaPrev[4785];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1403] + pEtaPrev[4964];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[133] = minval;
		else
			pEta[133] = -minval;
	}
	else
		pEta[133] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[273] = minval;
		else
			pEta[273] = -minval;
	}
	else
		pEta[273] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[424] = minval;
		else
			pEta[424] = -minval;
	}
	else
		pEta[424] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[764] = minval;
		else
			pEta[764] = -minval;
	}
	else
		pEta[764] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1209] = minval;
		else
			pEta[1209] = -minval;
	}
	else
		pEta[1209] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1365] = minval;
		else
			pEta[1365] = -minval;
	}
	else
		pEta[1365] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1528] = minval;
		else
			pEta[1528] = -minval;
	}
	else
		pEta[1528] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1788] = minval;
		else
			pEta[1788] = -minval;
	}
	else
		pEta[1788] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2277] = minval;
		else
			pEta[2277] = -minval;
	}
	else
		pEta[2277] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2397] = minval;
		else
			pEta[2397] = -minval;
	}
	else
		pEta[2397] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2444] = minval;
		else
			pEta[2444] = -minval;
	}
	else
		pEta[2444] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2812] = minval;
		else
			pEta[2812] = -minval;
	}
	else
		pEta[2812] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3198] = minval;
		else
			pEta[3198] = -minval;
	}
	else
		pEta[3198] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3517] = minval;
		else
			pEta[3517] = -minval;
	}
	else
		pEta[3517] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4029] = minval;
		else
			pEta[4029] = -minval;
	}
	else
		pEta[4029] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4575] = minval;
		else
			pEta[4575] = -minval;
	}
	else
		pEta[4575] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4785] = minval;
		else
			pEta[4785] = -minval;
	}
	else
		pEta[4785] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4964] = minval;
		else
			pEta[4964] = -minval;
	}
	else
		pEta[4964] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 192     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[11] + pEtaPrev[45];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[66] + pEtaPrev[266];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[107] + pEtaPrev[429];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[192] + pEtaPrev[768];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[285] + pEtaPrev[1141];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[325] + pEtaPrev[1302];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[355] + pEtaPrev[1421];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[448] + pEtaPrev[1792];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[528] + pEtaPrev[2113];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[583] + pEtaPrev[2334];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[623] + pEtaPrev[2493];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[704] + pEtaPrev[2816];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[832] + pEtaPrev[3200];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[960] + pEtaPrev[3520];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1216] + pEtaPrev[4032];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1298] + pEtaPrev[4335];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1356] + pEtaPrev[4684];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1406] + pEtaPrev[4983];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[45] = minval;
		else
			pEta[45] = -minval;
	}
	else
		pEta[45] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[266] = minval;
		else
			pEta[266] = -minval;
	}
	else
		pEta[266] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[429] = minval;
		else
			pEta[429] = -minval;
	}
	else
		pEta[429] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[768] = minval;
		else
			pEta[768] = -minval;
	}
	else
		pEta[768] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1141] = minval;
		else
			pEta[1141] = -minval;
	}
	else
		pEta[1141] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1302] = minval;
		else
			pEta[1302] = -minval;
	}
	else
		pEta[1302] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1421] = minval;
		else
			pEta[1421] = -minval;
	}
	else
		pEta[1421] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1792] = minval;
		else
			pEta[1792] = -minval;
	}
	else
		pEta[1792] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2113] = minval;
		else
			pEta[2113] = -minval;
	}
	else
		pEta[2113] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2334] = minval;
		else
			pEta[2334] = -minval;
	}
	else
		pEta[2334] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2493] = minval;
		else
			pEta[2493] = -minval;
	}
	else
		pEta[2493] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2816] = minval;
		else
			pEta[2816] = -minval;
	}
	else
		pEta[2816] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3200] = minval;
		else
			pEta[3200] = -minval;
	}
	else
		pEta[3200] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3520] = minval;
		else
			pEta[3520] = -minval;
	}
	else
		pEta[3520] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4032] = minval;
		else
			pEta[4032] = -minval;
	}
	else
		pEta[4032] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4335] = minval;
		else
			pEta[4335] = -minval;
	}
	else
		pEta[4335] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4684] = minval;
		else
			pEta[4684] = -minval;
	}
	else
		pEta[4684] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4983] = minval;
		else
			pEta[4983] = -minval;
	}
	else
		pEta[4983] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 193     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[12] + pEtaPrev[49];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[67] + pEtaPrev[270];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[108] + pEtaPrev[433];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[193] + pEtaPrev[772];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[286] + pEtaPrev[1145];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[326] + pEtaPrev[1306];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[356] + pEtaPrev[1425];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[449] + pEtaPrev[1796];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[529] + pEtaPrev[2117];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[584] + pEtaPrev[2338];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[624] + pEtaPrev[2497];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[705] + pEtaPrev[2820];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[833] + pEtaPrev[3202];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[961] + pEtaPrev[3523];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1217] + pEtaPrev[4035];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1299] + pEtaPrev[4341];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1357] + pEtaPrev[4690];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1407] + pEtaPrev[4989];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[49] = minval;
		else
			pEta[49] = -minval;
	}
	else
		pEta[49] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[270] = minval;
		else
			pEta[270] = -minval;
	}
	else
		pEta[270] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[433] = minval;
		else
			pEta[433] = -minval;
	}
	else
		pEta[433] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[772] = minval;
		else
			pEta[772] = -minval;
	}
	else
		pEta[772] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1145] = minval;
		else
			pEta[1145] = -minval;
	}
	else
		pEta[1145] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1306] = minval;
		else
			pEta[1306] = -minval;
	}
	else
		pEta[1306] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1425] = minval;
		else
			pEta[1425] = -minval;
	}
	else
		pEta[1425] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1796] = minval;
		else
			pEta[1796] = -minval;
	}
	else
		pEta[1796] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2117] = minval;
		else
			pEta[2117] = -minval;
	}
	else
		pEta[2117] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2338] = minval;
		else
			pEta[2338] = -minval;
	}
	else
		pEta[2338] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2497] = minval;
		else
			pEta[2497] = -minval;
	}
	else
		pEta[2497] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2820] = minval;
		else
			pEta[2820] = -minval;
	}
	else
		pEta[2820] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3202] = minval;
		else
			pEta[3202] = -minval;
	}
	else
		pEta[3202] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3523] = minval;
		else
			pEta[3523] = -minval;
	}
	else
		pEta[3523] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4035] = minval;
		else
			pEta[4035] = -minval;
	}
	else
		pEta[4035] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4341] = minval;
		else
			pEta[4341] = -minval;
	}
	else
		pEta[4341] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4690] = minval;
		else
			pEta[4690] = -minval;
	}
	else
		pEta[4690] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4989] = minval;
		else
			pEta[4989] = -minval;
	}
	else
		pEta[4989] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 194     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[13] + pEtaPrev[53];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[68] + pEtaPrev[274];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[109] + pEtaPrev[437];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[194] + pEtaPrev[776];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[287] + pEtaPrev[1149];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[327] + pEtaPrev[1310];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[357] + pEtaPrev[1429];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[450] + pEtaPrev[1800];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[530] + pEtaPrev[2121];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[585] + pEtaPrev[2342];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[625] + pEtaPrev[2501];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[706] + pEtaPrev[2824];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[834] + pEtaPrev[3204];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[962] + pEtaPrev[3526];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1218] + pEtaPrev[4038];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1300] + pEtaPrev[4347];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1358] + pEtaPrev[4696];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1376] + pEtaPrev[4803];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[53] = minval;
		else
			pEta[53] = -minval;
	}
	else
		pEta[53] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[274] = minval;
		else
			pEta[274] = -minval;
	}
	else
		pEta[274] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[437] = minval;
		else
			pEta[437] = -minval;
	}
	else
		pEta[437] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[776] = minval;
		else
			pEta[776] = -minval;
	}
	else
		pEta[776] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1149] = minval;
		else
			pEta[1149] = -minval;
	}
	else
		pEta[1149] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1310] = minval;
		else
			pEta[1310] = -minval;
	}
	else
		pEta[1310] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1429] = minval;
		else
			pEta[1429] = -minval;
	}
	else
		pEta[1429] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1800] = minval;
		else
			pEta[1800] = -minval;
	}
	else
		pEta[1800] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2121] = minval;
		else
			pEta[2121] = -minval;
	}
	else
		pEta[2121] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2342] = minval;
		else
			pEta[2342] = -minval;
	}
	else
		pEta[2342] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2501] = minval;
		else
			pEta[2501] = -minval;
	}
	else
		pEta[2501] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2824] = minval;
		else
			pEta[2824] = -minval;
	}
	else
		pEta[2824] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3204] = minval;
		else
			pEta[3204] = -minval;
	}
	else
		pEta[3204] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3526] = minval;
		else
			pEta[3526] = -minval;
	}
	else
		pEta[3526] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4038] = minval;
		else
			pEta[4038] = -minval;
	}
	else
		pEta[4038] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4347] = minval;
		else
			pEta[4347] = -minval;
	}
	else
		pEta[4347] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4696] = minval;
		else
			pEta[4696] = -minval;
	}
	else
		pEta[4696] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4803] = minval;
		else
			pEta[4803] = -minval;
	}
	else
		pEta[4803] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 195     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[14] + pEtaPrev[57];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[69] + pEtaPrev[278];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[110] + pEtaPrev[441];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[195] + pEtaPrev[780];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[256] + pEtaPrev[1025];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[328] + pEtaPrev[1314];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[358] + pEtaPrev[1433];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[451] + pEtaPrev[1804];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[531] + pEtaPrev[2125];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[586] + pEtaPrev[2346];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[626] + pEtaPrev[2505];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[707] + pEtaPrev[2828];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[835] + pEtaPrev[3206];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[963] + pEtaPrev[3529];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1219] + pEtaPrev[4041];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1301] + pEtaPrev[4353];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1359] + pEtaPrev[4702];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1377] + pEtaPrev[4809];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[57] = minval;
		else
			pEta[57] = -minval;
	}
	else
		pEta[57] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[278] = minval;
		else
			pEta[278] = -minval;
	}
	else
		pEta[278] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[441] = minval;
		else
			pEta[441] = -minval;
	}
	else
		pEta[441] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[780] = minval;
		else
			pEta[780] = -minval;
	}
	else
		pEta[780] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1025] = minval;
		else
			pEta[1025] = -minval;
	}
	else
		pEta[1025] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1314] = minval;
		else
			pEta[1314] = -minval;
	}
	else
		pEta[1314] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1433] = minval;
		else
			pEta[1433] = -minval;
	}
	else
		pEta[1433] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1804] = minval;
		else
			pEta[1804] = -minval;
	}
	else
		pEta[1804] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2125] = minval;
		else
			pEta[2125] = -minval;
	}
	else
		pEta[2125] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2346] = minval;
		else
			pEta[2346] = -minval;
	}
	else
		pEta[2346] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2505] = minval;
		else
			pEta[2505] = -minval;
	}
	else
		pEta[2505] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2828] = minval;
		else
			pEta[2828] = -minval;
	}
	else
		pEta[2828] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3206] = minval;
		else
			pEta[3206] = -minval;
	}
	else
		pEta[3206] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3529] = minval;
		else
			pEta[3529] = -minval;
	}
	else
		pEta[3529] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4041] = minval;
		else
			pEta[4041] = -minval;
	}
	else
		pEta[4041] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4353] = minval;
		else
			pEta[4353] = -minval;
	}
	else
		pEta[4353] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4702] = minval;
		else
			pEta[4702] = -minval;
	}
	else
		pEta[4702] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4809] = minval;
		else
			pEta[4809] = -minval;
	}
	else
		pEta[4809] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 196     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[15] + pEtaPrev[61];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[70] + pEtaPrev[282];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[111] + pEtaPrev[445];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[196] + pEtaPrev[784];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[257] + pEtaPrev[1029];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[329] + pEtaPrev[1318];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[359] + pEtaPrev[1437];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[452] + pEtaPrev[1808];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[532] + pEtaPrev[2129];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[587] + pEtaPrev[2350];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[627] + pEtaPrev[2509];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[708] + pEtaPrev[2832];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[836] + pEtaPrev[3208];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[964] + pEtaPrev[3532];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1220] + pEtaPrev[4044];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1302] + pEtaPrev[4359];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1360] + pEtaPrev[4708];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1378] + pEtaPrev[4815];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[61] = minval;
		else
			pEta[61] = -minval;
	}
	else
		pEta[61] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[282] = minval;
		else
			pEta[282] = -minval;
	}
	else
		pEta[282] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[445] = minval;
		else
			pEta[445] = -minval;
	}
	else
		pEta[445] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[784] = minval;
		else
			pEta[784] = -minval;
	}
	else
		pEta[784] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1029] = minval;
		else
			pEta[1029] = -minval;
	}
	else
		pEta[1029] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1318] = minval;
		else
			pEta[1318] = -minval;
	}
	else
		pEta[1318] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1437] = minval;
		else
			pEta[1437] = -minval;
	}
	else
		pEta[1437] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1808] = minval;
		else
			pEta[1808] = -minval;
	}
	else
		pEta[1808] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2129] = minval;
		else
			pEta[2129] = -minval;
	}
	else
		pEta[2129] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2350] = minval;
		else
			pEta[2350] = -minval;
	}
	else
		pEta[2350] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2509] = minval;
		else
			pEta[2509] = -minval;
	}
	else
		pEta[2509] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2832] = minval;
		else
			pEta[2832] = -minval;
	}
	else
		pEta[2832] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3208] = minval;
		else
			pEta[3208] = -minval;
	}
	else
		pEta[3208] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3532] = minval;
		else
			pEta[3532] = -minval;
	}
	else
		pEta[3532] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4044] = minval;
		else
			pEta[4044] = -minval;
	}
	else
		pEta[4044] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4359] = minval;
		else
			pEta[4359] = -minval;
	}
	else
		pEta[4359] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4708] = minval;
		else
			pEta[4708] = -minval;
	}
	else
		pEta[4708] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4815] = minval;
		else
			pEta[4815] = -minval;
	}
	else
		pEta[4815] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 197     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[16] + pEtaPrev[65];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[71] + pEtaPrev[286];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[112] + pEtaPrev[449];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[197] + pEtaPrev[788];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[258] + pEtaPrev[1033];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[330] + pEtaPrev[1322];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[360] + pEtaPrev[1441];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[453] + pEtaPrev[1812];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[533] + pEtaPrev[2133];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[588] + pEtaPrev[2354];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[628] + pEtaPrev[2513];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[709] + pEtaPrev[2836];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[837] + pEtaPrev[3210];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[965] + pEtaPrev[3535];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1221] + pEtaPrev[4047];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1303] + pEtaPrev[4365];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1361] + pEtaPrev[4714];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1379] + pEtaPrev[4821];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[65] = minval;
		else
			pEta[65] = -minval;
	}
	else
		pEta[65] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[286] = minval;
		else
			pEta[286] = -minval;
	}
	else
		pEta[286] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[449] = minval;
		else
			pEta[449] = -minval;
	}
	else
		pEta[449] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[788] = minval;
		else
			pEta[788] = -minval;
	}
	else
		pEta[788] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1033] = minval;
		else
			pEta[1033] = -minval;
	}
	else
		pEta[1033] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1322] = minval;
		else
			pEta[1322] = -minval;
	}
	else
		pEta[1322] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1441] = minval;
		else
			pEta[1441] = -minval;
	}
	else
		pEta[1441] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1812] = minval;
		else
			pEta[1812] = -minval;
	}
	else
		pEta[1812] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2133] = minval;
		else
			pEta[2133] = -minval;
	}
	else
		pEta[2133] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2354] = minval;
		else
			pEta[2354] = -minval;
	}
	else
		pEta[2354] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2513] = minval;
		else
			pEta[2513] = -minval;
	}
	else
		pEta[2513] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2836] = minval;
		else
			pEta[2836] = -minval;
	}
	else
		pEta[2836] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3210] = minval;
		else
			pEta[3210] = -minval;
	}
	else
		pEta[3210] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3535] = minval;
		else
			pEta[3535] = -minval;
	}
	else
		pEta[3535] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4047] = minval;
		else
			pEta[4047] = -minval;
	}
	else
		pEta[4047] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4365] = minval;
		else
			pEta[4365] = -minval;
	}
	else
		pEta[4365] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4714] = minval;
		else
			pEta[4714] = -minval;
	}
	else
		pEta[4714] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4821] = minval;
		else
			pEta[4821] = -minval;
	}
	else
		pEta[4821] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 198     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[17] + pEtaPrev[69];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[72] + pEtaPrev[290];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[113] + pEtaPrev[453];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[198] + pEtaPrev[792];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[259] + pEtaPrev[1037];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[331] + pEtaPrev[1326];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[361] + pEtaPrev[1445];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[454] + pEtaPrev[1816];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[534] + pEtaPrev[2137];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[589] + pEtaPrev[2358];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[629] + pEtaPrev[2517];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[710] + pEtaPrev[2840];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[838] + pEtaPrev[3212];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[966] + pEtaPrev[3538];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1222] + pEtaPrev[4050];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1304] + pEtaPrev[4371];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1362] + pEtaPrev[4720];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1380] + pEtaPrev[4827];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[69] = minval;
		else
			pEta[69] = -minval;
	}
	else
		pEta[69] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[290] = minval;
		else
			pEta[290] = -minval;
	}
	else
		pEta[290] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[453] = minval;
		else
			pEta[453] = -minval;
	}
	else
		pEta[453] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[792] = minval;
		else
			pEta[792] = -minval;
	}
	else
		pEta[792] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1037] = minval;
		else
			pEta[1037] = -minval;
	}
	else
		pEta[1037] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1326] = minval;
		else
			pEta[1326] = -minval;
	}
	else
		pEta[1326] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1445] = minval;
		else
			pEta[1445] = -minval;
	}
	else
		pEta[1445] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1816] = minval;
		else
			pEta[1816] = -minval;
	}
	else
		pEta[1816] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2137] = minval;
		else
			pEta[2137] = -minval;
	}
	else
		pEta[2137] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2358] = minval;
		else
			pEta[2358] = -minval;
	}
	else
		pEta[2358] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2517] = minval;
		else
			pEta[2517] = -minval;
	}
	else
		pEta[2517] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2840] = minval;
		else
			pEta[2840] = -minval;
	}
	else
		pEta[2840] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3212] = minval;
		else
			pEta[3212] = -minval;
	}
	else
		pEta[3212] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3538] = minval;
		else
			pEta[3538] = -minval;
	}
	else
		pEta[3538] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4050] = minval;
		else
			pEta[4050] = -minval;
	}
	else
		pEta[4050] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4371] = minval;
		else
			pEta[4371] = -minval;
	}
	else
		pEta[4371] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4720] = minval;
		else
			pEta[4720] = -minval;
	}
	else
		pEta[4720] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4827] = minval;
		else
			pEta[4827] = -minval;
	}
	else
		pEta[4827] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 199     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[18] + pEtaPrev[73];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[73] + pEtaPrev[294];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[114] + pEtaPrev[457];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[199] + pEtaPrev[796];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[260] + pEtaPrev[1041];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[332] + pEtaPrev[1330];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[362] + pEtaPrev[1449];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[455] + pEtaPrev[1820];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[535] + pEtaPrev[2141];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[590] + pEtaPrev[2362];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[630] + pEtaPrev[2521];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[711] + pEtaPrev[2844];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[839] + pEtaPrev[3214];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[967] + pEtaPrev[3541];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1223] + pEtaPrev[4053];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1305] + pEtaPrev[4377];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1363] + pEtaPrev[4726];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1381] + pEtaPrev[4833];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[73] = minval;
		else
			pEta[73] = -minval;
	}
	else
		pEta[73] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[294] = minval;
		else
			pEta[294] = -minval;
	}
	else
		pEta[294] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[457] = minval;
		else
			pEta[457] = -minval;
	}
	else
		pEta[457] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[796] = minval;
		else
			pEta[796] = -minval;
	}
	else
		pEta[796] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1041] = minval;
		else
			pEta[1041] = -minval;
	}
	else
		pEta[1041] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1330] = minval;
		else
			pEta[1330] = -minval;
	}
	else
		pEta[1330] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1449] = minval;
		else
			pEta[1449] = -minval;
	}
	else
		pEta[1449] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1820] = minval;
		else
			pEta[1820] = -minval;
	}
	else
		pEta[1820] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2141] = minval;
		else
			pEta[2141] = -minval;
	}
	else
		pEta[2141] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2362] = minval;
		else
			pEta[2362] = -minval;
	}
	else
		pEta[2362] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2521] = minval;
		else
			pEta[2521] = -minval;
	}
	else
		pEta[2521] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2844] = minval;
		else
			pEta[2844] = -minval;
	}
	else
		pEta[2844] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3214] = minval;
		else
			pEta[3214] = -minval;
	}
	else
		pEta[3214] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3541] = minval;
		else
			pEta[3541] = -minval;
	}
	else
		pEta[3541] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4053] = minval;
		else
			pEta[4053] = -minval;
	}
	else
		pEta[4053] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4377] = minval;
		else
			pEta[4377] = -minval;
	}
	else
		pEta[4377] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4726] = minval;
		else
			pEta[4726] = -minval;
	}
	else
		pEta[4726] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4833] = minval;
		else
			pEta[4833] = -minval;
	}
	else
		pEta[4833] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 200     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[19] + pEtaPrev[77];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[74] + pEtaPrev[298];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[115] + pEtaPrev[461];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[200] + pEtaPrev[800];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[261] + pEtaPrev[1045];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[333] + pEtaPrev[1334];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[363] + pEtaPrev[1453];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[456] + pEtaPrev[1824];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[536] + pEtaPrev[2145];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[591] + pEtaPrev[2366];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[631] + pEtaPrev[2525];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[712] + pEtaPrev[2848];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[840] + pEtaPrev[3216];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[968] + pEtaPrev[3544];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1224] + pEtaPrev[4056];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1306] + pEtaPrev[4383];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1364] + pEtaPrev[4732];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1382] + pEtaPrev[4839];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[77] = minval;
		else
			pEta[77] = -minval;
	}
	else
		pEta[77] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[298] = minval;
		else
			pEta[298] = -minval;
	}
	else
		pEta[298] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[461] = minval;
		else
			pEta[461] = -minval;
	}
	else
		pEta[461] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[800] = minval;
		else
			pEta[800] = -minval;
	}
	else
		pEta[800] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1045] = minval;
		else
			pEta[1045] = -minval;
	}
	else
		pEta[1045] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1334] = minval;
		else
			pEta[1334] = -minval;
	}
	else
		pEta[1334] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1453] = minval;
		else
			pEta[1453] = -minval;
	}
	else
		pEta[1453] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1824] = minval;
		else
			pEta[1824] = -minval;
	}
	else
		pEta[1824] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2145] = minval;
		else
			pEta[2145] = -minval;
	}
	else
		pEta[2145] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2366] = minval;
		else
			pEta[2366] = -minval;
	}
	else
		pEta[2366] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2525] = minval;
		else
			pEta[2525] = -minval;
	}
	else
		pEta[2525] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2848] = minval;
		else
			pEta[2848] = -minval;
	}
	else
		pEta[2848] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3216] = minval;
		else
			pEta[3216] = -minval;
	}
	else
		pEta[3216] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3544] = minval;
		else
			pEta[3544] = -minval;
	}
	else
		pEta[3544] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4056] = minval;
		else
			pEta[4056] = -minval;
	}
	else
		pEta[4056] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4383] = minval;
		else
			pEta[4383] = -minval;
	}
	else
		pEta[4383] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4732] = minval;
		else
			pEta[4732] = -minval;
	}
	else
		pEta[4732] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4839] = minval;
		else
			pEta[4839] = -minval;
	}
	else
		pEta[4839] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 201     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[20] + pEtaPrev[81];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[75] + pEtaPrev[302];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[116] + pEtaPrev[465];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[201] + pEtaPrev[804];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[262] + pEtaPrev[1049];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[334] + pEtaPrev[1338];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[364] + pEtaPrev[1457];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[457] + pEtaPrev[1828];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[537] + pEtaPrev[2149];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[592] + pEtaPrev[2370];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[632] + pEtaPrev[2529];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[713] + pEtaPrev[2852];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[841] + pEtaPrev[3218];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[969] + pEtaPrev[3547];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1225] + pEtaPrev[4059];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1307] + pEtaPrev[4389];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1365] + pEtaPrev[4738];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1383] + pEtaPrev[4845];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[81] = minval;
		else
			pEta[81] = -minval;
	}
	else
		pEta[81] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[302] = minval;
		else
			pEta[302] = -minval;
	}
	else
		pEta[302] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[465] = minval;
		else
			pEta[465] = -minval;
	}
	else
		pEta[465] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[804] = minval;
		else
			pEta[804] = -minval;
	}
	else
		pEta[804] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1049] = minval;
		else
			pEta[1049] = -minval;
	}
	else
		pEta[1049] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1338] = minval;
		else
			pEta[1338] = -minval;
	}
	else
		pEta[1338] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1457] = minval;
		else
			pEta[1457] = -minval;
	}
	else
		pEta[1457] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1828] = minval;
		else
			pEta[1828] = -minval;
	}
	else
		pEta[1828] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2149] = minval;
		else
			pEta[2149] = -minval;
	}
	else
		pEta[2149] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2370] = minval;
		else
			pEta[2370] = -minval;
	}
	else
		pEta[2370] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2529] = minval;
		else
			pEta[2529] = -minval;
	}
	else
		pEta[2529] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2852] = minval;
		else
			pEta[2852] = -minval;
	}
	else
		pEta[2852] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3218] = minval;
		else
			pEta[3218] = -minval;
	}
	else
		pEta[3218] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3547] = minval;
		else
			pEta[3547] = -minval;
	}
	else
		pEta[3547] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4059] = minval;
		else
			pEta[4059] = -minval;
	}
	else
		pEta[4059] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4389] = minval;
		else
			pEta[4389] = -minval;
	}
	else
		pEta[4389] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4738] = minval;
		else
			pEta[4738] = -minval;
	}
	else
		pEta[4738] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4845] = minval;
		else
			pEta[4845] = -minval;
	}
	else
		pEta[4845] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 202     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[21] + pEtaPrev[85];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[76] + pEtaPrev[306];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[117] + pEtaPrev[469];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[202] + pEtaPrev[808];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[263] + pEtaPrev[1053];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[335] + pEtaPrev[1342];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[365] + pEtaPrev[1461];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[458] + pEtaPrev[1832];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[538] + pEtaPrev[2153];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[593] + pEtaPrev[2374];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[633] + pEtaPrev[2533];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[714] + pEtaPrev[2856];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[842] + pEtaPrev[3220];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[970] + pEtaPrev[3550];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1226] + pEtaPrev[4062];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1308] + pEtaPrev[4395];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1366] + pEtaPrev[4744];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1384] + pEtaPrev[4851];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[85] = minval;
		else
			pEta[85] = -minval;
	}
	else
		pEta[85] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[306] = minval;
		else
			pEta[306] = -minval;
	}
	else
		pEta[306] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[469] = minval;
		else
			pEta[469] = -minval;
	}
	else
		pEta[469] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[808] = minval;
		else
			pEta[808] = -minval;
	}
	else
		pEta[808] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1053] = minval;
		else
			pEta[1053] = -minval;
	}
	else
		pEta[1053] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1342] = minval;
		else
			pEta[1342] = -minval;
	}
	else
		pEta[1342] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1461] = minval;
		else
			pEta[1461] = -minval;
	}
	else
		pEta[1461] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1832] = minval;
		else
			pEta[1832] = -minval;
	}
	else
		pEta[1832] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2153] = minval;
		else
			pEta[2153] = -minval;
	}
	else
		pEta[2153] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2374] = minval;
		else
			pEta[2374] = -minval;
	}
	else
		pEta[2374] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2533] = minval;
		else
			pEta[2533] = -minval;
	}
	else
		pEta[2533] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2856] = minval;
		else
			pEta[2856] = -minval;
	}
	else
		pEta[2856] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3220] = minval;
		else
			pEta[3220] = -minval;
	}
	else
		pEta[3220] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3550] = minval;
		else
			pEta[3550] = -minval;
	}
	else
		pEta[3550] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4062] = minval;
		else
			pEta[4062] = -minval;
	}
	else
		pEta[4062] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4395] = minval;
		else
			pEta[4395] = -minval;
	}
	else
		pEta[4395] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4744] = minval;
		else
			pEta[4744] = -minval;
	}
	else
		pEta[4744] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4851] = minval;
		else
			pEta[4851] = -minval;
	}
	else
		pEta[4851] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 203     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[22] + pEtaPrev[89];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[77] + pEtaPrev[310];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[118] + pEtaPrev[473];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[203] + pEtaPrev[812];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[264] + pEtaPrev[1057];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[336] + pEtaPrev[1346];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[366] + pEtaPrev[1465];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[459] + pEtaPrev[1836];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[539] + pEtaPrev[2157];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[594] + pEtaPrev[2378];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[634] + pEtaPrev[2537];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[715] + pEtaPrev[2860];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[843] + pEtaPrev[3222];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[971] + pEtaPrev[3553];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1227] + pEtaPrev[4065];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1309] + pEtaPrev[4401];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1367] + pEtaPrev[4750];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1385] + pEtaPrev[4857];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[89] = minval;
		else
			pEta[89] = -minval;
	}
	else
		pEta[89] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[310] = minval;
		else
			pEta[310] = -minval;
	}
	else
		pEta[310] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[473] = minval;
		else
			pEta[473] = -minval;
	}
	else
		pEta[473] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[812] = minval;
		else
			pEta[812] = -minval;
	}
	else
		pEta[812] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1057] = minval;
		else
			pEta[1057] = -minval;
	}
	else
		pEta[1057] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1346] = minval;
		else
			pEta[1346] = -minval;
	}
	else
		pEta[1346] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1465] = minval;
		else
			pEta[1465] = -minval;
	}
	else
		pEta[1465] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1836] = minval;
		else
			pEta[1836] = -minval;
	}
	else
		pEta[1836] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2157] = minval;
		else
			pEta[2157] = -minval;
	}
	else
		pEta[2157] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2378] = minval;
		else
			pEta[2378] = -minval;
	}
	else
		pEta[2378] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2537] = minval;
		else
			pEta[2537] = -minval;
	}
	else
		pEta[2537] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2860] = minval;
		else
			pEta[2860] = -minval;
	}
	else
		pEta[2860] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3222] = minval;
		else
			pEta[3222] = -minval;
	}
	else
		pEta[3222] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3553] = minval;
		else
			pEta[3553] = -minval;
	}
	else
		pEta[3553] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4065] = minval;
		else
			pEta[4065] = -minval;
	}
	else
		pEta[4065] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4401] = minval;
		else
			pEta[4401] = -minval;
	}
	else
		pEta[4401] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4750] = minval;
		else
			pEta[4750] = -minval;
	}
	else
		pEta[4750] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4857] = minval;
		else
			pEta[4857] = -minval;
	}
	else
		pEta[4857] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 204     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[23] + pEtaPrev[93];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[78] + pEtaPrev[314];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[119] + pEtaPrev[477];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[204] + pEtaPrev[816];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[265] + pEtaPrev[1061];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[337] + pEtaPrev[1350];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[367] + pEtaPrev[1469];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[460] + pEtaPrev[1840];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[540] + pEtaPrev[2161];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[595] + pEtaPrev[2382];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[635] + pEtaPrev[2541];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[716] + pEtaPrev[2864];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[844] + pEtaPrev[3224];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[972] + pEtaPrev[3556];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1228] + pEtaPrev[4068];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1310] + pEtaPrev[4407];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1368] + pEtaPrev[4756];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1386] + pEtaPrev[4863];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[93] = minval;
		else
			pEta[93] = -minval;
	}
	else
		pEta[93] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[314] = minval;
		else
			pEta[314] = -minval;
	}
	else
		pEta[314] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[477] = minval;
		else
			pEta[477] = -minval;
	}
	else
		pEta[477] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[816] = minval;
		else
			pEta[816] = -minval;
	}
	else
		pEta[816] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1061] = minval;
		else
			pEta[1061] = -minval;
	}
	else
		pEta[1061] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1350] = minval;
		else
			pEta[1350] = -minval;
	}
	else
		pEta[1350] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1469] = minval;
		else
			pEta[1469] = -minval;
	}
	else
		pEta[1469] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1840] = minval;
		else
			pEta[1840] = -minval;
	}
	else
		pEta[1840] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2161] = minval;
		else
			pEta[2161] = -minval;
	}
	else
		pEta[2161] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2382] = minval;
		else
			pEta[2382] = -minval;
	}
	else
		pEta[2382] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2541] = minval;
		else
			pEta[2541] = -minval;
	}
	else
		pEta[2541] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2864] = minval;
		else
			pEta[2864] = -minval;
	}
	else
		pEta[2864] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3224] = minval;
		else
			pEta[3224] = -minval;
	}
	else
		pEta[3224] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3556] = minval;
		else
			pEta[3556] = -minval;
	}
	else
		pEta[3556] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4068] = minval;
		else
			pEta[4068] = -minval;
	}
	else
		pEta[4068] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4407] = minval;
		else
			pEta[4407] = -minval;
	}
	else
		pEta[4407] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4756] = minval;
		else
			pEta[4756] = -minval;
	}
	else
		pEta[4756] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4863] = minval;
		else
			pEta[4863] = -minval;
	}
	else
		pEta[4863] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 205     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[24] + pEtaPrev[97];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[79] + pEtaPrev[318];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[120] + pEtaPrev[481];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[205] + pEtaPrev[820];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[266] + pEtaPrev[1065];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[338] + pEtaPrev[1354];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[368] + pEtaPrev[1473];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[461] + pEtaPrev[1844];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[541] + pEtaPrev[2165];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[596] + pEtaPrev[2386];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[636] + pEtaPrev[2545];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[717] + pEtaPrev[2868];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[845] + pEtaPrev[3226];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[973] + pEtaPrev[3559];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1229] + pEtaPrev[4071];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1311] + pEtaPrev[4413];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1369] + pEtaPrev[4762];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1387] + pEtaPrev[4869];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[97] = minval;
		else
			pEta[97] = -minval;
	}
	else
		pEta[97] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[318] = minval;
		else
			pEta[318] = -minval;
	}
	else
		pEta[318] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[481] = minval;
		else
			pEta[481] = -minval;
	}
	else
		pEta[481] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[820] = minval;
		else
			pEta[820] = -minval;
	}
	else
		pEta[820] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1065] = minval;
		else
			pEta[1065] = -minval;
	}
	else
		pEta[1065] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1354] = minval;
		else
			pEta[1354] = -minval;
	}
	else
		pEta[1354] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1473] = minval;
		else
			pEta[1473] = -minval;
	}
	else
		pEta[1473] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1844] = minval;
		else
			pEta[1844] = -minval;
	}
	else
		pEta[1844] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2165] = minval;
		else
			pEta[2165] = -minval;
	}
	else
		pEta[2165] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2386] = minval;
		else
			pEta[2386] = -minval;
	}
	else
		pEta[2386] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2545] = minval;
		else
			pEta[2545] = -minval;
	}
	else
		pEta[2545] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2868] = minval;
		else
			pEta[2868] = -minval;
	}
	else
		pEta[2868] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3226] = minval;
		else
			pEta[3226] = -minval;
	}
	else
		pEta[3226] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3559] = minval;
		else
			pEta[3559] = -minval;
	}
	else
		pEta[3559] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4071] = minval;
		else
			pEta[4071] = -minval;
	}
	else
		pEta[4071] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4413] = minval;
		else
			pEta[4413] = -minval;
	}
	else
		pEta[4413] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4762] = minval;
		else
			pEta[4762] = -minval;
	}
	else
		pEta[4762] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4869] = minval;
		else
			pEta[4869] = -minval;
	}
	else
		pEta[4869] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 206     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[25] + pEtaPrev[101];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[80] + pEtaPrev[322];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[121] + pEtaPrev[485];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[206] + pEtaPrev[824];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[267] + pEtaPrev[1069];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[339] + pEtaPrev[1358];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[369] + pEtaPrev[1477];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[462] + pEtaPrev[1848];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[542] + pEtaPrev[2169];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[597] + pEtaPrev[2390];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[637] + pEtaPrev[2549];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[718] + pEtaPrev[2872];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[846] + pEtaPrev[3228];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[974] + pEtaPrev[3562];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1230] + pEtaPrev[4074];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1280] + pEtaPrev[4227];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1370] + pEtaPrev[4768];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1388] + pEtaPrev[4875];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[101] = minval;
		else
			pEta[101] = -minval;
	}
	else
		pEta[101] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[322] = minval;
		else
			pEta[322] = -minval;
	}
	else
		pEta[322] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[485] = minval;
		else
			pEta[485] = -minval;
	}
	else
		pEta[485] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[824] = minval;
		else
			pEta[824] = -minval;
	}
	else
		pEta[824] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1069] = minval;
		else
			pEta[1069] = -minval;
	}
	else
		pEta[1069] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1358] = minval;
		else
			pEta[1358] = -minval;
	}
	else
		pEta[1358] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1477] = minval;
		else
			pEta[1477] = -minval;
	}
	else
		pEta[1477] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1848] = minval;
		else
			pEta[1848] = -minval;
	}
	else
		pEta[1848] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2169] = minval;
		else
			pEta[2169] = -minval;
	}
	else
		pEta[2169] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2390] = minval;
		else
			pEta[2390] = -minval;
	}
	else
		pEta[2390] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2549] = minval;
		else
			pEta[2549] = -minval;
	}
	else
		pEta[2549] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2872] = minval;
		else
			pEta[2872] = -minval;
	}
	else
		pEta[2872] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3228] = minval;
		else
			pEta[3228] = -minval;
	}
	else
		pEta[3228] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3562] = minval;
		else
			pEta[3562] = -minval;
	}
	else
		pEta[3562] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4074] = minval;
		else
			pEta[4074] = -minval;
	}
	else
		pEta[4074] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4227] = minval;
		else
			pEta[4227] = -minval;
	}
	else
		pEta[4227] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4768] = minval;
		else
			pEta[4768] = -minval;
	}
	else
		pEta[4768] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4875] = minval;
		else
			pEta[4875] = -minval;
	}
	else
		pEta[4875] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 207     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[26] + pEtaPrev[105];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[81] + pEtaPrev[326];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[122] + pEtaPrev[489];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[207] + pEtaPrev[828];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[268] + pEtaPrev[1073];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[340] + pEtaPrev[1362];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[370] + pEtaPrev[1481];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[463] + pEtaPrev[1852];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[543] + pEtaPrev[2173];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[598] + pEtaPrev[2394];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[638] + pEtaPrev[2553];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[719] + pEtaPrev[2876];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[847] + pEtaPrev[3230];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[975] + pEtaPrev[3565];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1231] + pEtaPrev[4077];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1281] + pEtaPrev[4233];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1371] + pEtaPrev[4774];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1389] + pEtaPrev[4881];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[105] = minval;
		else
			pEta[105] = -minval;
	}
	else
		pEta[105] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[326] = minval;
		else
			pEta[326] = -minval;
	}
	else
		pEta[326] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[489] = minval;
		else
			pEta[489] = -minval;
	}
	else
		pEta[489] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[828] = minval;
		else
			pEta[828] = -minval;
	}
	else
		pEta[828] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1073] = minval;
		else
			pEta[1073] = -minval;
	}
	else
		pEta[1073] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1362] = minval;
		else
			pEta[1362] = -minval;
	}
	else
		pEta[1362] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1481] = minval;
		else
			pEta[1481] = -minval;
	}
	else
		pEta[1481] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1852] = minval;
		else
			pEta[1852] = -minval;
	}
	else
		pEta[1852] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2173] = minval;
		else
			pEta[2173] = -minval;
	}
	else
		pEta[2173] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2394] = minval;
		else
			pEta[2394] = -minval;
	}
	else
		pEta[2394] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2553] = minval;
		else
			pEta[2553] = -minval;
	}
	else
		pEta[2553] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2876] = minval;
		else
			pEta[2876] = -minval;
	}
	else
		pEta[2876] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3230] = minval;
		else
			pEta[3230] = -minval;
	}
	else
		pEta[3230] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3565] = minval;
		else
			pEta[3565] = -minval;
	}
	else
		pEta[3565] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4077] = minval;
		else
			pEta[4077] = -minval;
	}
	else
		pEta[4077] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4233] = minval;
		else
			pEta[4233] = -minval;
	}
	else
		pEta[4233] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4774] = minval;
		else
			pEta[4774] = -minval;
	}
	else
		pEta[4774] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4881] = minval;
		else
			pEta[4881] = -minval;
	}
	else
		pEta[4881] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 208     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[27] + pEtaPrev[109];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[82] + pEtaPrev[330];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[123] + pEtaPrev[493];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[208] + pEtaPrev[832];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[269] + pEtaPrev[1077];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[341] + pEtaPrev[1366];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[371] + pEtaPrev[1485];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[464] + pEtaPrev[1856];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[512] + pEtaPrev[2049];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[599] + pEtaPrev[2398];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[639] + pEtaPrev[2557];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[720] + pEtaPrev[2880];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[848] + pEtaPrev[3232];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[976] + pEtaPrev[3568];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1232] + pEtaPrev[4080];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1282] + pEtaPrev[4239];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1372] + pEtaPrev[4780];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1390] + pEtaPrev[4887];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[109] = minval;
		else
			pEta[109] = -minval;
	}
	else
		pEta[109] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[330] = minval;
		else
			pEta[330] = -minval;
	}
	else
		pEta[330] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[493] = minval;
		else
			pEta[493] = -minval;
	}
	else
		pEta[493] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[832] = minval;
		else
			pEta[832] = -minval;
	}
	else
		pEta[832] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1077] = minval;
		else
			pEta[1077] = -minval;
	}
	else
		pEta[1077] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1366] = minval;
		else
			pEta[1366] = -minval;
	}
	else
		pEta[1366] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1485] = minval;
		else
			pEta[1485] = -minval;
	}
	else
		pEta[1485] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1856] = minval;
		else
			pEta[1856] = -minval;
	}
	else
		pEta[1856] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2049] = minval;
		else
			pEta[2049] = -minval;
	}
	else
		pEta[2049] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2398] = minval;
		else
			pEta[2398] = -minval;
	}
	else
		pEta[2398] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2557] = minval;
		else
			pEta[2557] = -minval;
	}
	else
		pEta[2557] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2880] = minval;
		else
			pEta[2880] = -minval;
	}
	else
		pEta[2880] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3232] = minval;
		else
			pEta[3232] = -minval;
	}
	else
		pEta[3232] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3568] = minval;
		else
			pEta[3568] = -minval;
	}
	else
		pEta[3568] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4080] = minval;
		else
			pEta[4080] = -minval;
	}
	else
		pEta[4080] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4239] = minval;
		else
			pEta[4239] = -minval;
	}
	else
		pEta[4239] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4780] = minval;
		else
			pEta[4780] = -minval;
	}
	else
		pEta[4780] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4887] = minval;
		else
			pEta[4887] = -minval;
	}
	else
		pEta[4887] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 209     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[28] + pEtaPrev[113];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[83] + pEtaPrev[334];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[124] + pEtaPrev[497];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[209] + pEtaPrev[836];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[270] + pEtaPrev[1081];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[342] + pEtaPrev[1370];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[372] + pEtaPrev[1489];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[465] + pEtaPrev[1860];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[513] + pEtaPrev[2053];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[600] + pEtaPrev[2402];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[608] + pEtaPrev[2433];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[721] + pEtaPrev[2884];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[849] + pEtaPrev[3234];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[977] + pEtaPrev[3571];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1233] + pEtaPrev[4083];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1283] + pEtaPrev[4245];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1373] + pEtaPrev[4786];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1391] + pEtaPrev[4893];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[113] = minval;
		else
			pEta[113] = -minval;
	}
	else
		pEta[113] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[334] = minval;
		else
			pEta[334] = -minval;
	}
	else
		pEta[334] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[497] = minval;
		else
			pEta[497] = -minval;
	}
	else
		pEta[497] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[836] = minval;
		else
			pEta[836] = -minval;
	}
	else
		pEta[836] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1081] = minval;
		else
			pEta[1081] = -minval;
	}
	else
		pEta[1081] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1370] = minval;
		else
			pEta[1370] = -minval;
	}
	else
		pEta[1370] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1489] = minval;
		else
			pEta[1489] = -minval;
	}
	else
		pEta[1489] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1860] = minval;
		else
			pEta[1860] = -minval;
	}
	else
		pEta[1860] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2053] = minval;
		else
			pEta[2053] = -minval;
	}
	else
		pEta[2053] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2402] = minval;
		else
			pEta[2402] = -minval;
	}
	else
		pEta[2402] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2433] = minval;
		else
			pEta[2433] = -minval;
	}
	else
		pEta[2433] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2884] = minval;
		else
			pEta[2884] = -minval;
	}
	else
		pEta[2884] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3234] = minval;
		else
			pEta[3234] = -minval;
	}
	else
		pEta[3234] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3571] = minval;
		else
			pEta[3571] = -minval;
	}
	else
		pEta[3571] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4083] = minval;
		else
			pEta[4083] = -minval;
	}
	else
		pEta[4083] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4245] = minval;
		else
			pEta[4245] = -minval;
	}
	else
		pEta[4245] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4786] = minval;
		else
			pEta[4786] = -minval;
	}
	else
		pEta[4786] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4893] = minval;
		else
			pEta[4893] = -minval;
	}
	else
		pEta[4893] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 210     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[29] + pEtaPrev[117];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[84] + pEtaPrev[338];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[125] + pEtaPrev[501];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[210] + pEtaPrev[840];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[271] + pEtaPrev[1085];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[343] + pEtaPrev[1374];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[373] + pEtaPrev[1493];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[466] + pEtaPrev[1864];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[514] + pEtaPrev[2057];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[601] + pEtaPrev[2406];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[609] + pEtaPrev[2437];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[722] + pEtaPrev[2888];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[850] + pEtaPrev[3236];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[978] + pEtaPrev[3574];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1234] + pEtaPrev[4086];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1284] + pEtaPrev[4251];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1374] + pEtaPrev[4792];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1392] + pEtaPrev[4899];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[117] = minval;
		else
			pEta[117] = -minval;
	}
	else
		pEta[117] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[338] = minval;
		else
			pEta[338] = -minval;
	}
	else
		pEta[338] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[501] = minval;
		else
			pEta[501] = -minval;
	}
	else
		pEta[501] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[840] = minval;
		else
			pEta[840] = -minval;
	}
	else
		pEta[840] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1085] = minval;
		else
			pEta[1085] = -minval;
	}
	else
		pEta[1085] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1374] = minval;
		else
			pEta[1374] = -minval;
	}
	else
		pEta[1374] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1493] = minval;
		else
			pEta[1493] = -minval;
	}
	else
		pEta[1493] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1864] = minval;
		else
			pEta[1864] = -minval;
	}
	else
		pEta[1864] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2057] = minval;
		else
			pEta[2057] = -minval;
	}
	else
		pEta[2057] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2406] = minval;
		else
			pEta[2406] = -minval;
	}
	else
		pEta[2406] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2437] = minval;
		else
			pEta[2437] = -minval;
	}
	else
		pEta[2437] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2888] = minval;
		else
			pEta[2888] = -minval;
	}
	else
		pEta[2888] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3236] = minval;
		else
			pEta[3236] = -minval;
	}
	else
		pEta[3236] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3574] = minval;
		else
			pEta[3574] = -minval;
	}
	else
		pEta[3574] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4086] = minval;
		else
			pEta[4086] = -minval;
	}
	else
		pEta[4086] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4251] = minval;
		else
			pEta[4251] = -minval;
	}
	else
		pEta[4251] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4792] = minval;
		else
			pEta[4792] = -minval;
	}
	else
		pEta[4792] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4899] = minval;
		else
			pEta[4899] = -minval;
	}
	else
		pEta[4899] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 211     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[30] + pEtaPrev[121];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[85] + pEtaPrev[342];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[126] + pEtaPrev[505];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[211] + pEtaPrev[844];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[272] + pEtaPrev[1089];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[344] + pEtaPrev[1378];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[374] + pEtaPrev[1497];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[467] + pEtaPrev[1868];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[515] + pEtaPrev[2061];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[602] + pEtaPrev[2410];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[610] + pEtaPrev[2441];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[723] + pEtaPrev[2892];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[851] + pEtaPrev[3238];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[979] + pEtaPrev[3577];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1235] + pEtaPrev[4089];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1285] + pEtaPrev[4257];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1375] + pEtaPrev[4798];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1393] + pEtaPrev[4905];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[121] = minval;
		else
			pEta[121] = -minval;
	}
	else
		pEta[121] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[342] = minval;
		else
			pEta[342] = -minval;
	}
	else
		pEta[342] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[505] = minval;
		else
			pEta[505] = -minval;
	}
	else
		pEta[505] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[844] = minval;
		else
			pEta[844] = -minval;
	}
	else
		pEta[844] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1089] = minval;
		else
			pEta[1089] = -minval;
	}
	else
		pEta[1089] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1378] = minval;
		else
			pEta[1378] = -minval;
	}
	else
		pEta[1378] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1497] = minval;
		else
			pEta[1497] = -minval;
	}
	else
		pEta[1497] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1868] = minval;
		else
			pEta[1868] = -minval;
	}
	else
		pEta[1868] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2061] = minval;
		else
			pEta[2061] = -minval;
	}
	else
		pEta[2061] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2410] = minval;
		else
			pEta[2410] = -minval;
	}
	else
		pEta[2410] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2441] = minval;
		else
			pEta[2441] = -minval;
	}
	else
		pEta[2441] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2892] = minval;
		else
			pEta[2892] = -minval;
	}
	else
		pEta[2892] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3238] = minval;
		else
			pEta[3238] = -minval;
	}
	else
		pEta[3238] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3577] = minval;
		else
			pEta[3577] = -minval;
	}
	else
		pEta[3577] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4089] = minval;
		else
			pEta[4089] = -minval;
	}
	else
		pEta[4089] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4257] = minval;
		else
			pEta[4257] = -minval;
	}
	else
		pEta[4257] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4798] = minval;
		else
			pEta[4798] = -minval;
	}
	else
		pEta[4798] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4905] = minval;
		else
			pEta[4905] = -minval;
	}
	else
		pEta[4905] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 212     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[31] + pEtaPrev[125];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[86] + pEtaPrev[346];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[127] + pEtaPrev[509];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[212] + pEtaPrev[848];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[273] + pEtaPrev[1093];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[345] + pEtaPrev[1382];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[375] + pEtaPrev[1501];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[468] + pEtaPrev[1872];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[516] + pEtaPrev[2065];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[603] + pEtaPrev[2414];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[611] + pEtaPrev[2445];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[724] + pEtaPrev[2896];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[852] + pEtaPrev[3240];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[980] + pEtaPrev[3580];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1236] + pEtaPrev[4092];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1286] + pEtaPrev[4263];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1344] + pEtaPrev[4612];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1394] + pEtaPrev[4911];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[125] = minval;
		else
			pEta[125] = -minval;
	}
	else
		pEta[125] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[346] = minval;
		else
			pEta[346] = -minval;
	}
	else
		pEta[346] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[509] = minval;
		else
			pEta[509] = -minval;
	}
	else
		pEta[509] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[848] = minval;
		else
			pEta[848] = -minval;
	}
	else
		pEta[848] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1093] = minval;
		else
			pEta[1093] = -minval;
	}
	else
		pEta[1093] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1382] = minval;
		else
			pEta[1382] = -minval;
	}
	else
		pEta[1382] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1501] = minval;
		else
			pEta[1501] = -minval;
	}
	else
		pEta[1501] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1872] = minval;
		else
			pEta[1872] = -minval;
	}
	else
		pEta[1872] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2065] = minval;
		else
			pEta[2065] = -minval;
	}
	else
		pEta[2065] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2414] = minval;
		else
			pEta[2414] = -minval;
	}
	else
		pEta[2414] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2445] = minval;
		else
			pEta[2445] = -minval;
	}
	else
		pEta[2445] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2896] = minval;
		else
			pEta[2896] = -minval;
	}
	else
		pEta[2896] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3240] = minval;
		else
			pEta[3240] = -minval;
	}
	else
		pEta[3240] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3580] = minval;
		else
			pEta[3580] = -minval;
	}
	else
		pEta[3580] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4092] = minval;
		else
			pEta[4092] = -minval;
	}
	else
		pEta[4092] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4263] = minval;
		else
			pEta[4263] = -minval;
	}
	else
		pEta[4263] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4612] = minval;
		else
			pEta[4612] = -minval;
	}
	else
		pEta[4612] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4911] = minval;
		else
			pEta[4911] = -minval;
	}
	else
		pEta[4911] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 213     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[0] + pEtaPrev[1];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[87] + pEtaPrev[350];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[96] + pEtaPrev[385];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[213] + pEtaPrev[852];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[274] + pEtaPrev[1097];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[346] + pEtaPrev[1386];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[376] + pEtaPrev[1505];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[469] + pEtaPrev[1876];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[517] + pEtaPrev[2069];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[604] + pEtaPrev[2418];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[612] + pEtaPrev[2449];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[725] + pEtaPrev[2900];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[853] + pEtaPrev[3242];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[981] + pEtaPrev[3583];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1237] + pEtaPrev[4095];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1287] + pEtaPrev[4269];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1345] + pEtaPrev[4618];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1395] + pEtaPrev[4917];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[1] = minval;
		else
			pEta[1] = -minval;
	}
	else
		pEta[1] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[350] = minval;
		else
			pEta[350] = -minval;
	}
	else
		pEta[350] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[385] = minval;
		else
			pEta[385] = -minval;
	}
	else
		pEta[385] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[852] = minval;
		else
			pEta[852] = -minval;
	}
	else
		pEta[852] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1097] = minval;
		else
			pEta[1097] = -minval;
	}
	else
		pEta[1097] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1386] = minval;
		else
			pEta[1386] = -minval;
	}
	else
		pEta[1386] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1505] = minval;
		else
			pEta[1505] = -minval;
	}
	else
		pEta[1505] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1876] = minval;
		else
			pEta[1876] = -minval;
	}
	else
		pEta[1876] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2069] = minval;
		else
			pEta[2069] = -minval;
	}
	else
		pEta[2069] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2418] = minval;
		else
			pEta[2418] = -minval;
	}
	else
		pEta[2418] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2449] = minval;
		else
			pEta[2449] = -minval;
	}
	else
		pEta[2449] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2900] = minval;
		else
			pEta[2900] = -minval;
	}
	else
		pEta[2900] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3242] = minval;
		else
			pEta[3242] = -minval;
	}
	else
		pEta[3242] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3583] = minval;
		else
			pEta[3583] = -minval;
	}
	else
		pEta[3583] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4095] = minval;
		else
			pEta[4095] = -minval;
	}
	else
		pEta[4095] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4269] = minval;
		else
			pEta[4269] = -minval;
	}
	else
		pEta[4269] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4618] = minval;
		else
			pEta[4618] = -minval;
	}
	else
		pEta[4618] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4917] = minval;
		else
			pEta[4917] = -minval;
	}
	else
		pEta[4917] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 214     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1] + pEtaPrev[5];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[88] + pEtaPrev[354];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[97] + pEtaPrev[389];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[214] + pEtaPrev[856];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[275] + pEtaPrev[1101];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[347] + pEtaPrev[1390];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[377] + pEtaPrev[1509];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[470] + pEtaPrev[1880];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[518] + pEtaPrev[2073];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[605] + pEtaPrev[2422];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[613] + pEtaPrev[2453];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[726] + pEtaPrev[2904];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[854] + pEtaPrev[3244];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[982] + pEtaPrev[3586];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1238] + pEtaPrev[4098];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1288] + pEtaPrev[4275];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1346] + pEtaPrev[4624];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1396] + pEtaPrev[4923];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[5] = minval;
		else
			pEta[5] = -minval;
	}
	else
		pEta[5] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[354] = minval;
		else
			pEta[354] = -minval;
	}
	else
		pEta[354] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[389] = minval;
		else
			pEta[389] = -minval;
	}
	else
		pEta[389] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[856] = minval;
		else
			pEta[856] = -minval;
	}
	else
		pEta[856] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1101] = minval;
		else
			pEta[1101] = -minval;
	}
	else
		pEta[1101] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1390] = minval;
		else
			pEta[1390] = -minval;
	}
	else
		pEta[1390] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1509] = minval;
		else
			pEta[1509] = -minval;
	}
	else
		pEta[1509] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1880] = minval;
		else
			pEta[1880] = -minval;
	}
	else
		pEta[1880] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2073] = minval;
		else
			pEta[2073] = -minval;
	}
	else
		pEta[2073] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2422] = minval;
		else
			pEta[2422] = -minval;
	}
	else
		pEta[2422] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2453] = minval;
		else
			pEta[2453] = -minval;
	}
	else
		pEta[2453] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2904] = minval;
		else
			pEta[2904] = -minval;
	}
	else
		pEta[2904] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3244] = minval;
		else
			pEta[3244] = -minval;
	}
	else
		pEta[3244] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3586] = minval;
		else
			pEta[3586] = -minval;
	}
	else
		pEta[3586] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4098] = minval;
		else
			pEta[4098] = -minval;
	}
	else
		pEta[4098] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4275] = minval;
		else
			pEta[4275] = -minval;
	}
	else
		pEta[4275] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4624] = minval;
		else
			pEta[4624] = -minval;
	}
	else
		pEta[4624] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4923] = minval;
		else
			pEta[4923] = -minval;
	}
	else
		pEta[4923] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 215     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[2] + pEtaPrev[9];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[89] + pEtaPrev[358];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[98] + pEtaPrev[393];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[215] + pEtaPrev[860];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[276] + pEtaPrev[1105];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[348] + pEtaPrev[1394];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[378] + pEtaPrev[1513];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[471] + pEtaPrev[1884];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[519] + pEtaPrev[2077];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[606] + pEtaPrev[2426];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[614] + pEtaPrev[2457];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[727] + pEtaPrev[2908];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[855] + pEtaPrev[3246];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[983] + pEtaPrev[3589];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1239] + pEtaPrev[4101];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1289] + pEtaPrev[4281];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1347] + pEtaPrev[4630];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1397] + pEtaPrev[4929];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[9] = minval;
		else
			pEta[9] = -minval;
	}
	else
		pEta[9] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[358] = minval;
		else
			pEta[358] = -minval;
	}
	else
		pEta[358] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[393] = minval;
		else
			pEta[393] = -minval;
	}
	else
		pEta[393] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[860] = minval;
		else
			pEta[860] = -minval;
	}
	else
		pEta[860] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1105] = minval;
		else
			pEta[1105] = -minval;
	}
	else
		pEta[1105] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1394] = minval;
		else
			pEta[1394] = -minval;
	}
	else
		pEta[1394] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1513] = minval;
		else
			pEta[1513] = -minval;
	}
	else
		pEta[1513] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1884] = minval;
		else
			pEta[1884] = -minval;
	}
	else
		pEta[1884] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2077] = minval;
		else
			pEta[2077] = -minval;
	}
	else
		pEta[2077] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2426] = minval;
		else
			pEta[2426] = -minval;
	}
	else
		pEta[2426] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2457] = minval;
		else
			pEta[2457] = -minval;
	}
	else
		pEta[2457] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2908] = minval;
		else
			pEta[2908] = -minval;
	}
	else
		pEta[2908] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3246] = minval;
		else
			pEta[3246] = -minval;
	}
	else
		pEta[3246] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3589] = minval;
		else
			pEta[3589] = -minval;
	}
	else
		pEta[3589] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4101] = minval;
		else
			pEta[4101] = -minval;
	}
	else
		pEta[4101] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4281] = minval;
		else
			pEta[4281] = -minval;
	}
	else
		pEta[4281] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4630] = minval;
		else
			pEta[4630] = -minval;
	}
	else
		pEta[4630] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4929] = minval;
		else
			pEta[4929] = -minval;
	}
	else
		pEta[4929] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 216     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[3] + pEtaPrev[13];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[90] + pEtaPrev[362];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[99] + pEtaPrev[397];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[216] + pEtaPrev[864];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[277] + pEtaPrev[1109];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[349] + pEtaPrev[1398];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[379] + pEtaPrev[1517];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[472] + pEtaPrev[1888];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[520] + pEtaPrev[2081];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[607] + pEtaPrev[2430];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[615] + pEtaPrev[2461];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[728] + pEtaPrev[2912];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[856] + pEtaPrev[3248];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[984] + pEtaPrev[3592];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1240] + pEtaPrev[4104];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1290] + pEtaPrev[4287];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1348] + pEtaPrev[4636];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1398] + pEtaPrev[4935];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[13] = minval;
		else
			pEta[13] = -minval;
	}
	else
		pEta[13] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[362] = minval;
		else
			pEta[362] = -minval;
	}
	else
		pEta[362] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[397] = minval;
		else
			pEta[397] = -minval;
	}
	else
		pEta[397] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[864] = minval;
		else
			pEta[864] = -minval;
	}
	else
		pEta[864] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1109] = minval;
		else
			pEta[1109] = -minval;
	}
	else
		pEta[1109] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1398] = minval;
		else
			pEta[1398] = -minval;
	}
	else
		pEta[1398] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1517] = minval;
		else
			pEta[1517] = -minval;
	}
	else
		pEta[1517] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1888] = minval;
		else
			pEta[1888] = -minval;
	}
	else
		pEta[1888] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2081] = minval;
		else
			pEta[2081] = -minval;
	}
	else
		pEta[2081] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2430] = minval;
		else
			pEta[2430] = -minval;
	}
	else
		pEta[2430] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2461] = minval;
		else
			pEta[2461] = -minval;
	}
	else
		pEta[2461] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2912] = minval;
		else
			pEta[2912] = -minval;
	}
	else
		pEta[2912] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3248] = minval;
		else
			pEta[3248] = -minval;
	}
	else
		pEta[3248] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3592] = minval;
		else
			pEta[3592] = -minval;
	}
	else
		pEta[3592] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4104] = minval;
		else
			pEta[4104] = -minval;
	}
	else
		pEta[4104] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4287] = minval;
		else
			pEta[4287] = -minval;
	}
	else
		pEta[4287] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4636] = minval;
		else
			pEta[4636] = -minval;
	}
	else
		pEta[4636] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4935] = minval;
		else
			pEta[4935] = -minval;
	}
	else
		pEta[4935] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 217     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[4] + pEtaPrev[17];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[91] + pEtaPrev[366];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[100] + pEtaPrev[401];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[217] + pEtaPrev[868];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[278] + pEtaPrev[1113];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[350] + pEtaPrev[1402];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[380] + pEtaPrev[1521];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[473] + pEtaPrev[1892];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[521] + pEtaPrev[2085];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[576] + pEtaPrev[2306];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[616] + pEtaPrev[2465];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[729] + pEtaPrev[2916];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[857] + pEtaPrev[3250];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[985] + pEtaPrev[3595];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1241] + pEtaPrev[4107];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1291] + pEtaPrev[4293];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1349] + pEtaPrev[4642];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1399] + pEtaPrev[4941];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[17] = minval;
		else
			pEta[17] = -minval;
	}
	else
		pEta[17] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[366] = minval;
		else
			pEta[366] = -minval;
	}
	else
		pEta[366] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[401] = minval;
		else
			pEta[401] = -minval;
	}
	else
		pEta[401] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[868] = minval;
		else
			pEta[868] = -minval;
	}
	else
		pEta[868] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1113] = minval;
		else
			pEta[1113] = -minval;
	}
	else
		pEta[1113] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1402] = minval;
		else
			pEta[1402] = -minval;
	}
	else
		pEta[1402] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1521] = minval;
		else
			pEta[1521] = -minval;
	}
	else
		pEta[1521] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1892] = minval;
		else
			pEta[1892] = -minval;
	}
	else
		pEta[1892] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2085] = minval;
		else
			pEta[2085] = -minval;
	}
	else
		pEta[2085] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2306] = minval;
		else
			pEta[2306] = -minval;
	}
	else
		pEta[2306] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2465] = minval;
		else
			pEta[2465] = -minval;
	}
	else
		pEta[2465] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2916] = minval;
		else
			pEta[2916] = -minval;
	}
	else
		pEta[2916] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3250] = minval;
		else
			pEta[3250] = -minval;
	}
	else
		pEta[3250] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3595] = minval;
		else
			pEta[3595] = -minval;
	}
	else
		pEta[3595] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4107] = minval;
		else
			pEta[4107] = -minval;
	}
	else
		pEta[4107] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4293] = minval;
		else
			pEta[4293] = -minval;
	}
	else
		pEta[4293] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4642] = minval;
		else
			pEta[4642] = -minval;
	}
	else
		pEta[4642] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4941] = minval;
		else
			pEta[4941] = -minval;
	}
	else
		pEta[4941] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 218     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[5] + pEtaPrev[21];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[92] + pEtaPrev[370];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[101] + pEtaPrev[405];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[218] + pEtaPrev[872];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[279] + pEtaPrev[1117];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[351] + pEtaPrev[1406];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[381] + pEtaPrev[1525];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[474] + pEtaPrev[1896];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[522] + pEtaPrev[2089];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[577] + pEtaPrev[2310];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[617] + pEtaPrev[2469];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[730] + pEtaPrev[2920];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[858] + pEtaPrev[3252];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[986] + pEtaPrev[3598];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1242] + pEtaPrev[4110];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1292] + pEtaPrev[4299];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1350] + pEtaPrev[4648];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1400] + pEtaPrev[4947];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[21] = minval;
		else
			pEta[21] = -minval;
	}
	else
		pEta[21] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[370] = minval;
		else
			pEta[370] = -minval;
	}
	else
		pEta[370] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[405] = minval;
		else
			pEta[405] = -minval;
	}
	else
		pEta[405] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[872] = minval;
		else
			pEta[872] = -minval;
	}
	else
		pEta[872] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1117] = minval;
		else
			pEta[1117] = -minval;
	}
	else
		pEta[1117] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1406] = minval;
		else
			pEta[1406] = -minval;
	}
	else
		pEta[1406] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1525] = minval;
		else
			pEta[1525] = -minval;
	}
	else
		pEta[1525] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1896] = minval;
		else
			pEta[1896] = -minval;
	}
	else
		pEta[1896] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2089] = minval;
		else
			pEta[2089] = -minval;
	}
	else
		pEta[2089] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2310] = minval;
		else
			pEta[2310] = -minval;
	}
	else
		pEta[2310] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2469] = minval;
		else
			pEta[2469] = -minval;
	}
	else
		pEta[2469] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2920] = minval;
		else
			pEta[2920] = -minval;
	}
	else
		pEta[2920] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3252] = minval;
		else
			pEta[3252] = -minval;
	}
	else
		pEta[3252] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3598] = minval;
		else
			pEta[3598] = -minval;
	}
	else
		pEta[3598] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4110] = minval;
		else
			pEta[4110] = -minval;
	}
	else
		pEta[4110] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4299] = minval;
		else
			pEta[4299] = -minval;
	}
	else
		pEta[4299] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4648] = minval;
		else
			pEta[4648] = -minval;
	}
	else
		pEta[4648] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4947] = minval;
		else
			pEta[4947] = -minval;
	}
	else
		pEta[4947] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 219     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[6] + pEtaPrev[25];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[93] + pEtaPrev[374];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[102] + pEtaPrev[409];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[219] + pEtaPrev[876];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[280] + pEtaPrev[1121];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[320] + pEtaPrev[1282];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[382] + pEtaPrev[1529];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[475] + pEtaPrev[1900];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[523] + pEtaPrev[2093];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[578] + pEtaPrev[2314];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[618] + pEtaPrev[2473];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[731] + pEtaPrev[2924];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[859] + pEtaPrev[3254];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[987] + pEtaPrev[3601];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1243] + pEtaPrev[4113];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1293] + pEtaPrev[4305];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1351] + pEtaPrev[4654];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1401] + pEtaPrev[4953];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[25] = minval;
		else
			pEta[25] = -minval;
	}
	else
		pEta[25] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[374] = minval;
		else
			pEta[374] = -minval;
	}
	else
		pEta[374] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[409] = minval;
		else
			pEta[409] = -minval;
	}
	else
		pEta[409] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[876] = minval;
		else
			pEta[876] = -minval;
	}
	else
		pEta[876] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1121] = minval;
		else
			pEta[1121] = -minval;
	}
	else
		pEta[1121] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1282] = minval;
		else
			pEta[1282] = -minval;
	}
	else
		pEta[1282] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1529] = minval;
		else
			pEta[1529] = -minval;
	}
	else
		pEta[1529] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1900] = minval;
		else
			pEta[1900] = -minval;
	}
	else
		pEta[1900] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2093] = minval;
		else
			pEta[2093] = -minval;
	}
	else
		pEta[2093] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2314] = minval;
		else
			pEta[2314] = -minval;
	}
	else
		pEta[2314] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2473] = minval;
		else
			pEta[2473] = -minval;
	}
	else
		pEta[2473] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2924] = minval;
		else
			pEta[2924] = -minval;
	}
	else
		pEta[2924] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3254] = minval;
		else
			pEta[3254] = -minval;
	}
	else
		pEta[3254] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3601] = minval;
		else
			pEta[3601] = -minval;
	}
	else
		pEta[3601] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4113] = minval;
		else
			pEta[4113] = -minval;
	}
	else
		pEta[4113] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4305] = minval;
		else
			pEta[4305] = -minval;
	}
	else
		pEta[4305] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4654] = minval;
		else
			pEta[4654] = -minval;
	}
	else
		pEta[4654] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4953] = minval;
		else
			pEta[4953] = -minval;
	}
	else
		pEta[4953] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 220     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[7] + pEtaPrev[29];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[94] + pEtaPrev[378];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[103] + pEtaPrev[413];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[220] + pEtaPrev[880];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[281] + pEtaPrev[1125];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[321] + pEtaPrev[1286];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[383] + pEtaPrev[1533];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[476] + pEtaPrev[1904];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[524] + pEtaPrev[2097];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[579] + pEtaPrev[2318];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[619] + pEtaPrev[2477];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[732] + pEtaPrev[2928];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[860] + pEtaPrev[3256];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[988] + pEtaPrev[3604];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1244] + pEtaPrev[4116];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1294] + pEtaPrev[4311];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1352] + pEtaPrev[4660];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1402] + pEtaPrev[4959];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[29] = minval;
		else
			pEta[29] = -minval;
	}
	else
		pEta[29] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[378] = minval;
		else
			pEta[378] = -minval;
	}
	else
		pEta[378] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[413] = minval;
		else
			pEta[413] = -minval;
	}
	else
		pEta[413] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[880] = minval;
		else
			pEta[880] = -minval;
	}
	else
		pEta[880] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1125] = minval;
		else
			pEta[1125] = -minval;
	}
	else
		pEta[1125] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1286] = minval;
		else
			pEta[1286] = -minval;
	}
	else
		pEta[1286] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1533] = minval;
		else
			pEta[1533] = -minval;
	}
	else
		pEta[1533] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1904] = minval;
		else
			pEta[1904] = -minval;
	}
	else
		pEta[1904] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2097] = minval;
		else
			pEta[2097] = -minval;
	}
	else
		pEta[2097] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2318] = minval;
		else
			pEta[2318] = -minval;
	}
	else
		pEta[2318] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2477] = minval;
		else
			pEta[2477] = -minval;
	}
	else
		pEta[2477] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2928] = minval;
		else
			pEta[2928] = -minval;
	}
	else
		pEta[2928] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3256] = minval;
		else
			pEta[3256] = -minval;
	}
	else
		pEta[3256] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3604] = minval;
		else
			pEta[3604] = -minval;
	}
	else
		pEta[3604] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4116] = minval;
		else
			pEta[4116] = -minval;
	}
	else
		pEta[4116] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4311] = minval;
		else
			pEta[4311] = -minval;
	}
	else
		pEta[4311] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4660] = minval;
		else
			pEta[4660] = -minval;
	}
	else
		pEta[4660] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4959] = minval;
		else
			pEta[4959] = -minval;
	}
	else
		pEta[4959] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 221     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[8] + pEtaPrev[33];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[95] + pEtaPrev[382];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[104] + pEtaPrev[417];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[221] + pEtaPrev[884];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[282] + pEtaPrev[1129];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[322] + pEtaPrev[1290];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[352] + pEtaPrev[1409];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[477] + pEtaPrev[1908];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[525] + pEtaPrev[2101];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[580] + pEtaPrev[2322];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[620] + pEtaPrev[2481];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[733] + pEtaPrev[2932];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[861] + pEtaPrev[3258];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[989] + pEtaPrev[3607];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1245] + pEtaPrev[4119];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1295] + pEtaPrev[4317];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1353] + pEtaPrev[4666];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1403] + pEtaPrev[4965];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[33] = minval;
		else
			pEta[33] = -minval;
	}
	else
		pEta[33] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[382] = minval;
		else
			pEta[382] = -minval;
	}
	else
		pEta[382] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[417] = minval;
		else
			pEta[417] = -minval;
	}
	else
		pEta[417] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[884] = minval;
		else
			pEta[884] = -minval;
	}
	else
		pEta[884] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1129] = minval;
		else
			pEta[1129] = -minval;
	}
	else
		pEta[1129] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1290] = minval;
		else
			pEta[1290] = -minval;
	}
	else
		pEta[1290] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1409] = minval;
		else
			pEta[1409] = -minval;
	}
	else
		pEta[1409] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1908] = minval;
		else
			pEta[1908] = -minval;
	}
	else
		pEta[1908] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2101] = minval;
		else
			pEta[2101] = -minval;
	}
	else
		pEta[2101] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2322] = minval;
		else
			pEta[2322] = -minval;
	}
	else
		pEta[2322] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2481] = minval;
		else
			pEta[2481] = -minval;
	}
	else
		pEta[2481] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2932] = minval;
		else
			pEta[2932] = -minval;
	}
	else
		pEta[2932] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3258] = minval;
		else
			pEta[3258] = -minval;
	}
	else
		pEta[3258] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3607] = minval;
		else
			pEta[3607] = -minval;
	}
	else
		pEta[3607] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4119] = minval;
		else
			pEta[4119] = -minval;
	}
	else
		pEta[4119] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4317] = minval;
		else
			pEta[4317] = -minval;
	}
	else
		pEta[4317] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4666] = minval;
		else
			pEta[4666] = -minval;
	}
	else
		pEta[4666] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4965] = minval;
		else
			pEta[4965] = -minval;
	}
	else
		pEta[4965] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 222     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[9] + pEtaPrev[37];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[64] + pEtaPrev[258];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[105] + pEtaPrev[421];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[222] + pEtaPrev[888];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[283] + pEtaPrev[1133];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[323] + pEtaPrev[1294];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[353] + pEtaPrev[1413];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[478] + pEtaPrev[1912];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[526] + pEtaPrev[2105];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[581] + pEtaPrev[2326];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[621] + pEtaPrev[2485];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[734] + pEtaPrev[2936];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[862] + pEtaPrev[3260];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[990] + pEtaPrev[3610];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1246] + pEtaPrev[4122];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1296] + pEtaPrev[4323];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1354] + pEtaPrev[4672];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1404] + pEtaPrev[4971];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[37] = minval;
		else
			pEta[37] = -minval;
	}
	else
		pEta[37] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[258] = minval;
		else
			pEta[258] = -minval;
	}
	else
		pEta[258] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[421] = minval;
		else
			pEta[421] = -minval;
	}
	else
		pEta[421] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[888] = minval;
		else
			pEta[888] = -minval;
	}
	else
		pEta[888] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1133] = minval;
		else
			pEta[1133] = -minval;
	}
	else
		pEta[1133] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1294] = minval;
		else
			pEta[1294] = -minval;
	}
	else
		pEta[1294] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1413] = minval;
		else
			pEta[1413] = -minval;
	}
	else
		pEta[1413] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1912] = minval;
		else
			pEta[1912] = -minval;
	}
	else
		pEta[1912] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2105] = minval;
		else
			pEta[2105] = -minval;
	}
	else
		pEta[2105] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2326] = minval;
		else
			pEta[2326] = -minval;
	}
	else
		pEta[2326] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2485] = minval;
		else
			pEta[2485] = -minval;
	}
	else
		pEta[2485] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2936] = minval;
		else
			pEta[2936] = -minval;
	}
	else
		pEta[2936] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3260] = minval;
		else
			pEta[3260] = -minval;
	}
	else
		pEta[3260] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3610] = minval;
		else
			pEta[3610] = -minval;
	}
	else
		pEta[3610] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4122] = minval;
		else
			pEta[4122] = -minval;
	}
	else
		pEta[4122] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4323] = minval;
		else
			pEta[4323] = -minval;
	}
	else
		pEta[4323] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4672] = minval;
		else
			pEta[4672] = -minval;
	}
	else
		pEta[4672] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4971] = minval;
		else
			pEta[4971] = -minval;
	}
	else
		pEta[4971] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 223     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[10] + pEtaPrev[41];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[65] + pEtaPrev[262];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[106] + pEtaPrev[425];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[223] + pEtaPrev[892];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[284] + pEtaPrev[1137];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[324] + pEtaPrev[1298];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[354] + pEtaPrev[1417];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[479] + pEtaPrev[1916];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[527] + pEtaPrev[2109];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[582] + pEtaPrev[2330];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[622] + pEtaPrev[2489];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[735] + pEtaPrev[2940];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[863] + pEtaPrev[3262];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[991] + pEtaPrev[3613];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1247] + pEtaPrev[4125];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1297] + pEtaPrev[4329];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1355] + pEtaPrev[4678];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1405] + pEtaPrev[4977];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[41] = minval;
		else
			pEta[41] = -minval;
	}
	else
		pEta[41] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[262] = minval;
		else
			pEta[262] = -minval;
	}
	else
		pEta[262] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[425] = minval;
		else
			pEta[425] = -minval;
	}
	else
		pEta[425] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[892] = minval;
		else
			pEta[892] = -minval;
	}
	else
		pEta[892] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1137] = minval;
		else
			pEta[1137] = -minval;
	}
	else
		pEta[1137] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1298] = minval;
		else
			pEta[1298] = -minval;
	}
	else
		pEta[1298] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1417] = minval;
		else
			pEta[1417] = -minval;
	}
	else
		pEta[1417] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1916] = minval;
		else
			pEta[1916] = -minval;
	}
	else
		pEta[1916] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2109] = minval;
		else
			pEta[2109] = -minval;
	}
	else
		pEta[2109] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2330] = minval;
		else
			pEta[2330] = -minval;
	}
	else
		pEta[2330] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2489] = minval;
		else
			pEta[2489] = -minval;
	}
	else
		pEta[2489] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2940] = minval;
		else
			pEta[2940] = -minval;
	}
	else
		pEta[2940] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3262] = minval;
		else
			pEta[3262] = -minval;
	}
	else
		pEta[3262] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3613] = minval;
		else
			pEta[3613] = -minval;
	}
	else
		pEta[3613] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4125] = minval;
		else
			pEta[4125] = -minval;
	}
	else
		pEta[4125] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4329] = minval;
		else
			pEta[4329] = -minval;
	}
	else
		pEta[4329] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4678] = minval;
		else
			pEta[4678] = -minval;
	}
	else
		pEta[4678] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4977] = minval;
		else
			pEta[4977] = -minval;
	}
	else
		pEta[4977] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 224     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[18] + pEtaPrev[74];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[63] + pEtaPrev[254];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[116] + pEtaPrev[466];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[224] + pEtaPrev[896];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[271] + pEtaPrev[1086];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[293] + pEtaPrev[1174];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[371] + pEtaPrev[1486];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[480] + pEtaPrev[1920];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[523] + pEtaPrev[2094];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[561] + pEtaPrev[2246];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[612] + pEtaPrev[2450];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[736] + pEtaPrev[2944];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[864] + pEtaPrev[3264];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[992] + pEtaPrev[3616];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1248] + pEtaPrev[4128];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1299] + pEtaPrev[4342];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1326] + pEtaPrev[4504];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1389] + pEtaPrev[4882];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[74] = minval;
		else
			pEta[74] = -minval;
	}
	else
		pEta[74] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[254] = minval;
		else
			pEta[254] = -minval;
	}
	else
		pEta[254] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[466] = minval;
		else
			pEta[466] = -minval;
	}
	else
		pEta[466] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[896] = minval;
		else
			pEta[896] = -minval;
	}
	else
		pEta[896] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1086] = minval;
		else
			pEta[1086] = -minval;
	}
	else
		pEta[1086] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1174] = minval;
		else
			pEta[1174] = -minval;
	}
	else
		pEta[1174] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1486] = minval;
		else
			pEta[1486] = -minval;
	}
	else
		pEta[1486] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1920] = minval;
		else
			pEta[1920] = -minval;
	}
	else
		pEta[1920] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2094] = minval;
		else
			pEta[2094] = -minval;
	}
	else
		pEta[2094] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2246] = minval;
		else
			pEta[2246] = -minval;
	}
	else
		pEta[2246] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2450] = minval;
		else
			pEta[2450] = -minval;
	}
	else
		pEta[2450] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2944] = minval;
		else
			pEta[2944] = -minval;
	}
	else
		pEta[2944] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3264] = minval;
		else
			pEta[3264] = -minval;
	}
	else
		pEta[3264] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3616] = minval;
		else
			pEta[3616] = -minval;
	}
	else
		pEta[3616] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4128] = minval;
		else
			pEta[4128] = -minval;
	}
	else
		pEta[4128] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4342] = minval;
		else
			pEta[4342] = -minval;
	}
	else
		pEta[4342] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4504] = minval;
		else
			pEta[4504] = -minval;
	}
	else
		pEta[4504] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4882] = minval;
		else
			pEta[4882] = -minval;
	}
	else
		pEta[4882] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 225     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[19] + pEtaPrev[78];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[32] + pEtaPrev[130];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[117] + pEtaPrev[470];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[225] + pEtaPrev[900];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[272] + pEtaPrev[1090];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[294] + pEtaPrev[1178];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[372] + pEtaPrev[1490];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[481] + pEtaPrev[1924];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[524] + pEtaPrev[2098];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[562] + pEtaPrev[2250];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[613] + pEtaPrev[2454];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[737] + pEtaPrev[2948];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[865] + pEtaPrev[3266];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[993] + pEtaPrev[3619];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1249] + pEtaPrev[4131];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1300] + pEtaPrev[4348];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1327] + pEtaPrev[4510];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1390] + pEtaPrev[4888];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[78] = minval;
		else
			pEta[78] = -minval;
	}
	else
		pEta[78] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[130] = minval;
		else
			pEta[130] = -minval;
	}
	else
		pEta[130] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[470] = minval;
		else
			pEta[470] = -minval;
	}
	else
		pEta[470] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[900] = minval;
		else
			pEta[900] = -minval;
	}
	else
		pEta[900] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1090] = minval;
		else
			pEta[1090] = -minval;
	}
	else
		pEta[1090] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1178] = minval;
		else
			pEta[1178] = -minval;
	}
	else
		pEta[1178] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1490] = minval;
		else
			pEta[1490] = -minval;
	}
	else
		pEta[1490] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1924] = minval;
		else
			pEta[1924] = -minval;
	}
	else
		pEta[1924] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2098] = minval;
		else
			pEta[2098] = -minval;
	}
	else
		pEta[2098] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2250] = minval;
		else
			pEta[2250] = -minval;
	}
	else
		pEta[2250] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2454] = minval;
		else
			pEta[2454] = -minval;
	}
	else
		pEta[2454] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2948] = minval;
		else
			pEta[2948] = -minval;
	}
	else
		pEta[2948] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3266] = minval;
		else
			pEta[3266] = -minval;
	}
	else
		pEta[3266] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3619] = minval;
		else
			pEta[3619] = -minval;
	}
	else
		pEta[3619] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4131] = minval;
		else
			pEta[4131] = -minval;
	}
	else
		pEta[4131] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4348] = minval;
		else
			pEta[4348] = -minval;
	}
	else
		pEta[4348] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4510] = minval;
		else
			pEta[4510] = -minval;
	}
	else
		pEta[4510] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4888] = minval;
		else
			pEta[4888] = -minval;
	}
	else
		pEta[4888] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 226     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[20] + pEtaPrev[82];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[33] + pEtaPrev[134];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[118] + pEtaPrev[474];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[226] + pEtaPrev[904];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[273] + pEtaPrev[1094];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[295] + pEtaPrev[1182];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[373] + pEtaPrev[1494];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[482] + pEtaPrev[1928];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[525] + pEtaPrev[2102];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[563] + pEtaPrev[2254];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[614] + pEtaPrev[2458];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[738] + pEtaPrev[2952];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[866] + pEtaPrev[3268];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[994] + pEtaPrev[3622];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1250] + pEtaPrev[4134];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1301] + pEtaPrev[4354];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1328] + pEtaPrev[4516];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1391] + pEtaPrev[4894];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[82] = minval;
		else
			pEta[82] = -minval;
	}
	else
		pEta[82] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[134] = minval;
		else
			pEta[134] = -minval;
	}
	else
		pEta[134] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[474] = minval;
		else
			pEta[474] = -minval;
	}
	else
		pEta[474] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[904] = minval;
		else
			pEta[904] = -minval;
	}
	else
		pEta[904] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1094] = minval;
		else
			pEta[1094] = -minval;
	}
	else
		pEta[1094] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1182] = minval;
		else
			pEta[1182] = -minval;
	}
	else
		pEta[1182] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1494] = minval;
		else
			pEta[1494] = -minval;
	}
	else
		pEta[1494] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1928] = minval;
		else
			pEta[1928] = -minval;
	}
	else
		pEta[1928] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2102] = minval;
		else
			pEta[2102] = -minval;
	}
	else
		pEta[2102] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2254] = minval;
		else
			pEta[2254] = -minval;
	}
	else
		pEta[2254] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2458] = minval;
		else
			pEta[2458] = -minval;
	}
	else
		pEta[2458] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2952] = minval;
		else
			pEta[2952] = -minval;
	}
	else
		pEta[2952] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3268] = minval;
		else
			pEta[3268] = -minval;
	}
	else
		pEta[3268] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3622] = minval;
		else
			pEta[3622] = -minval;
	}
	else
		pEta[3622] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4134] = minval;
		else
			pEta[4134] = -minval;
	}
	else
		pEta[4134] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4354] = minval;
		else
			pEta[4354] = -minval;
	}
	else
		pEta[4354] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4516] = minval;
		else
			pEta[4516] = -minval;
	}
	else
		pEta[4516] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4894] = minval;
		else
			pEta[4894] = -minval;
	}
	else
		pEta[4894] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 227     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[21] + pEtaPrev[86];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[34] + pEtaPrev[138];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[119] + pEtaPrev[478];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[227] + pEtaPrev[908];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[274] + pEtaPrev[1098];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[296] + pEtaPrev[1186];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[374] + pEtaPrev[1498];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[483] + pEtaPrev[1932];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[526] + pEtaPrev[2106];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[564] + pEtaPrev[2258];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[615] + pEtaPrev[2462];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[739] + pEtaPrev[2956];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[867] + pEtaPrev[3270];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[995] + pEtaPrev[3625];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1251] + pEtaPrev[4137];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1302] + pEtaPrev[4360];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1329] + pEtaPrev[4522];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1392] + pEtaPrev[4900];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[86] = minval;
		else
			pEta[86] = -minval;
	}
	else
		pEta[86] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[138] = minval;
		else
			pEta[138] = -minval;
	}
	else
		pEta[138] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[478] = minval;
		else
			pEta[478] = -minval;
	}
	else
		pEta[478] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[908] = minval;
		else
			pEta[908] = -minval;
	}
	else
		pEta[908] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1098] = minval;
		else
			pEta[1098] = -minval;
	}
	else
		pEta[1098] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1186] = minval;
		else
			pEta[1186] = -minval;
	}
	else
		pEta[1186] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1498] = minval;
		else
			pEta[1498] = -minval;
	}
	else
		pEta[1498] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1932] = minval;
		else
			pEta[1932] = -minval;
	}
	else
		pEta[1932] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2106] = minval;
		else
			pEta[2106] = -minval;
	}
	else
		pEta[2106] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2258] = minval;
		else
			pEta[2258] = -minval;
	}
	else
		pEta[2258] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2462] = minval;
		else
			pEta[2462] = -minval;
	}
	else
		pEta[2462] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2956] = minval;
		else
			pEta[2956] = -minval;
	}
	else
		pEta[2956] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3270] = minval;
		else
			pEta[3270] = -minval;
	}
	else
		pEta[3270] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3625] = minval;
		else
			pEta[3625] = -minval;
	}
	else
		pEta[3625] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4137] = minval;
		else
			pEta[4137] = -minval;
	}
	else
		pEta[4137] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4360] = minval;
		else
			pEta[4360] = -minval;
	}
	else
		pEta[4360] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4522] = minval;
		else
			pEta[4522] = -minval;
	}
	else
		pEta[4522] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4900] = minval;
		else
			pEta[4900] = -minval;
	}
	else
		pEta[4900] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 228     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[22] + pEtaPrev[90];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[35] + pEtaPrev[142];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[120] + pEtaPrev[482];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[228] + pEtaPrev[912];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[275] + pEtaPrev[1102];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[297] + pEtaPrev[1190];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[375] + pEtaPrev[1502];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[484] + pEtaPrev[1936];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[527] + pEtaPrev[2110];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[565] + pEtaPrev[2262];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[616] + pEtaPrev[2466];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[740] + pEtaPrev[2960];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[868] + pEtaPrev[3272];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[996] + pEtaPrev[3628];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1252] + pEtaPrev[4140];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1303] + pEtaPrev[4366];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1330] + pEtaPrev[4528];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1393] + pEtaPrev[4906];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[90] = minval;
		else
			pEta[90] = -minval;
	}
	else
		pEta[90] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[142] = minval;
		else
			pEta[142] = -minval;
	}
	else
		pEta[142] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[482] = minval;
		else
			pEta[482] = -minval;
	}
	else
		pEta[482] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[912] = minval;
		else
			pEta[912] = -minval;
	}
	else
		pEta[912] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1102] = minval;
		else
			pEta[1102] = -minval;
	}
	else
		pEta[1102] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1190] = minval;
		else
			pEta[1190] = -minval;
	}
	else
		pEta[1190] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1502] = minval;
		else
			pEta[1502] = -minval;
	}
	else
		pEta[1502] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1936] = minval;
		else
			pEta[1936] = -minval;
	}
	else
		pEta[1936] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2110] = minval;
		else
			pEta[2110] = -minval;
	}
	else
		pEta[2110] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2262] = minval;
		else
			pEta[2262] = -minval;
	}
	else
		pEta[2262] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2466] = minval;
		else
			pEta[2466] = -minval;
	}
	else
		pEta[2466] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2960] = minval;
		else
			pEta[2960] = -minval;
	}
	else
		pEta[2960] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3272] = minval;
		else
			pEta[3272] = -minval;
	}
	else
		pEta[3272] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3628] = minval;
		else
			pEta[3628] = -minval;
	}
	else
		pEta[3628] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4140] = minval;
		else
			pEta[4140] = -minval;
	}
	else
		pEta[4140] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4366] = minval;
		else
			pEta[4366] = -minval;
	}
	else
		pEta[4366] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4528] = minval;
		else
			pEta[4528] = -minval;
	}
	else
		pEta[4528] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4906] = minval;
		else
			pEta[4906] = -minval;
	}
	else
		pEta[4906] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 229     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[23] + pEtaPrev[94];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[36] + pEtaPrev[146];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[121] + pEtaPrev[486];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[229] + pEtaPrev[916];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[276] + pEtaPrev[1106];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[298] + pEtaPrev[1194];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[376] + pEtaPrev[1506];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[485] + pEtaPrev[1940];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[528] + pEtaPrev[2114];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[566] + pEtaPrev[2266];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[617] + pEtaPrev[2470];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[741] + pEtaPrev[2964];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[869] + pEtaPrev[3274];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[997] + pEtaPrev[3631];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1253] + pEtaPrev[4143];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1304] + pEtaPrev[4372];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1331] + pEtaPrev[4534];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1394] + pEtaPrev[4912];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[94] = minval;
		else
			pEta[94] = -minval;
	}
	else
		pEta[94] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[146] = minval;
		else
			pEta[146] = -minval;
	}
	else
		pEta[146] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[486] = minval;
		else
			pEta[486] = -minval;
	}
	else
		pEta[486] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[916] = minval;
		else
			pEta[916] = -minval;
	}
	else
		pEta[916] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1106] = minval;
		else
			pEta[1106] = -minval;
	}
	else
		pEta[1106] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1194] = minval;
		else
			pEta[1194] = -minval;
	}
	else
		pEta[1194] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1506] = minval;
		else
			pEta[1506] = -minval;
	}
	else
		pEta[1506] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1940] = minval;
		else
			pEta[1940] = -minval;
	}
	else
		pEta[1940] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2114] = minval;
		else
			pEta[2114] = -minval;
	}
	else
		pEta[2114] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2266] = minval;
		else
			pEta[2266] = -minval;
	}
	else
		pEta[2266] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2470] = minval;
		else
			pEta[2470] = -minval;
	}
	else
		pEta[2470] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2964] = minval;
		else
			pEta[2964] = -minval;
	}
	else
		pEta[2964] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3274] = minval;
		else
			pEta[3274] = -minval;
	}
	else
		pEta[3274] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3631] = minval;
		else
			pEta[3631] = -minval;
	}
	else
		pEta[3631] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4143] = minval;
		else
			pEta[4143] = -minval;
	}
	else
		pEta[4143] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4372] = minval;
		else
			pEta[4372] = -minval;
	}
	else
		pEta[4372] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4534] = minval;
		else
			pEta[4534] = -minval;
	}
	else
		pEta[4534] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4912] = minval;
		else
			pEta[4912] = -minval;
	}
	else
		pEta[4912] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 230     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[24] + pEtaPrev[98];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[37] + pEtaPrev[150];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[122] + pEtaPrev[490];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[230] + pEtaPrev[920];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[277] + pEtaPrev[1110];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[299] + pEtaPrev[1198];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[377] + pEtaPrev[1510];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[486] + pEtaPrev[1944];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[529] + pEtaPrev[2118];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[567] + pEtaPrev[2270];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[618] + pEtaPrev[2474];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[742] + pEtaPrev[2968];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[870] + pEtaPrev[3276];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[998] + pEtaPrev[3634];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1254] + pEtaPrev[4146];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1305] + pEtaPrev[4378];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1332] + pEtaPrev[4540];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1395] + pEtaPrev[4918];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[98] = minval;
		else
			pEta[98] = -minval;
	}
	else
		pEta[98] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[150] = minval;
		else
			pEta[150] = -minval;
	}
	else
		pEta[150] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[490] = minval;
		else
			pEta[490] = -minval;
	}
	else
		pEta[490] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[920] = minval;
		else
			pEta[920] = -minval;
	}
	else
		pEta[920] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1110] = minval;
		else
			pEta[1110] = -minval;
	}
	else
		pEta[1110] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1198] = minval;
		else
			pEta[1198] = -minval;
	}
	else
		pEta[1198] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1510] = minval;
		else
			pEta[1510] = -minval;
	}
	else
		pEta[1510] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1944] = minval;
		else
			pEta[1944] = -minval;
	}
	else
		pEta[1944] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2118] = minval;
		else
			pEta[2118] = -minval;
	}
	else
		pEta[2118] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2270] = minval;
		else
			pEta[2270] = -minval;
	}
	else
		pEta[2270] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2474] = minval;
		else
			pEta[2474] = -minval;
	}
	else
		pEta[2474] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2968] = minval;
		else
			pEta[2968] = -minval;
	}
	else
		pEta[2968] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3276] = minval;
		else
			pEta[3276] = -minval;
	}
	else
		pEta[3276] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3634] = minval;
		else
			pEta[3634] = -minval;
	}
	else
		pEta[3634] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4146] = minval;
		else
			pEta[4146] = -minval;
	}
	else
		pEta[4146] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4378] = minval;
		else
			pEta[4378] = -minval;
	}
	else
		pEta[4378] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4540] = minval;
		else
			pEta[4540] = -minval;
	}
	else
		pEta[4540] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4918] = minval;
		else
			pEta[4918] = -minval;
	}
	else
		pEta[4918] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 231     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[25] + pEtaPrev[102];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[38] + pEtaPrev[154];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[123] + pEtaPrev[494];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[231] + pEtaPrev[924];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[278] + pEtaPrev[1114];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[300] + pEtaPrev[1202];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[378] + pEtaPrev[1514];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[487] + pEtaPrev[1948];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[530] + pEtaPrev[2122];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[568] + pEtaPrev[2274];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[619] + pEtaPrev[2478];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[743] + pEtaPrev[2972];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[871] + pEtaPrev[3278];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[999] + pEtaPrev[3637];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1255] + pEtaPrev[4149];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1306] + pEtaPrev[4384];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1333] + pEtaPrev[4546];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1396] + pEtaPrev[4924];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[102] = minval;
		else
			pEta[102] = -minval;
	}
	else
		pEta[102] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[154] = minval;
		else
			pEta[154] = -minval;
	}
	else
		pEta[154] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[494] = minval;
		else
			pEta[494] = -minval;
	}
	else
		pEta[494] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[924] = minval;
		else
			pEta[924] = -minval;
	}
	else
		pEta[924] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1114] = minval;
		else
			pEta[1114] = -minval;
	}
	else
		pEta[1114] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1202] = minval;
		else
			pEta[1202] = -minval;
	}
	else
		pEta[1202] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1514] = minval;
		else
			pEta[1514] = -minval;
	}
	else
		pEta[1514] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1948] = minval;
		else
			pEta[1948] = -minval;
	}
	else
		pEta[1948] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2122] = minval;
		else
			pEta[2122] = -minval;
	}
	else
		pEta[2122] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2274] = minval;
		else
			pEta[2274] = -minval;
	}
	else
		pEta[2274] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2478] = minval;
		else
			pEta[2478] = -minval;
	}
	else
		pEta[2478] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2972] = minval;
		else
			pEta[2972] = -minval;
	}
	else
		pEta[2972] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3278] = minval;
		else
			pEta[3278] = -minval;
	}
	else
		pEta[3278] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3637] = minval;
		else
			pEta[3637] = -minval;
	}
	else
		pEta[3637] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4149] = minval;
		else
			pEta[4149] = -minval;
	}
	else
		pEta[4149] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4384] = minval;
		else
			pEta[4384] = -minval;
	}
	else
		pEta[4384] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4546] = minval;
		else
			pEta[4546] = -minval;
	}
	else
		pEta[4546] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4924] = minval;
		else
			pEta[4924] = -minval;
	}
	else
		pEta[4924] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 232     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[26] + pEtaPrev[106];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[39] + pEtaPrev[158];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[124] + pEtaPrev[498];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[232] + pEtaPrev[928];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[279] + pEtaPrev[1118];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[301] + pEtaPrev[1206];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[379] + pEtaPrev[1518];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[488] + pEtaPrev[1952];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[531] + pEtaPrev[2126];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[569] + pEtaPrev[2278];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[620] + pEtaPrev[2482];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[744] + pEtaPrev[2976];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[872] + pEtaPrev[3280];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1000] + pEtaPrev[3640];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1256] + pEtaPrev[4152];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1307] + pEtaPrev[4390];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1334] + pEtaPrev[4552];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1397] + pEtaPrev[4930];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[106] = minval;
		else
			pEta[106] = -minval;
	}
	else
		pEta[106] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[158] = minval;
		else
			pEta[158] = -minval;
	}
	else
		pEta[158] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[498] = minval;
		else
			pEta[498] = -minval;
	}
	else
		pEta[498] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[928] = minval;
		else
			pEta[928] = -minval;
	}
	else
		pEta[928] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1118] = minval;
		else
			pEta[1118] = -minval;
	}
	else
		pEta[1118] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1206] = minval;
		else
			pEta[1206] = -minval;
	}
	else
		pEta[1206] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1518] = minval;
		else
			pEta[1518] = -minval;
	}
	else
		pEta[1518] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1952] = minval;
		else
			pEta[1952] = -minval;
	}
	else
		pEta[1952] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2126] = minval;
		else
			pEta[2126] = -minval;
	}
	else
		pEta[2126] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2278] = minval;
		else
			pEta[2278] = -minval;
	}
	else
		pEta[2278] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2482] = minval;
		else
			pEta[2482] = -minval;
	}
	else
		pEta[2482] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2976] = minval;
		else
			pEta[2976] = -minval;
	}
	else
		pEta[2976] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3280] = minval;
		else
			pEta[3280] = -minval;
	}
	else
		pEta[3280] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3640] = minval;
		else
			pEta[3640] = -minval;
	}
	else
		pEta[3640] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4152] = minval;
		else
			pEta[4152] = -minval;
	}
	else
		pEta[4152] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4390] = minval;
		else
			pEta[4390] = -minval;
	}
	else
		pEta[4390] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4552] = minval;
		else
			pEta[4552] = -minval;
	}
	else
		pEta[4552] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4930] = minval;
		else
			pEta[4930] = -minval;
	}
	else
		pEta[4930] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 233     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[27] + pEtaPrev[110];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[40] + pEtaPrev[162];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[125] + pEtaPrev[502];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[233] + pEtaPrev[932];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[280] + pEtaPrev[1122];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[302] + pEtaPrev[1210];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[380] + pEtaPrev[1522];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[489] + pEtaPrev[1956];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[532] + pEtaPrev[2130];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[570] + pEtaPrev[2282];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[621] + pEtaPrev[2486];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[745] + pEtaPrev[2980];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[873] + pEtaPrev[3282];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1001] + pEtaPrev[3643];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1257] + pEtaPrev[4155];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1308] + pEtaPrev[4396];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1335] + pEtaPrev[4558];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1398] + pEtaPrev[4936];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[110] = minval;
		else
			pEta[110] = -minval;
	}
	else
		pEta[110] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[162] = minval;
		else
			pEta[162] = -minval;
	}
	else
		pEta[162] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[502] = minval;
		else
			pEta[502] = -minval;
	}
	else
		pEta[502] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[932] = minval;
		else
			pEta[932] = -minval;
	}
	else
		pEta[932] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1122] = minval;
		else
			pEta[1122] = -minval;
	}
	else
		pEta[1122] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1210] = minval;
		else
			pEta[1210] = -minval;
	}
	else
		pEta[1210] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1522] = minval;
		else
			pEta[1522] = -minval;
	}
	else
		pEta[1522] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1956] = minval;
		else
			pEta[1956] = -minval;
	}
	else
		pEta[1956] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2130] = minval;
		else
			pEta[2130] = -minval;
	}
	else
		pEta[2130] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2282] = minval;
		else
			pEta[2282] = -minval;
	}
	else
		pEta[2282] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2486] = minval;
		else
			pEta[2486] = -minval;
	}
	else
		pEta[2486] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2980] = minval;
		else
			pEta[2980] = -minval;
	}
	else
		pEta[2980] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3282] = minval;
		else
			pEta[3282] = -minval;
	}
	else
		pEta[3282] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3643] = minval;
		else
			pEta[3643] = -minval;
	}
	else
		pEta[3643] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4155] = minval;
		else
			pEta[4155] = -minval;
	}
	else
		pEta[4155] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4396] = minval;
		else
			pEta[4396] = -minval;
	}
	else
		pEta[4396] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4558] = minval;
		else
			pEta[4558] = -minval;
	}
	else
		pEta[4558] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4936] = minval;
		else
			pEta[4936] = -minval;
	}
	else
		pEta[4936] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 234     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[28] + pEtaPrev[114];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[41] + pEtaPrev[166];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[126] + pEtaPrev[506];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[234] + pEtaPrev[936];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[281] + pEtaPrev[1126];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[303] + pEtaPrev[1214];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[381] + pEtaPrev[1526];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[490] + pEtaPrev[1960];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[533] + pEtaPrev[2134];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[571] + pEtaPrev[2286];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[622] + pEtaPrev[2490];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[746] + pEtaPrev[2984];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[874] + pEtaPrev[3284];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1002] + pEtaPrev[3646];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1258] + pEtaPrev[4158];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1309] + pEtaPrev[4402];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1336] + pEtaPrev[4564];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1399] + pEtaPrev[4942];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[114] = minval;
		else
			pEta[114] = -minval;
	}
	else
		pEta[114] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[166] = minval;
		else
			pEta[166] = -minval;
	}
	else
		pEta[166] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[506] = minval;
		else
			pEta[506] = -minval;
	}
	else
		pEta[506] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[936] = minval;
		else
			pEta[936] = -minval;
	}
	else
		pEta[936] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1126] = minval;
		else
			pEta[1126] = -minval;
	}
	else
		pEta[1126] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1214] = minval;
		else
			pEta[1214] = -minval;
	}
	else
		pEta[1214] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1526] = minval;
		else
			pEta[1526] = -minval;
	}
	else
		pEta[1526] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1960] = minval;
		else
			pEta[1960] = -minval;
	}
	else
		pEta[1960] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2134] = minval;
		else
			pEta[2134] = -minval;
	}
	else
		pEta[2134] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2286] = minval;
		else
			pEta[2286] = -minval;
	}
	else
		pEta[2286] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2490] = minval;
		else
			pEta[2490] = -minval;
	}
	else
		pEta[2490] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2984] = minval;
		else
			pEta[2984] = -minval;
	}
	else
		pEta[2984] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3284] = minval;
		else
			pEta[3284] = -minval;
	}
	else
		pEta[3284] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3646] = minval;
		else
			pEta[3646] = -minval;
	}
	else
		pEta[3646] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4158] = minval;
		else
			pEta[4158] = -minval;
	}
	else
		pEta[4158] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4402] = minval;
		else
			pEta[4402] = -minval;
	}
	else
		pEta[4402] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4564] = minval;
		else
			pEta[4564] = -minval;
	}
	else
		pEta[4564] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4942] = minval;
		else
			pEta[4942] = -minval;
	}
	else
		pEta[4942] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 235     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[29] + pEtaPrev[118];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[42] + pEtaPrev[170];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[127] + pEtaPrev[510];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[235] + pEtaPrev[940];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[282] + pEtaPrev[1130];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[304] + pEtaPrev[1218];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[382] + pEtaPrev[1530];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[491] + pEtaPrev[1964];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[534] + pEtaPrev[2138];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[572] + pEtaPrev[2290];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[623] + pEtaPrev[2494];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[747] + pEtaPrev[2988];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[875] + pEtaPrev[3286];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1003] + pEtaPrev[3649];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1259] + pEtaPrev[4161];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1310] + pEtaPrev[4408];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1337] + pEtaPrev[4570];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1400] + pEtaPrev[4948];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[118] = minval;
		else
			pEta[118] = -minval;
	}
	else
		pEta[118] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[170] = minval;
		else
			pEta[170] = -minval;
	}
	else
		pEta[170] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[510] = minval;
		else
			pEta[510] = -minval;
	}
	else
		pEta[510] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[940] = minval;
		else
			pEta[940] = -minval;
	}
	else
		pEta[940] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1130] = minval;
		else
			pEta[1130] = -minval;
	}
	else
		pEta[1130] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1218] = minval;
		else
			pEta[1218] = -minval;
	}
	else
		pEta[1218] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1530] = minval;
		else
			pEta[1530] = -minval;
	}
	else
		pEta[1530] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1964] = minval;
		else
			pEta[1964] = -minval;
	}
	else
		pEta[1964] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2138] = minval;
		else
			pEta[2138] = -minval;
	}
	else
		pEta[2138] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2290] = minval;
		else
			pEta[2290] = -minval;
	}
	else
		pEta[2290] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2494] = minval;
		else
			pEta[2494] = -minval;
	}
	else
		pEta[2494] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2988] = minval;
		else
			pEta[2988] = -minval;
	}
	else
		pEta[2988] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3286] = minval;
		else
			pEta[3286] = -minval;
	}
	else
		pEta[3286] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3649] = minval;
		else
			pEta[3649] = -minval;
	}
	else
		pEta[3649] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4161] = minval;
		else
			pEta[4161] = -minval;
	}
	else
		pEta[4161] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4408] = minval;
		else
			pEta[4408] = -minval;
	}
	else
		pEta[4408] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4570] = minval;
		else
			pEta[4570] = -minval;
	}
	else
		pEta[4570] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4948] = minval;
		else
			pEta[4948] = -minval;
	}
	else
		pEta[4948] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 236     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[30] + pEtaPrev[122];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[43] + pEtaPrev[174];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[96] + pEtaPrev[386];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[236] + pEtaPrev[944];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[283] + pEtaPrev[1134];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[305] + pEtaPrev[1222];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[383] + pEtaPrev[1534];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[492] + pEtaPrev[1968];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[535] + pEtaPrev[2142];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[573] + pEtaPrev[2294];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[624] + pEtaPrev[2498];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[748] + pEtaPrev[2992];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[876] + pEtaPrev[3288];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1004] + pEtaPrev[3652];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1260] + pEtaPrev[4164];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1311] + pEtaPrev[4414];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1338] + pEtaPrev[4576];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1401] + pEtaPrev[4954];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[122] = minval;
		else
			pEta[122] = -minval;
	}
	else
		pEta[122] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[174] = minval;
		else
			pEta[174] = -minval;
	}
	else
		pEta[174] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[386] = minval;
		else
			pEta[386] = -minval;
	}
	else
		pEta[386] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[944] = minval;
		else
			pEta[944] = -minval;
	}
	else
		pEta[944] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1134] = minval;
		else
			pEta[1134] = -minval;
	}
	else
		pEta[1134] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1222] = minval;
		else
			pEta[1222] = -minval;
	}
	else
		pEta[1222] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1534] = minval;
		else
			pEta[1534] = -minval;
	}
	else
		pEta[1534] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1968] = minval;
		else
			pEta[1968] = -minval;
	}
	else
		pEta[1968] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2142] = minval;
		else
			pEta[2142] = -minval;
	}
	else
		pEta[2142] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2294] = minval;
		else
			pEta[2294] = -minval;
	}
	else
		pEta[2294] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2498] = minval;
		else
			pEta[2498] = -minval;
	}
	else
		pEta[2498] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2992] = minval;
		else
			pEta[2992] = -minval;
	}
	else
		pEta[2992] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3288] = minval;
		else
			pEta[3288] = -minval;
	}
	else
		pEta[3288] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3652] = minval;
		else
			pEta[3652] = -minval;
	}
	else
		pEta[3652] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4164] = minval;
		else
			pEta[4164] = -minval;
	}
	else
		pEta[4164] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4414] = minval;
		else
			pEta[4414] = -minval;
	}
	else
		pEta[4414] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4576] = minval;
		else
			pEta[4576] = -minval;
	}
	else
		pEta[4576] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4954] = minval;
		else
			pEta[4954] = -minval;
	}
	else
		pEta[4954] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 237     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[31] + pEtaPrev[126];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[44] + pEtaPrev[178];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[97] + pEtaPrev[390];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[237] + pEtaPrev[948];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[284] + pEtaPrev[1138];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[306] + pEtaPrev[1226];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[352] + pEtaPrev[1410];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[493] + pEtaPrev[1972];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[536] + pEtaPrev[2146];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[574] + pEtaPrev[2298];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[625] + pEtaPrev[2502];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[749] + pEtaPrev[2996];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[877] + pEtaPrev[3290];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1005] + pEtaPrev[3655];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1261] + pEtaPrev[4167];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1280] + pEtaPrev[4228];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1339] + pEtaPrev[4582];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1402] + pEtaPrev[4960];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[126] = minval;
		else
			pEta[126] = -minval;
	}
	else
		pEta[126] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[178] = minval;
		else
			pEta[178] = -minval;
	}
	else
		pEta[178] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[390] = minval;
		else
			pEta[390] = -minval;
	}
	else
		pEta[390] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[948] = minval;
		else
			pEta[948] = -minval;
	}
	else
		pEta[948] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1138] = minval;
		else
			pEta[1138] = -minval;
	}
	else
		pEta[1138] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1226] = minval;
		else
			pEta[1226] = -minval;
	}
	else
		pEta[1226] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1410] = minval;
		else
			pEta[1410] = -minval;
	}
	else
		pEta[1410] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1972] = minval;
		else
			pEta[1972] = -minval;
	}
	else
		pEta[1972] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2146] = minval;
		else
			pEta[2146] = -minval;
	}
	else
		pEta[2146] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2298] = minval;
		else
			pEta[2298] = -minval;
	}
	else
		pEta[2298] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2502] = minval;
		else
			pEta[2502] = -minval;
	}
	else
		pEta[2502] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2996] = minval;
		else
			pEta[2996] = -minval;
	}
	else
		pEta[2996] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3290] = minval;
		else
			pEta[3290] = -minval;
	}
	else
		pEta[3290] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3655] = minval;
		else
			pEta[3655] = -minval;
	}
	else
		pEta[3655] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4167] = minval;
		else
			pEta[4167] = -minval;
	}
	else
		pEta[4167] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4228] = minval;
		else
			pEta[4228] = -minval;
	}
	else
		pEta[4228] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4582] = minval;
		else
			pEta[4582] = -minval;
	}
	else
		pEta[4582] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4960] = minval;
		else
			pEta[4960] = -minval;
	}
	else
		pEta[4960] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 238     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[0] + pEtaPrev[2];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[45] + pEtaPrev[182];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[98] + pEtaPrev[394];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[238] + pEtaPrev[952];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[285] + pEtaPrev[1142];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[307] + pEtaPrev[1230];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[353] + pEtaPrev[1414];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[494] + pEtaPrev[1976];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[537] + pEtaPrev[2150];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[575] + pEtaPrev[2302];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[626] + pEtaPrev[2506];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[750] + pEtaPrev[3000];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[878] + pEtaPrev[3292];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1006] + pEtaPrev[3658];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1262] + pEtaPrev[4170];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1281] + pEtaPrev[4234];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1340] + pEtaPrev[4588];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1403] + pEtaPrev[4966];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[2] = minval;
		else
			pEta[2] = -minval;
	}
	else
		pEta[2] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[182] = minval;
		else
			pEta[182] = -minval;
	}
	else
		pEta[182] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[394] = minval;
		else
			pEta[394] = -minval;
	}
	else
		pEta[394] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[952] = minval;
		else
			pEta[952] = -minval;
	}
	else
		pEta[952] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1142] = minval;
		else
			pEta[1142] = -minval;
	}
	else
		pEta[1142] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1230] = minval;
		else
			pEta[1230] = -minval;
	}
	else
		pEta[1230] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1414] = minval;
		else
			pEta[1414] = -minval;
	}
	else
		pEta[1414] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1976] = minval;
		else
			pEta[1976] = -minval;
	}
	else
		pEta[1976] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2150] = minval;
		else
			pEta[2150] = -minval;
	}
	else
		pEta[2150] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2302] = minval;
		else
			pEta[2302] = -minval;
	}
	else
		pEta[2302] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2506] = minval;
		else
			pEta[2506] = -minval;
	}
	else
		pEta[2506] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3000] = minval;
		else
			pEta[3000] = -minval;
	}
	else
		pEta[3000] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3292] = minval;
		else
			pEta[3292] = -minval;
	}
	else
		pEta[3292] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3658] = minval;
		else
			pEta[3658] = -minval;
	}
	else
		pEta[3658] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4170] = minval;
		else
			pEta[4170] = -minval;
	}
	else
		pEta[4170] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4234] = minval;
		else
			pEta[4234] = -minval;
	}
	else
		pEta[4234] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4588] = minval;
		else
			pEta[4588] = -minval;
	}
	else
		pEta[4588] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4966] = minval;
		else
			pEta[4966] = -minval;
	}
	else
		pEta[4966] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 239     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1] + pEtaPrev[6];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[46] + pEtaPrev[186];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[99] + pEtaPrev[398];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[239] + pEtaPrev[956];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[286] + pEtaPrev[1146];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[308] + pEtaPrev[1234];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[354] + pEtaPrev[1418];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[495] + pEtaPrev[1980];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[538] + pEtaPrev[2154];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[544] + pEtaPrev[2178];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[627] + pEtaPrev[2510];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[751] + pEtaPrev[3004];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[879] + pEtaPrev[3294];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1007] + pEtaPrev[3661];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1263] + pEtaPrev[4173];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1282] + pEtaPrev[4240];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1341] + pEtaPrev[4594];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1404] + pEtaPrev[4972];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[6] = minval;
		else
			pEta[6] = -minval;
	}
	else
		pEta[6] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[186] = minval;
		else
			pEta[186] = -minval;
	}
	else
		pEta[186] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[398] = minval;
		else
			pEta[398] = -minval;
	}
	else
		pEta[398] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[956] = minval;
		else
			pEta[956] = -minval;
	}
	else
		pEta[956] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1146] = minval;
		else
			pEta[1146] = -minval;
	}
	else
		pEta[1146] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1234] = minval;
		else
			pEta[1234] = -minval;
	}
	else
		pEta[1234] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1418] = minval;
		else
			pEta[1418] = -minval;
	}
	else
		pEta[1418] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1980] = minval;
		else
			pEta[1980] = -minval;
	}
	else
		pEta[1980] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2154] = minval;
		else
			pEta[2154] = -minval;
	}
	else
		pEta[2154] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2178] = minval;
		else
			pEta[2178] = -minval;
	}
	else
		pEta[2178] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2510] = minval;
		else
			pEta[2510] = -minval;
	}
	else
		pEta[2510] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3004] = minval;
		else
			pEta[3004] = -minval;
	}
	else
		pEta[3004] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3294] = minval;
		else
			pEta[3294] = -minval;
	}
	else
		pEta[3294] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3661] = minval;
		else
			pEta[3661] = -minval;
	}
	else
		pEta[3661] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4173] = minval;
		else
			pEta[4173] = -minval;
	}
	else
		pEta[4173] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4240] = minval;
		else
			pEta[4240] = -minval;
	}
	else
		pEta[4240] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4594] = minval;
		else
			pEta[4594] = -minval;
	}
	else
		pEta[4594] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4972] = minval;
		else
			pEta[4972] = -minval;
	}
	else
		pEta[4972] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 240     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[2] + pEtaPrev[10];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[47] + pEtaPrev[190];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[100] + pEtaPrev[402];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[240] + pEtaPrev[960];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[287] + pEtaPrev[1150];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[309] + pEtaPrev[1238];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[355] + pEtaPrev[1422];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[496] + pEtaPrev[1984];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[539] + pEtaPrev[2158];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[545] + pEtaPrev[2182];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[628] + pEtaPrev[2514];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[752] + pEtaPrev[3008];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[880] + pEtaPrev[3296];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1008] + pEtaPrev[3664];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1264] + pEtaPrev[4176];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1283] + pEtaPrev[4246];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1342] + pEtaPrev[4600];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1405] + pEtaPrev[4978];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[10] = minval;
		else
			pEta[10] = -minval;
	}
	else
		pEta[10] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[190] = minval;
		else
			pEta[190] = -minval;
	}
	else
		pEta[190] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[402] = minval;
		else
			pEta[402] = -minval;
	}
	else
		pEta[402] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[960] = minval;
		else
			pEta[960] = -minval;
	}
	else
		pEta[960] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1150] = minval;
		else
			pEta[1150] = -minval;
	}
	else
		pEta[1150] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1238] = minval;
		else
			pEta[1238] = -minval;
	}
	else
		pEta[1238] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1422] = minval;
		else
			pEta[1422] = -minval;
	}
	else
		pEta[1422] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1984] = minval;
		else
			pEta[1984] = -minval;
	}
	else
		pEta[1984] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2158] = minval;
		else
			pEta[2158] = -minval;
	}
	else
		pEta[2158] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2182] = minval;
		else
			pEta[2182] = -minval;
	}
	else
		pEta[2182] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2514] = minval;
		else
			pEta[2514] = -minval;
	}
	else
		pEta[2514] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3008] = minval;
		else
			pEta[3008] = -minval;
	}
	else
		pEta[3008] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3296] = minval;
		else
			pEta[3296] = -minval;
	}
	else
		pEta[3296] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3664] = minval;
		else
			pEta[3664] = -minval;
	}
	else
		pEta[3664] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4176] = minval;
		else
			pEta[4176] = -minval;
	}
	else
		pEta[4176] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4246] = minval;
		else
			pEta[4246] = -minval;
	}
	else
		pEta[4246] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4600] = minval;
		else
			pEta[4600] = -minval;
	}
	else
		pEta[4600] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4978] = minval;
		else
			pEta[4978] = -minval;
	}
	else
		pEta[4978] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 241     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[3] + pEtaPrev[14];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[48] + pEtaPrev[194];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[101] + pEtaPrev[406];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[241] + pEtaPrev[964];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[256] + pEtaPrev[1026];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[310] + pEtaPrev[1242];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[356] + pEtaPrev[1426];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[497] + pEtaPrev[1988];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[540] + pEtaPrev[2162];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[546] + pEtaPrev[2186];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[629] + pEtaPrev[2518];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[753] + pEtaPrev[3012];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[881] + pEtaPrev[3298];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1009] + pEtaPrev[3667];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1265] + pEtaPrev[4179];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1284] + pEtaPrev[4252];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1343] + pEtaPrev[4606];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1406] + pEtaPrev[4984];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[14] = minval;
		else
			pEta[14] = -minval;
	}
	else
		pEta[14] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[194] = minval;
		else
			pEta[194] = -minval;
	}
	else
		pEta[194] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[406] = minval;
		else
			pEta[406] = -minval;
	}
	else
		pEta[406] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[964] = minval;
		else
			pEta[964] = -minval;
	}
	else
		pEta[964] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1026] = minval;
		else
			pEta[1026] = -minval;
	}
	else
		pEta[1026] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1242] = minval;
		else
			pEta[1242] = -minval;
	}
	else
		pEta[1242] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1426] = minval;
		else
			pEta[1426] = -minval;
	}
	else
		pEta[1426] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1988] = minval;
		else
			pEta[1988] = -minval;
	}
	else
		pEta[1988] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2162] = minval;
		else
			pEta[2162] = -minval;
	}
	else
		pEta[2162] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2186] = minval;
		else
			pEta[2186] = -minval;
	}
	else
		pEta[2186] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2518] = minval;
		else
			pEta[2518] = -minval;
	}
	else
		pEta[2518] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3012] = minval;
		else
			pEta[3012] = -minval;
	}
	else
		pEta[3012] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3298] = minval;
		else
			pEta[3298] = -minval;
	}
	else
		pEta[3298] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3667] = minval;
		else
			pEta[3667] = -minval;
	}
	else
		pEta[3667] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4179] = minval;
		else
			pEta[4179] = -minval;
	}
	else
		pEta[4179] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4252] = minval;
		else
			pEta[4252] = -minval;
	}
	else
		pEta[4252] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4606] = minval;
		else
			pEta[4606] = -minval;
	}
	else
		pEta[4606] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4984] = minval;
		else
			pEta[4984] = -minval;
	}
	else
		pEta[4984] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 242     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[4] + pEtaPrev[18];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[49] + pEtaPrev[198];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[102] + pEtaPrev[410];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[242] + pEtaPrev[968];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[257] + pEtaPrev[1030];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[311] + pEtaPrev[1246];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[357] + pEtaPrev[1430];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[498] + pEtaPrev[1992];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[541] + pEtaPrev[2166];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[547] + pEtaPrev[2190];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[630] + pEtaPrev[2522];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[754] + pEtaPrev[3016];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[882] + pEtaPrev[3300];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1010] + pEtaPrev[3670];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1266] + pEtaPrev[4182];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1285] + pEtaPrev[4258];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1312] + pEtaPrev[4420];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1407] + pEtaPrev[4990];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[18] = minval;
		else
			pEta[18] = -minval;
	}
	else
		pEta[18] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[198] = minval;
		else
			pEta[198] = -minval;
	}
	else
		pEta[198] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[410] = minval;
		else
			pEta[410] = -minval;
	}
	else
		pEta[410] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[968] = minval;
		else
			pEta[968] = -minval;
	}
	else
		pEta[968] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1030] = minval;
		else
			pEta[1030] = -minval;
	}
	else
		pEta[1030] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1246] = minval;
		else
			pEta[1246] = -minval;
	}
	else
		pEta[1246] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1430] = minval;
		else
			pEta[1430] = -minval;
	}
	else
		pEta[1430] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1992] = minval;
		else
			pEta[1992] = -minval;
	}
	else
		pEta[1992] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2166] = minval;
		else
			pEta[2166] = -minval;
	}
	else
		pEta[2166] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2190] = minval;
		else
			pEta[2190] = -minval;
	}
	else
		pEta[2190] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2522] = minval;
		else
			pEta[2522] = -minval;
	}
	else
		pEta[2522] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3016] = minval;
		else
			pEta[3016] = -minval;
	}
	else
		pEta[3016] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3300] = minval;
		else
			pEta[3300] = -minval;
	}
	else
		pEta[3300] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3670] = minval;
		else
			pEta[3670] = -minval;
	}
	else
		pEta[3670] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4182] = minval;
		else
			pEta[4182] = -minval;
	}
	else
		pEta[4182] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4258] = minval;
		else
			pEta[4258] = -minval;
	}
	else
		pEta[4258] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4420] = minval;
		else
			pEta[4420] = -minval;
	}
	else
		pEta[4420] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4990] = minval;
		else
			pEta[4990] = -minval;
	}
	else
		pEta[4990] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 243     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[5] + pEtaPrev[22];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[50] + pEtaPrev[202];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[103] + pEtaPrev[414];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[243] + pEtaPrev[972];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[258] + pEtaPrev[1034];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[312] + pEtaPrev[1250];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[358] + pEtaPrev[1434];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[499] + pEtaPrev[1996];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[542] + pEtaPrev[2170];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[548] + pEtaPrev[2194];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[631] + pEtaPrev[2526];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[755] + pEtaPrev[3020];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[883] + pEtaPrev[3302];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1011] + pEtaPrev[3673];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1267] + pEtaPrev[4185];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1286] + pEtaPrev[4264];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1313] + pEtaPrev[4426];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1376] + pEtaPrev[4804];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[22] = minval;
		else
			pEta[22] = -minval;
	}
	else
		pEta[22] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[202] = minval;
		else
			pEta[202] = -minval;
	}
	else
		pEta[202] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[414] = minval;
		else
			pEta[414] = -minval;
	}
	else
		pEta[414] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[972] = minval;
		else
			pEta[972] = -minval;
	}
	else
		pEta[972] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1034] = minval;
		else
			pEta[1034] = -minval;
	}
	else
		pEta[1034] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1250] = minval;
		else
			pEta[1250] = -minval;
	}
	else
		pEta[1250] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1434] = minval;
		else
			pEta[1434] = -minval;
	}
	else
		pEta[1434] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1996] = minval;
		else
			pEta[1996] = -minval;
	}
	else
		pEta[1996] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2170] = minval;
		else
			pEta[2170] = -minval;
	}
	else
		pEta[2170] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2194] = minval;
		else
			pEta[2194] = -minval;
	}
	else
		pEta[2194] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2526] = minval;
		else
			pEta[2526] = -minval;
	}
	else
		pEta[2526] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3020] = minval;
		else
			pEta[3020] = -minval;
	}
	else
		pEta[3020] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3302] = minval;
		else
			pEta[3302] = -minval;
	}
	else
		pEta[3302] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3673] = minval;
		else
			pEta[3673] = -minval;
	}
	else
		pEta[3673] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4185] = minval;
		else
			pEta[4185] = -minval;
	}
	else
		pEta[4185] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4264] = minval;
		else
			pEta[4264] = -minval;
	}
	else
		pEta[4264] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4426] = minval;
		else
			pEta[4426] = -minval;
	}
	else
		pEta[4426] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4804] = minval;
		else
			pEta[4804] = -minval;
	}
	else
		pEta[4804] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 244     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[6] + pEtaPrev[26];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[51] + pEtaPrev[206];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[104] + pEtaPrev[418];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[244] + pEtaPrev[976];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[259] + pEtaPrev[1038];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[313] + pEtaPrev[1254];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[359] + pEtaPrev[1438];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[500] + pEtaPrev[2000];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[543] + pEtaPrev[2174];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[549] + pEtaPrev[2198];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[632] + pEtaPrev[2530];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[756] + pEtaPrev[3024];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[884] + pEtaPrev[3304];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1012] + pEtaPrev[3676];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1268] + pEtaPrev[4188];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1287] + pEtaPrev[4270];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1314] + pEtaPrev[4432];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1377] + pEtaPrev[4810];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[26] = minval;
		else
			pEta[26] = -minval;
	}
	else
		pEta[26] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[206] = minval;
		else
			pEta[206] = -minval;
	}
	else
		pEta[206] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[418] = minval;
		else
			pEta[418] = -minval;
	}
	else
		pEta[418] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[976] = minval;
		else
			pEta[976] = -minval;
	}
	else
		pEta[976] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1038] = minval;
		else
			pEta[1038] = -minval;
	}
	else
		pEta[1038] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1254] = minval;
		else
			pEta[1254] = -minval;
	}
	else
		pEta[1254] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1438] = minval;
		else
			pEta[1438] = -minval;
	}
	else
		pEta[1438] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2000] = minval;
		else
			pEta[2000] = -minval;
	}
	else
		pEta[2000] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2174] = minval;
		else
			pEta[2174] = -minval;
	}
	else
		pEta[2174] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2198] = minval;
		else
			pEta[2198] = -minval;
	}
	else
		pEta[2198] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2530] = minval;
		else
			pEta[2530] = -minval;
	}
	else
		pEta[2530] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3024] = minval;
		else
			pEta[3024] = -minval;
	}
	else
		pEta[3024] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3304] = minval;
		else
			pEta[3304] = -minval;
	}
	else
		pEta[3304] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3676] = minval;
		else
			pEta[3676] = -minval;
	}
	else
		pEta[3676] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4188] = minval;
		else
			pEta[4188] = -minval;
	}
	else
		pEta[4188] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4270] = minval;
		else
			pEta[4270] = -minval;
	}
	else
		pEta[4270] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4432] = minval;
		else
			pEta[4432] = -minval;
	}
	else
		pEta[4432] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4810] = minval;
		else
			pEta[4810] = -minval;
	}
	else
		pEta[4810] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 245     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[7] + pEtaPrev[30];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[52] + pEtaPrev[210];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[105] + pEtaPrev[422];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[245] + pEtaPrev[980];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[260] + pEtaPrev[1042];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[314] + pEtaPrev[1258];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[360] + pEtaPrev[1442];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[501] + pEtaPrev[2004];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[512] + pEtaPrev[2050];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[550] + pEtaPrev[2202];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[633] + pEtaPrev[2534];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[757] + pEtaPrev[3028];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[885] + pEtaPrev[3306];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1013] + pEtaPrev[3679];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1269] + pEtaPrev[4191];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1288] + pEtaPrev[4276];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1315] + pEtaPrev[4438];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1378] + pEtaPrev[4816];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[30] = minval;
		else
			pEta[30] = -minval;
	}
	else
		pEta[30] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[210] = minval;
		else
			pEta[210] = -minval;
	}
	else
		pEta[210] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[422] = minval;
		else
			pEta[422] = -minval;
	}
	else
		pEta[422] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[980] = minval;
		else
			pEta[980] = -minval;
	}
	else
		pEta[980] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1042] = minval;
		else
			pEta[1042] = -minval;
	}
	else
		pEta[1042] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1258] = minval;
		else
			pEta[1258] = -minval;
	}
	else
		pEta[1258] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1442] = minval;
		else
			pEta[1442] = -minval;
	}
	else
		pEta[1442] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2004] = minval;
		else
			pEta[2004] = -minval;
	}
	else
		pEta[2004] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2050] = minval;
		else
			pEta[2050] = -minval;
	}
	else
		pEta[2050] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2202] = minval;
		else
			pEta[2202] = -minval;
	}
	else
		pEta[2202] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2534] = minval;
		else
			pEta[2534] = -minval;
	}
	else
		pEta[2534] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3028] = minval;
		else
			pEta[3028] = -minval;
	}
	else
		pEta[3028] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3306] = minval;
		else
			pEta[3306] = -minval;
	}
	else
		pEta[3306] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3679] = minval;
		else
			pEta[3679] = -minval;
	}
	else
		pEta[3679] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4191] = minval;
		else
			pEta[4191] = -minval;
	}
	else
		pEta[4191] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4276] = minval;
		else
			pEta[4276] = -minval;
	}
	else
		pEta[4276] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4438] = minval;
		else
			pEta[4438] = -minval;
	}
	else
		pEta[4438] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4816] = minval;
		else
			pEta[4816] = -minval;
	}
	else
		pEta[4816] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 246     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[8] + pEtaPrev[34];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[53] + pEtaPrev[214];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[106] + pEtaPrev[426];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[246] + pEtaPrev[984];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[261] + pEtaPrev[1046];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[315] + pEtaPrev[1262];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[361] + pEtaPrev[1446];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[502] + pEtaPrev[2008];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[513] + pEtaPrev[2054];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[551] + pEtaPrev[2206];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[634] + pEtaPrev[2538];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[758] + pEtaPrev[3032];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[886] + pEtaPrev[3308];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1014] + pEtaPrev[3682];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1270] + pEtaPrev[4194];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1289] + pEtaPrev[4282];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1316] + pEtaPrev[4444];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1379] + pEtaPrev[4822];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[34] = minval;
		else
			pEta[34] = -minval;
	}
	else
		pEta[34] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[214] = minval;
		else
			pEta[214] = -minval;
	}
	else
		pEta[214] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[426] = minval;
		else
			pEta[426] = -minval;
	}
	else
		pEta[426] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[984] = minval;
		else
			pEta[984] = -minval;
	}
	else
		pEta[984] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1046] = minval;
		else
			pEta[1046] = -minval;
	}
	else
		pEta[1046] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1262] = minval;
		else
			pEta[1262] = -minval;
	}
	else
		pEta[1262] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1446] = minval;
		else
			pEta[1446] = -minval;
	}
	else
		pEta[1446] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2008] = minval;
		else
			pEta[2008] = -minval;
	}
	else
		pEta[2008] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2054] = minval;
		else
			pEta[2054] = -minval;
	}
	else
		pEta[2054] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2206] = minval;
		else
			pEta[2206] = -minval;
	}
	else
		pEta[2206] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2538] = minval;
		else
			pEta[2538] = -minval;
	}
	else
		pEta[2538] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3032] = minval;
		else
			pEta[3032] = -minval;
	}
	else
		pEta[3032] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3308] = minval;
		else
			pEta[3308] = -minval;
	}
	else
		pEta[3308] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3682] = minval;
		else
			pEta[3682] = -minval;
	}
	else
		pEta[3682] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4194] = minval;
		else
			pEta[4194] = -minval;
	}
	else
		pEta[4194] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4282] = minval;
		else
			pEta[4282] = -minval;
	}
	else
		pEta[4282] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4444] = minval;
		else
			pEta[4444] = -minval;
	}
	else
		pEta[4444] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4822] = minval;
		else
			pEta[4822] = -minval;
	}
	else
		pEta[4822] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 247     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[9] + pEtaPrev[38];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[54] + pEtaPrev[218];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[107] + pEtaPrev[430];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[247] + pEtaPrev[988];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[262] + pEtaPrev[1050];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[316] + pEtaPrev[1266];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[362] + pEtaPrev[1450];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[503] + pEtaPrev[2012];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[514] + pEtaPrev[2058];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[552] + pEtaPrev[2210];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[635] + pEtaPrev[2542];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[759] + pEtaPrev[3036];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[887] + pEtaPrev[3310];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1015] + pEtaPrev[3685];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1271] + pEtaPrev[4197];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1290] + pEtaPrev[4288];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1317] + pEtaPrev[4450];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1380] + pEtaPrev[4828];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[38] = minval;
		else
			pEta[38] = -minval;
	}
	else
		pEta[38] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[218] = minval;
		else
			pEta[218] = -minval;
	}
	else
		pEta[218] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[430] = minval;
		else
			pEta[430] = -minval;
	}
	else
		pEta[430] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[988] = minval;
		else
			pEta[988] = -minval;
	}
	else
		pEta[988] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1050] = minval;
		else
			pEta[1050] = -minval;
	}
	else
		pEta[1050] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1266] = minval;
		else
			pEta[1266] = -minval;
	}
	else
		pEta[1266] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1450] = minval;
		else
			pEta[1450] = -minval;
	}
	else
		pEta[1450] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2012] = minval;
		else
			pEta[2012] = -minval;
	}
	else
		pEta[2012] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2058] = minval;
		else
			pEta[2058] = -minval;
	}
	else
		pEta[2058] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2210] = minval;
		else
			pEta[2210] = -minval;
	}
	else
		pEta[2210] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2542] = minval;
		else
			pEta[2542] = -minval;
	}
	else
		pEta[2542] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3036] = minval;
		else
			pEta[3036] = -minval;
	}
	else
		pEta[3036] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3310] = minval;
		else
			pEta[3310] = -minval;
	}
	else
		pEta[3310] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3685] = minval;
		else
			pEta[3685] = -minval;
	}
	else
		pEta[3685] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4197] = minval;
		else
			pEta[4197] = -minval;
	}
	else
		pEta[4197] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4288] = minval;
		else
			pEta[4288] = -minval;
	}
	else
		pEta[4288] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4450] = minval;
		else
			pEta[4450] = -minval;
	}
	else
		pEta[4450] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4828] = minval;
		else
			pEta[4828] = -minval;
	}
	else
		pEta[4828] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 248     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[10] + pEtaPrev[42];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[55] + pEtaPrev[222];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[108] + pEtaPrev[434];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[248] + pEtaPrev[992];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[263] + pEtaPrev[1054];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[317] + pEtaPrev[1270];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[363] + pEtaPrev[1454];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[504] + pEtaPrev[2016];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[515] + pEtaPrev[2062];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[553] + pEtaPrev[2214];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[636] + pEtaPrev[2546];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[760] + pEtaPrev[3040];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[888] + pEtaPrev[3312];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1016] + pEtaPrev[3688];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1272] + pEtaPrev[4200];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1291] + pEtaPrev[4294];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1318] + pEtaPrev[4456];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1381] + pEtaPrev[4834];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[42] = minval;
		else
			pEta[42] = -minval;
	}
	else
		pEta[42] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[222] = minval;
		else
			pEta[222] = -minval;
	}
	else
		pEta[222] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[434] = minval;
		else
			pEta[434] = -minval;
	}
	else
		pEta[434] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[992] = minval;
		else
			pEta[992] = -minval;
	}
	else
		pEta[992] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1054] = minval;
		else
			pEta[1054] = -minval;
	}
	else
		pEta[1054] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1270] = minval;
		else
			pEta[1270] = -minval;
	}
	else
		pEta[1270] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1454] = minval;
		else
			pEta[1454] = -minval;
	}
	else
		pEta[1454] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2016] = minval;
		else
			pEta[2016] = -minval;
	}
	else
		pEta[2016] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2062] = minval;
		else
			pEta[2062] = -minval;
	}
	else
		pEta[2062] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2214] = minval;
		else
			pEta[2214] = -minval;
	}
	else
		pEta[2214] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2546] = minval;
		else
			pEta[2546] = -minval;
	}
	else
		pEta[2546] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3040] = minval;
		else
			pEta[3040] = -minval;
	}
	else
		pEta[3040] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3312] = minval;
		else
			pEta[3312] = -minval;
	}
	else
		pEta[3312] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3688] = minval;
		else
			pEta[3688] = -minval;
	}
	else
		pEta[3688] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4200] = minval;
		else
			pEta[4200] = -minval;
	}
	else
		pEta[4200] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4294] = minval;
		else
			pEta[4294] = -minval;
	}
	else
		pEta[4294] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4456] = minval;
		else
			pEta[4456] = -minval;
	}
	else
		pEta[4456] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4834] = minval;
		else
			pEta[4834] = -minval;
	}
	else
		pEta[4834] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 249     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[11] + pEtaPrev[46];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[56] + pEtaPrev[226];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[109] + pEtaPrev[438];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[249] + pEtaPrev[996];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[264] + pEtaPrev[1058];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[318] + pEtaPrev[1274];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[364] + pEtaPrev[1458];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[505] + pEtaPrev[2020];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[516] + pEtaPrev[2066];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[554] + pEtaPrev[2218];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[637] + pEtaPrev[2550];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[761] + pEtaPrev[3044];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[889] + pEtaPrev[3314];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1017] + pEtaPrev[3691];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1273] + pEtaPrev[4203];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1292] + pEtaPrev[4300];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1319] + pEtaPrev[4462];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1382] + pEtaPrev[4840];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[46] = minval;
		else
			pEta[46] = -minval;
	}
	else
		pEta[46] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[226] = minval;
		else
			pEta[226] = -minval;
	}
	else
		pEta[226] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[438] = minval;
		else
			pEta[438] = -minval;
	}
	else
		pEta[438] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[996] = minval;
		else
			pEta[996] = -minval;
	}
	else
		pEta[996] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1058] = minval;
		else
			pEta[1058] = -minval;
	}
	else
		pEta[1058] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1274] = minval;
		else
			pEta[1274] = -minval;
	}
	else
		pEta[1274] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1458] = minval;
		else
			pEta[1458] = -minval;
	}
	else
		pEta[1458] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2020] = minval;
		else
			pEta[2020] = -minval;
	}
	else
		pEta[2020] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2066] = minval;
		else
			pEta[2066] = -minval;
	}
	else
		pEta[2066] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2218] = minval;
		else
			pEta[2218] = -minval;
	}
	else
		pEta[2218] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2550] = minval;
		else
			pEta[2550] = -minval;
	}
	else
		pEta[2550] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3044] = minval;
		else
			pEta[3044] = -minval;
	}
	else
		pEta[3044] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3314] = minval;
		else
			pEta[3314] = -minval;
	}
	else
		pEta[3314] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3691] = minval;
		else
			pEta[3691] = -minval;
	}
	else
		pEta[3691] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4203] = minval;
		else
			pEta[4203] = -minval;
	}
	else
		pEta[4203] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4300] = minval;
		else
			pEta[4300] = -minval;
	}
	else
		pEta[4300] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4462] = minval;
		else
			pEta[4462] = -minval;
	}
	else
		pEta[4462] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4840] = minval;
		else
			pEta[4840] = -minval;
	}
	else
		pEta[4840] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 250     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[12] + pEtaPrev[50];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[57] + pEtaPrev[230];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[110] + pEtaPrev[442];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[250] + pEtaPrev[1000];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[265] + pEtaPrev[1062];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[319] + pEtaPrev[1278];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[365] + pEtaPrev[1462];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[506] + pEtaPrev[2024];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[517] + pEtaPrev[2070];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[555] + pEtaPrev[2222];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[638] + pEtaPrev[2554];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[762] + pEtaPrev[3048];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[890] + pEtaPrev[3316];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1018] + pEtaPrev[3694];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1274] + pEtaPrev[4206];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1293] + pEtaPrev[4306];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1320] + pEtaPrev[4468];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1383] + pEtaPrev[4846];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[50] = minval;
		else
			pEta[50] = -minval;
	}
	else
		pEta[50] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[230] = minval;
		else
			pEta[230] = -minval;
	}
	else
		pEta[230] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[442] = minval;
		else
			pEta[442] = -minval;
	}
	else
		pEta[442] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1000] = minval;
		else
			pEta[1000] = -minval;
	}
	else
		pEta[1000] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1062] = minval;
		else
			pEta[1062] = -minval;
	}
	else
		pEta[1062] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1278] = minval;
		else
			pEta[1278] = -minval;
	}
	else
		pEta[1278] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1462] = minval;
		else
			pEta[1462] = -minval;
	}
	else
		pEta[1462] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2024] = minval;
		else
			pEta[2024] = -minval;
	}
	else
		pEta[2024] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2070] = minval;
		else
			pEta[2070] = -minval;
	}
	else
		pEta[2070] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2222] = minval;
		else
			pEta[2222] = -minval;
	}
	else
		pEta[2222] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2554] = minval;
		else
			pEta[2554] = -minval;
	}
	else
		pEta[2554] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3048] = minval;
		else
			pEta[3048] = -minval;
	}
	else
		pEta[3048] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3316] = minval;
		else
			pEta[3316] = -minval;
	}
	else
		pEta[3316] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3694] = minval;
		else
			pEta[3694] = -minval;
	}
	else
		pEta[3694] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4206] = minval;
		else
			pEta[4206] = -minval;
	}
	else
		pEta[4206] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4306] = minval;
		else
			pEta[4306] = -minval;
	}
	else
		pEta[4306] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4468] = minval;
		else
			pEta[4468] = -minval;
	}
	else
		pEta[4468] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4846] = minval;
		else
			pEta[4846] = -minval;
	}
	else
		pEta[4846] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 251     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[13] + pEtaPrev[54];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[58] + pEtaPrev[234];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[111] + pEtaPrev[446];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[251] + pEtaPrev[1004];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[266] + pEtaPrev[1066];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[288] + pEtaPrev[1154];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[366] + pEtaPrev[1466];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[507] + pEtaPrev[2028];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[518] + pEtaPrev[2074];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[556] + pEtaPrev[2226];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[639] + pEtaPrev[2558];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[763] + pEtaPrev[3052];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[891] + pEtaPrev[3318];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1019] + pEtaPrev[3697];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1275] + pEtaPrev[4209];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1294] + pEtaPrev[4312];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1321] + pEtaPrev[4474];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1384] + pEtaPrev[4852];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[54] = minval;
		else
			pEta[54] = -minval;
	}
	else
		pEta[54] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[234] = minval;
		else
			pEta[234] = -minval;
	}
	else
		pEta[234] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[446] = minval;
		else
			pEta[446] = -minval;
	}
	else
		pEta[446] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1004] = minval;
		else
			pEta[1004] = -minval;
	}
	else
		pEta[1004] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1066] = minval;
		else
			pEta[1066] = -minval;
	}
	else
		pEta[1066] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1154] = minval;
		else
			pEta[1154] = -minval;
	}
	else
		pEta[1154] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1466] = minval;
		else
			pEta[1466] = -minval;
	}
	else
		pEta[1466] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2028] = minval;
		else
			pEta[2028] = -minval;
	}
	else
		pEta[2028] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2074] = minval;
		else
			pEta[2074] = -minval;
	}
	else
		pEta[2074] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2226] = minval;
		else
			pEta[2226] = -minval;
	}
	else
		pEta[2226] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2558] = minval;
		else
			pEta[2558] = -minval;
	}
	else
		pEta[2558] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3052] = minval;
		else
			pEta[3052] = -minval;
	}
	else
		pEta[3052] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3318] = minval;
		else
			pEta[3318] = -minval;
	}
	else
		pEta[3318] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3697] = minval;
		else
			pEta[3697] = -minval;
	}
	else
		pEta[3697] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4209] = minval;
		else
			pEta[4209] = -minval;
	}
	else
		pEta[4209] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4312] = minval;
		else
			pEta[4312] = -minval;
	}
	else
		pEta[4312] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4474] = minval;
		else
			pEta[4474] = -minval;
	}
	else
		pEta[4474] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4852] = minval;
		else
			pEta[4852] = -minval;
	}
	else
		pEta[4852] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 252     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[14] + pEtaPrev[58];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[59] + pEtaPrev[238];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[112] + pEtaPrev[450];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[252] + pEtaPrev[1008];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[267] + pEtaPrev[1070];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[289] + pEtaPrev[1158];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[367] + pEtaPrev[1470];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[508] + pEtaPrev[2032];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[519] + pEtaPrev[2078];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[557] + pEtaPrev[2230];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[608] + pEtaPrev[2434];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[764] + pEtaPrev[3056];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[892] + pEtaPrev[3320];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1020] + pEtaPrev[3700];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1276] + pEtaPrev[4212];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1295] + pEtaPrev[4318];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1322] + pEtaPrev[4480];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1385] + pEtaPrev[4858];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[58] = minval;
		else
			pEta[58] = -minval;
	}
	else
		pEta[58] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[238] = minval;
		else
			pEta[238] = -minval;
	}
	else
		pEta[238] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[450] = minval;
		else
			pEta[450] = -minval;
	}
	else
		pEta[450] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1008] = minval;
		else
			pEta[1008] = -minval;
	}
	else
		pEta[1008] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1070] = minval;
		else
			pEta[1070] = -minval;
	}
	else
		pEta[1070] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1158] = minval;
		else
			pEta[1158] = -minval;
	}
	else
		pEta[1158] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1470] = minval;
		else
			pEta[1470] = -minval;
	}
	else
		pEta[1470] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2032] = minval;
		else
			pEta[2032] = -minval;
	}
	else
		pEta[2032] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2078] = minval;
		else
			pEta[2078] = -minval;
	}
	else
		pEta[2078] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2230] = minval;
		else
			pEta[2230] = -minval;
	}
	else
		pEta[2230] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2434] = minval;
		else
			pEta[2434] = -minval;
	}
	else
		pEta[2434] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3056] = minval;
		else
			pEta[3056] = -minval;
	}
	else
		pEta[3056] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3320] = minval;
		else
			pEta[3320] = -minval;
	}
	else
		pEta[3320] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3700] = minval;
		else
			pEta[3700] = -minval;
	}
	else
		pEta[3700] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4212] = minval;
		else
			pEta[4212] = -minval;
	}
	else
		pEta[4212] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4318] = minval;
		else
			pEta[4318] = -minval;
	}
	else
		pEta[4318] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4480] = minval;
		else
			pEta[4480] = -minval;
	}
	else
		pEta[4480] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4858] = minval;
		else
			pEta[4858] = -minval;
	}
	else
		pEta[4858] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 253     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[15] + pEtaPrev[62];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[60] + pEtaPrev[242];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[113] + pEtaPrev[454];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[253] + pEtaPrev[1012];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[268] + pEtaPrev[1074];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[290] + pEtaPrev[1162];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[368] + pEtaPrev[1474];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[509] + pEtaPrev[2036];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[520] + pEtaPrev[2082];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[558] + pEtaPrev[2234];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[609] + pEtaPrev[2438];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[765] + pEtaPrev[3060];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[893] + pEtaPrev[3322];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1021] + pEtaPrev[3703];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1277] + pEtaPrev[4215];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1296] + pEtaPrev[4324];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1323] + pEtaPrev[4486];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1386] + pEtaPrev[4864];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[62] = minval;
		else
			pEta[62] = -minval;
	}
	else
		pEta[62] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[242] = minval;
		else
			pEta[242] = -minval;
	}
	else
		pEta[242] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[454] = minval;
		else
			pEta[454] = -minval;
	}
	else
		pEta[454] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1012] = minval;
		else
			pEta[1012] = -minval;
	}
	else
		pEta[1012] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1074] = minval;
		else
			pEta[1074] = -minval;
	}
	else
		pEta[1074] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1162] = minval;
		else
			pEta[1162] = -minval;
	}
	else
		pEta[1162] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1474] = minval;
		else
			pEta[1474] = -minval;
	}
	else
		pEta[1474] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2036] = minval;
		else
			pEta[2036] = -minval;
	}
	else
		pEta[2036] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2082] = minval;
		else
			pEta[2082] = -minval;
	}
	else
		pEta[2082] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2234] = minval;
		else
			pEta[2234] = -minval;
	}
	else
		pEta[2234] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2438] = minval;
		else
			pEta[2438] = -minval;
	}
	else
		pEta[2438] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3060] = minval;
		else
			pEta[3060] = -minval;
	}
	else
		pEta[3060] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3322] = minval;
		else
			pEta[3322] = -minval;
	}
	else
		pEta[3322] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3703] = minval;
		else
			pEta[3703] = -minval;
	}
	else
		pEta[3703] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4215] = minval;
		else
			pEta[4215] = -minval;
	}
	else
		pEta[4215] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4324] = minval;
		else
			pEta[4324] = -minval;
	}
	else
		pEta[4324] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4486] = minval;
		else
			pEta[4486] = -minval;
	}
	else
		pEta[4486] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4864] = minval;
		else
			pEta[4864] = -minval;
	}
	else
		pEta[4864] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 254     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[16] + pEtaPrev[66];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[61] + pEtaPrev[246];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[114] + pEtaPrev[458];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[254] + pEtaPrev[1016];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[269] + pEtaPrev[1078];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[291] + pEtaPrev[1166];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[369] + pEtaPrev[1478];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[510] + pEtaPrev[2040];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[521] + pEtaPrev[2086];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[559] + pEtaPrev[2238];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[610] + pEtaPrev[2442];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[766] + pEtaPrev[3064];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[894] + pEtaPrev[3324];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1022] + pEtaPrev[3706];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1278] + pEtaPrev[4218];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1297] + pEtaPrev[4330];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1324] + pEtaPrev[4492];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1387] + pEtaPrev[4870];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[66] = minval;
		else
			pEta[66] = -minval;
	}
	else
		pEta[66] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[246] = minval;
		else
			pEta[246] = -minval;
	}
	else
		pEta[246] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[458] = minval;
		else
			pEta[458] = -minval;
	}
	else
		pEta[458] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1016] = minval;
		else
			pEta[1016] = -minval;
	}
	else
		pEta[1016] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1078] = minval;
		else
			pEta[1078] = -minval;
	}
	else
		pEta[1078] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1166] = minval;
		else
			pEta[1166] = -minval;
	}
	else
		pEta[1166] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1478] = minval;
		else
			pEta[1478] = -minval;
	}
	else
		pEta[1478] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2040] = minval;
		else
			pEta[2040] = -minval;
	}
	else
		pEta[2040] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2086] = minval;
		else
			pEta[2086] = -minval;
	}
	else
		pEta[2086] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2238] = minval;
		else
			pEta[2238] = -minval;
	}
	else
		pEta[2238] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2442] = minval;
		else
			pEta[2442] = -minval;
	}
	else
		pEta[2442] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3064] = minval;
		else
			pEta[3064] = -minval;
	}
	else
		pEta[3064] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3324] = minval;
		else
			pEta[3324] = -minval;
	}
	else
		pEta[3324] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3706] = minval;
		else
			pEta[3706] = -minval;
	}
	else
		pEta[3706] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4218] = minval;
		else
			pEta[4218] = -minval;
	}
	else
		pEta[4218] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4330] = minval;
		else
			pEta[4330] = -minval;
	}
	else
		pEta[4330] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4492] = minval;
		else
			pEta[4492] = -minval;
	}
	else
		pEta[4492] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4870] = minval;
		else
			pEta[4870] = -minval;
	}
	else
		pEta[4870] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 255     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[17] + pEtaPrev[70];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[62] + pEtaPrev[250];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[115] + pEtaPrev[462];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[255] + pEtaPrev[1020];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[270] + pEtaPrev[1082];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[292] + pEtaPrev[1170];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[370] + pEtaPrev[1482];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[511] + pEtaPrev[2044];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[522] + pEtaPrev[2090];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[560] + pEtaPrev[2242];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[611] + pEtaPrev[2446];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[767] + pEtaPrev[3068];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[895] + pEtaPrev[3326];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[1023] + pEtaPrev[3709];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1279] + pEtaPrev[4221];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1298] + pEtaPrev[4336];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1325] + pEtaPrev[4498];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1388] + pEtaPrev[4876];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[70] = minval;
		else
			pEta[70] = -minval;
	}
	else
		pEta[70] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[250] = minval;
		else
			pEta[250] = -minval;
	}
	else
		pEta[250] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[462] = minval;
		else
			pEta[462] = -minval;
	}
	else
		pEta[462] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1020] = minval;
		else
			pEta[1020] = -minval;
	}
	else
		pEta[1020] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1082] = minval;
		else
			pEta[1082] = -minval;
	}
	else
		pEta[1082] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1170] = minval;
		else
			pEta[1170] = -minval;
	}
	else
		pEta[1170] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1482] = minval;
		else
			pEta[1482] = -minval;
	}
	else
		pEta[1482] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2044] = minval;
		else
			pEta[2044] = -minval;
	}
	else
		pEta[2044] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2090] = minval;
		else
			pEta[2090] = -minval;
	}
	else
		pEta[2090] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2242] = minval;
		else
			pEta[2242] = -minval;
	}
	else
		pEta[2242] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2446] = minval;
		else
			pEta[2446] = -minval;
	}
	else
		pEta[2446] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3068] = minval;
		else
			pEta[3068] = -minval;
	}
	else
		pEta[3068] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3326] = minval;
		else
			pEta[3326] = -minval;
	}
	else
		pEta[3326] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3709] = minval;
		else
			pEta[3709] = -minval;
	}
	else
		pEta[3709] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[4221] = minval;
		else
			pEta[4221] = -minval;
	}
	else
		pEta[4221] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4336] = minval;
		else
			pEta[4336] = -minval;
	}
	else
		pEta[4336] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4498] = minval;
		else
			pEta[4498] = -minval;
	}
	else
		pEta[4498] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4876] = minval;
		else
			pEta[4876] = -minval;
	}
	else
		pEta[4876] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 256     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[0] + pEtaPrev[3];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[169] + pEtaPrev[677];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[218] + pEtaPrev[873];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[241] + pEtaPrev[965];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[256] + pEtaPrev[1027];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[391] + pEtaPrev[1565];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[431] + pEtaPrev[1725];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[458] + pEtaPrev[1833];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[512] + pEtaPrev[2051];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[648] + pEtaPrev[2593];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[729] + pEtaPrev[2917];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[761] + pEtaPrev[3045];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[768] + pEtaPrev[3073];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[960] + pEtaPrev[3521];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1002] + pEtaPrev[3647];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1157] + pEtaPrev[3856];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1202] + pEtaPrev[3991];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1280] + pEtaPrev[4229];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[3] = minval;
		else
			pEta[3] = -minval;
	}
	else
		pEta[3] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[677] = minval;
		else
			pEta[677] = -minval;
	}
	else
		pEta[677] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[873] = minval;
		else
			pEta[873] = -minval;
	}
	else
		pEta[873] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[965] = minval;
		else
			pEta[965] = -minval;
	}
	else
		pEta[965] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1027] = minval;
		else
			pEta[1027] = -minval;
	}
	else
		pEta[1027] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1565] = minval;
		else
			pEta[1565] = -minval;
	}
	else
		pEta[1565] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1725] = minval;
		else
			pEta[1725] = -minval;
	}
	else
		pEta[1725] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1833] = minval;
		else
			pEta[1833] = -minval;
	}
	else
		pEta[1833] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2051] = minval;
		else
			pEta[2051] = -minval;
	}
	else
		pEta[2051] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2593] = minval;
		else
			pEta[2593] = -minval;
	}
	else
		pEta[2593] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2917] = minval;
		else
			pEta[2917] = -minval;
	}
	else
		pEta[2917] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3045] = minval;
		else
			pEta[3045] = -minval;
	}
	else
		pEta[3045] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3073] = minval;
		else
			pEta[3073] = -minval;
	}
	else
		pEta[3073] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3521] = minval;
		else
			pEta[3521] = -minval;
	}
	else
		pEta[3521] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3647] = minval;
		else
			pEta[3647] = -minval;
	}
	else
		pEta[3647] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3856] = minval;
		else
			pEta[3856] = -minval;
	}
	else
		pEta[3856] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3991] = minval;
		else
			pEta[3991] = -minval;
	}
	else
		pEta[3991] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4229] = minval;
		else
			pEta[4229] = -minval;
	}
	else
		pEta[4229] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 257     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[1] + pEtaPrev[7];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[170] + pEtaPrev[681];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[219] + pEtaPrev[877];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[242] + pEtaPrev[969];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[257] + pEtaPrev[1031];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[392] + pEtaPrev[1569];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[432] + pEtaPrev[1729];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[459] + pEtaPrev[1837];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[513] + pEtaPrev[2055];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[649] + pEtaPrev[2597];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[730] + pEtaPrev[2921];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[762] + pEtaPrev[3049];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[769] + pEtaPrev[3075];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[961] + pEtaPrev[3524];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1003] + pEtaPrev[3650];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1158] + pEtaPrev[3859];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1203] + pEtaPrev[3994];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1281] + pEtaPrev[4235];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[7] = minval;
		else
			pEta[7] = -minval;
	}
	else
		pEta[7] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[681] = minval;
		else
			pEta[681] = -minval;
	}
	else
		pEta[681] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[877] = minval;
		else
			pEta[877] = -minval;
	}
	else
		pEta[877] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[969] = minval;
		else
			pEta[969] = -minval;
	}
	else
		pEta[969] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1031] = minval;
		else
			pEta[1031] = -minval;
	}
	else
		pEta[1031] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1569] = minval;
		else
			pEta[1569] = -minval;
	}
	else
		pEta[1569] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1729] = minval;
		else
			pEta[1729] = -minval;
	}
	else
		pEta[1729] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1837] = minval;
		else
			pEta[1837] = -minval;
	}
	else
		pEta[1837] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2055] = minval;
		else
			pEta[2055] = -minval;
	}
	else
		pEta[2055] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2597] = minval;
		else
			pEta[2597] = -minval;
	}
	else
		pEta[2597] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2921] = minval;
		else
			pEta[2921] = -minval;
	}
	else
		pEta[2921] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3049] = minval;
		else
			pEta[3049] = -minval;
	}
	else
		pEta[3049] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3075] = minval;
		else
			pEta[3075] = -minval;
	}
	else
		pEta[3075] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3524] = minval;
		else
			pEta[3524] = -minval;
	}
	else
		pEta[3524] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3650] = minval;
		else
			pEta[3650] = -minval;
	}
	else
		pEta[3650] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3859] = minval;
		else
			pEta[3859] = -minval;
	}
	else
		pEta[3859] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3994] = minval;
		else
			pEta[3994] = -minval;
	}
	else
		pEta[3994] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4235] = minval;
		else
			pEta[4235] = -minval;
	}
	else
		pEta[4235] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 258     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[2] + pEtaPrev[11];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[171] + pEtaPrev[685];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[220] + pEtaPrev[881];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[243] + pEtaPrev[973];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[258] + pEtaPrev[1035];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[393] + pEtaPrev[1573];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[433] + pEtaPrev[1733];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[460] + pEtaPrev[1841];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[514] + pEtaPrev[2059];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[650] + pEtaPrev[2601];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[731] + pEtaPrev[2925];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[763] + pEtaPrev[3053];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[770] + pEtaPrev[3077];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[962] + pEtaPrev[3527];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1004] + pEtaPrev[3653];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1159] + pEtaPrev[3862];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1204] + pEtaPrev[3997];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1282] + pEtaPrev[4241];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[11] = minval;
		else
			pEta[11] = -minval;
	}
	else
		pEta[11] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[685] = minval;
		else
			pEta[685] = -minval;
	}
	else
		pEta[685] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[881] = minval;
		else
			pEta[881] = -minval;
	}
	else
		pEta[881] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[973] = minval;
		else
			pEta[973] = -minval;
	}
	else
		pEta[973] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1035] = minval;
		else
			pEta[1035] = -minval;
	}
	else
		pEta[1035] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1573] = minval;
		else
			pEta[1573] = -minval;
	}
	else
		pEta[1573] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1733] = minval;
		else
			pEta[1733] = -minval;
	}
	else
		pEta[1733] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1841] = minval;
		else
			pEta[1841] = -minval;
	}
	else
		pEta[1841] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2059] = minval;
		else
			pEta[2059] = -minval;
	}
	else
		pEta[2059] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2601] = minval;
		else
			pEta[2601] = -minval;
	}
	else
		pEta[2601] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2925] = minval;
		else
			pEta[2925] = -minval;
	}
	else
		pEta[2925] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3053] = minval;
		else
			pEta[3053] = -minval;
	}
	else
		pEta[3053] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3077] = minval;
		else
			pEta[3077] = -minval;
	}
	else
		pEta[3077] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3527] = minval;
		else
			pEta[3527] = -minval;
	}
	else
		pEta[3527] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3653] = minval;
		else
			pEta[3653] = -minval;
	}
	else
		pEta[3653] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3862] = minval;
		else
			pEta[3862] = -minval;
	}
	else
		pEta[3862] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3997] = minval;
		else
			pEta[3997] = -minval;
	}
	else
		pEta[3997] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4241] = minval;
		else
			pEta[4241] = -minval;
	}
	else
		pEta[4241] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 259     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[3] + pEtaPrev[15];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[172] + pEtaPrev[689];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[221] + pEtaPrev[885];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[244] + pEtaPrev[977];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[259] + pEtaPrev[1039];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[394] + pEtaPrev[1577];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[434] + pEtaPrev[1737];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[461] + pEtaPrev[1845];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[515] + pEtaPrev[2063];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[651] + pEtaPrev[2605];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[732] + pEtaPrev[2929];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[764] + pEtaPrev[3057];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[771] + pEtaPrev[3079];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[963] + pEtaPrev[3530];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1005] + pEtaPrev[3656];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1160] + pEtaPrev[3865];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1205] + pEtaPrev[4000];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1283] + pEtaPrev[4247];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[15] = minval;
		else
			pEta[15] = -minval;
	}
	else
		pEta[15] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[689] = minval;
		else
			pEta[689] = -minval;
	}
	else
		pEta[689] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[885] = minval;
		else
			pEta[885] = -minval;
	}
	else
		pEta[885] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[977] = minval;
		else
			pEta[977] = -minval;
	}
	else
		pEta[977] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1039] = minval;
		else
			pEta[1039] = -minval;
	}
	else
		pEta[1039] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1577] = minval;
		else
			pEta[1577] = -minval;
	}
	else
		pEta[1577] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1737] = minval;
		else
			pEta[1737] = -minval;
	}
	else
		pEta[1737] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1845] = minval;
		else
			pEta[1845] = -minval;
	}
	else
		pEta[1845] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2063] = minval;
		else
			pEta[2063] = -minval;
	}
	else
		pEta[2063] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2605] = minval;
		else
			pEta[2605] = -minval;
	}
	else
		pEta[2605] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2929] = minval;
		else
			pEta[2929] = -minval;
	}
	else
		pEta[2929] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3057] = minval;
		else
			pEta[3057] = -minval;
	}
	else
		pEta[3057] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3079] = minval;
		else
			pEta[3079] = -minval;
	}
	else
		pEta[3079] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3530] = minval;
		else
			pEta[3530] = -minval;
	}
	else
		pEta[3530] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3656] = minval;
		else
			pEta[3656] = -minval;
	}
	else
		pEta[3656] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3865] = minval;
		else
			pEta[3865] = -minval;
	}
	else
		pEta[3865] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4000] = minval;
		else
			pEta[4000] = -minval;
	}
	else
		pEta[4000] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4247] = minval;
		else
			pEta[4247] = -minval;
	}
	else
		pEta[4247] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 260     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[4] + pEtaPrev[19];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[173] + pEtaPrev[693];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[222] + pEtaPrev[889];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[245] + pEtaPrev[981];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[260] + pEtaPrev[1043];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[395] + pEtaPrev[1581];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[435] + pEtaPrev[1741];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[462] + pEtaPrev[1849];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[516] + pEtaPrev[2067];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[652] + pEtaPrev[2609];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[733] + pEtaPrev[2933];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[765] + pEtaPrev[3061];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[772] + pEtaPrev[3081];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[964] + pEtaPrev[3533];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1006] + pEtaPrev[3659];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1161] + pEtaPrev[3868];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1206] + pEtaPrev[4003];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1284] + pEtaPrev[4253];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[19] = minval;
		else
			pEta[19] = -minval;
	}
	else
		pEta[19] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[693] = minval;
		else
			pEta[693] = -minval;
	}
	else
		pEta[693] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[889] = minval;
		else
			pEta[889] = -minval;
	}
	else
		pEta[889] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[981] = minval;
		else
			pEta[981] = -minval;
	}
	else
		pEta[981] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1043] = minval;
		else
			pEta[1043] = -minval;
	}
	else
		pEta[1043] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1581] = minval;
		else
			pEta[1581] = -minval;
	}
	else
		pEta[1581] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1741] = minval;
		else
			pEta[1741] = -minval;
	}
	else
		pEta[1741] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1849] = minval;
		else
			pEta[1849] = -minval;
	}
	else
		pEta[1849] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2067] = minval;
		else
			pEta[2067] = -minval;
	}
	else
		pEta[2067] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2609] = minval;
		else
			pEta[2609] = -minval;
	}
	else
		pEta[2609] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2933] = minval;
		else
			pEta[2933] = -minval;
	}
	else
		pEta[2933] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3061] = minval;
		else
			pEta[3061] = -minval;
	}
	else
		pEta[3061] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3081] = minval;
		else
			pEta[3081] = -minval;
	}
	else
		pEta[3081] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3533] = minval;
		else
			pEta[3533] = -minval;
	}
	else
		pEta[3533] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3659] = minval;
		else
			pEta[3659] = -minval;
	}
	else
		pEta[3659] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3868] = minval;
		else
			pEta[3868] = -minval;
	}
	else
		pEta[3868] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4003] = minval;
		else
			pEta[4003] = -minval;
	}
	else
		pEta[4003] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4253] = minval;
		else
			pEta[4253] = -minval;
	}
	else
		pEta[4253] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 261     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[5] + pEtaPrev[23];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[174] + pEtaPrev[697];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[223] + pEtaPrev[893];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[246] + pEtaPrev[985];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[261] + pEtaPrev[1047];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[396] + pEtaPrev[1585];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[436] + pEtaPrev[1745];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[463] + pEtaPrev[1853];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[517] + pEtaPrev[2071];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[653] + pEtaPrev[2613];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[734] + pEtaPrev[2937];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[766] + pEtaPrev[3065];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[773] + pEtaPrev[3083];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[965] + pEtaPrev[3536];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1007] + pEtaPrev[3662];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1162] + pEtaPrev[3871];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1207] + pEtaPrev[4006];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1285] + pEtaPrev[4259];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[23] = minval;
		else
			pEta[23] = -minval;
	}
	else
		pEta[23] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[697] = minval;
		else
			pEta[697] = -minval;
	}
	else
		pEta[697] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[893] = minval;
		else
			pEta[893] = -minval;
	}
	else
		pEta[893] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[985] = minval;
		else
			pEta[985] = -minval;
	}
	else
		pEta[985] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1047] = minval;
		else
			pEta[1047] = -minval;
	}
	else
		pEta[1047] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1585] = minval;
		else
			pEta[1585] = -minval;
	}
	else
		pEta[1585] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1745] = minval;
		else
			pEta[1745] = -minval;
	}
	else
		pEta[1745] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1853] = minval;
		else
			pEta[1853] = -minval;
	}
	else
		pEta[1853] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2071] = minval;
		else
			pEta[2071] = -minval;
	}
	else
		pEta[2071] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2613] = minval;
		else
			pEta[2613] = -minval;
	}
	else
		pEta[2613] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2937] = minval;
		else
			pEta[2937] = -minval;
	}
	else
		pEta[2937] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3065] = minval;
		else
			pEta[3065] = -minval;
	}
	else
		pEta[3065] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3083] = minval;
		else
			pEta[3083] = -minval;
	}
	else
		pEta[3083] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3536] = minval;
		else
			pEta[3536] = -minval;
	}
	else
		pEta[3536] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3662] = minval;
		else
			pEta[3662] = -minval;
	}
	else
		pEta[3662] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3871] = minval;
		else
			pEta[3871] = -minval;
	}
	else
		pEta[3871] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4006] = minval;
		else
			pEta[4006] = -minval;
	}
	else
		pEta[4006] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4259] = minval;
		else
			pEta[4259] = -minval;
	}
	else
		pEta[4259] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 262     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[6] + pEtaPrev[27];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[175] + pEtaPrev[701];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[192] + pEtaPrev[769];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[247] + pEtaPrev[989];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[262] + pEtaPrev[1051];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[397] + pEtaPrev[1589];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[437] + pEtaPrev[1749];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[464] + pEtaPrev[1857];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[518] + pEtaPrev[2075];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[654] + pEtaPrev[2617];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[735] + pEtaPrev[2941];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[767] + pEtaPrev[3069];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[774] + pEtaPrev[3085];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[966] + pEtaPrev[3539];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1008] + pEtaPrev[3665];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1163] + pEtaPrev[3874];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1208] + pEtaPrev[4009];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1286] + pEtaPrev[4265];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[27] = minval;
		else
			pEta[27] = -minval;
	}
	else
		pEta[27] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[701] = minval;
		else
			pEta[701] = -minval;
	}
	else
		pEta[701] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[769] = minval;
		else
			pEta[769] = -minval;
	}
	else
		pEta[769] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[989] = minval;
		else
			pEta[989] = -minval;
	}
	else
		pEta[989] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1051] = minval;
		else
			pEta[1051] = -minval;
	}
	else
		pEta[1051] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1589] = minval;
		else
			pEta[1589] = -minval;
	}
	else
		pEta[1589] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1749] = minval;
		else
			pEta[1749] = -minval;
	}
	else
		pEta[1749] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1857] = minval;
		else
			pEta[1857] = -minval;
	}
	else
		pEta[1857] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2075] = minval;
		else
			pEta[2075] = -minval;
	}
	else
		pEta[2075] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2617] = minval;
		else
			pEta[2617] = -minval;
	}
	else
		pEta[2617] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2941] = minval;
		else
			pEta[2941] = -minval;
	}
	else
		pEta[2941] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3069] = minval;
		else
			pEta[3069] = -minval;
	}
	else
		pEta[3069] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3085] = minval;
		else
			pEta[3085] = -minval;
	}
	else
		pEta[3085] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3539] = minval;
		else
			pEta[3539] = -minval;
	}
	else
		pEta[3539] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3665] = minval;
		else
			pEta[3665] = -minval;
	}
	else
		pEta[3665] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3874] = minval;
		else
			pEta[3874] = -minval;
	}
	else
		pEta[3874] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4009] = minval;
		else
			pEta[4009] = -minval;
	}
	else
		pEta[4009] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4265] = minval;
		else
			pEta[4265] = -minval;
	}
	else
		pEta[4265] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 263     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[7] + pEtaPrev[31];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[176] + pEtaPrev[705];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[193] + pEtaPrev[773];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[248] + pEtaPrev[993];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[263] + pEtaPrev[1055];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[398] + pEtaPrev[1593];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[438] + pEtaPrev[1753];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[465] + pEtaPrev[1861];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[519] + pEtaPrev[2079];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[655] + pEtaPrev[2621];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[704] + pEtaPrev[2817];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[736] + pEtaPrev[2945];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[775] + pEtaPrev[3087];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[967] + pEtaPrev[3542];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1009] + pEtaPrev[3668];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1164] + pEtaPrev[3877];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1209] + pEtaPrev[4012];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1287] + pEtaPrev[4271];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[31] = minval;
		else
			pEta[31] = -minval;
	}
	else
		pEta[31] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[705] = minval;
		else
			pEta[705] = -minval;
	}
	else
		pEta[705] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[773] = minval;
		else
			pEta[773] = -minval;
	}
	else
		pEta[773] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[993] = minval;
		else
			pEta[993] = -minval;
	}
	else
		pEta[993] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1055] = minval;
		else
			pEta[1055] = -minval;
	}
	else
		pEta[1055] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1593] = minval;
		else
			pEta[1593] = -minval;
	}
	else
		pEta[1593] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1753] = minval;
		else
			pEta[1753] = -minval;
	}
	else
		pEta[1753] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1861] = minval;
		else
			pEta[1861] = -minval;
	}
	else
		pEta[1861] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2079] = minval;
		else
			pEta[2079] = -minval;
	}
	else
		pEta[2079] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2621] = minval;
		else
			pEta[2621] = -minval;
	}
	else
		pEta[2621] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2817] = minval;
		else
			pEta[2817] = -minval;
	}
	else
		pEta[2817] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2945] = minval;
		else
			pEta[2945] = -minval;
	}
	else
		pEta[2945] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3087] = minval;
		else
			pEta[3087] = -minval;
	}
	else
		pEta[3087] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3542] = minval;
		else
			pEta[3542] = -minval;
	}
	else
		pEta[3542] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3668] = minval;
		else
			pEta[3668] = -minval;
	}
	else
		pEta[3668] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3877] = minval;
		else
			pEta[3877] = -minval;
	}
	else
		pEta[3877] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4012] = minval;
		else
			pEta[4012] = -minval;
	}
	else
		pEta[4012] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4271] = minval;
		else
			pEta[4271] = -minval;
	}
	else
		pEta[4271] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 264     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[8] + pEtaPrev[35];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[177] + pEtaPrev[709];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[194] + pEtaPrev[777];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[249] + pEtaPrev[997];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[264] + pEtaPrev[1059];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[399] + pEtaPrev[1597];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[439] + pEtaPrev[1757];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[466] + pEtaPrev[1865];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[520] + pEtaPrev[2083];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[656] + pEtaPrev[2625];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[705] + pEtaPrev[2821];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[737] + pEtaPrev[2949];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[776] + pEtaPrev[3089];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[968] + pEtaPrev[3545];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1010] + pEtaPrev[3671];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1165] + pEtaPrev[3880];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1210] + pEtaPrev[4015];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1288] + pEtaPrev[4277];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[35] = minval;
		else
			pEta[35] = -minval;
	}
	else
		pEta[35] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[709] = minval;
		else
			pEta[709] = -minval;
	}
	else
		pEta[709] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[777] = minval;
		else
			pEta[777] = -minval;
	}
	else
		pEta[777] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[997] = minval;
		else
			pEta[997] = -minval;
	}
	else
		pEta[997] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1059] = minval;
		else
			pEta[1059] = -minval;
	}
	else
		pEta[1059] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1597] = minval;
		else
			pEta[1597] = -minval;
	}
	else
		pEta[1597] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1757] = minval;
		else
			pEta[1757] = -minval;
	}
	else
		pEta[1757] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1865] = minval;
		else
			pEta[1865] = -minval;
	}
	else
		pEta[1865] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2083] = minval;
		else
			pEta[2083] = -minval;
	}
	else
		pEta[2083] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2625] = minval;
		else
			pEta[2625] = -minval;
	}
	else
		pEta[2625] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2821] = minval;
		else
			pEta[2821] = -minval;
	}
	else
		pEta[2821] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2949] = minval;
		else
			pEta[2949] = -minval;
	}
	else
		pEta[2949] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3089] = minval;
		else
			pEta[3089] = -minval;
	}
	else
		pEta[3089] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3545] = minval;
		else
			pEta[3545] = -minval;
	}
	else
		pEta[3545] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3671] = minval;
		else
			pEta[3671] = -minval;
	}
	else
		pEta[3671] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3880] = minval;
		else
			pEta[3880] = -minval;
	}
	else
		pEta[3880] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4015] = minval;
		else
			pEta[4015] = -minval;
	}
	else
		pEta[4015] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4277] = minval;
		else
			pEta[4277] = -minval;
	}
	else
		pEta[4277] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 265     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[9] + pEtaPrev[39];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[178] + pEtaPrev[713];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[195] + pEtaPrev[781];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[250] + pEtaPrev[1001];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[265] + pEtaPrev[1063];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[400] + pEtaPrev[1601];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[440] + pEtaPrev[1761];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[467] + pEtaPrev[1869];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[521] + pEtaPrev[2087];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[657] + pEtaPrev[2629];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[706] + pEtaPrev[2825];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[738] + pEtaPrev[2953];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[777] + pEtaPrev[3091];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[969] + pEtaPrev[3548];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1011] + pEtaPrev[3674];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1166] + pEtaPrev[3883];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1211] + pEtaPrev[4018];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1289] + pEtaPrev[4283];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[39] = minval;
		else
			pEta[39] = -minval;
	}
	else
		pEta[39] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[713] = minval;
		else
			pEta[713] = -minval;
	}
	else
		pEta[713] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[781] = minval;
		else
			pEta[781] = -minval;
	}
	else
		pEta[781] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1001] = minval;
		else
			pEta[1001] = -minval;
	}
	else
		pEta[1001] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1063] = minval;
		else
			pEta[1063] = -minval;
	}
	else
		pEta[1063] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1601] = minval;
		else
			pEta[1601] = -minval;
	}
	else
		pEta[1601] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1761] = minval;
		else
			pEta[1761] = -minval;
	}
	else
		pEta[1761] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1869] = minval;
		else
			pEta[1869] = -minval;
	}
	else
		pEta[1869] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2087] = minval;
		else
			pEta[2087] = -minval;
	}
	else
		pEta[2087] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2629] = minval;
		else
			pEta[2629] = -minval;
	}
	else
		pEta[2629] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2825] = minval;
		else
			pEta[2825] = -minval;
	}
	else
		pEta[2825] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2953] = minval;
		else
			pEta[2953] = -minval;
	}
	else
		pEta[2953] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3091] = minval;
		else
			pEta[3091] = -minval;
	}
	else
		pEta[3091] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3548] = minval;
		else
			pEta[3548] = -minval;
	}
	else
		pEta[3548] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3674] = minval;
		else
			pEta[3674] = -minval;
	}
	else
		pEta[3674] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3883] = minval;
		else
			pEta[3883] = -minval;
	}
	else
		pEta[3883] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4018] = minval;
		else
			pEta[4018] = -minval;
	}
	else
		pEta[4018] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4283] = minval;
		else
			pEta[4283] = -minval;
	}
	else
		pEta[4283] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 266     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[10] + pEtaPrev[43];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[179] + pEtaPrev[717];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[196] + pEtaPrev[785];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[251] + pEtaPrev[1005];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[266] + pEtaPrev[1067];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[401] + pEtaPrev[1605];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[441] + pEtaPrev[1765];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[468] + pEtaPrev[1873];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[522] + pEtaPrev[2091];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[658] + pEtaPrev[2633];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[707] + pEtaPrev[2829];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[739] + pEtaPrev[2957];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[778] + pEtaPrev[3093];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[970] + pEtaPrev[3551];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1012] + pEtaPrev[3677];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1167] + pEtaPrev[3886];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1212] + pEtaPrev[4021];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1290] + pEtaPrev[4289];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[43] = minval;
		else
			pEta[43] = -minval;
	}
	else
		pEta[43] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[717] = minval;
		else
			pEta[717] = -minval;
	}
	else
		pEta[717] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[785] = minval;
		else
			pEta[785] = -minval;
	}
	else
		pEta[785] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1005] = minval;
		else
			pEta[1005] = -minval;
	}
	else
		pEta[1005] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1067] = minval;
		else
			pEta[1067] = -minval;
	}
	else
		pEta[1067] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1605] = minval;
		else
			pEta[1605] = -minval;
	}
	else
		pEta[1605] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1765] = minval;
		else
			pEta[1765] = -minval;
	}
	else
		pEta[1765] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1873] = minval;
		else
			pEta[1873] = -minval;
	}
	else
		pEta[1873] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2091] = minval;
		else
			pEta[2091] = -minval;
	}
	else
		pEta[2091] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2633] = minval;
		else
			pEta[2633] = -minval;
	}
	else
		pEta[2633] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2829] = minval;
		else
			pEta[2829] = -minval;
	}
	else
		pEta[2829] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2957] = minval;
		else
			pEta[2957] = -minval;
	}
	else
		pEta[2957] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3093] = minval;
		else
			pEta[3093] = -minval;
	}
	else
		pEta[3093] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3551] = minval;
		else
			pEta[3551] = -minval;
	}
	else
		pEta[3551] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3677] = minval;
		else
			pEta[3677] = -minval;
	}
	else
		pEta[3677] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3886] = minval;
		else
			pEta[3886] = -minval;
	}
	else
		pEta[3886] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4021] = minval;
		else
			pEta[4021] = -minval;
	}
	else
		pEta[4021] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4289] = minval;
		else
			pEta[4289] = -minval;
	}
	else
		pEta[4289] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 267     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[11] + pEtaPrev[47];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[180] + pEtaPrev[721];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[197] + pEtaPrev[789];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[252] + pEtaPrev[1009];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[267] + pEtaPrev[1071];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[402] + pEtaPrev[1609];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[442] + pEtaPrev[1769];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[469] + pEtaPrev[1877];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[523] + pEtaPrev[2095];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[659] + pEtaPrev[2637];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[708] + pEtaPrev[2833];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[740] + pEtaPrev[2961];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[779] + pEtaPrev[3095];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[971] + pEtaPrev[3554];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1013] + pEtaPrev[3680];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1168] + pEtaPrev[3889];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1213] + pEtaPrev[4024];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1291] + pEtaPrev[4295];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[47] = minval;
		else
			pEta[47] = -minval;
	}
	else
		pEta[47] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[721] = minval;
		else
			pEta[721] = -minval;
	}
	else
		pEta[721] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[789] = minval;
		else
			pEta[789] = -minval;
	}
	else
		pEta[789] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1009] = minval;
		else
			pEta[1009] = -minval;
	}
	else
		pEta[1009] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1071] = minval;
		else
			pEta[1071] = -minval;
	}
	else
		pEta[1071] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1609] = minval;
		else
			pEta[1609] = -minval;
	}
	else
		pEta[1609] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1769] = minval;
		else
			pEta[1769] = -minval;
	}
	else
		pEta[1769] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1877] = minval;
		else
			pEta[1877] = -minval;
	}
	else
		pEta[1877] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2095] = minval;
		else
			pEta[2095] = -minval;
	}
	else
		pEta[2095] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2637] = minval;
		else
			pEta[2637] = -minval;
	}
	else
		pEta[2637] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2833] = minval;
		else
			pEta[2833] = -minval;
	}
	else
		pEta[2833] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2961] = minval;
		else
			pEta[2961] = -minval;
	}
	else
		pEta[2961] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3095] = minval;
		else
			pEta[3095] = -minval;
	}
	else
		pEta[3095] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3554] = minval;
		else
			pEta[3554] = -minval;
	}
	else
		pEta[3554] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3680] = minval;
		else
			pEta[3680] = -minval;
	}
	else
		pEta[3680] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3889] = minval;
		else
			pEta[3889] = -minval;
	}
	else
		pEta[3889] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4024] = minval;
		else
			pEta[4024] = -minval;
	}
	else
		pEta[4024] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4295] = minval;
		else
			pEta[4295] = -minval;
	}
	else
		pEta[4295] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 268     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[12] + pEtaPrev[51];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[181] + pEtaPrev[725];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[198] + pEtaPrev[793];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[253] + pEtaPrev[1013];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[268] + pEtaPrev[1075];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[403] + pEtaPrev[1613];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[443] + pEtaPrev[1773];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[470] + pEtaPrev[1881];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[524] + pEtaPrev[2099];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[660] + pEtaPrev[2641];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[709] + pEtaPrev[2837];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[741] + pEtaPrev[2965];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[780] + pEtaPrev[3097];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[972] + pEtaPrev[3557];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1014] + pEtaPrev[3683];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1169] + pEtaPrev[3892];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1214] + pEtaPrev[4027];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1292] + pEtaPrev[4301];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[51] = minval;
		else
			pEta[51] = -minval;
	}
	else
		pEta[51] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[725] = minval;
		else
			pEta[725] = -minval;
	}
	else
		pEta[725] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[793] = minval;
		else
			pEta[793] = -minval;
	}
	else
		pEta[793] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1013] = minval;
		else
			pEta[1013] = -minval;
	}
	else
		pEta[1013] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1075] = minval;
		else
			pEta[1075] = -minval;
	}
	else
		pEta[1075] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1613] = minval;
		else
			pEta[1613] = -minval;
	}
	else
		pEta[1613] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1773] = minval;
		else
			pEta[1773] = -minval;
	}
	else
		pEta[1773] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1881] = minval;
		else
			pEta[1881] = -minval;
	}
	else
		pEta[1881] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2099] = minval;
		else
			pEta[2099] = -minval;
	}
	else
		pEta[2099] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2641] = minval;
		else
			pEta[2641] = -minval;
	}
	else
		pEta[2641] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2837] = minval;
		else
			pEta[2837] = -minval;
	}
	else
		pEta[2837] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2965] = minval;
		else
			pEta[2965] = -minval;
	}
	else
		pEta[2965] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3097] = minval;
		else
			pEta[3097] = -minval;
	}
	else
		pEta[3097] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3557] = minval;
		else
			pEta[3557] = -minval;
	}
	else
		pEta[3557] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3683] = minval;
		else
			pEta[3683] = -minval;
	}
	else
		pEta[3683] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3892] = minval;
		else
			pEta[3892] = -minval;
	}
	else
		pEta[3892] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4027] = minval;
		else
			pEta[4027] = -minval;
	}
	else
		pEta[4027] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4301] = minval;
		else
			pEta[4301] = -minval;
	}
	else
		pEta[4301] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 269     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[13] + pEtaPrev[55];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[182] + pEtaPrev[729];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[199] + pEtaPrev[797];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[254] + pEtaPrev[1017];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[269] + pEtaPrev[1079];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[404] + pEtaPrev[1617];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[444] + pEtaPrev[1777];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[471] + pEtaPrev[1885];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[525] + pEtaPrev[2103];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[661] + pEtaPrev[2645];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[710] + pEtaPrev[2841];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[742] + pEtaPrev[2969];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[781] + pEtaPrev[3099];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[973] + pEtaPrev[3560];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1015] + pEtaPrev[3686];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1170] + pEtaPrev[3895];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1215] + pEtaPrev[4030];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1293] + pEtaPrev[4307];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[55] = minval;
		else
			pEta[55] = -minval;
	}
	else
		pEta[55] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[729] = minval;
		else
			pEta[729] = -minval;
	}
	else
		pEta[729] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[797] = minval;
		else
			pEta[797] = -minval;
	}
	else
		pEta[797] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1017] = minval;
		else
			pEta[1017] = -minval;
	}
	else
		pEta[1017] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1079] = minval;
		else
			pEta[1079] = -minval;
	}
	else
		pEta[1079] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1617] = minval;
		else
			pEta[1617] = -minval;
	}
	else
		pEta[1617] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1777] = minval;
		else
			pEta[1777] = -minval;
	}
	else
		pEta[1777] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1885] = minval;
		else
			pEta[1885] = -minval;
	}
	else
		pEta[1885] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2103] = minval;
		else
			pEta[2103] = -minval;
	}
	else
		pEta[2103] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2645] = minval;
		else
			pEta[2645] = -minval;
	}
	else
		pEta[2645] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2841] = minval;
		else
			pEta[2841] = -minval;
	}
	else
		pEta[2841] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2969] = minval;
		else
			pEta[2969] = -minval;
	}
	else
		pEta[2969] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3099] = minval;
		else
			pEta[3099] = -minval;
	}
	else
		pEta[3099] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3560] = minval;
		else
			pEta[3560] = -minval;
	}
	else
		pEta[3560] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3686] = minval;
		else
			pEta[3686] = -minval;
	}
	else
		pEta[3686] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3895] = minval;
		else
			pEta[3895] = -minval;
	}
	else
		pEta[3895] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4030] = minval;
		else
			pEta[4030] = -minval;
	}
	else
		pEta[4030] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4307] = minval;
		else
			pEta[4307] = -minval;
	}
	else
		pEta[4307] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 270     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[14] + pEtaPrev[59];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[183] + pEtaPrev[733];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[200] + pEtaPrev[801];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[255] + pEtaPrev[1021];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[270] + pEtaPrev[1083];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[405] + pEtaPrev[1621];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[445] + pEtaPrev[1781];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[472] + pEtaPrev[1889];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[526] + pEtaPrev[2107];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[662] + pEtaPrev[2649];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[711] + pEtaPrev[2845];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[743] + pEtaPrev[2973];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[782] + pEtaPrev[3101];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[974] + pEtaPrev[3563];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1016] + pEtaPrev[3689];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1171] + pEtaPrev[3898];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1184] + pEtaPrev[3937];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1294] + pEtaPrev[4313];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[59] = minval;
		else
			pEta[59] = -minval;
	}
	else
		pEta[59] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[733] = minval;
		else
			pEta[733] = -minval;
	}
	else
		pEta[733] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[801] = minval;
		else
			pEta[801] = -minval;
	}
	else
		pEta[801] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1021] = minval;
		else
			pEta[1021] = -minval;
	}
	else
		pEta[1021] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1083] = minval;
		else
			pEta[1083] = -minval;
	}
	else
		pEta[1083] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1621] = minval;
		else
			pEta[1621] = -minval;
	}
	else
		pEta[1621] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1781] = minval;
		else
			pEta[1781] = -minval;
	}
	else
		pEta[1781] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1889] = minval;
		else
			pEta[1889] = -minval;
	}
	else
		pEta[1889] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2107] = minval;
		else
			pEta[2107] = -minval;
	}
	else
		pEta[2107] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2649] = minval;
		else
			pEta[2649] = -minval;
	}
	else
		pEta[2649] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2845] = minval;
		else
			pEta[2845] = -minval;
	}
	else
		pEta[2845] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2973] = minval;
		else
			pEta[2973] = -minval;
	}
	else
		pEta[2973] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3101] = minval;
		else
			pEta[3101] = -minval;
	}
	else
		pEta[3101] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3563] = minval;
		else
			pEta[3563] = -minval;
	}
	else
		pEta[3563] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3689] = minval;
		else
			pEta[3689] = -minval;
	}
	else
		pEta[3689] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3898] = minval;
		else
			pEta[3898] = -minval;
	}
	else
		pEta[3898] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3937] = minval;
		else
			pEta[3937] = -minval;
	}
	else
		pEta[3937] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4313] = minval;
		else
			pEta[4313] = -minval;
	}
	else
		pEta[4313] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 271     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[15] + pEtaPrev[63];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[184] + pEtaPrev[737];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[201] + pEtaPrev[805];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[224] + pEtaPrev[897];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[271] + pEtaPrev[1087];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[406] + pEtaPrev[1625];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[446] + pEtaPrev[1785];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[473] + pEtaPrev[1893];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[527] + pEtaPrev[2111];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[663] + pEtaPrev[2653];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[712] + pEtaPrev[2849];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[744] + pEtaPrev[2977];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[783] + pEtaPrev[3103];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[975] + pEtaPrev[3566];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1017] + pEtaPrev[3692];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1172] + pEtaPrev[3901];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1185] + pEtaPrev[3940];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1295] + pEtaPrev[4319];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[63] = minval;
		else
			pEta[63] = -minval;
	}
	else
		pEta[63] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[737] = minval;
		else
			pEta[737] = -minval;
	}
	else
		pEta[737] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[805] = minval;
		else
			pEta[805] = -minval;
	}
	else
		pEta[805] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[897] = minval;
		else
			pEta[897] = -minval;
	}
	else
		pEta[897] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1087] = minval;
		else
			pEta[1087] = -minval;
	}
	else
		pEta[1087] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1625] = minval;
		else
			pEta[1625] = -minval;
	}
	else
		pEta[1625] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1785] = minval;
		else
			pEta[1785] = -minval;
	}
	else
		pEta[1785] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1893] = minval;
		else
			pEta[1893] = -minval;
	}
	else
		pEta[1893] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2111] = minval;
		else
			pEta[2111] = -minval;
	}
	else
		pEta[2111] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2653] = minval;
		else
			pEta[2653] = -minval;
	}
	else
		pEta[2653] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2849] = minval;
		else
			pEta[2849] = -minval;
	}
	else
		pEta[2849] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2977] = minval;
		else
			pEta[2977] = -minval;
	}
	else
		pEta[2977] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3103] = minval;
		else
			pEta[3103] = -minval;
	}
	else
		pEta[3103] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3566] = minval;
		else
			pEta[3566] = -minval;
	}
	else
		pEta[3566] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3692] = minval;
		else
			pEta[3692] = -minval;
	}
	else
		pEta[3692] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3901] = minval;
		else
			pEta[3901] = -minval;
	}
	else
		pEta[3901] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3940] = minval;
		else
			pEta[3940] = -minval;
	}
	else
		pEta[3940] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4319] = minval;
		else
			pEta[4319] = -minval;
	}
	else
		pEta[4319] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 272     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[16] + pEtaPrev[67];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[185] + pEtaPrev[741];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[202] + pEtaPrev[809];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[225] + pEtaPrev[901];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[272] + pEtaPrev[1091];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[407] + pEtaPrev[1629];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[447] + pEtaPrev[1789];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[474] + pEtaPrev[1897];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[528] + pEtaPrev[2115];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[664] + pEtaPrev[2657];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[713] + pEtaPrev[2853];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[745] + pEtaPrev[2981];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[784] + pEtaPrev[3105];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[976] + pEtaPrev[3569];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1018] + pEtaPrev[3695];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1173] + pEtaPrev[3904];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1186] + pEtaPrev[3943];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1296] + pEtaPrev[4325];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[67] = minval;
		else
			pEta[67] = -minval;
	}
	else
		pEta[67] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[741] = minval;
		else
			pEta[741] = -minval;
	}
	else
		pEta[741] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[809] = minval;
		else
			pEta[809] = -minval;
	}
	else
		pEta[809] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[901] = minval;
		else
			pEta[901] = -minval;
	}
	else
		pEta[901] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1091] = minval;
		else
			pEta[1091] = -minval;
	}
	else
		pEta[1091] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1629] = minval;
		else
			pEta[1629] = -minval;
	}
	else
		pEta[1629] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1789] = minval;
		else
			pEta[1789] = -minval;
	}
	else
		pEta[1789] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1897] = minval;
		else
			pEta[1897] = -minval;
	}
	else
		pEta[1897] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2115] = minval;
		else
			pEta[2115] = -minval;
	}
	else
		pEta[2115] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2657] = minval;
		else
			pEta[2657] = -minval;
	}
	else
		pEta[2657] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2853] = minval;
		else
			pEta[2853] = -minval;
	}
	else
		pEta[2853] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2981] = minval;
		else
			pEta[2981] = -minval;
	}
	else
		pEta[2981] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3105] = minval;
		else
			pEta[3105] = -minval;
	}
	else
		pEta[3105] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3569] = minval;
		else
			pEta[3569] = -minval;
	}
	else
		pEta[3569] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3695] = minval;
		else
			pEta[3695] = -minval;
	}
	else
		pEta[3695] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3904] = minval;
		else
			pEta[3904] = -minval;
	}
	else
		pEta[3904] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3943] = minval;
		else
			pEta[3943] = -minval;
	}
	else
		pEta[3943] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4325] = minval;
		else
			pEta[4325] = -minval;
	}
	else
		pEta[4325] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 273     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[17] + pEtaPrev[71];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[186] + pEtaPrev[745];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[203] + pEtaPrev[813];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[226] + pEtaPrev[905];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[273] + pEtaPrev[1095];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[408] + pEtaPrev[1633];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[416] + pEtaPrev[1665];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[475] + pEtaPrev[1901];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[529] + pEtaPrev[2119];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[665] + pEtaPrev[2661];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[714] + pEtaPrev[2857];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[746] + pEtaPrev[2985];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[785] + pEtaPrev[3107];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[977] + pEtaPrev[3572];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1019] + pEtaPrev[3698];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1174] + pEtaPrev[3907];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1187] + pEtaPrev[3946];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1297] + pEtaPrev[4331];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[71] = minval;
		else
			pEta[71] = -minval;
	}
	else
		pEta[71] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[745] = minval;
		else
			pEta[745] = -minval;
	}
	else
		pEta[745] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[813] = minval;
		else
			pEta[813] = -minval;
	}
	else
		pEta[813] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[905] = minval;
		else
			pEta[905] = -minval;
	}
	else
		pEta[905] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1095] = minval;
		else
			pEta[1095] = -minval;
	}
	else
		pEta[1095] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1633] = minval;
		else
			pEta[1633] = -minval;
	}
	else
		pEta[1633] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1665] = minval;
		else
			pEta[1665] = -minval;
	}
	else
		pEta[1665] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1901] = minval;
		else
			pEta[1901] = -minval;
	}
	else
		pEta[1901] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2119] = minval;
		else
			pEta[2119] = -minval;
	}
	else
		pEta[2119] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2661] = minval;
		else
			pEta[2661] = -minval;
	}
	else
		pEta[2661] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2857] = minval;
		else
			pEta[2857] = -minval;
	}
	else
		pEta[2857] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2985] = minval;
		else
			pEta[2985] = -minval;
	}
	else
		pEta[2985] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3107] = minval;
		else
			pEta[3107] = -minval;
	}
	else
		pEta[3107] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3572] = minval;
		else
			pEta[3572] = -minval;
	}
	else
		pEta[3572] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3698] = minval;
		else
			pEta[3698] = -minval;
	}
	else
		pEta[3698] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3907] = minval;
		else
			pEta[3907] = -minval;
	}
	else
		pEta[3907] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3946] = minval;
		else
			pEta[3946] = -minval;
	}
	else
		pEta[3946] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4331] = minval;
		else
			pEta[4331] = -minval;
	}
	else
		pEta[4331] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 274     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[18] + pEtaPrev[75];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[187] + pEtaPrev[749];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[204] + pEtaPrev[817];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[227] + pEtaPrev[909];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[274] + pEtaPrev[1099];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[409] + pEtaPrev[1637];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[417] + pEtaPrev[1669];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[476] + pEtaPrev[1905];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[530] + pEtaPrev[2123];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[666] + pEtaPrev[2665];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[715] + pEtaPrev[2861];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[747] + pEtaPrev[2989];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[786] + pEtaPrev[3109];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[978] + pEtaPrev[3575];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1020] + pEtaPrev[3701];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1175] + pEtaPrev[3910];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1188] + pEtaPrev[3949];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1298] + pEtaPrev[4337];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[75] = minval;
		else
			pEta[75] = -minval;
	}
	else
		pEta[75] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[749] = minval;
		else
			pEta[749] = -minval;
	}
	else
		pEta[749] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[817] = minval;
		else
			pEta[817] = -minval;
	}
	else
		pEta[817] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[909] = minval;
		else
			pEta[909] = -minval;
	}
	else
		pEta[909] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1099] = minval;
		else
			pEta[1099] = -minval;
	}
	else
		pEta[1099] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1637] = minval;
		else
			pEta[1637] = -minval;
	}
	else
		pEta[1637] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1669] = minval;
		else
			pEta[1669] = -minval;
	}
	else
		pEta[1669] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1905] = minval;
		else
			pEta[1905] = -minval;
	}
	else
		pEta[1905] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2123] = minval;
		else
			pEta[2123] = -minval;
	}
	else
		pEta[2123] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2665] = minval;
		else
			pEta[2665] = -minval;
	}
	else
		pEta[2665] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2861] = minval;
		else
			pEta[2861] = -minval;
	}
	else
		pEta[2861] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2989] = minval;
		else
			pEta[2989] = -minval;
	}
	else
		pEta[2989] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3109] = minval;
		else
			pEta[3109] = -minval;
	}
	else
		pEta[3109] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3575] = minval;
		else
			pEta[3575] = -minval;
	}
	else
		pEta[3575] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3701] = minval;
		else
			pEta[3701] = -minval;
	}
	else
		pEta[3701] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3910] = minval;
		else
			pEta[3910] = -minval;
	}
	else
		pEta[3910] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3949] = minval;
		else
			pEta[3949] = -minval;
	}
	else
		pEta[3949] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4337] = minval;
		else
			pEta[4337] = -minval;
	}
	else
		pEta[4337] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 275     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[19] + pEtaPrev[79];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[188] + pEtaPrev[753];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[205] + pEtaPrev[821];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[228] + pEtaPrev[913];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[275] + pEtaPrev[1103];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[410] + pEtaPrev[1641];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[418] + pEtaPrev[1673];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[477] + pEtaPrev[1909];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[531] + pEtaPrev[2127];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[667] + pEtaPrev[2669];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[716] + pEtaPrev[2865];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[748] + pEtaPrev[2993];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[787] + pEtaPrev[3111];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[979] + pEtaPrev[3578];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1021] + pEtaPrev[3704];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1176] + pEtaPrev[3913];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1189] + pEtaPrev[3952];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1299] + pEtaPrev[4343];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[79] = minval;
		else
			pEta[79] = -minval;
	}
	else
		pEta[79] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[753] = minval;
		else
			pEta[753] = -minval;
	}
	else
		pEta[753] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[821] = minval;
		else
			pEta[821] = -minval;
	}
	else
		pEta[821] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[913] = minval;
		else
			pEta[913] = -minval;
	}
	else
		pEta[913] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1103] = minval;
		else
			pEta[1103] = -minval;
	}
	else
		pEta[1103] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1641] = minval;
		else
			pEta[1641] = -minval;
	}
	else
		pEta[1641] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1673] = minval;
		else
			pEta[1673] = -minval;
	}
	else
		pEta[1673] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1909] = minval;
		else
			pEta[1909] = -minval;
	}
	else
		pEta[1909] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2127] = minval;
		else
			pEta[2127] = -minval;
	}
	else
		pEta[2127] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2669] = minval;
		else
			pEta[2669] = -minval;
	}
	else
		pEta[2669] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2865] = minval;
		else
			pEta[2865] = -minval;
	}
	else
		pEta[2865] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2993] = minval;
		else
			pEta[2993] = -minval;
	}
	else
		pEta[2993] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3111] = minval;
		else
			pEta[3111] = -minval;
	}
	else
		pEta[3111] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3578] = minval;
		else
			pEta[3578] = -minval;
	}
	else
		pEta[3578] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3704] = minval;
		else
			pEta[3704] = -minval;
	}
	else
		pEta[3704] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3913] = minval;
		else
			pEta[3913] = -minval;
	}
	else
		pEta[3913] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3952] = minval;
		else
			pEta[3952] = -minval;
	}
	else
		pEta[3952] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4343] = minval;
		else
			pEta[4343] = -minval;
	}
	else
		pEta[4343] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 276     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[20] + pEtaPrev[83];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[189] + pEtaPrev[757];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[206] + pEtaPrev[825];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[229] + pEtaPrev[917];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[276] + pEtaPrev[1107];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[411] + pEtaPrev[1645];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[419] + pEtaPrev[1677];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[478] + pEtaPrev[1913];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[532] + pEtaPrev[2131];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[668] + pEtaPrev[2673];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[717] + pEtaPrev[2869];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[749] + pEtaPrev[2997];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[788] + pEtaPrev[3113];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[980] + pEtaPrev[3581];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1022] + pEtaPrev[3707];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1177] + pEtaPrev[3916];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1190] + pEtaPrev[3955];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1300] + pEtaPrev[4349];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[83] = minval;
		else
			pEta[83] = -minval;
	}
	else
		pEta[83] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[757] = minval;
		else
			pEta[757] = -minval;
	}
	else
		pEta[757] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[825] = minval;
		else
			pEta[825] = -minval;
	}
	else
		pEta[825] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[917] = minval;
		else
			pEta[917] = -minval;
	}
	else
		pEta[917] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1107] = minval;
		else
			pEta[1107] = -minval;
	}
	else
		pEta[1107] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1645] = minval;
		else
			pEta[1645] = -minval;
	}
	else
		pEta[1645] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1677] = minval;
		else
			pEta[1677] = -minval;
	}
	else
		pEta[1677] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1913] = minval;
		else
			pEta[1913] = -minval;
	}
	else
		pEta[1913] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2131] = minval;
		else
			pEta[2131] = -minval;
	}
	else
		pEta[2131] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2673] = minval;
		else
			pEta[2673] = -minval;
	}
	else
		pEta[2673] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2869] = minval;
		else
			pEta[2869] = -minval;
	}
	else
		pEta[2869] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2997] = minval;
		else
			pEta[2997] = -minval;
	}
	else
		pEta[2997] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3113] = minval;
		else
			pEta[3113] = -minval;
	}
	else
		pEta[3113] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3581] = minval;
		else
			pEta[3581] = -minval;
	}
	else
		pEta[3581] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3707] = minval;
		else
			pEta[3707] = -minval;
	}
	else
		pEta[3707] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3916] = minval;
		else
			pEta[3916] = -minval;
	}
	else
		pEta[3916] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3955] = minval;
		else
			pEta[3955] = -minval;
	}
	else
		pEta[3955] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4349] = minval;
		else
			pEta[4349] = -minval;
	}
	else
		pEta[4349] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 277     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[21] + pEtaPrev[87];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[190] + pEtaPrev[761];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[207] + pEtaPrev[829];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[230] + pEtaPrev[921];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[277] + pEtaPrev[1111];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[412] + pEtaPrev[1649];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[420] + pEtaPrev[1681];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[479] + pEtaPrev[1917];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[533] + pEtaPrev[2135];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[669] + pEtaPrev[2677];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[718] + pEtaPrev[2873];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[750] + pEtaPrev[3001];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[789] + pEtaPrev[3115];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[981] + pEtaPrev[3584];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1023] + pEtaPrev[3710];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1178] + pEtaPrev[3919];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1191] + pEtaPrev[3958];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1301] + pEtaPrev[4355];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[87] = minval;
		else
			pEta[87] = -minval;
	}
	else
		pEta[87] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[761] = minval;
		else
			pEta[761] = -minval;
	}
	else
		pEta[761] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[829] = minval;
		else
			pEta[829] = -minval;
	}
	else
		pEta[829] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[921] = minval;
		else
			pEta[921] = -minval;
	}
	else
		pEta[921] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1111] = minval;
		else
			pEta[1111] = -minval;
	}
	else
		pEta[1111] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1649] = minval;
		else
			pEta[1649] = -minval;
	}
	else
		pEta[1649] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1681] = minval;
		else
			pEta[1681] = -minval;
	}
	else
		pEta[1681] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1917] = minval;
		else
			pEta[1917] = -minval;
	}
	else
		pEta[1917] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2135] = minval;
		else
			pEta[2135] = -minval;
	}
	else
		pEta[2135] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2677] = minval;
		else
			pEta[2677] = -minval;
	}
	else
		pEta[2677] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2873] = minval;
		else
			pEta[2873] = -minval;
	}
	else
		pEta[2873] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3001] = minval;
		else
			pEta[3001] = -minval;
	}
	else
		pEta[3001] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3115] = minval;
		else
			pEta[3115] = -minval;
	}
	else
		pEta[3115] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3584] = minval;
		else
			pEta[3584] = -minval;
	}
	else
		pEta[3584] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3710] = minval;
		else
			pEta[3710] = -minval;
	}
	else
		pEta[3710] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3919] = minval;
		else
			pEta[3919] = -minval;
	}
	else
		pEta[3919] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3958] = minval;
		else
			pEta[3958] = -minval;
	}
	else
		pEta[3958] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4355] = minval;
		else
			pEta[4355] = -minval;
	}
	else
		pEta[4355] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 278     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[22] + pEtaPrev[91];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[191] + pEtaPrev[765];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[208] + pEtaPrev[833];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[231] + pEtaPrev[925];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[278] + pEtaPrev[1115];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[413] + pEtaPrev[1653];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[421] + pEtaPrev[1685];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[448] + pEtaPrev[1793];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[534] + pEtaPrev[2139];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[670] + pEtaPrev[2681];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[719] + pEtaPrev[2877];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[751] + pEtaPrev[3005];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[790] + pEtaPrev[3117];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[982] + pEtaPrev[3587];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[992] + pEtaPrev[3617];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1179] + pEtaPrev[3922];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1192] + pEtaPrev[3961];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1302] + pEtaPrev[4361];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[91] = minval;
		else
			pEta[91] = -minval;
	}
	else
		pEta[91] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[765] = minval;
		else
			pEta[765] = -minval;
	}
	else
		pEta[765] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[833] = minval;
		else
			pEta[833] = -minval;
	}
	else
		pEta[833] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[925] = minval;
		else
			pEta[925] = -minval;
	}
	else
		pEta[925] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1115] = minval;
		else
			pEta[1115] = -minval;
	}
	else
		pEta[1115] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1653] = minval;
		else
			pEta[1653] = -minval;
	}
	else
		pEta[1653] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1685] = minval;
		else
			pEta[1685] = -minval;
	}
	else
		pEta[1685] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1793] = minval;
		else
			pEta[1793] = -minval;
	}
	else
		pEta[1793] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2139] = minval;
		else
			pEta[2139] = -minval;
	}
	else
		pEta[2139] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2681] = minval;
		else
			pEta[2681] = -minval;
	}
	else
		pEta[2681] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2877] = minval;
		else
			pEta[2877] = -minval;
	}
	else
		pEta[2877] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3005] = minval;
		else
			pEta[3005] = -minval;
	}
	else
		pEta[3005] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3117] = minval;
		else
			pEta[3117] = -minval;
	}
	else
		pEta[3117] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3587] = minval;
		else
			pEta[3587] = -minval;
	}
	else
		pEta[3587] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3617] = minval;
		else
			pEta[3617] = -minval;
	}
	else
		pEta[3617] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3922] = minval;
		else
			pEta[3922] = -minval;
	}
	else
		pEta[3922] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3961] = minval;
		else
			pEta[3961] = -minval;
	}
	else
		pEta[3961] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4361] = minval;
		else
			pEta[4361] = -minval;
	}
	else
		pEta[4361] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 279     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[23] + pEtaPrev[95];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[160] + pEtaPrev[641];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[209] + pEtaPrev[837];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[232] + pEtaPrev[929];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[279] + pEtaPrev[1119];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[414] + pEtaPrev[1657];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[422] + pEtaPrev[1689];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[449] + pEtaPrev[1797];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[535] + pEtaPrev[2143];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[671] + pEtaPrev[2685];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[720] + pEtaPrev[2881];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[752] + pEtaPrev[3009];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[791] + pEtaPrev[3119];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[983] + pEtaPrev[3590];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[993] + pEtaPrev[3620];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1180] + pEtaPrev[3925];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1193] + pEtaPrev[3964];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1303] + pEtaPrev[4367];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[95] = minval;
		else
			pEta[95] = -minval;
	}
	else
		pEta[95] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[641] = minval;
		else
			pEta[641] = -minval;
	}
	else
		pEta[641] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[837] = minval;
		else
			pEta[837] = -minval;
	}
	else
		pEta[837] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[929] = minval;
		else
			pEta[929] = -minval;
	}
	else
		pEta[929] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1119] = minval;
		else
			pEta[1119] = -minval;
	}
	else
		pEta[1119] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1657] = minval;
		else
			pEta[1657] = -minval;
	}
	else
		pEta[1657] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1689] = minval;
		else
			pEta[1689] = -minval;
	}
	else
		pEta[1689] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1797] = minval;
		else
			pEta[1797] = -minval;
	}
	else
		pEta[1797] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2143] = minval;
		else
			pEta[2143] = -minval;
	}
	else
		pEta[2143] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2685] = minval;
		else
			pEta[2685] = -minval;
	}
	else
		pEta[2685] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2881] = minval;
		else
			pEta[2881] = -minval;
	}
	else
		pEta[2881] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3009] = minval;
		else
			pEta[3009] = -minval;
	}
	else
		pEta[3009] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3119] = minval;
		else
			pEta[3119] = -minval;
	}
	else
		pEta[3119] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3590] = minval;
		else
			pEta[3590] = -minval;
	}
	else
		pEta[3590] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3620] = minval;
		else
			pEta[3620] = -minval;
	}
	else
		pEta[3620] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3925] = minval;
		else
			pEta[3925] = -minval;
	}
	else
		pEta[3925] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3964] = minval;
		else
			pEta[3964] = -minval;
	}
	else
		pEta[3964] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4367] = minval;
		else
			pEta[4367] = -minval;
	}
	else
		pEta[4367] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 280     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[24] + pEtaPrev[99];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[161] + pEtaPrev[645];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[210] + pEtaPrev[841];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[233] + pEtaPrev[933];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[280] + pEtaPrev[1123];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[415] + pEtaPrev[1661];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[423] + pEtaPrev[1693];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[450] + pEtaPrev[1801];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[536] + pEtaPrev[2147];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[640] + pEtaPrev[2561];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[721] + pEtaPrev[2885];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[753] + pEtaPrev[3013];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[792] + pEtaPrev[3121];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[984] + pEtaPrev[3593];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[994] + pEtaPrev[3623];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1181] + pEtaPrev[3928];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1194] + pEtaPrev[3967];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1304] + pEtaPrev[4373];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[99] = minval;
		else
			pEta[99] = -minval;
	}
	else
		pEta[99] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[645] = minval;
		else
			pEta[645] = -minval;
	}
	else
		pEta[645] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[841] = minval;
		else
			pEta[841] = -minval;
	}
	else
		pEta[841] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[933] = minval;
		else
			pEta[933] = -minval;
	}
	else
		pEta[933] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1123] = minval;
		else
			pEta[1123] = -minval;
	}
	else
		pEta[1123] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1661] = minval;
		else
			pEta[1661] = -minval;
	}
	else
		pEta[1661] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1693] = minval;
		else
			pEta[1693] = -minval;
	}
	else
		pEta[1693] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1801] = minval;
		else
			pEta[1801] = -minval;
	}
	else
		pEta[1801] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2147] = minval;
		else
			pEta[2147] = -minval;
	}
	else
		pEta[2147] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2561] = minval;
		else
			pEta[2561] = -minval;
	}
	else
		pEta[2561] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2885] = minval;
		else
			pEta[2885] = -minval;
	}
	else
		pEta[2885] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3013] = minval;
		else
			pEta[3013] = -minval;
	}
	else
		pEta[3013] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3121] = minval;
		else
			pEta[3121] = -minval;
	}
	else
		pEta[3121] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3593] = minval;
		else
			pEta[3593] = -minval;
	}
	else
		pEta[3593] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3623] = minval;
		else
			pEta[3623] = -minval;
	}
	else
		pEta[3623] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3928] = minval;
		else
			pEta[3928] = -minval;
	}
	else
		pEta[3928] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3967] = minval;
		else
			pEta[3967] = -minval;
	}
	else
		pEta[3967] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4373] = minval;
		else
			pEta[4373] = -minval;
	}
	else
		pEta[4373] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 281     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[25] + pEtaPrev[103];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[162] + pEtaPrev[649];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[211] + pEtaPrev[845];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[234] + pEtaPrev[937];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[281] + pEtaPrev[1127];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[384] + pEtaPrev[1537];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[424] + pEtaPrev[1697];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[451] + pEtaPrev[1805];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[537] + pEtaPrev[2151];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[641] + pEtaPrev[2565];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[722] + pEtaPrev[2889];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[754] + pEtaPrev[3017];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[793] + pEtaPrev[3123];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[985] + pEtaPrev[3596];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[995] + pEtaPrev[3626];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1182] + pEtaPrev[3931];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1195] + pEtaPrev[3970];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1305] + pEtaPrev[4379];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[103] = minval;
		else
			pEta[103] = -minval;
	}
	else
		pEta[103] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[649] = minval;
		else
			pEta[649] = -minval;
	}
	else
		pEta[649] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[845] = minval;
		else
			pEta[845] = -minval;
	}
	else
		pEta[845] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[937] = minval;
		else
			pEta[937] = -minval;
	}
	else
		pEta[937] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1127] = minval;
		else
			pEta[1127] = -minval;
	}
	else
		pEta[1127] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1537] = minval;
		else
			pEta[1537] = -minval;
	}
	else
		pEta[1537] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1697] = minval;
		else
			pEta[1697] = -minval;
	}
	else
		pEta[1697] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1805] = minval;
		else
			pEta[1805] = -minval;
	}
	else
		pEta[1805] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2151] = minval;
		else
			pEta[2151] = -minval;
	}
	else
		pEta[2151] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2565] = minval;
		else
			pEta[2565] = -minval;
	}
	else
		pEta[2565] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2889] = minval;
		else
			pEta[2889] = -minval;
	}
	else
		pEta[2889] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3017] = minval;
		else
			pEta[3017] = -minval;
	}
	else
		pEta[3017] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3123] = minval;
		else
			pEta[3123] = -minval;
	}
	else
		pEta[3123] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3596] = minval;
		else
			pEta[3596] = -minval;
	}
	else
		pEta[3596] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3626] = minval;
		else
			pEta[3626] = -minval;
	}
	else
		pEta[3626] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3931] = minval;
		else
			pEta[3931] = -minval;
	}
	else
		pEta[3931] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3970] = minval;
		else
			pEta[3970] = -minval;
	}
	else
		pEta[3970] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4379] = minval;
		else
			pEta[4379] = -minval;
	}
	else
		pEta[4379] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 282     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[26] + pEtaPrev[107];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[163] + pEtaPrev[653];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[212] + pEtaPrev[849];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[235] + pEtaPrev[941];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[282] + pEtaPrev[1131];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[385] + pEtaPrev[1541];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[425] + pEtaPrev[1701];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[452] + pEtaPrev[1809];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[538] + pEtaPrev[2155];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[642] + pEtaPrev[2569];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[723] + pEtaPrev[2893];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[755] + pEtaPrev[3021];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[794] + pEtaPrev[3125];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[986] + pEtaPrev[3599];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[996] + pEtaPrev[3629];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1183] + pEtaPrev[3934];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1196] + pEtaPrev[3973];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1306] + pEtaPrev[4385];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[107] = minval;
		else
			pEta[107] = -minval;
	}
	else
		pEta[107] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[653] = minval;
		else
			pEta[653] = -minval;
	}
	else
		pEta[653] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[849] = minval;
		else
			pEta[849] = -minval;
	}
	else
		pEta[849] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[941] = minval;
		else
			pEta[941] = -minval;
	}
	else
		pEta[941] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1131] = minval;
		else
			pEta[1131] = -minval;
	}
	else
		pEta[1131] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1541] = minval;
		else
			pEta[1541] = -minval;
	}
	else
		pEta[1541] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1701] = minval;
		else
			pEta[1701] = -minval;
	}
	else
		pEta[1701] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1809] = minval;
		else
			pEta[1809] = -minval;
	}
	else
		pEta[1809] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2155] = minval;
		else
			pEta[2155] = -minval;
	}
	else
		pEta[2155] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2569] = minval;
		else
			pEta[2569] = -minval;
	}
	else
		pEta[2569] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2893] = minval;
		else
			pEta[2893] = -minval;
	}
	else
		pEta[2893] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3021] = minval;
		else
			pEta[3021] = -minval;
	}
	else
		pEta[3021] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3125] = minval;
		else
			pEta[3125] = -minval;
	}
	else
		pEta[3125] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3599] = minval;
		else
			pEta[3599] = -minval;
	}
	else
		pEta[3599] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3629] = minval;
		else
			pEta[3629] = -minval;
	}
	else
		pEta[3629] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3934] = minval;
		else
			pEta[3934] = -minval;
	}
	else
		pEta[3934] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3973] = minval;
		else
			pEta[3973] = -minval;
	}
	else
		pEta[3973] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4385] = minval;
		else
			pEta[4385] = -minval;
	}
	else
		pEta[4385] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 283     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[27] + pEtaPrev[111];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[164] + pEtaPrev[657];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[213] + pEtaPrev[853];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[236] + pEtaPrev[945];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[283] + pEtaPrev[1135];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[386] + pEtaPrev[1545];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[426] + pEtaPrev[1705];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[453] + pEtaPrev[1813];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[539] + pEtaPrev[2159];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[643] + pEtaPrev[2573];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[724] + pEtaPrev[2897];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[756] + pEtaPrev[3025];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[795] + pEtaPrev[3127];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[987] + pEtaPrev[3602];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[997] + pEtaPrev[3632];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1152] + pEtaPrev[3841];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1197] + pEtaPrev[3976];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1307] + pEtaPrev[4391];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[111] = minval;
		else
			pEta[111] = -minval;
	}
	else
		pEta[111] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[657] = minval;
		else
			pEta[657] = -minval;
	}
	else
		pEta[657] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[853] = minval;
		else
			pEta[853] = -minval;
	}
	else
		pEta[853] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[945] = minval;
		else
			pEta[945] = -minval;
	}
	else
		pEta[945] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1135] = minval;
		else
			pEta[1135] = -minval;
	}
	else
		pEta[1135] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1545] = minval;
		else
			pEta[1545] = -minval;
	}
	else
		pEta[1545] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1705] = minval;
		else
			pEta[1705] = -minval;
	}
	else
		pEta[1705] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1813] = minval;
		else
			pEta[1813] = -minval;
	}
	else
		pEta[1813] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2159] = minval;
		else
			pEta[2159] = -minval;
	}
	else
		pEta[2159] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2573] = minval;
		else
			pEta[2573] = -minval;
	}
	else
		pEta[2573] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2897] = minval;
		else
			pEta[2897] = -minval;
	}
	else
		pEta[2897] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3025] = minval;
		else
			pEta[3025] = -minval;
	}
	else
		pEta[3025] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3127] = minval;
		else
			pEta[3127] = -minval;
	}
	else
		pEta[3127] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3602] = minval;
		else
			pEta[3602] = -minval;
	}
	else
		pEta[3602] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3632] = minval;
		else
			pEta[3632] = -minval;
	}
	else
		pEta[3632] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3841] = minval;
		else
			pEta[3841] = -minval;
	}
	else
		pEta[3841] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3976] = minval;
		else
			pEta[3976] = -minval;
	}
	else
		pEta[3976] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4391] = minval;
		else
			pEta[4391] = -minval;
	}
	else
		pEta[4391] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 284     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[28] + pEtaPrev[115];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[165] + pEtaPrev[661];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[214] + pEtaPrev[857];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[237] + pEtaPrev[949];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[284] + pEtaPrev[1139];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[387] + pEtaPrev[1549];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[427] + pEtaPrev[1709];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[454] + pEtaPrev[1817];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[540] + pEtaPrev[2163];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[644] + pEtaPrev[2577];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[725] + pEtaPrev[2901];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[757] + pEtaPrev[3029];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[796] + pEtaPrev[3129];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[988] + pEtaPrev[3605];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[998] + pEtaPrev[3635];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1153] + pEtaPrev[3844];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1198] + pEtaPrev[3979];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1308] + pEtaPrev[4397];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[115] = minval;
		else
			pEta[115] = -minval;
	}
	else
		pEta[115] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[661] = minval;
		else
			pEta[661] = -minval;
	}
	else
		pEta[661] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[857] = minval;
		else
			pEta[857] = -minval;
	}
	else
		pEta[857] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[949] = minval;
		else
			pEta[949] = -minval;
	}
	else
		pEta[949] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1139] = minval;
		else
			pEta[1139] = -minval;
	}
	else
		pEta[1139] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1549] = minval;
		else
			pEta[1549] = -minval;
	}
	else
		pEta[1549] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1709] = minval;
		else
			pEta[1709] = -minval;
	}
	else
		pEta[1709] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1817] = minval;
		else
			pEta[1817] = -minval;
	}
	else
		pEta[1817] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2163] = minval;
		else
			pEta[2163] = -minval;
	}
	else
		pEta[2163] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2577] = minval;
		else
			pEta[2577] = -minval;
	}
	else
		pEta[2577] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2901] = minval;
		else
			pEta[2901] = -minval;
	}
	else
		pEta[2901] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3029] = minval;
		else
			pEta[3029] = -minval;
	}
	else
		pEta[3029] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3129] = minval;
		else
			pEta[3129] = -minval;
	}
	else
		pEta[3129] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3605] = minval;
		else
			pEta[3605] = -minval;
	}
	else
		pEta[3605] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3635] = minval;
		else
			pEta[3635] = -minval;
	}
	else
		pEta[3635] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3844] = minval;
		else
			pEta[3844] = -minval;
	}
	else
		pEta[3844] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3979] = minval;
		else
			pEta[3979] = -minval;
	}
	else
		pEta[3979] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4397] = minval;
		else
			pEta[4397] = -minval;
	}
	else
		pEta[4397] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 285     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[29] + pEtaPrev[119];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[166] + pEtaPrev[665];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[215] + pEtaPrev[861];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[238] + pEtaPrev[953];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[285] + pEtaPrev[1143];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[388] + pEtaPrev[1553];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[428] + pEtaPrev[1713];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[455] + pEtaPrev[1821];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[541] + pEtaPrev[2167];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[645] + pEtaPrev[2581];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[726] + pEtaPrev[2905];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[758] + pEtaPrev[3033];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[797] + pEtaPrev[3131];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[989] + pEtaPrev[3608];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[999] + pEtaPrev[3638];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1154] + pEtaPrev[3847];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1199] + pEtaPrev[3982];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1309] + pEtaPrev[4403];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[119] = minval;
		else
			pEta[119] = -minval;
	}
	else
		pEta[119] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[665] = minval;
		else
			pEta[665] = -minval;
	}
	else
		pEta[665] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[861] = minval;
		else
			pEta[861] = -minval;
	}
	else
		pEta[861] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[953] = minval;
		else
			pEta[953] = -minval;
	}
	else
		pEta[953] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1143] = minval;
		else
			pEta[1143] = -minval;
	}
	else
		pEta[1143] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1553] = minval;
		else
			pEta[1553] = -minval;
	}
	else
		pEta[1553] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1713] = minval;
		else
			pEta[1713] = -minval;
	}
	else
		pEta[1713] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1821] = minval;
		else
			pEta[1821] = -minval;
	}
	else
		pEta[1821] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2167] = minval;
		else
			pEta[2167] = -minval;
	}
	else
		pEta[2167] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2581] = minval;
		else
			pEta[2581] = -minval;
	}
	else
		pEta[2581] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2905] = minval;
		else
			pEta[2905] = -minval;
	}
	else
		pEta[2905] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3033] = minval;
		else
			pEta[3033] = -minval;
	}
	else
		pEta[3033] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3131] = minval;
		else
			pEta[3131] = -minval;
	}
	else
		pEta[3131] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3608] = minval;
		else
			pEta[3608] = -minval;
	}
	else
		pEta[3608] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3638] = minval;
		else
			pEta[3638] = -minval;
	}
	else
		pEta[3638] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3847] = minval;
		else
			pEta[3847] = -minval;
	}
	else
		pEta[3847] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3982] = minval;
		else
			pEta[3982] = -minval;
	}
	else
		pEta[3982] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4403] = minval;
		else
			pEta[4403] = -minval;
	}
	else
		pEta[4403] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 286     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[30] + pEtaPrev[123];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[167] + pEtaPrev[669];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[216] + pEtaPrev[865];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[239] + pEtaPrev[957];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[286] + pEtaPrev[1147];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[389] + pEtaPrev[1557];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[429] + pEtaPrev[1717];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[456] + pEtaPrev[1825];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[542] + pEtaPrev[2171];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[646] + pEtaPrev[2585];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[727] + pEtaPrev[2909];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[759] + pEtaPrev[3037];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[798] + pEtaPrev[3133];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[990] + pEtaPrev[3611];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1000] + pEtaPrev[3641];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1155] + pEtaPrev[3850];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1200] + pEtaPrev[3985];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1310] + pEtaPrev[4409];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[123] = minval;
		else
			pEta[123] = -minval;
	}
	else
		pEta[123] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[669] = minval;
		else
			pEta[669] = -minval;
	}
	else
		pEta[669] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[865] = minval;
		else
			pEta[865] = -minval;
	}
	else
		pEta[865] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[957] = minval;
		else
			pEta[957] = -minval;
	}
	else
		pEta[957] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1147] = minval;
		else
			pEta[1147] = -minval;
	}
	else
		pEta[1147] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1557] = minval;
		else
			pEta[1557] = -minval;
	}
	else
		pEta[1557] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1717] = minval;
		else
			pEta[1717] = -minval;
	}
	else
		pEta[1717] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1825] = minval;
		else
			pEta[1825] = -minval;
	}
	else
		pEta[1825] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2171] = minval;
		else
			pEta[2171] = -minval;
	}
	else
		pEta[2171] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2585] = minval;
		else
			pEta[2585] = -minval;
	}
	else
		pEta[2585] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2909] = minval;
		else
			pEta[2909] = -minval;
	}
	else
		pEta[2909] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3037] = minval;
		else
			pEta[3037] = -minval;
	}
	else
		pEta[3037] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3133] = minval;
		else
			pEta[3133] = -minval;
	}
	else
		pEta[3133] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3611] = minval;
		else
			pEta[3611] = -minval;
	}
	else
		pEta[3611] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3641] = minval;
		else
			pEta[3641] = -minval;
	}
	else
		pEta[3641] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3850] = minval;
		else
			pEta[3850] = -minval;
	}
	else
		pEta[3850] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3985] = minval;
		else
			pEta[3985] = -minval;
	}
	else
		pEta[3985] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4409] = minval;
		else
			pEta[4409] = -minval;
	}
	else
		pEta[4409] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 287     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[31] + pEtaPrev[127];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[168] + pEtaPrev[673];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[217] + pEtaPrev[869];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[240] + pEtaPrev[961];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[287] + pEtaPrev[1151];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[390] + pEtaPrev[1561];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[430] + pEtaPrev[1721];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[457] + pEtaPrev[1829];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[543] + pEtaPrev[2175];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[647] + pEtaPrev[2589];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[728] + pEtaPrev[2913];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[760] + pEtaPrev[3041];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[799] + pEtaPrev[3135];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[991] + pEtaPrev[3614];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1001] + pEtaPrev[3644];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1156] + pEtaPrev[3853];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1201] + pEtaPrev[3988];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1311] + pEtaPrev[4415];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[127] = minval;
		else
			pEta[127] = -minval;
	}
	else
		pEta[127] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[673] = minval;
		else
			pEta[673] = -minval;
	}
	else
		pEta[673] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[869] = minval;
		else
			pEta[869] = -minval;
	}
	else
		pEta[869] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[961] = minval;
		else
			pEta[961] = -minval;
	}
	else
		pEta[961] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1151] = minval;
		else
			pEta[1151] = -minval;
	}
	else
		pEta[1151] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1561] = minval;
		else
			pEta[1561] = -minval;
	}
	else
		pEta[1561] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1721] = minval;
		else
			pEta[1721] = -minval;
	}
	else
		pEta[1721] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1829] = minval;
		else
			pEta[1829] = -minval;
	}
	else
		pEta[1829] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2175] = minval;
		else
			pEta[2175] = -minval;
	}
	else
		pEta[2175] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2589] = minval;
		else
			pEta[2589] = -minval;
	}
	else
		pEta[2589] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2913] = minval;
		else
			pEta[2913] = -minval;
	}
	else
		pEta[2913] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3041] = minval;
		else
			pEta[3041] = -minval;
	}
	else
		pEta[3041] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3135] = minval;
		else
			pEta[3135] = -minval;
	}
	else
		pEta[3135] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3614] = minval;
		else
			pEta[3614] = -minval;
	}
	else
		pEta[3614] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3644] = minval;
		else
			pEta[3644] = -minval;
	}
	else
		pEta[3644] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3853] = minval;
		else
			pEta[3853] = -minval;
	}
	else
		pEta[3853] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[3988] = minval;
		else
			pEta[3988] = -minval;
	}
	else
		pEta[3988] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4415] = minval;
		else
			pEta[4415] = -minval;
	}
	else
		pEta[4415] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 288     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[32] + pEtaPrev[131];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[145] + pEtaPrev[581];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[218] + pEtaPrev[874];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[233] + pEtaPrev[934];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[288] + pEtaPrev[1155];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[419] + pEtaPrev[1678];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[477] + pEtaPrev[1910];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[501] + pEtaPrev[2005];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[544] + pEtaPrev[2179];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[655] + pEtaPrev[2622];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[684] + pEtaPrev[2737];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[759] + pEtaPrev[3038];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[800] + pEtaPrev[3137];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[897] + pEtaPrev[3332];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[999] + pEtaPrev[3639];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1192] + pEtaPrev[3962];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1236] + pEtaPrev[4093];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1312] + pEtaPrev[4421];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[131] = minval;
		else
			pEta[131] = -minval;
	}
	else
		pEta[131] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[581] = minval;
		else
			pEta[581] = -minval;
	}
	else
		pEta[581] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[874] = minval;
		else
			pEta[874] = -minval;
	}
	else
		pEta[874] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[934] = minval;
		else
			pEta[934] = -minval;
	}
	else
		pEta[934] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1155] = minval;
		else
			pEta[1155] = -minval;
	}
	else
		pEta[1155] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1678] = minval;
		else
			pEta[1678] = -minval;
	}
	else
		pEta[1678] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1910] = minval;
		else
			pEta[1910] = -minval;
	}
	else
		pEta[1910] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2005] = minval;
		else
			pEta[2005] = -minval;
	}
	else
		pEta[2005] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2179] = minval;
		else
			pEta[2179] = -minval;
	}
	else
		pEta[2179] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2622] = minval;
		else
			pEta[2622] = -minval;
	}
	else
		pEta[2622] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2737] = minval;
		else
			pEta[2737] = -minval;
	}
	else
		pEta[2737] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3038] = minval;
		else
			pEta[3038] = -minval;
	}
	else
		pEta[3038] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3137] = minval;
		else
			pEta[3137] = -minval;
	}
	else
		pEta[3137] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3332] = minval;
		else
			pEta[3332] = -minval;
	}
	else
		pEta[3332] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3639] = minval;
		else
			pEta[3639] = -minval;
	}
	else
		pEta[3639] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3962] = minval;
		else
			pEta[3962] = -minval;
	}
	else
		pEta[3962] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4093] = minval;
		else
			pEta[4093] = -minval;
	}
	else
		pEta[4093] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4421] = minval;
		else
			pEta[4421] = -minval;
	}
	else
		pEta[4421] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 289     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[33] + pEtaPrev[135];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[146] + pEtaPrev[585];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[219] + pEtaPrev[878];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[234] + pEtaPrev[938];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[289] + pEtaPrev[1159];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[420] + pEtaPrev[1682];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[478] + pEtaPrev[1914];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[502] + pEtaPrev[2009];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[545] + pEtaPrev[2183];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[656] + pEtaPrev[2626];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[685] + pEtaPrev[2741];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[760] + pEtaPrev[3042];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[801] + pEtaPrev[3139];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[898] + pEtaPrev[3335];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1000] + pEtaPrev[3642];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1193] + pEtaPrev[3965];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1237] + pEtaPrev[4096];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1313] + pEtaPrev[4427];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[135] = minval;
		else
			pEta[135] = -minval;
	}
	else
		pEta[135] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[585] = minval;
		else
			pEta[585] = -minval;
	}
	else
		pEta[585] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[878] = minval;
		else
			pEta[878] = -minval;
	}
	else
		pEta[878] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[938] = minval;
		else
			pEta[938] = -minval;
	}
	else
		pEta[938] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1159] = minval;
		else
			pEta[1159] = -minval;
	}
	else
		pEta[1159] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1682] = minval;
		else
			pEta[1682] = -minval;
	}
	else
		pEta[1682] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1914] = minval;
		else
			pEta[1914] = -minval;
	}
	else
		pEta[1914] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2009] = minval;
		else
			pEta[2009] = -minval;
	}
	else
		pEta[2009] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2183] = minval;
		else
			pEta[2183] = -minval;
	}
	else
		pEta[2183] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2626] = minval;
		else
			pEta[2626] = -minval;
	}
	else
		pEta[2626] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2741] = minval;
		else
			pEta[2741] = -minval;
	}
	else
		pEta[2741] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3042] = minval;
		else
			pEta[3042] = -minval;
	}
	else
		pEta[3042] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3139] = minval;
		else
			pEta[3139] = -minval;
	}
	else
		pEta[3139] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3335] = minval;
		else
			pEta[3335] = -minval;
	}
	else
		pEta[3335] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3642] = minval;
		else
			pEta[3642] = -minval;
	}
	else
		pEta[3642] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3965] = minval;
		else
			pEta[3965] = -minval;
	}
	else
		pEta[3965] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4096] = minval;
		else
			pEta[4096] = -minval;
	}
	else
		pEta[4096] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4427] = minval;
		else
			pEta[4427] = -minval;
	}
	else
		pEta[4427] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 290     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[34] + pEtaPrev[139];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[147] + pEtaPrev[589];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[220] + pEtaPrev[882];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[235] + pEtaPrev[942];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[290] + pEtaPrev[1163];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[421] + pEtaPrev[1686];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[479] + pEtaPrev[1918];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[503] + pEtaPrev[2013];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[546] + pEtaPrev[2187];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[657] + pEtaPrev[2630];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[686] + pEtaPrev[2745];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[761] + pEtaPrev[3046];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[802] + pEtaPrev[3141];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[899] + pEtaPrev[3338];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1001] + pEtaPrev[3645];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1194] + pEtaPrev[3968];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1238] + pEtaPrev[4099];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1314] + pEtaPrev[4433];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[139] = minval;
		else
			pEta[139] = -minval;
	}
	else
		pEta[139] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[589] = minval;
		else
			pEta[589] = -minval;
	}
	else
		pEta[589] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[882] = minval;
		else
			pEta[882] = -minval;
	}
	else
		pEta[882] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[942] = minval;
		else
			pEta[942] = -minval;
	}
	else
		pEta[942] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1163] = minval;
		else
			pEta[1163] = -minval;
	}
	else
		pEta[1163] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1686] = minval;
		else
			pEta[1686] = -minval;
	}
	else
		pEta[1686] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1918] = minval;
		else
			pEta[1918] = -minval;
	}
	else
		pEta[1918] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2013] = minval;
		else
			pEta[2013] = -minval;
	}
	else
		pEta[2013] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2187] = minval;
		else
			pEta[2187] = -minval;
	}
	else
		pEta[2187] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2630] = minval;
		else
			pEta[2630] = -minval;
	}
	else
		pEta[2630] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2745] = minval;
		else
			pEta[2745] = -minval;
	}
	else
		pEta[2745] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3046] = minval;
		else
			pEta[3046] = -minval;
	}
	else
		pEta[3046] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3141] = minval;
		else
			pEta[3141] = -minval;
	}
	else
		pEta[3141] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3338] = minval;
		else
			pEta[3338] = -minval;
	}
	else
		pEta[3338] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3645] = minval;
		else
			pEta[3645] = -minval;
	}
	else
		pEta[3645] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3968] = minval;
		else
			pEta[3968] = -minval;
	}
	else
		pEta[3968] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4099] = minval;
		else
			pEta[4099] = -minval;
	}
	else
		pEta[4099] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4433] = minval;
		else
			pEta[4433] = -minval;
	}
	else
		pEta[4433] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 291     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[35] + pEtaPrev[143];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[148] + pEtaPrev[593];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[221] + pEtaPrev[886];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[236] + pEtaPrev[946];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[291] + pEtaPrev[1167];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[422] + pEtaPrev[1690];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[448] + pEtaPrev[1794];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[504] + pEtaPrev[2017];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[547] + pEtaPrev[2191];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[658] + pEtaPrev[2634];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[687] + pEtaPrev[2749];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[762] + pEtaPrev[3050];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[803] + pEtaPrev[3143];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[900] + pEtaPrev[3341];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1002] + pEtaPrev[3648];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1195] + pEtaPrev[3971];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1239] + pEtaPrev[4102];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1315] + pEtaPrev[4439];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[143] = minval;
		else
			pEta[143] = -minval;
	}
	else
		pEta[143] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[593] = minval;
		else
			pEta[593] = -minval;
	}
	else
		pEta[593] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[886] = minval;
		else
			pEta[886] = -minval;
	}
	else
		pEta[886] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[946] = minval;
		else
			pEta[946] = -minval;
	}
	else
		pEta[946] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1167] = minval;
		else
			pEta[1167] = -minval;
	}
	else
		pEta[1167] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1690] = minval;
		else
			pEta[1690] = -minval;
	}
	else
		pEta[1690] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1794] = minval;
		else
			pEta[1794] = -minval;
	}
	else
		pEta[1794] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2017] = minval;
		else
			pEta[2017] = -minval;
	}
	else
		pEta[2017] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2191] = minval;
		else
			pEta[2191] = -minval;
	}
	else
		pEta[2191] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2634] = minval;
		else
			pEta[2634] = -minval;
	}
	else
		pEta[2634] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2749] = minval;
		else
			pEta[2749] = -minval;
	}
	else
		pEta[2749] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3050] = minval;
		else
			pEta[3050] = -minval;
	}
	else
		pEta[3050] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3143] = minval;
		else
			pEta[3143] = -minval;
	}
	else
		pEta[3143] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3341] = minval;
		else
			pEta[3341] = -minval;
	}
	else
		pEta[3341] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3648] = minval;
		else
			pEta[3648] = -minval;
	}
	else
		pEta[3648] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3971] = minval;
		else
			pEta[3971] = -minval;
	}
	else
		pEta[3971] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4102] = minval;
		else
			pEta[4102] = -minval;
	}
	else
		pEta[4102] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4439] = minval;
		else
			pEta[4439] = -minval;
	}
	else
		pEta[4439] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 292     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[36] + pEtaPrev[147];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[149] + pEtaPrev[597];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[222] + pEtaPrev[890];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[237] + pEtaPrev[950];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[292] + pEtaPrev[1171];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[423] + pEtaPrev[1694];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[449] + pEtaPrev[1798];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[505] + pEtaPrev[2021];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[548] + pEtaPrev[2195];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[659] + pEtaPrev[2638];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[688] + pEtaPrev[2753];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[763] + pEtaPrev[3054];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[804] + pEtaPrev[3145];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[901] + pEtaPrev[3344];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1003] + pEtaPrev[3651];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1196] + pEtaPrev[3974];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1240] + pEtaPrev[4105];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1316] + pEtaPrev[4445];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[147] = minval;
		else
			pEta[147] = -minval;
	}
	else
		pEta[147] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[597] = minval;
		else
			pEta[597] = -minval;
	}
	else
		pEta[597] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[890] = minval;
		else
			pEta[890] = -minval;
	}
	else
		pEta[890] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[950] = minval;
		else
			pEta[950] = -minval;
	}
	else
		pEta[950] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1171] = minval;
		else
			pEta[1171] = -minval;
	}
	else
		pEta[1171] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1694] = minval;
		else
			pEta[1694] = -minval;
	}
	else
		pEta[1694] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1798] = minval;
		else
			pEta[1798] = -minval;
	}
	else
		pEta[1798] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2021] = minval;
		else
			pEta[2021] = -minval;
	}
	else
		pEta[2021] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2195] = minval;
		else
			pEta[2195] = -minval;
	}
	else
		pEta[2195] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2638] = minval;
		else
			pEta[2638] = -minval;
	}
	else
		pEta[2638] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2753] = minval;
		else
			pEta[2753] = -minval;
	}
	else
		pEta[2753] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3054] = minval;
		else
			pEta[3054] = -minval;
	}
	else
		pEta[3054] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3145] = minval;
		else
			pEta[3145] = -minval;
	}
	else
		pEta[3145] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3344] = minval;
		else
			pEta[3344] = -minval;
	}
	else
		pEta[3344] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3651] = minval;
		else
			pEta[3651] = -minval;
	}
	else
		pEta[3651] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3974] = minval;
		else
			pEta[3974] = -minval;
	}
	else
		pEta[3974] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4105] = minval;
		else
			pEta[4105] = -minval;
	}
	else
		pEta[4105] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4445] = minval;
		else
			pEta[4445] = -minval;
	}
	else
		pEta[4445] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 293     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[37] + pEtaPrev[151];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[150] + pEtaPrev[601];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[223] + pEtaPrev[894];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[238] + pEtaPrev[954];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[293] + pEtaPrev[1175];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[424] + pEtaPrev[1698];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[450] + pEtaPrev[1802];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[506] + pEtaPrev[2025];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[549] + pEtaPrev[2199];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[660] + pEtaPrev[2642];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[689] + pEtaPrev[2757];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[764] + pEtaPrev[3058];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[805] + pEtaPrev[3147];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[902] + pEtaPrev[3347];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1004] + pEtaPrev[3654];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1197] + pEtaPrev[3977];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1241] + pEtaPrev[4108];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1317] + pEtaPrev[4451];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[151] = minval;
		else
			pEta[151] = -minval;
	}
	else
		pEta[151] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[601] = minval;
		else
			pEta[601] = -minval;
	}
	else
		pEta[601] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[894] = minval;
		else
			pEta[894] = -minval;
	}
	else
		pEta[894] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[954] = minval;
		else
			pEta[954] = -minval;
	}
	else
		pEta[954] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1175] = minval;
		else
			pEta[1175] = -minval;
	}
	else
		pEta[1175] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1698] = minval;
		else
			pEta[1698] = -minval;
	}
	else
		pEta[1698] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1802] = minval;
		else
			pEta[1802] = -minval;
	}
	else
		pEta[1802] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2025] = minval;
		else
			pEta[2025] = -minval;
	}
	else
		pEta[2025] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2199] = minval;
		else
			pEta[2199] = -minval;
	}
	else
		pEta[2199] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2642] = minval;
		else
			pEta[2642] = -minval;
	}
	else
		pEta[2642] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2757] = minval;
		else
			pEta[2757] = -minval;
	}
	else
		pEta[2757] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3058] = minval;
		else
			pEta[3058] = -minval;
	}
	else
		pEta[3058] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3147] = minval;
		else
			pEta[3147] = -minval;
	}
	else
		pEta[3147] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3347] = minval;
		else
			pEta[3347] = -minval;
	}
	else
		pEta[3347] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3654] = minval;
		else
			pEta[3654] = -minval;
	}
	else
		pEta[3654] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3977] = minval;
		else
			pEta[3977] = -minval;
	}
	else
		pEta[3977] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4108] = minval;
		else
			pEta[4108] = -minval;
	}
	else
		pEta[4108] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4451] = minval;
		else
			pEta[4451] = -minval;
	}
	else
		pEta[4451] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 294     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[38] + pEtaPrev[155];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[151] + pEtaPrev[605];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[192] + pEtaPrev[770];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[239] + pEtaPrev[958];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[294] + pEtaPrev[1179];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[425] + pEtaPrev[1702];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[451] + pEtaPrev[1806];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[507] + pEtaPrev[2029];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[550] + pEtaPrev[2203];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[661] + pEtaPrev[2646];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[690] + pEtaPrev[2761];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[765] + pEtaPrev[3062];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[806] + pEtaPrev[3149];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[903] + pEtaPrev[3350];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1005] + pEtaPrev[3657];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1198] + pEtaPrev[3980];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1242] + pEtaPrev[4111];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1318] + pEtaPrev[4457];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[155] = minval;
		else
			pEta[155] = -minval;
	}
	else
		pEta[155] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[605] = minval;
		else
			pEta[605] = -minval;
	}
	else
		pEta[605] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[770] = minval;
		else
			pEta[770] = -minval;
	}
	else
		pEta[770] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[958] = minval;
		else
			pEta[958] = -minval;
	}
	else
		pEta[958] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1179] = minval;
		else
			pEta[1179] = -minval;
	}
	else
		pEta[1179] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1702] = minval;
		else
			pEta[1702] = -minval;
	}
	else
		pEta[1702] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1806] = minval;
		else
			pEta[1806] = -minval;
	}
	else
		pEta[1806] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2029] = minval;
		else
			pEta[2029] = -minval;
	}
	else
		pEta[2029] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2203] = minval;
		else
			pEta[2203] = -minval;
	}
	else
		pEta[2203] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2646] = minval;
		else
			pEta[2646] = -minval;
	}
	else
		pEta[2646] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2761] = minval;
		else
			pEta[2761] = -minval;
	}
	else
		pEta[2761] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3062] = minval;
		else
			pEta[3062] = -minval;
	}
	else
		pEta[3062] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3149] = minval;
		else
			pEta[3149] = -minval;
	}
	else
		pEta[3149] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3350] = minval;
		else
			pEta[3350] = -minval;
	}
	else
		pEta[3350] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3657] = minval;
		else
			pEta[3657] = -minval;
	}
	else
		pEta[3657] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3980] = minval;
		else
			pEta[3980] = -minval;
	}
	else
		pEta[3980] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4111] = minval;
		else
			pEta[4111] = -minval;
	}
	else
		pEta[4111] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4457] = minval;
		else
			pEta[4457] = -minval;
	}
	else
		pEta[4457] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 295     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[39] + pEtaPrev[159];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[152] + pEtaPrev[609];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[193] + pEtaPrev[774];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[240] + pEtaPrev[962];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[295] + pEtaPrev[1183];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[426] + pEtaPrev[1706];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[452] + pEtaPrev[1810];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[508] + pEtaPrev[2033];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[551] + pEtaPrev[2207];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[662] + pEtaPrev[2650];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[691] + pEtaPrev[2765];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[766] + pEtaPrev[3066];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[807] + pEtaPrev[3151];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[904] + pEtaPrev[3353];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1006] + pEtaPrev[3660];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1199] + pEtaPrev[3983];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1243] + pEtaPrev[4114];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1319] + pEtaPrev[4463];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[159] = minval;
		else
			pEta[159] = -minval;
	}
	else
		pEta[159] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[609] = minval;
		else
			pEta[609] = -minval;
	}
	else
		pEta[609] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[774] = minval;
		else
			pEta[774] = -minval;
	}
	else
		pEta[774] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[962] = minval;
		else
			pEta[962] = -minval;
	}
	else
		pEta[962] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1183] = minval;
		else
			pEta[1183] = -minval;
	}
	else
		pEta[1183] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1706] = minval;
		else
			pEta[1706] = -minval;
	}
	else
		pEta[1706] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1810] = minval;
		else
			pEta[1810] = -minval;
	}
	else
		pEta[1810] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2033] = minval;
		else
			pEta[2033] = -minval;
	}
	else
		pEta[2033] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2207] = minval;
		else
			pEta[2207] = -minval;
	}
	else
		pEta[2207] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2650] = minval;
		else
			pEta[2650] = -minval;
	}
	else
		pEta[2650] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2765] = minval;
		else
			pEta[2765] = -minval;
	}
	else
		pEta[2765] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3066] = minval;
		else
			pEta[3066] = -minval;
	}
	else
		pEta[3066] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3151] = minval;
		else
			pEta[3151] = -minval;
	}
	else
		pEta[3151] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3353] = minval;
		else
			pEta[3353] = -minval;
	}
	else
		pEta[3353] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3660] = minval;
		else
			pEta[3660] = -minval;
	}
	else
		pEta[3660] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3983] = minval;
		else
			pEta[3983] = -minval;
	}
	else
		pEta[3983] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4114] = minval;
		else
			pEta[4114] = -minval;
	}
	else
		pEta[4114] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4463] = minval;
		else
			pEta[4463] = -minval;
	}
	else
		pEta[4463] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 296     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[40] + pEtaPrev[163];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[153] + pEtaPrev[613];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[194] + pEtaPrev[778];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[241] + pEtaPrev[966];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[296] + pEtaPrev[1187];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[427] + pEtaPrev[1710];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[453] + pEtaPrev[1814];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[509] + pEtaPrev[2037];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[552] + pEtaPrev[2211];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[663] + pEtaPrev[2654];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[692] + pEtaPrev[2769];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[767] + pEtaPrev[3070];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[808] + pEtaPrev[3153];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[905] + pEtaPrev[3356];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1007] + pEtaPrev[3663];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1200] + pEtaPrev[3986];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1244] + pEtaPrev[4117];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1320] + pEtaPrev[4469];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[163] = minval;
		else
			pEta[163] = -minval;
	}
	else
		pEta[163] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[613] = minval;
		else
			pEta[613] = -minval;
	}
	else
		pEta[613] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[778] = minval;
		else
			pEta[778] = -minval;
	}
	else
		pEta[778] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[966] = minval;
		else
			pEta[966] = -minval;
	}
	else
		pEta[966] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1187] = minval;
		else
			pEta[1187] = -minval;
	}
	else
		pEta[1187] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1710] = minval;
		else
			pEta[1710] = -minval;
	}
	else
		pEta[1710] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1814] = minval;
		else
			pEta[1814] = -minval;
	}
	else
		pEta[1814] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2037] = minval;
		else
			pEta[2037] = -minval;
	}
	else
		pEta[2037] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2211] = minval;
		else
			pEta[2211] = -minval;
	}
	else
		pEta[2211] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2654] = minval;
		else
			pEta[2654] = -minval;
	}
	else
		pEta[2654] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2769] = minval;
		else
			pEta[2769] = -minval;
	}
	else
		pEta[2769] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3070] = minval;
		else
			pEta[3070] = -minval;
	}
	else
		pEta[3070] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3153] = minval;
		else
			pEta[3153] = -minval;
	}
	else
		pEta[3153] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3356] = minval;
		else
			pEta[3356] = -minval;
	}
	else
		pEta[3356] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3663] = minval;
		else
			pEta[3663] = -minval;
	}
	else
		pEta[3663] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3986] = minval;
		else
			pEta[3986] = -minval;
	}
	else
		pEta[3986] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4117] = minval;
		else
			pEta[4117] = -minval;
	}
	else
		pEta[4117] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4469] = minval;
		else
			pEta[4469] = -minval;
	}
	else
		pEta[4469] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 297     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[41] + pEtaPrev[167];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[154] + pEtaPrev[617];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[195] + pEtaPrev[782];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[242] + pEtaPrev[970];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[297] + pEtaPrev[1191];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[428] + pEtaPrev[1714];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[454] + pEtaPrev[1818];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[510] + pEtaPrev[2041];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[553] + pEtaPrev[2215];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[664] + pEtaPrev[2658];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[693] + pEtaPrev[2773];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[736] + pEtaPrev[2946];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[809] + pEtaPrev[3155];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[906] + pEtaPrev[3359];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1008] + pEtaPrev[3666];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1201] + pEtaPrev[3989];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1245] + pEtaPrev[4120];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1321] + pEtaPrev[4475];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[167] = minval;
		else
			pEta[167] = -minval;
	}
	else
		pEta[167] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[617] = minval;
		else
			pEta[617] = -minval;
	}
	else
		pEta[617] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[782] = minval;
		else
			pEta[782] = -minval;
	}
	else
		pEta[782] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[970] = minval;
		else
			pEta[970] = -minval;
	}
	else
		pEta[970] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1191] = minval;
		else
			pEta[1191] = -minval;
	}
	else
		pEta[1191] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1714] = minval;
		else
			pEta[1714] = -minval;
	}
	else
		pEta[1714] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1818] = minval;
		else
			pEta[1818] = -minval;
	}
	else
		pEta[1818] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2041] = minval;
		else
			pEta[2041] = -minval;
	}
	else
		pEta[2041] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2215] = minval;
		else
			pEta[2215] = -minval;
	}
	else
		pEta[2215] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2658] = minval;
		else
			pEta[2658] = -minval;
	}
	else
		pEta[2658] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2773] = minval;
		else
			pEta[2773] = -minval;
	}
	else
		pEta[2773] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2946] = minval;
		else
			pEta[2946] = -minval;
	}
	else
		pEta[2946] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3155] = minval;
		else
			pEta[3155] = -minval;
	}
	else
		pEta[3155] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3359] = minval;
		else
			pEta[3359] = -minval;
	}
	else
		pEta[3359] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3666] = minval;
		else
			pEta[3666] = -minval;
	}
	else
		pEta[3666] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3989] = minval;
		else
			pEta[3989] = -minval;
	}
	else
		pEta[3989] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4120] = minval;
		else
			pEta[4120] = -minval;
	}
	else
		pEta[4120] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4475] = minval;
		else
			pEta[4475] = -minval;
	}
	else
		pEta[4475] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 298     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[42] + pEtaPrev[171];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[155] + pEtaPrev[621];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[196] + pEtaPrev[786];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[243] + pEtaPrev[974];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[298] + pEtaPrev[1195];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[429] + pEtaPrev[1718];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[455] + pEtaPrev[1822];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[511] + pEtaPrev[2045];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[554] + pEtaPrev[2219];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[665] + pEtaPrev[2662];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[694] + pEtaPrev[2777];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[737] + pEtaPrev[2950];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[810] + pEtaPrev[3157];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[907] + pEtaPrev[3362];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1009] + pEtaPrev[3669];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1202] + pEtaPrev[3992];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1246] + pEtaPrev[4123];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1322] + pEtaPrev[4481];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[171] = minval;
		else
			pEta[171] = -minval;
	}
	else
		pEta[171] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[621] = minval;
		else
			pEta[621] = -minval;
	}
	else
		pEta[621] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[786] = minval;
		else
			pEta[786] = -minval;
	}
	else
		pEta[786] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[974] = minval;
		else
			pEta[974] = -minval;
	}
	else
		pEta[974] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1195] = minval;
		else
			pEta[1195] = -minval;
	}
	else
		pEta[1195] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1718] = minval;
		else
			pEta[1718] = -minval;
	}
	else
		pEta[1718] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1822] = minval;
		else
			pEta[1822] = -minval;
	}
	else
		pEta[1822] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2045] = minval;
		else
			pEta[2045] = -minval;
	}
	else
		pEta[2045] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2219] = minval;
		else
			pEta[2219] = -minval;
	}
	else
		pEta[2219] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2662] = minval;
		else
			pEta[2662] = -minval;
	}
	else
		pEta[2662] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2777] = minval;
		else
			pEta[2777] = -minval;
	}
	else
		pEta[2777] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2950] = minval;
		else
			pEta[2950] = -minval;
	}
	else
		pEta[2950] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3157] = minval;
		else
			pEta[3157] = -minval;
	}
	else
		pEta[3157] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3362] = minval;
		else
			pEta[3362] = -minval;
	}
	else
		pEta[3362] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3669] = minval;
		else
			pEta[3669] = -minval;
	}
	else
		pEta[3669] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3992] = minval;
		else
			pEta[3992] = -minval;
	}
	else
		pEta[3992] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4123] = minval;
		else
			pEta[4123] = -minval;
	}
	else
		pEta[4123] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4481] = minval;
		else
			pEta[4481] = -minval;
	}
	else
		pEta[4481] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 299     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[43] + pEtaPrev[175];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[156] + pEtaPrev[625];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[197] + pEtaPrev[790];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[244] + pEtaPrev[978];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[299] + pEtaPrev[1199];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[430] + pEtaPrev[1722];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[456] + pEtaPrev[1826];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[480] + pEtaPrev[1921];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[555] + pEtaPrev[2223];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[666] + pEtaPrev[2666];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[695] + pEtaPrev[2781];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[738] + pEtaPrev[2954];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[811] + pEtaPrev[3159];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[908] + pEtaPrev[3365];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1010] + pEtaPrev[3672];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1203] + pEtaPrev[3995];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1247] + pEtaPrev[4126];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1323] + pEtaPrev[4487];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[175] = minval;
		else
			pEta[175] = -minval;
	}
	else
		pEta[175] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[625] = minval;
		else
			pEta[625] = -minval;
	}
	else
		pEta[625] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[790] = minval;
		else
			pEta[790] = -minval;
	}
	else
		pEta[790] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[978] = minval;
		else
			pEta[978] = -minval;
	}
	else
		pEta[978] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1199] = minval;
		else
			pEta[1199] = -minval;
	}
	else
		pEta[1199] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1722] = minval;
		else
			pEta[1722] = -minval;
	}
	else
		pEta[1722] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1826] = minval;
		else
			pEta[1826] = -minval;
	}
	else
		pEta[1826] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1921] = minval;
		else
			pEta[1921] = -minval;
	}
	else
		pEta[1921] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2223] = minval;
		else
			pEta[2223] = -minval;
	}
	else
		pEta[2223] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2666] = minval;
		else
			pEta[2666] = -minval;
	}
	else
		pEta[2666] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2781] = minval;
		else
			pEta[2781] = -minval;
	}
	else
		pEta[2781] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2954] = minval;
		else
			pEta[2954] = -minval;
	}
	else
		pEta[2954] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3159] = minval;
		else
			pEta[3159] = -minval;
	}
	else
		pEta[3159] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3365] = minval;
		else
			pEta[3365] = -minval;
	}
	else
		pEta[3365] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3672] = minval;
		else
			pEta[3672] = -minval;
	}
	else
		pEta[3672] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3995] = minval;
		else
			pEta[3995] = -minval;
	}
	else
		pEta[3995] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4126] = minval;
		else
			pEta[4126] = -minval;
	}
	else
		pEta[4126] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4487] = minval;
		else
			pEta[4487] = -minval;
	}
	else
		pEta[4487] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 300     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[44] + pEtaPrev[179];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[157] + pEtaPrev[629];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[198] + pEtaPrev[794];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[245] + pEtaPrev[982];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[300] + pEtaPrev[1203];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[431] + pEtaPrev[1726];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[457] + pEtaPrev[1830];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[481] + pEtaPrev[1925];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[556] + pEtaPrev[2227];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[667] + pEtaPrev[2670];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[696] + pEtaPrev[2785];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[739] + pEtaPrev[2958];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[812] + pEtaPrev[3161];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[909] + pEtaPrev[3368];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1011] + pEtaPrev[3675];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1204] + pEtaPrev[3998];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1216] + pEtaPrev[4033];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1324] + pEtaPrev[4493];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[179] = minval;
		else
			pEta[179] = -minval;
	}
	else
		pEta[179] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[629] = minval;
		else
			pEta[629] = -minval;
	}
	else
		pEta[629] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[794] = minval;
		else
			pEta[794] = -minval;
	}
	else
		pEta[794] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[982] = minval;
		else
			pEta[982] = -minval;
	}
	else
		pEta[982] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1203] = minval;
		else
			pEta[1203] = -minval;
	}
	else
		pEta[1203] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1726] = minval;
		else
			pEta[1726] = -minval;
	}
	else
		pEta[1726] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1830] = minval;
		else
			pEta[1830] = -minval;
	}
	else
		pEta[1830] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1925] = minval;
		else
			pEta[1925] = -minval;
	}
	else
		pEta[1925] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2227] = minval;
		else
			pEta[2227] = -minval;
	}
	else
		pEta[2227] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2670] = minval;
		else
			pEta[2670] = -minval;
	}
	else
		pEta[2670] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2785] = minval;
		else
			pEta[2785] = -minval;
	}
	else
		pEta[2785] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2958] = minval;
		else
			pEta[2958] = -minval;
	}
	else
		pEta[2958] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3161] = minval;
		else
			pEta[3161] = -minval;
	}
	else
		pEta[3161] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3368] = minval;
		else
			pEta[3368] = -minval;
	}
	else
		pEta[3368] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3675] = minval;
		else
			pEta[3675] = -minval;
	}
	else
		pEta[3675] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3998] = minval;
		else
			pEta[3998] = -minval;
	}
	else
		pEta[3998] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4033] = minval;
		else
			pEta[4033] = -minval;
	}
	else
		pEta[4033] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4493] = minval;
		else
			pEta[4493] = -minval;
	}
	else
		pEta[4493] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 301     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[45] + pEtaPrev[183];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[158] + pEtaPrev[633];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[199] + pEtaPrev[798];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[246] + pEtaPrev[986];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[301] + pEtaPrev[1207];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[432] + pEtaPrev[1730];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[458] + pEtaPrev[1834];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[482] + pEtaPrev[1929];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[557] + pEtaPrev[2231];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[668] + pEtaPrev[2674];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[697] + pEtaPrev[2789];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[740] + pEtaPrev[2962];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[813] + pEtaPrev[3163];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[910] + pEtaPrev[3371];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1012] + pEtaPrev[3678];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1205] + pEtaPrev[4001];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1217] + pEtaPrev[4036];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1325] + pEtaPrev[4499];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[183] = minval;
		else
			pEta[183] = -minval;
	}
	else
		pEta[183] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[633] = minval;
		else
			pEta[633] = -minval;
	}
	else
		pEta[633] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[798] = minval;
		else
			pEta[798] = -minval;
	}
	else
		pEta[798] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[986] = minval;
		else
			pEta[986] = -minval;
	}
	else
		pEta[986] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1207] = minval;
		else
			pEta[1207] = -minval;
	}
	else
		pEta[1207] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1730] = minval;
		else
			pEta[1730] = -minval;
	}
	else
		pEta[1730] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1834] = minval;
		else
			pEta[1834] = -minval;
	}
	else
		pEta[1834] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1929] = minval;
		else
			pEta[1929] = -minval;
	}
	else
		pEta[1929] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2231] = minval;
		else
			pEta[2231] = -minval;
	}
	else
		pEta[2231] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2674] = minval;
		else
			pEta[2674] = -minval;
	}
	else
		pEta[2674] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2789] = minval;
		else
			pEta[2789] = -minval;
	}
	else
		pEta[2789] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2962] = minval;
		else
			pEta[2962] = -minval;
	}
	else
		pEta[2962] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3163] = minval;
		else
			pEta[3163] = -minval;
	}
	else
		pEta[3163] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3371] = minval;
		else
			pEta[3371] = -minval;
	}
	else
		pEta[3371] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3678] = minval;
		else
			pEta[3678] = -minval;
	}
	else
		pEta[3678] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4001] = minval;
		else
			pEta[4001] = -minval;
	}
	else
		pEta[4001] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4036] = minval;
		else
			pEta[4036] = -minval;
	}
	else
		pEta[4036] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4499] = minval;
		else
			pEta[4499] = -minval;
	}
	else
		pEta[4499] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 302     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[46] + pEtaPrev[187];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[159] + pEtaPrev[637];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[200] + pEtaPrev[802];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[247] + pEtaPrev[990];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[302] + pEtaPrev[1211];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[433] + pEtaPrev[1734];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[459] + pEtaPrev[1838];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[483] + pEtaPrev[1933];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[558] + pEtaPrev[2235];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[669] + pEtaPrev[2678];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[698] + pEtaPrev[2793];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[741] + pEtaPrev[2966];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[814] + pEtaPrev[3165];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[911] + pEtaPrev[3374];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1013] + pEtaPrev[3681];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1206] + pEtaPrev[4004];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1218] + pEtaPrev[4039];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1326] + pEtaPrev[4505];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[187] = minval;
		else
			pEta[187] = -minval;
	}
	else
		pEta[187] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[637] = minval;
		else
			pEta[637] = -minval;
	}
	else
		pEta[637] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[802] = minval;
		else
			pEta[802] = -minval;
	}
	else
		pEta[802] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[990] = minval;
		else
			pEta[990] = -minval;
	}
	else
		pEta[990] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1211] = minval;
		else
			pEta[1211] = -minval;
	}
	else
		pEta[1211] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1734] = minval;
		else
			pEta[1734] = -minval;
	}
	else
		pEta[1734] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1838] = minval;
		else
			pEta[1838] = -minval;
	}
	else
		pEta[1838] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1933] = minval;
		else
			pEta[1933] = -minval;
	}
	else
		pEta[1933] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2235] = minval;
		else
			pEta[2235] = -minval;
	}
	else
		pEta[2235] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2678] = minval;
		else
			pEta[2678] = -minval;
	}
	else
		pEta[2678] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2793] = minval;
		else
			pEta[2793] = -minval;
	}
	else
		pEta[2793] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2966] = minval;
		else
			pEta[2966] = -minval;
	}
	else
		pEta[2966] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3165] = minval;
		else
			pEta[3165] = -minval;
	}
	else
		pEta[3165] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3374] = minval;
		else
			pEta[3374] = -minval;
	}
	else
		pEta[3374] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3681] = minval;
		else
			pEta[3681] = -minval;
	}
	else
		pEta[3681] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4004] = minval;
		else
			pEta[4004] = -minval;
	}
	else
		pEta[4004] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4039] = minval;
		else
			pEta[4039] = -minval;
	}
	else
		pEta[4039] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4505] = minval;
		else
			pEta[4505] = -minval;
	}
	else
		pEta[4505] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 303     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[47] + pEtaPrev[191];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[128] + pEtaPrev[513];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[201] + pEtaPrev[806];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[248] + pEtaPrev[994];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[303] + pEtaPrev[1215];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[434] + pEtaPrev[1738];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[460] + pEtaPrev[1842];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[484] + pEtaPrev[1937];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[559] + pEtaPrev[2239];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[670] + pEtaPrev[2682];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[699] + pEtaPrev[2797];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[742] + pEtaPrev[2970];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[815] + pEtaPrev[3167];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[912] + pEtaPrev[3377];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1014] + pEtaPrev[3684];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1207] + pEtaPrev[4007];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1219] + pEtaPrev[4042];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1327] + pEtaPrev[4511];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[191] = minval;
		else
			pEta[191] = -minval;
	}
	else
		pEta[191] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[513] = minval;
		else
			pEta[513] = -minval;
	}
	else
		pEta[513] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[806] = minval;
		else
			pEta[806] = -minval;
	}
	else
		pEta[806] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[994] = minval;
		else
			pEta[994] = -minval;
	}
	else
		pEta[994] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1215] = minval;
		else
			pEta[1215] = -minval;
	}
	else
		pEta[1215] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1738] = minval;
		else
			pEta[1738] = -minval;
	}
	else
		pEta[1738] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1842] = minval;
		else
			pEta[1842] = -minval;
	}
	else
		pEta[1842] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1937] = minval;
		else
			pEta[1937] = -minval;
	}
	else
		pEta[1937] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2239] = minval;
		else
			pEta[2239] = -minval;
	}
	else
		pEta[2239] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2682] = minval;
		else
			pEta[2682] = -minval;
	}
	else
		pEta[2682] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2797] = minval;
		else
			pEta[2797] = -minval;
	}
	else
		pEta[2797] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2970] = minval;
		else
			pEta[2970] = -minval;
	}
	else
		pEta[2970] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3167] = minval;
		else
			pEta[3167] = -minval;
	}
	else
		pEta[3167] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3377] = minval;
		else
			pEta[3377] = -minval;
	}
	else
		pEta[3377] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3684] = minval;
		else
			pEta[3684] = -minval;
	}
	else
		pEta[3684] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4007] = minval;
		else
			pEta[4007] = -minval;
	}
	else
		pEta[4007] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4042] = minval;
		else
			pEta[4042] = -minval;
	}
	else
		pEta[4042] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4511] = minval;
		else
			pEta[4511] = -minval;
	}
	else
		pEta[4511] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 304     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[48] + pEtaPrev[195];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[129] + pEtaPrev[517];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[202] + pEtaPrev[810];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[249] + pEtaPrev[998];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[304] + pEtaPrev[1219];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[435] + pEtaPrev[1742];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[461] + pEtaPrev[1846];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[485] + pEtaPrev[1941];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[560] + pEtaPrev[2243];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[671] + pEtaPrev[2686];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[700] + pEtaPrev[2801];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[743] + pEtaPrev[2974];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[816] + pEtaPrev[3169];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[913] + pEtaPrev[3380];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1015] + pEtaPrev[3687];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1208] + pEtaPrev[4010];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1220] + pEtaPrev[4045];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1328] + pEtaPrev[4517];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[195] = minval;
		else
			pEta[195] = -minval;
	}
	else
		pEta[195] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[517] = minval;
		else
			pEta[517] = -minval;
	}
	else
		pEta[517] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[810] = minval;
		else
			pEta[810] = -minval;
	}
	else
		pEta[810] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[998] = minval;
		else
			pEta[998] = -minval;
	}
	else
		pEta[998] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1219] = minval;
		else
			pEta[1219] = -minval;
	}
	else
		pEta[1219] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1742] = minval;
		else
			pEta[1742] = -minval;
	}
	else
		pEta[1742] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1846] = minval;
		else
			pEta[1846] = -minval;
	}
	else
		pEta[1846] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1941] = minval;
		else
			pEta[1941] = -minval;
	}
	else
		pEta[1941] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2243] = minval;
		else
			pEta[2243] = -minval;
	}
	else
		pEta[2243] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2686] = minval;
		else
			pEta[2686] = -minval;
	}
	else
		pEta[2686] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2801] = minval;
		else
			pEta[2801] = -minval;
	}
	else
		pEta[2801] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2974] = minval;
		else
			pEta[2974] = -minval;
	}
	else
		pEta[2974] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3169] = minval;
		else
			pEta[3169] = -minval;
	}
	else
		pEta[3169] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3380] = minval;
		else
			pEta[3380] = -minval;
	}
	else
		pEta[3380] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3687] = minval;
		else
			pEta[3687] = -minval;
	}
	else
		pEta[3687] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4010] = minval;
		else
			pEta[4010] = -minval;
	}
	else
		pEta[4010] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4045] = minval;
		else
			pEta[4045] = -minval;
	}
	else
		pEta[4045] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4517] = minval;
		else
			pEta[4517] = -minval;
	}
	else
		pEta[4517] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 305     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[49] + pEtaPrev[199];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[130] + pEtaPrev[521];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[203] + pEtaPrev[814];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[250] + pEtaPrev[1002];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[305] + pEtaPrev[1223];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[436] + pEtaPrev[1746];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[462] + pEtaPrev[1850];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[486] + pEtaPrev[1945];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[561] + pEtaPrev[2247];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[640] + pEtaPrev[2562];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[701] + pEtaPrev[2805];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[744] + pEtaPrev[2978];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[817] + pEtaPrev[3171];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[914] + pEtaPrev[3383];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1016] + pEtaPrev[3690];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1209] + pEtaPrev[4013];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1221] + pEtaPrev[4048];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1329] + pEtaPrev[4523];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[199] = minval;
		else
			pEta[199] = -minval;
	}
	else
		pEta[199] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[521] = minval;
		else
			pEta[521] = -minval;
	}
	else
		pEta[521] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[814] = minval;
		else
			pEta[814] = -minval;
	}
	else
		pEta[814] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1002] = minval;
		else
			pEta[1002] = -minval;
	}
	else
		pEta[1002] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1223] = minval;
		else
			pEta[1223] = -minval;
	}
	else
		pEta[1223] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1746] = minval;
		else
			pEta[1746] = -minval;
	}
	else
		pEta[1746] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1850] = minval;
		else
			pEta[1850] = -minval;
	}
	else
		pEta[1850] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1945] = minval;
		else
			pEta[1945] = -minval;
	}
	else
		pEta[1945] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2247] = minval;
		else
			pEta[2247] = -minval;
	}
	else
		pEta[2247] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2562] = minval;
		else
			pEta[2562] = -minval;
	}
	else
		pEta[2562] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2805] = minval;
		else
			pEta[2805] = -minval;
	}
	else
		pEta[2805] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2978] = minval;
		else
			pEta[2978] = -minval;
	}
	else
		pEta[2978] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3171] = minval;
		else
			pEta[3171] = -minval;
	}
	else
		pEta[3171] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3383] = minval;
		else
			pEta[3383] = -minval;
	}
	else
		pEta[3383] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3690] = minval;
		else
			pEta[3690] = -minval;
	}
	else
		pEta[3690] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4013] = minval;
		else
			pEta[4013] = -minval;
	}
	else
		pEta[4013] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4048] = minval;
		else
			pEta[4048] = -minval;
	}
	else
		pEta[4048] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4523] = minval;
		else
			pEta[4523] = -minval;
	}
	else
		pEta[4523] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 306     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[50] + pEtaPrev[203];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[131] + pEtaPrev[525];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[204] + pEtaPrev[818];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[251] + pEtaPrev[1006];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[306] + pEtaPrev[1227];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[437] + pEtaPrev[1750];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[463] + pEtaPrev[1854];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[487] + pEtaPrev[1949];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[562] + pEtaPrev[2251];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[641] + pEtaPrev[2566];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[702] + pEtaPrev[2809];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[745] + pEtaPrev[2982];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[818] + pEtaPrev[3173];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[915] + pEtaPrev[3386];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1017] + pEtaPrev[3693];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1210] + pEtaPrev[4016];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1222] + pEtaPrev[4051];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1330] + pEtaPrev[4529];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[203] = minval;
		else
			pEta[203] = -minval;
	}
	else
		pEta[203] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[525] = minval;
		else
			pEta[525] = -minval;
	}
	else
		pEta[525] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[818] = minval;
		else
			pEta[818] = -minval;
	}
	else
		pEta[818] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1006] = minval;
		else
			pEta[1006] = -minval;
	}
	else
		pEta[1006] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1227] = minval;
		else
			pEta[1227] = -minval;
	}
	else
		pEta[1227] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1750] = minval;
		else
			pEta[1750] = -minval;
	}
	else
		pEta[1750] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1854] = minval;
		else
			pEta[1854] = -minval;
	}
	else
		pEta[1854] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1949] = minval;
		else
			pEta[1949] = -minval;
	}
	else
		pEta[1949] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2251] = minval;
		else
			pEta[2251] = -minval;
	}
	else
		pEta[2251] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2566] = minval;
		else
			pEta[2566] = -minval;
	}
	else
		pEta[2566] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2809] = minval;
		else
			pEta[2809] = -minval;
	}
	else
		pEta[2809] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2982] = minval;
		else
			pEta[2982] = -minval;
	}
	else
		pEta[2982] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3173] = minval;
		else
			pEta[3173] = -minval;
	}
	else
		pEta[3173] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3386] = minval;
		else
			pEta[3386] = -minval;
	}
	else
		pEta[3386] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3693] = minval;
		else
			pEta[3693] = -minval;
	}
	else
		pEta[3693] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4016] = minval;
		else
			pEta[4016] = -minval;
	}
	else
		pEta[4016] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4051] = minval;
		else
			pEta[4051] = -minval;
	}
	else
		pEta[4051] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4529] = minval;
		else
			pEta[4529] = -minval;
	}
	else
		pEta[4529] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 307     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[51] + pEtaPrev[207];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[132] + pEtaPrev[529];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[205] + pEtaPrev[822];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[252] + pEtaPrev[1010];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[307] + pEtaPrev[1231];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[438] + pEtaPrev[1754];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[464] + pEtaPrev[1858];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[488] + pEtaPrev[1953];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[563] + pEtaPrev[2255];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[642] + pEtaPrev[2570];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[703] + pEtaPrev[2813];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[746] + pEtaPrev[2986];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[819] + pEtaPrev[3175];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[916] + pEtaPrev[3389];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1018] + pEtaPrev[3696];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1211] + pEtaPrev[4019];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1223] + pEtaPrev[4054];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1331] + pEtaPrev[4535];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[207] = minval;
		else
			pEta[207] = -minval;
	}
	else
		pEta[207] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[529] = minval;
		else
			pEta[529] = -minval;
	}
	else
		pEta[529] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[822] = minval;
		else
			pEta[822] = -minval;
	}
	else
		pEta[822] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1010] = minval;
		else
			pEta[1010] = -minval;
	}
	else
		pEta[1010] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1231] = minval;
		else
			pEta[1231] = -minval;
	}
	else
		pEta[1231] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1754] = minval;
		else
			pEta[1754] = -minval;
	}
	else
		pEta[1754] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1858] = minval;
		else
			pEta[1858] = -minval;
	}
	else
		pEta[1858] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1953] = minval;
		else
			pEta[1953] = -minval;
	}
	else
		pEta[1953] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2255] = minval;
		else
			pEta[2255] = -minval;
	}
	else
		pEta[2255] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2570] = minval;
		else
			pEta[2570] = -minval;
	}
	else
		pEta[2570] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2813] = minval;
		else
			pEta[2813] = -minval;
	}
	else
		pEta[2813] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2986] = minval;
		else
			pEta[2986] = -minval;
	}
	else
		pEta[2986] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3175] = minval;
		else
			pEta[3175] = -minval;
	}
	else
		pEta[3175] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3389] = minval;
		else
			pEta[3389] = -minval;
	}
	else
		pEta[3389] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3696] = minval;
		else
			pEta[3696] = -minval;
	}
	else
		pEta[3696] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4019] = minval;
		else
			pEta[4019] = -minval;
	}
	else
		pEta[4019] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4054] = minval;
		else
			pEta[4054] = -minval;
	}
	else
		pEta[4054] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4535] = minval;
		else
			pEta[4535] = -minval;
	}
	else
		pEta[4535] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 308     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[52] + pEtaPrev[211];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[133] + pEtaPrev[533];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[206] + pEtaPrev[826];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[253] + pEtaPrev[1014];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[308] + pEtaPrev[1235];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[439] + pEtaPrev[1758];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[465] + pEtaPrev[1862];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[489] + pEtaPrev[1957];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[564] + pEtaPrev[2259];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[643] + pEtaPrev[2574];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[672] + pEtaPrev[2689];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[747] + pEtaPrev[2990];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[820] + pEtaPrev[3177];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[917] + pEtaPrev[3392];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1019] + pEtaPrev[3699];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1212] + pEtaPrev[4022];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1224] + pEtaPrev[4057];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1332] + pEtaPrev[4541];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[211] = minval;
		else
			pEta[211] = -minval;
	}
	else
		pEta[211] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[533] = minval;
		else
			pEta[533] = -minval;
	}
	else
		pEta[533] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[826] = minval;
		else
			pEta[826] = -minval;
	}
	else
		pEta[826] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1014] = minval;
		else
			pEta[1014] = -minval;
	}
	else
		pEta[1014] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1235] = minval;
		else
			pEta[1235] = -minval;
	}
	else
		pEta[1235] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1758] = minval;
		else
			pEta[1758] = -minval;
	}
	else
		pEta[1758] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1862] = minval;
		else
			pEta[1862] = -minval;
	}
	else
		pEta[1862] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1957] = minval;
		else
			pEta[1957] = -minval;
	}
	else
		pEta[1957] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2259] = minval;
		else
			pEta[2259] = -minval;
	}
	else
		pEta[2259] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2574] = minval;
		else
			pEta[2574] = -minval;
	}
	else
		pEta[2574] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2689] = minval;
		else
			pEta[2689] = -minval;
	}
	else
		pEta[2689] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2990] = minval;
		else
			pEta[2990] = -minval;
	}
	else
		pEta[2990] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3177] = minval;
		else
			pEta[3177] = -minval;
	}
	else
		pEta[3177] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3392] = minval;
		else
			pEta[3392] = -minval;
	}
	else
		pEta[3392] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3699] = minval;
		else
			pEta[3699] = -minval;
	}
	else
		pEta[3699] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4022] = minval;
		else
			pEta[4022] = -minval;
	}
	else
		pEta[4022] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4057] = minval;
		else
			pEta[4057] = -minval;
	}
	else
		pEta[4057] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4541] = minval;
		else
			pEta[4541] = -minval;
	}
	else
		pEta[4541] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 309     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[53] + pEtaPrev[215];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[134] + pEtaPrev[537];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[207] + pEtaPrev[830];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[254] + pEtaPrev[1018];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[309] + pEtaPrev[1239];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[440] + pEtaPrev[1762];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[466] + pEtaPrev[1866];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[490] + pEtaPrev[1961];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[565] + pEtaPrev[2263];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[644] + pEtaPrev[2578];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[673] + pEtaPrev[2693];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[748] + pEtaPrev[2994];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[821] + pEtaPrev[3179];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[918] + pEtaPrev[3395];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1020] + pEtaPrev[3702];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1213] + pEtaPrev[4025];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1225] + pEtaPrev[4060];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1333] + pEtaPrev[4547];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[215] = minval;
		else
			pEta[215] = -minval;
	}
	else
		pEta[215] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[537] = minval;
		else
			pEta[537] = -minval;
	}
	else
		pEta[537] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[830] = minval;
		else
			pEta[830] = -minval;
	}
	else
		pEta[830] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1018] = minval;
		else
			pEta[1018] = -minval;
	}
	else
		pEta[1018] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1239] = minval;
		else
			pEta[1239] = -minval;
	}
	else
		pEta[1239] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1762] = minval;
		else
			pEta[1762] = -minval;
	}
	else
		pEta[1762] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1866] = minval;
		else
			pEta[1866] = -minval;
	}
	else
		pEta[1866] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1961] = minval;
		else
			pEta[1961] = -minval;
	}
	else
		pEta[1961] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2263] = minval;
		else
			pEta[2263] = -minval;
	}
	else
		pEta[2263] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2578] = minval;
		else
			pEta[2578] = -minval;
	}
	else
		pEta[2578] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2693] = minval;
		else
			pEta[2693] = -minval;
	}
	else
		pEta[2693] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2994] = minval;
		else
			pEta[2994] = -minval;
	}
	else
		pEta[2994] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3179] = minval;
		else
			pEta[3179] = -minval;
	}
	else
		pEta[3179] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3395] = minval;
		else
			pEta[3395] = -minval;
	}
	else
		pEta[3395] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3702] = minval;
		else
			pEta[3702] = -minval;
	}
	else
		pEta[3702] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4025] = minval;
		else
			pEta[4025] = -minval;
	}
	else
		pEta[4025] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4060] = minval;
		else
			pEta[4060] = -minval;
	}
	else
		pEta[4060] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4547] = minval;
		else
			pEta[4547] = -minval;
	}
	else
		pEta[4547] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 310     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[54] + pEtaPrev[219];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[135] + pEtaPrev[541];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[208] + pEtaPrev[834];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[255] + pEtaPrev[1022];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[310] + pEtaPrev[1243];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[441] + pEtaPrev[1766];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[467] + pEtaPrev[1870];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[491] + pEtaPrev[1965];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[566] + pEtaPrev[2267];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[645] + pEtaPrev[2582];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[674] + pEtaPrev[2697];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[749] + pEtaPrev[2998];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[822] + pEtaPrev[3181];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[919] + pEtaPrev[3398];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1021] + pEtaPrev[3705];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1214] + pEtaPrev[4028];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1226] + pEtaPrev[4063];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1334] + pEtaPrev[4553];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[219] = minval;
		else
			pEta[219] = -minval;
	}
	else
		pEta[219] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[541] = minval;
		else
			pEta[541] = -minval;
	}
	else
		pEta[541] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[834] = minval;
		else
			pEta[834] = -minval;
	}
	else
		pEta[834] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1022] = minval;
		else
			pEta[1022] = -minval;
	}
	else
		pEta[1022] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1243] = minval;
		else
			pEta[1243] = -minval;
	}
	else
		pEta[1243] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1766] = minval;
		else
			pEta[1766] = -minval;
	}
	else
		pEta[1766] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1870] = minval;
		else
			pEta[1870] = -minval;
	}
	else
		pEta[1870] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1965] = minval;
		else
			pEta[1965] = -minval;
	}
	else
		pEta[1965] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2267] = minval;
		else
			pEta[2267] = -minval;
	}
	else
		pEta[2267] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2582] = minval;
		else
			pEta[2582] = -minval;
	}
	else
		pEta[2582] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2697] = minval;
		else
			pEta[2697] = -minval;
	}
	else
		pEta[2697] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2998] = minval;
		else
			pEta[2998] = -minval;
	}
	else
		pEta[2998] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3181] = minval;
		else
			pEta[3181] = -minval;
	}
	else
		pEta[3181] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3398] = minval;
		else
			pEta[3398] = -minval;
	}
	else
		pEta[3398] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3705] = minval;
		else
			pEta[3705] = -minval;
	}
	else
		pEta[3705] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4028] = minval;
		else
			pEta[4028] = -minval;
	}
	else
		pEta[4028] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4063] = minval;
		else
			pEta[4063] = -minval;
	}
	else
		pEta[4063] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4553] = minval;
		else
			pEta[4553] = -minval;
	}
	else
		pEta[4553] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 311     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[55] + pEtaPrev[223];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[136] + pEtaPrev[545];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[209] + pEtaPrev[838];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[224] + pEtaPrev[898];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[311] + pEtaPrev[1247];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[442] + pEtaPrev[1770];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[468] + pEtaPrev[1874];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[492] + pEtaPrev[1969];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[567] + pEtaPrev[2271];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[646] + pEtaPrev[2586];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[675] + pEtaPrev[2701];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[750] + pEtaPrev[3002];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[823] + pEtaPrev[3183];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[920] + pEtaPrev[3401];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1022] + pEtaPrev[3708];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1215] + pEtaPrev[4031];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1227] + pEtaPrev[4066];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1335] + pEtaPrev[4559];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[223] = minval;
		else
			pEta[223] = -minval;
	}
	else
		pEta[223] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[545] = minval;
		else
			pEta[545] = -minval;
	}
	else
		pEta[545] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[838] = minval;
		else
			pEta[838] = -minval;
	}
	else
		pEta[838] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[898] = minval;
		else
			pEta[898] = -minval;
	}
	else
		pEta[898] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1247] = minval;
		else
			pEta[1247] = -minval;
	}
	else
		pEta[1247] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1770] = minval;
		else
			pEta[1770] = -minval;
	}
	else
		pEta[1770] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1874] = minval;
		else
			pEta[1874] = -minval;
	}
	else
		pEta[1874] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1969] = minval;
		else
			pEta[1969] = -minval;
	}
	else
		pEta[1969] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2271] = minval;
		else
			pEta[2271] = -minval;
	}
	else
		pEta[2271] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2586] = minval;
		else
			pEta[2586] = -minval;
	}
	else
		pEta[2586] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2701] = minval;
		else
			pEta[2701] = -minval;
	}
	else
		pEta[2701] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3002] = minval;
		else
			pEta[3002] = -minval;
	}
	else
		pEta[3002] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3183] = minval;
		else
			pEta[3183] = -minval;
	}
	else
		pEta[3183] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3401] = minval;
		else
			pEta[3401] = -minval;
	}
	else
		pEta[3401] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3708] = minval;
		else
			pEta[3708] = -minval;
	}
	else
		pEta[3708] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4031] = minval;
		else
			pEta[4031] = -minval;
	}
	else
		pEta[4031] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4066] = minval;
		else
			pEta[4066] = -minval;
	}
	else
		pEta[4066] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4559] = minval;
		else
			pEta[4559] = -minval;
	}
	else
		pEta[4559] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 312     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[56] + pEtaPrev[227];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[137] + pEtaPrev[549];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[210] + pEtaPrev[842];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[225] + pEtaPrev[902];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[312] + pEtaPrev[1251];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[443] + pEtaPrev[1774];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[469] + pEtaPrev[1878];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[493] + pEtaPrev[1973];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[568] + pEtaPrev[2275];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[647] + pEtaPrev[2590];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[676] + pEtaPrev[2705];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[751] + pEtaPrev[3006];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[824] + pEtaPrev[3185];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[921] + pEtaPrev[3404];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[1023] + pEtaPrev[3711];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1184] + pEtaPrev[3938];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1228] + pEtaPrev[4069];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1336] + pEtaPrev[4565];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[227] = minval;
		else
			pEta[227] = -minval;
	}
	else
		pEta[227] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[549] = minval;
		else
			pEta[549] = -minval;
	}
	else
		pEta[549] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[842] = minval;
		else
			pEta[842] = -minval;
	}
	else
		pEta[842] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[902] = minval;
		else
			pEta[902] = -minval;
	}
	else
		pEta[902] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1251] = minval;
		else
			pEta[1251] = -minval;
	}
	else
		pEta[1251] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1774] = minval;
		else
			pEta[1774] = -minval;
	}
	else
		pEta[1774] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1878] = minval;
		else
			pEta[1878] = -minval;
	}
	else
		pEta[1878] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1973] = minval;
		else
			pEta[1973] = -minval;
	}
	else
		pEta[1973] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2275] = minval;
		else
			pEta[2275] = -minval;
	}
	else
		pEta[2275] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2590] = minval;
		else
			pEta[2590] = -minval;
	}
	else
		pEta[2590] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2705] = minval;
		else
			pEta[2705] = -minval;
	}
	else
		pEta[2705] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3006] = minval;
		else
			pEta[3006] = -minval;
	}
	else
		pEta[3006] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3185] = minval;
		else
			pEta[3185] = -minval;
	}
	else
		pEta[3185] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3404] = minval;
		else
			pEta[3404] = -minval;
	}
	else
		pEta[3404] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3711] = minval;
		else
			pEta[3711] = -minval;
	}
	else
		pEta[3711] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3938] = minval;
		else
			pEta[3938] = -minval;
	}
	else
		pEta[3938] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4069] = minval;
		else
			pEta[4069] = -minval;
	}
	else
		pEta[4069] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4565] = minval;
		else
			pEta[4565] = -minval;
	}
	else
		pEta[4565] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 313     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[57] + pEtaPrev[231];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[138] + pEtaPrev[553];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[211] + pEtaPrev[846];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[226] + pEtaPrev[906];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[313] + pEtaPrev[1255];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[444] + pEtaPrev[1778];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[470] + pEtaPrev[1882];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[494] + pEtaPrev[1977];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[569] + pEtaPrev[2279];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[648] + pEtaPrev[2594];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[677] + pEtaPrev[2709];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[752] + pEtaPrev[3010];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[825] + pEtaPrev[3187];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[922] + pEtaPrev[3407];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[992] + pEtaPrev[3618];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1185] + pEtaPrev[3941];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1229] + pEtaPrev[4072];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1337] + pEtaPrev[4571];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[231] = minval;
		else
			pEta[231] = -minval;
	}
	else
		pEta[231] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[553] = minval;
		else
			pEta[553] = -minval;
	}
	else
		pEta[553] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[846] = minval;
		else
			pEta[846] = -minval;
	}
	else
		pEta[846] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[906] = minval;
		else
			pEta[906] = -minval;
	}
	else
		pEta[906] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1255] = minval;
		else
			pEta[1255] = -minval;
	}
	else
		pEta[1255] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1778] = minval;
		else
			pEta[1778] = -minval;
	}
	else
		pEta[1778] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1882] = minval;
		else
			pEta[1882] = -minval;
	}
	else
		pEta[1882] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1977] = minval;
		else
			pEta[1977] = -minval;
	}
	else
		pEta[1977] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2279] = minval;
		else
			pEta[2279] = -minval;
	}
	else
		pEta[2279] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2594] = minval;
		else
			pEta[2594] = -minval;
	}
	else
		pEta[2594] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2709] = minval;
		else
			pEta[2709] = -minval;
	}
	else
		pEta[2709] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3010] = minval;
		else
			pEta[3010] = -minval;
	}
	else
		pEta[3010] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3187] = minval;
		else
			pEta[3187] = -minval;
	}
	else
		pEta[3187] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3407] = minval;
		else
			pEta[3407] = -minval;
	}
	else
		pEta[3407] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3618] = minval;
		else
			pEta[3618] = -minval;
	}
	else
		pEta[3618] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3941] = minval;
		else
			pEta[3941] = -minval;
	}
	else
		pEta[3941] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4072] = minval;
		else
			pEta[4072] = -minval;
	}
	else
		pEta[4072] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4571] = minval;
		else
			pEta[4571] = -minval;
	}
	else
		pEta[4571] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 314     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[58] + pEtaPrev[235];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[139] + pEtaPrev[557];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[212] + pEtaPrev[850];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[227] + pEtaPrev[910];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[314] + pEtaPrev[1259];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[445] + pEtaPrev[1782];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[471] + pEtaPrev[1886];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[495] + pEtaPrev[1981];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[570] + pEtaPrev[2283];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[649] + pEtaPrev[2598];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[678] + pEtaPrev[2713];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[753] + pEtaPrev[3014];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[826] + pEtaPrev[3189];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[923] + pEtaPrev[3410];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[993] + pEtaPrev[3621];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1186] + pEtaPrev[3944];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1230] + pEtaPrev[4075];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1338] + pEtaPrev[4577];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[235] = minval;
		else
			pEta[235] = -minval;
	}
	else
		pEta[235] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[557] = minval;
		else
			pEta[557] = -minval;
	}
	else
		pEta[557] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[850] = minval;
		else
			pEta[850] = -minval;
	}
	else
		pEta[850] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[910] = minval;
		else
			pEta[910] = -minval;
	}
	else
		pEta[910] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1259] = minval;
		else
			pEta[1259] = -minval;
	}
	else
		pEta[1259] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1782] = minval;
		else
			pEta[1782] = -minval;
	}
	else
		pEta[1782] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1886] = minval;
		else
			pEta[1886] = -minval;
	}
	else
		pEta[1886] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1981] = minval;
		else
			pEta[1981] = -minval;
	}
	else
		pEta[1981] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2283] = minval;
		else
			pEta[2283] = -minval;
	}
	else
		pEta[2283] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2598] = minval;
		else
			pEta[2598] = -minval;
	}
	else
		pEta[2598] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2713] = minval;
		else
			pEta[2713] = -minval;
	}
	else
		pEta[2713] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3014] = minval;
		else
			pEta[3014] = -minval;
	}
	else
		pEta[3014] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3189] = minval;
		else
			pEta[3189] = -minval;
	}
	else
		pEta[3189] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3410] = minval;
		else
			pEta[3410] = -minval;
	}
	else
		pEta[3410] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3621] = minval;
		else
			pEta[3621] = -minval;
	}
	else
		pEta[3621] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3944] = minval;
		else
			pEta[3944] = -minval;
	}
	else
		pEta[3944] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4075] = minval;
		else
			pEta[4075] = -minval;
	}
	else
		pEta[4075] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4577] = minval;
		else
			pEta[4577] = -minval;
	}
	else
		pEta[4577] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 315     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[59] + pEtaPrev[239];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[140] + pEtaPrev[561];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[213] + pEtaPrev[854];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[228] + pEtaPrev[914];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[315] + pEtaPrev[1263];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[446] + pEtaPrev[1786];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[472] + pEtaPrev[1890];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[496] + pEtaPrev[1985];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[571] + pEtaPrev[2287];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[650] + pEtaPrev[2602];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[679] + pEtaPrev[2717];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[754] + pEtaPrev[3018];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[827] + pEtaPrev[3191];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[924] + pEtaPrev[3413];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[994] + pEtaPrev[3624];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1187] + pEtaPrev[3947];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1231] + pEtaPrev[4078];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1339] + pEtaPrev[4583];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[239] = minval;
		else
			pEta[239] = -minval;
	}
	else
		pEta[239] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[561] = minval;
		else
			pEta[561] = -minval;
	}
	else
		pEta[561] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[854] = minval;
		else
			pEta[854] = -minval;
	}
	else
		pEta[854] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[914] = minval;
		else
			pEta[914] = -minval;
	}
	else
		pEta[914] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1263] = minval;
		else
			pEta[1263] = -minval;
	}
	else
		pEta[1263] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1786] = minval;
		else
			pEta[1786] = -minval;
	}
	else
		pEta[1786] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1890] = minval;
		else
			pEta[1890] = -minval;
	}
	else
		pEta[1890] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1985] = minval;
		else
			pEta[1985] = -minval;
	}
	else
		pEta[1985] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2287] = minval;
		else
			pEta[2287] = -minval;
	}
	else
		pEta[2287] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2602] = minval;
		else
			pEta[2602] = -minval;
	}
	else
		pEta[2602] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2717] = minval;
		else
			pEta[2717] = -minval;
	}
	else
		pEta[2717] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3018] = minval;
		else
			pEta[3018] = -minval;
	}
	else
		pEta[3018] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3191] = minval;
		else
			pEta[3191] = -minval;
	}
	else
		pEta[3191] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3413] = minval;
		else
			pEta[3413] = -minval;
	}
	else
		pEta[3413] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3624] = minval;
		else
			pEta[3624] = -minval;
	}
	else
		pEta[3624] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3947] = minval;
		else
			pEta[3947] = -minval;
	}
	else
		pEta[3947] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4078] = minval;
		else
			pEta[4078] = -minval;
	}
	else
		pEta[4078] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4583] = minval;
		else
			pEta[4583] = -minval;
	}
	else
		pEta[4583] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 316     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[60] + pEtaPrev[243];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[141] + pEtaPrev[565];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[214] + pEtaPrev[858];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[229] + pEtaPrev[918];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[316] + pEtaPrev[1267];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[447] + pEtaPrev[1790];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[473] + pEtaPrev[1894];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[497] + pEtaPrev[1989];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[572] + pEtaPrev[2291];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[651] + pEtaPrev[2606];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[680] + pEtaPrev[2721];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[755] + pEtaPrev[3022];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[828] + pEtaPrev[3193];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[925] + pEtaPrev[3416];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[995] + pEtaPrev[3627];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1188] + pEtaPrev[3950];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1232] + pEtaPrev[4081];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1340] + pEtaPrev[4589];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[243] = minval;
		else
			pEta[243] = -minval;
	}
	else
		pEta[243] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[565] = minval;
		else
			pEta[565] = -minval;
	}
	else
		pEta[565] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[858] = minval;
		else
			pEta[858] = -minval;
	}
	else
		pEta[858] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[918] = minval;
		else
			pEta[918] = -minval;
	}
	else
		pEta[918] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1267] = minval;
		else
			pEta[1267] = -minval;
	}
	else
		pEta[1267] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1790] = minval;
		else
			pEta[1790] = -minval;
	}
	else
		pEta[1790] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1894] = minval;
		else
			pEta[1894] = -minval;
	}
	else
		pEta[1894] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1989] = minval;
		else
			pEta[1989] = -minval;
	}
	else
		pEta[1989] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2291] = minval;
		else
			pEta[2291] = -minval;
	}
	else
		pEta[2291] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2606] = minval;
		else
			pEta[2606] = -minval;
	}
	else
		pEta[2606] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2721] = minval;
		else
			pEta[2721] = -minval;
	}
	else
		pEta[2721] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3022] = minval;
		else
			pEta[3022] = -minval;
	}
	else
		pEta[3022] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3193] = minval;
		else
			pEta[3193] = -minval;
	}
	else
		pEta[3193] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3416] = minval;
		else
			pEta[3416] = -minval;
	}
	else
		pEta[3416] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3627] = minval;
		else
			pEta[3627] = -minval;
	}
	else
		pEta[3627] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3950] = minval;
		else
			pEta[3950] = -minval;
	}
	else
		pEta[3950] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4081] = minval;
		else
			pEta[4081] = -minval;
	}
	else
		pEta[4081] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4589] = minval;
		else
			pEta[4589] = -minval;
	}
	else
		pEta[4589] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 317     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[61] + pEtaPrev[247];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[142] + pEtaPrev[569];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[215] + pEtaPrev[862];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[230] + pEtaPrev[922];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[317] + pEtaPrev[1271];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[416] + pEtaPrev[1666];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[474] + pEtaPrev[1898];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[498] + pEtaPrev[1993];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[573] + pEtaPrev[2295];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[652] + pEtaPrev[2610];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[681] + pEtaPrev[2725];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[756] + pEtaPrev[3026];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[829] + pEtaPrev[3195];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[926] + pEtaPrev[3419];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[996] + pEtaPrev[3630];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1189] + pEtaPrev[3953];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1233] + pEtaPrev[4084];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1341] + pEtaPrev[4595];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[247] = minval;
		else
			pEta[247] = -minval;
	}
	else
		pEta[247] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[569] = minval;
		else
			pEta[569] = -minval;
	}
	else
		pEta[569] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[862] = minval;
		else
			pEta[862] = -minval;
	}
	else
		pEta[862] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[922] = minval;
		else
			pEta[922] = -minval;
	}
	else
		pEta[922] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1271] = minval;
		else
			pEta[1271] = -minval;
	}
	else
		pEta[1271] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1666] = minval;
		else
			pEta[1666] = -minval;
	}
	else
		pEta[1666] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1898] = minval;
		else
			pEta[1898] = -minval;
	}
	else
		pEta[1898] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1993] = minval;
		else
			pEta[1993] = -minval;
	}
	else
		pEta[1993] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2295] = minval;
		else
			pEta[2295] = -minval;
	}
	else
		pEta[2295] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2610] = minval;
		else
			pEta[2610] = -minval;
	}
	else
		pEta[2610] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2725] = minval;
		else
			pEta[2725] = -minval;
	}
	else
		pEta[2725] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3026] = minval;
		else
			pEta[3026] = -minval;
	}
	else
		pEta[3026] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3195] = minval;
		else
			pEta[3195] = -minval;
	}
	else
		pEta[3195] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3419] = minval;
		else
			pEta[3419] = -minval;
	}
	else
		pEta[3419] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3630] = minval;
		else
			pEta[3630] = -minval;
	}
	else
		pEta[3630] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3953] = minval;
		else
			pEta[3953] = -minval;
	}
	else
		pEta[3953] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4084] = minval;
		else
			pEta[4084] = -minval;
	}
	else
		pEta[4084] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4595] = minval;
		else
			pEta[4595] = -minval;
	}
	else
		pEta[4595] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 318     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[62] + pEtaPrev[251];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[143] + pEtaPrev[573];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[216] + pEtaPrev[866];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[231] + pEtaPrev[926];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[318] + pEtaPrev[1275];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[417] + pEtaPrev[1670];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[475] + pEtaPrev[1902];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[499] + pEtaPrev[1997];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[574] + pEtaPrev[2299];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[653] + pEtaPrev[2614];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[682] + pEtaPrev[2729];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[757] + pEtaPrev[3030];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[830] + pEtaPrev[3197];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[927] + pEtaPrev[3422];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[997] + pEtaPrev[3633];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1190] + pEtaPrev[3956];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1234] + pEtaPrev[4087];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1342] + pEtaPrev[4601];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[251] = minval;
		else
			pEta[251] = -minval;
	}
	else
		pEta[251] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[573] = minval;
		else
			pEta[573] = -minval;
	}
	else
		pEta[573] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[866] = minval;
		else
			pEta[866] = -minval;
	}
	else
		pEta[866] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[926] = minval;
		else
			pEta[926] = -minval;
	}
	else
		pEta[926] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1275] = minval;
		else
			pEta[1275] = -minval;
	}
	else
		pEta[1275] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1670] = minval;
		else
			pEta[1670] = -minval;
	}
	else
		pEta[1670] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1902] = minval;
		else
			pEta[1902] = -minval;
	}
	else
		pEta[1902] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1997] = minval;
		else
			pEta[1997] = -minval;
	}
	else
		pEta[1997] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2299] = minval;
		else
			pEta[2299] = -minval;
	}
	else
		pEta[2299] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2614] = minval;
		else
			pEta[2614] = -minval;
	}
	else
		pEta[2614] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2729] = minval;
		else
			pEta[2729] = -minval;
	}
	else
		pEta[2729] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3030] = minval;
		else
			pEta[3030] = -minval;
	}
	else
		pEta[3030] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3197] = minval;
		else
			pEta[3197] = -minval;
	}
	else
		pEta[3197] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3422] = minval;
		else
			pEta[3422] = -minval;
	}
	else
		pEta[3422] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3633] = minval;
		else
			pEta[3633] = -minval;
	}
	else
		pEta[3633] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3956] = minval;
		else
			pEta[3956] = -minval;
	}
	else
		pEta[3956] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4087] = minval;
		else
			pEta[4087] = -minval;
	}
	else
		pEta[4087] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4601] = minval;
		else
			pEta[4601] = -minval;
	}
	else
		pEta[4601] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 319     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[63] + pEtaPrev[255];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[144] + pEtaPrev[577];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[217] + pEtaPrev[870];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[232] + pEtaPrev[930];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[319] + pEtaPrev[1279];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[418] + pEtaPrev[1674];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[476] + pEtaPrev[1906];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[500] + pEtaPrev[2001];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[575] + pEtaPrev[2303];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[654] + pEtaPrev[2618];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[683] + pEtaPrev[2733];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[758] + pEtaPrev[3034];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[831] + pEtaPrev[3199];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[896] + pEtaPrev[3329];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[998] + pEtaPrev[3636];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1191] + pEtaPrev[3959];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1235] + pEtaPrev[4090];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1343] + pEtaPrev[4607];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[255] = minval;
		else
			pEta[255] = -minval;
	}
	else
		pEta[255] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[577] = minval;
		else
			pEta[577] = -minval;
	}
	else
		pEta[577] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[870] = minval;
		else
			pEta[870] = -minval;
	}
	else
		pEta[870] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[930] = minval;
		else
			pEta[930] = -minval;
	}
	else
		pEta[930] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1279] = minval;
		else
			pEta[1279] = -minval;
	}
	else
		pEta[1279] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1674] = minval;
		else
			pEta[1674] = -minval;
	}
	else
		pEta[1674] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1906] = minval;
		else
			pEta[1906] = -minval;
	}
	else
		pEta[1906] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2001] = minval;
		else
			pEta[2001] = -minval;
	}
	else
		pEta[2001] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2303] = minval;
		else
			pEta[2303] = -minval;
	}
	else
		pEta[2303] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2618] = minval;
		else
			pEta[2618] = -minval;
	}
	else
		pEta[2618] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2733] = minval;
		else
			pEta[2733] = -minval;
	}
	else
		pEta[2733] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3034] = minval;
		else
			pEta[3034] = -minval;
	}
	else
		pEta[3034] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3199] = minval;
		else
			pEta[3199] = -minval;
	}
	else
		pEta[3199] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3329] = minval;
		else
			pEta[3329] = -minval;
	}
	else
		pEta[3329] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3636] = minval;
		else
			pEta[3636] = -minval;
	}
	else
		pEta[3636] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3959] = minval;
		else
			pEta[3959] = -minval;
	}
	else
		pEta[3959] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4090] = minval;
		else
			pEta[4090] = -minval;
	}
	else
		pEta[4090] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4607] = minval;
		else
			pEta[4607] = -minval;
	}
	else
		pEta[4607] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 320     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[64] + pEtaPrev[259];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[143] + pEtaPrev[574];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[173] + pEtaPrev[694];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[227] + pEtaPrev[911];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[320] + pEtaPrev[1283];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[392] + pEtaPrev[1570];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[459] + pEtaPrev[1839];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[484] + pEtaPrev[1938];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[576] + pEtaPrev[2307];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[644] + pEtaPrev[2579];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[695] + pEtaPrev[2782];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[722] + pEtaPrev[2890];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[832] + pEtaPrev[3201];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[906] + pEtaPrev[3360];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[944] + pEtaPrev[3473];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1229] + pEtaPrev[4073];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1257] + pEtaPrev[4156];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1344] + pEtaPrev[4613];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[259] = minval;
		else
			pEta[259] = -minval;
	}
	else
		pEta[259] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[574] = minval;
		else
			pEta[574] = -minval;
	}
	else
		pEta[574] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[694] = minval;
		else
			pEta[694] = -minval;
	}
	else
		pEta[694] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[911] = minval;
		else
			pEta[911] = -minval;
	}
	else
		pEta[911] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1283] = minval;
		else
			pEta[1283] = -minval;
	}
	else
		pEta[1283] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1570] = minval;
		else
			pEta[1570] = -minval;
	}
	else
		pEta[1570] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1839] = minval;
		else
			pEta[1839] = -minval;
	}
	else
		pEta[1839] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1938] = minval;
		else
			pEta[1938] = -minval;
	}
	else
		pEta[1938] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2307] = minval;
		else
			pEta[2307] = -minval;
	}
	else
		pEta[2307] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2579] = minval;
		else
			pEta[2579] = -minval;
	}
	else
		pEta[2579] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2782] = minval;
		else
			pEta[2782] = -minval;
	}
	else
		pEta[2782] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2890] = minval;
		else
			pEta[2890] = -minval;
	}
	else
		pEta[2890] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3201] = minval;
		else
			pEta[3201] = -minval;
	}
	else
		pEta[3201] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3360] = minval;
		else
			pEta[3360] = -minval;
	}
	else
		pEta[3360] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3473] = minval;
		else
			pEta[3473] = -minval;
	}
	else
		pEta[3473] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4073] = minval;
		else
			pEta[4073] = -minval;
	}
	else
		pEta[4073] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4156] = minval;
		else
			pEta[4156] = -minval;
	}
	else
		pEta[4156] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4613] = minval;
		else
			pEta[4613] = -minval;
	}
	else
		pEta[4613] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 321     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[65] + pEtaPrev[263];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[144] + pEtaPrev[578];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[174] + pEtaPrev[698];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[228] + pEtaPrev[915];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[321] + pEtaPrev[1287];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[393] + pEtaPrev[1574];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[460] + pEtaPrev[1843];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[485] + pEtaPrev[1942];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[577] + pEtaPrev[2311];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[645] + pEtaPrev[2583];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[696] + pEtaPrev[2786];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[723] + pEtaPrev[2894];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[833] + pEtaPrev[3203];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[907] + pEtaPrev[3363];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[945] + pEtaPrev[3476];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1230] + pEtaPrev[4076];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1258] + pEtaPrev[4159];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1345] + pEtaPrev[4619];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[263] = minval;
		else
			pEta[263] = -minval;
	}
	else
		pEta[263] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[578] = minval;
		else
			pEta[578] = -minval;
	}
	else
		pEta[578] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[698] = minval;
		else
			pEta[698] = -minval;
	}
	else
		pEta[698] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[915] = minval;
		else
			pEta[915] = -minval;
	}
	else
		pEta[915] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1287] = minval;
		else
			pEta[1287] = -minval;
	}
	else
		pEta[1287] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1574] = minval;
		else
			pEta[1574] = -minval;
	}
	else
		pEta[1574] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1843] = minval;
		else
			pEta[1843] = -minval;
	}
	else
		pEta[1843] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1942] = minval;
		else
			pEta[1942] = -minval;
	}
	else
		pEta[1942] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2311] = minval;
		else
			pEta[2311] = -minval;
	}
	else
		pEta[2311] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2583] = minval;
		else
			pEta[2583] = -minval;
	}
	else
		pEta[2583] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2786] = minval;
		else
			pEta[2786] = -minval;
	}
	else
		pEta[2786] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2894] = minval;
		else
			pEta[2894] = -minval;
	}
	else
		pEta[2894] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3203] = minval;
		else
			pEta[3203] = -minval;
	}
	else
		pEta[3203] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3363] = minval;
		else
			pEta[3363] = -minval;
	}
	else
		pEta[3363] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3476] = minval;
		else
			pEta[3476] = -minval;
	}
	else
		pEta[3476] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4076] = minval;
		else
			pEta[4076] = -minval;
	}
	else
		pEta[4076] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4159] = minval;
		else
			pEta[4159] = -minval;
	}
	else
		pEta[4159] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4619] = minval;
		else
			pEta[4619] = -minval;
	}
	else
		pEta[4619] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 322     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[66] + pEtaPrev[267];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[145] + pEtaPrev[582];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[175] + pEtaPrev[702];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[229] + pEtaPrev[919];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[322] + pEtaPrev[1291];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[394] + pEtaPrev[1578];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[461] + pEtaPrev[1847];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[486] + pEtaPrev[1946];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[578] + pEtaPrev[2315];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[646] + pEtaPrev[2587];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[697] + pEtaPrev[2790];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[724] + pEtaPrev[2898];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[834] + pEtaPrev[3205];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[908] + pEtaPrev[3366];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[946] + pEtaPrev[3479];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1231] + pEtaPrev[4079];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1259] + pEtaPrev[4162];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1346] + pEtaPrev[4625];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[267] = minval;
		else
			pEta[267] = -minval;
	}
	else
		pEta[267] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[582] = minval;
		else
			pEta[582] = -minval;
	}
	else
		pEta[582] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[702] = minval;
		else
			pEta[702] = -minval;
	}
	else
		pEta[702] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[919] = minval;
		else
			pEta[919] = -minval;
	}
	else
		pEta[919] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1291] = minval;
		else
			pEta[1291] = -minval;
	}
	else
		pEta[1291] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1578] = minval;
		else
			pEta[1578] = -minval;
	}
	else
		pEta[1578] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1847] = minval;
		else
			pEta[1847] = -minval;
	}
	else
		pEta[1847] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1946] = minval;
		else
			pEta[1946] = -minval;
	}
	else
		pEta[1946] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2315] = minval;
		else
			pEta[2315] = -minval;
	}
	else
		pEta[2315] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2587] = minval;
		else
			pEta[2587] = -minval;
	}
	else
		pEta[2587] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2790] = minval;
		else
			pEta[2790] = -minval;
	}
	else
		pEta[2790] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2898] = minval;
		else
			pEta[2898] = -minval;
	}
	else
		pEta[2898] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3205] = minval;
		else
			pEta[3205] = -minval;
	}
	else
		pEta[3205] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3366] = minval;
		else
			pEta[3366] = -minval;
	}
	else
		pEta[3366] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3479] = minval;
		else
			pEta[3479] = -minval;
	}
	else
		pEta[3479] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4079] = minval;
		else
			pEta[4079] = -minval;
	}
	else
		pEta[4079] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4162] = minval;
		else
			pEta[4162] = -minval;
	}
	else
		pEta[4162] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4625] = minval;
		else
			pEta[4625] = -minval;
	}
	else
		pEta[4625] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 323     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[67] + pEtaPrev[271];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[146] + pEtaPrev[586];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[176] + pEtaPrev[706];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[230] + pEtaPrev[923];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[323] + pEtaPrev[1295];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[395] + pEtaPrev[1582];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[462] + pEtaPrev[1851];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[487] + pEtaPrev[1950];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[579] + pEtaPrev[2319];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[647] + pEtaPrev[2591];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[698] + pEtaPrev[2794];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[725] + pEtaPrev[2902];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[835] + pEtaPrev[3207];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[909] + pEtaPrev[3369];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[947] + pEtaPrev[3482];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1232] + pEtaPrev[4082];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1260] + pEtaPrev[4165];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1347] + pEtaPrev[4631];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[271] = minval;
		else
			pEta[271] = -minval;
	}
	else
		pEta[271] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[586] = minval;
		else
			pEta[586] = -minval;
	}
	else
		pEta[586] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[706] = minval;
		else
			pEta[706] = -minval;
	}
	else
		pEta[706] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[923] = minval;
		else
			pEta[923] = -minval;
	}
	else
		pEta[923] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1295] = minval;
		else
			pEta[1295] = -minval;
	}
	else
		pEta[1295] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1582] = minval;
		else
			pEta[1582] = -minval;
	}
	else
		pEta[1582] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1851] = minval;
		else
			pEta[1851] = -minval;
	}
	else
		pEta[1851] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1950] = minval;
		else
			pEta[1950] = -minval;
	}
	else
		pEta[1950] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2319] = minval;
		else
			pEta[2319] = -minval;
	}
	else
		pEta[2319] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2591] = minval;
		else
			pEta[2591] = -minval;
	}
	else
		pEta[2591] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2794] = minval;
		else
			pEta[2794] = -minval;
	}
	else
		pEta[2794] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2902] = minval;
		else
			pEta[2902] = -minval;
	}
	else
		pEta[2902] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3207] = minval;
		else
			pEta[3207] = -minval;
	}
	else
		pEta[3207] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3369] = minval;
		else
			pEta[3369] = -minval;
	}
	else
		pEta[3369] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3482] = minval;
		else
			pEta[3482] = -minval;
	}
	else
		pEta[3482] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4082] = minval;
		else
			pEta[4082] = -minval;
	}
	else
		pEta[4082] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4165] = minval;
		else
			pEta[4165] = -minval;
	}
	else
		pEta[4165] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4631] = minval;
		else
			pEta[4631] = -minval;
	}
	else
		pEta[4631] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 324     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[68] + pEtaPrev[275];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[147] + pEtaPrev[590];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[177] + pEtaPrev[710];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[231] + pEtaPrev[927];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[324] + pEtaPrev[1299];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[396] + pEtaPrev[1586];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[463] + pEtaPrev[1855];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[488] + pEtaPrev[1954];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[580] + pEtaPrev[2323];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[648] + pEtaPrev[2595];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[699] + pEtaPrev[2798];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[726] + pEtaPrev[2906];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[836] + pEtaPrev[3209];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[910] + pEtaPrev[3372];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[948] + pEtaPrev[3485];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1233] + pEtaPrev[4085];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1261] + pEtaPrev[4168];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1348] + pEtaPrev[4637];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[275] = minval;
		else
			pEta[275] = -minval;
	}
	else
		pEta[275] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[590] = minval;
		else
			pEta[590] = -minval;
	}
	else
		pEta[590] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[710] = minval;
		else
			pEta[710] = -minval;
	}
	else
		pEta[710] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[927] = minval;
		else
			pEta[927] = -minval;
	}
	else
		pEta[927] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1299] = minval;
		else
			pEta[1299] = -minval;
	}
	else
		pEta[1299] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1586] = minval;
		else
			pEta[1586] = -minval;
	}
	else
		pEta[1586] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1855] = minval;
		else
			pEta[1855] = -minval;
	}
	else
		pEta[1855] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1954] = minval;
		else
			pEta[1954] = -minval;
	}
	else
		pEta[1954] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2323] = minval;
		else
			pEta[2323] = -minval;
	}
	else
		pEta[2323] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2595] = minval;
		else
			pEta[2595] = -minval;
	}
	else
		pEta[2595] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2798] = minval;
		else
			pEta[2798] = -minval;
	}
	else
		pEta[2798] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2906] = minval;
		else
			pEta[2906] = -minval;
	}
	else
		pEta[2906] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3209] = minval;
		else
			pEta[3209] = -minval;
	}
	else
		pEta[3209] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3372] = minval;
		else
			pEta[3372] = -minval;
	}
	else
		pEta[3372] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3485] = minval;
		else
			pEta[3485] = -minval;
	}
	else
		pEta[3485] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4085] = minval;
		else
			pEta[4085] = -minval;
	}
	else
		pEta[4085] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4168] = minval;
		else
			pEta[4168] = -minval;
	}
	else
		pEta[4168] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4637] = minval;
		else
			pEta[4637] = -minval;
	}
	else
		pEta[4637] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 325     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[69] + pEtaPrev[279];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[148] + pEtaPrev[594];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[178] + pEtaPrev[714];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[232] + pEtaPrev[931];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[325] + pEtaPrev[1303];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[397] + pEtaPrev[1590];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[464] + pEtaPrev[1859];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[489] + pEtaPrev[1958];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[581] + pEtaPrev[2327];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[649] + pEtaPrev[2599];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[700] + pEtaPrev[2802];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[727] + pEtaPrev[2910];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[837] + pEtaPrev[3211];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[911] + pEtaPrev[3375];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[949] + pEtaPrev[3488];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1234] + pEtaPrev[4088];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1262] + pEtaPrev[4171];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1349] + pEtaPrev[4643];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[279] = minval;
		else
			pEta[279] = -minval;
	}
	else
		pEta[279] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[594] = minval;
		else
			pEta[594] = -minval;
	}
	else
		pEta[594] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[714] = minval;
		else
			pEta[714] = -minval;
	}
	else
		pEta[714] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[931] = minval;
		else
			pEta[931] = -minval;
	}
	else
		pEta[931] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1303] = minval;
		else
			pEta[1303] = -minval;
	}
	else
		pEta[1303] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1590] = minval;
		else
			pEta[1590] = -minval;
	}
	else
		pEta[1590] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1859] = minval;
		else
			pEta[1859] = -minval;
	}
	else
		pEta[1859] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1958] = minval;
		else
			pEta[1958] = -minval;
	}
	else
		pEta[1958] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2327] = minval;
		else
			pEta[2327] = -minval;
	}
	else
		pEta[2327] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2599] = minval;
		else
			pEta[2599] = -minval;
	}
	else
		pEta[2599] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2802] = minval;
		else
			pEta[2802] = -minval;
	}
	else
		pEta[2802] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2910] = minval;
		else
			pEta[2910] = -minval;
	}
	else
		pEta[2910] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3211] = minval;
		else
			pEta[3211] = -minval;
	}
	else
		pEta[3211] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3375] = minval;
		else
			pEta[3375] = -minval;
	}
	else
		pEta[3375] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3488] = minval;
		else
			pEta[3488] = -minval;
	}
	else
		pEta[3488] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4088] = minval;
		else
			pEta[4088] = -minval;
	}
	else
		pEta[4088] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4171] = minval;
		else
			pEta[4171] = -minval;
	}
	else
		pEta[4171] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4643] = minval;
		else
			pEta[4643] = -minval;
	}
	else
		pEta[4643] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 326     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[70] + pEtaPrev[283];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[149] + pEtaPrev[598];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[179] + pEtaPrev[718];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[233] + pEtaPrev[935];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[326] + pEtaPrev[1307];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[398] + pEtaPrev[1594];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[465] + pEtaPrev[1863];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[490] + pEtaPrev[1962];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[582] + pEtaPrev[2331];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[650] + pEtaPrev[2603];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[701] + pEtaPrev[2806];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[728] + pEtaPrev[2914];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[838] + pEtaPrev[3213];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[912] + pEtaPrev[3378];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[950] + pEtaPrev[3491];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1235] + pEtaPrev[4091];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1263] + pEtaPrev[4174];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1350] + pEtaPrev[4649];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[283] = minval;
		else
			pEta[283] = -minval;
	}
	else
		pEta[283] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[598] = minval;
		else
			pEta[598] = -minval;
	}
	else
		pEta[598] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[718] = minval;
		else
			pEta[718] = -minval;
	}
	else
		pEta[718] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[935] = minval;
		else
			pEta[935] = -minval;
	}
	else
		pEta[935] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1307] = minval;
		else
			pEta[1307] = -minval;
	}
	else
		pEta[1307] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1594] = minval;
		else
			pEta[1594] = -minval;
	}
	else
		pEta[1594] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1863] = minval;
		else
			pEta[1863] = -minval;
	}
	else
		pEta[1863] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1962] = minval;
		else
			pEta[1962] = -minval;
	}
	else
		pEta[1962] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2331] = minval;
		else
			pEta[2331] = -minval;
	}
	else
		pEta[2331] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2603] = minval;
		else
			pEta[2603] = -minval;
	}
	else
		pEta[2603] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2806] = minval;
		else
			pEta[2806] = -minval;
	}
	else
		pEta[2806] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2914] = minval;
		else
			pEta[2914] = -minval;
	}
	else
		pEta[2914] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3213] = minval;
		else
			pEta[3213] = -minval;
	}
	else
		pEta[3213] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3378] = minval;
		else
			pEta[3378] = -minval;
	}
	else
		pEta[3378] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3491] = minval;
		else
			pEta[3491] = -minval;
	}
	else
		pEta[3491] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4091] = minval;
		else
			pEta[4091] = -minval;
	}
	else
		pEta[4091] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4174] = minval;
		else
			pEta[4174] = -minval;
	}
	else
		pEta[4174] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4649] = minval;
		else
			pEta[4649] = -minval;
	}
	else
		pEta[4649] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 327     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[71] + pEtaPrev[287];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[150] + pEtaPrev[602];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[180] + pEtaPrev[722];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[234] + pEtaPrev[939];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[327] + pEtaPrev[1311];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[399] + pEtaPrev[1598];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[466] + pEtaPrev[1867];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[491] + pEtaPrev[1966];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[583] + pEtaPrev[2335];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[651] + pEtaPrev[2607];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[702] + pEtaPrev[2810];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[729] + pEtaPrev[2918];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[839] + pEtaPrev[3215];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[913] + pEtaPrev[3381];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[951] + pEtaPrev[3494];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1236] + pEtaPrev[4094];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1264] + pEtaPrev[4177];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1351] + pEtaPrev[4655];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[287] = minval;
		else
			pEta[287] = -minval;
	}
	else
		pEta[287] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[602] = minval;
		else
			pEta[602] = -minval;
	}
	else
		pEta[602] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[722] = minval;
		else
			pEta[722] = -minval;
	}
	else
		pEta[722] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[939] = minval;
		else
			pEta[939] = -minval;
	}
	else
		pEta[939] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1311] = minval;
		else
			pEta[1311] = -minval;
	}
	else
		pEta[1311] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1598] = minval;
		else
			pEta[1598] = -minval;
	}
	else
		pEta[1598] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1867] = minval;
		else
			pEta[1867] = -minval;
	}
	else
		pEta[1867] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1966] = minval;
		else
			pEta[1966] = -minval;
	}
	else
		pEta[1966] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2335] = minval;
		else
			pEta[2335] = -minval;
	}
	else
		pEta[2335] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2607] = minval;
		else
			pEta[2607] = -minval;
	}
	else
		pEta[2607] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2810] = minval;
		else
			pEta[2810] = -minval;
	}
	else
		pEta[2810] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2918] = minval;
		else
			pEta[2918] = -minval;
	}
	else
		pEta[2918] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3215] = minval;
		else
			pEta[3215] = -minval;
	}
	else
		pEta[3215] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3381] = minval;
		else
			pEta[3381] = -minval;
	}
	else
		pEta[3381] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3494] = minval;
		else
			pEta[3494] = -minval;
	}
	else
		pEta[3494] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4094] = minval;
		else
			pEta[4094] = -minval;
	}
	else
		pEta[4094] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4177] = minval;
		else
			pEta[4177] = -minval;
	}
	else
		pEta[4177] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4655] = minval;
		else
			pEta[4655] = -minval;
	}
	else
		pEta[4655] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 328     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[72] + pEtaPrev[291];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[151] + pEtaPrev[606];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[181] + pEtaPrev[726];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[235] + pEtaPrev[943];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[328] + pEtaPrev[1315];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[400] + pEtaPrev[1602];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[467] + pEtaPrev[1871];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[492] + pEtaPrev[1970];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[584] + pEtaPrev[2339];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[652] + pEtaPrev[2611];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[703] + pEtaPrev[2814];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[730] + pEtaPrev[2922];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[840] + pEtaPrev[3217];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[914] + pEtaPrev[3384];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[952] + pEtaPrev[3497];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1237] + pEtaPrev[4097];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1265] + pEtaPrev[4180];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1352] + pEtaPrev[4661];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[291] = minval;
		else
			pEta[291] = -minval;
	}
	else
		pEta[291] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[606] = minval;
		else
			pEta[606] = -minval;
	}
	else
		pEta[606] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[726] = minval;
		else
			pEta[726] = -minval;
	}
	else
		pEta[726] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[943] = minval;
		else
			pEta[943] = -minval;
	}
	else
		pEta[943] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1315] = minval;
		else
			pEta[1315] = -minval;
	}
	else
		pEta[1315] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1602] = minval;
		else
			pEta[1602] = -minval;
	}
	else
		pEta[1602] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1871] = minval;
		else
			pEta[1871] = -minval;
	}
	else
		pEta[1871] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1970] = minval;
		else
			pEta[1970] = -minval;
	}
	else
		pEta[1970] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2339] = minval;
		else
			pEta[2339] = -minval;
	}
	else
		pEta[2339] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2611] = minval;
		else
			pEta[2611] = -minval;
	}
	else
		pEta[2611] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2814] = minval;
		else
			pEta[2814] = -minval;
	}
	else
		pEta[2814] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2922] = minval;
		else
			pEta[2922] = -minval;
	}
	else
		pEta[2922] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3217] = minval;
		else
			pEta[3217] = -minval;
	}
	else
		pEta[3217] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3384] = minval;
		else
			pEta[3384] = -minval;
	}
	else
		pEta[3384] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3497] = minval;
		else
			pEta[3497] = -minval;
	}
	else
		pEta[3497] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4097] = minval;
		else
			pEta[4097] = -minval;
	}
	else
		pEta[4097] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4180] = minval;
		else
			pEta[4180] = -minval;
	}
	else
		pEta[4180] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4661] = minval;
		else
			pEta[4661] = -minval;
	}
	else
		pEta[4661] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 329     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[73] + pEtaPrev[295];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[152] + pEtaPrev[610];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[182] + pEtaPrev[730];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[236] + pEtaPrev[947];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[329] + pEtaPrev[1319];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[401] + pEtaPrev[1606];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[468] + pEtaPrev[1875];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[493] + pEtaPrev[1974];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[585] + pEtaPrev[2343];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[653] + pEtaPrev[2615];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[672] + pEtaPrev[2690];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[731] + pEtaPrev[2926];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[841] + pEtaPrev[3219];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[915] + pEtaPrev[3387];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[953] + pEtaPrev[3500];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1238] + pEtaPrev[4100];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1266] + pEtaPrev[4183];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1353] + pEtaPrev[4667];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[295] = minval;
		else
			pEta[295] = -minval;
	}
	else
		pEta[295] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[610] = minval;
		else
			pEta[610] = -minval;
	}
	else
		pEta[610] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[730] = minval;
		else
			pEta[730] = -minval;
	}
	else
		pEta[730] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[947] = minval;
		else
			pEta[947] = -minval;
	}
	else
		pEta[947] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1319] = minval;
		else
			pEta[1319] = -minval;
	}
	else
		pEta[1319] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1606] = minval;
		else
			pEta[1606] = -minval;
	}
	else
		pEta[1606] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1875] = minval;
		else
			pEta[1875] = -minval;
	}
	else
		pEta[1875] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1974] = minval;
		else
			pEta[1974] = -minval;
	}
	else
		pEta[1974] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2343] = minval;
		else
			pEta[2343] = -minval;
	}
	else
		pEta[2343] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2615] = minval;
		else
			pEta[2615] = -minval;
	}
	else
		pEta[2615] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2690] = minval;
		else
			pEta[2690] = -minval;
	}
	else
		pEta[2690] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2926] = minval;
		else
			pEta[2926] = -minval;
	}
	else
		pEta[2926] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3219] = minval;
		else
			pEta[3219] = -minval;
	}
	else
		pEta[3219] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3387] = minval;
		else
			pEta[3387] = -minval;
	}
	else
		pEta[3387] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3500] = minval;
		else
			pEta[3500] = -minval;
	}
	else
		pEta[3500] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4100] = minval;
		else
			pEta[4100] = -minval;
	}
	else
		pEta[4100] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4183] = minval;
		else
			pEta[4183] = -minval;
	}
	else
		pEta[4183] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4667] = minval;
		else
			pEta[4667] = -minval;
	}
	else
		pEta[4667] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 330     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[74] + pEtaPrev[299];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[153] + pEtaPrev[614];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[183] + pEtaPrev[734];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[237] + pEtaPrev[951];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[330] + pEtaPrev[1323];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[402] + pEtaPrev[1610];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[469] + pEtaPrev[1879];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[494] + pEtaPrev[1978];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[586] + pEtaPrev[2347];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[654] + pEtaPrev[2619];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[673] + pEtaPrev[2694];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[732] + pEtaPrev[2930];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[842] + pEtaPrev[3221];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[916] + pEtaPrev[3390];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[954] + pEtaPrev[3503];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1239] + pEtaPrev[4103];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1267] + pEtaPrev[4186];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1354] + pEtaPrev[4673];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[299] = minval;
		else
			pEta[299] = -minval;
	}
	else
		pEta[299] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[614] = minval;
		else
			pEta[614] = -minval;
	}
	else
		pEta[614] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[734] = minval;
		else
			pEta[734] = -minval;
	}
	else
		pEta[734] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[951] = minval;
		else
			pEta[951] = -minval;
	}
	else
		pEta[951] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1323] = minval;
		else
			pEta[1323] = -minval;
	}
	else
		pEta[1323] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1610] = minval;
		else
			pEta[1610] = -minval;
	}
	else
		pEta[1610] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1879] = minval;
		else
			pEta[1879] = -minval;
	}
	else
		pEta[1879] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1978] = minval;
		else
			pEta[1978] = -minval;
	}
	else
		pEta[1978] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2347] = minval;
		else
			pEta[2347] = -minval;
	}
	else
		pEta[2347] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2619] = minval;
		else
			pEta[2619] = -minval;
	}
	else
		pEta[2619] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2694] = minval;
		else
			pEta[2694] = -minval;
	}
	else
		pEta[2694] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2930] = minval;
		else
			pEta[2930] = -minval;
	}
	else
		pEta[2930] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3221] = minval;
		else
			pEta[3221] = -minval;
	}
	else
		pEta[3221] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3390] = minval;
		else
			pEta[3390] = -minval;
	}
	else
		pEta[3390] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3503] = minval;
		else
			pEta[3503] = -minval;
	}
	else
		pEta[3503] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4103] = minval;
		else
			pEta[4103] = -minval;
	}
	else
		pEta[4103] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4186] = minval;
		else
			pEta[4186] = -minval;
	}
	else
		pEta[4186] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4673] = minval;
		else
			pEta[4673] = -minval;
	}
	else
		pEta[4673] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 331     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[75] + pEtaPrev[303];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[154] + pEtaPrev[618];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[184] + pEtaPrev[738];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[238] + pEtaPrev[955];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[331] + pEtaPrev[1327];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[403] + pEtaPrev[1614];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[470] + pEtaPrev[1883];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[495] + pEtaPrev[1982];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[587] + pEtaPrev[2351];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[655] + pEtaPrev[2623];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[674] + pEtaPrev[2698];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[733] + pEtaPrev[2934];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[843] + pEtaPrev[3223];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[917] + pEtaPrev[3393];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[955] + pEtaPrev[3506];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1240] + pEtaPrev[4106];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1268] + pEtaPrev[4189];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1355] + pEtaPrev[4679];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[303] = minval;
		else
			pEta[303] = -minval;
	}
	else
		pEta[303] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[618] = minval;
		else
			pEta[618] = -minval;
	}
	else
		pEta[618] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[738] = minval;
		else
			pEta[738] = -minval;
	}
	else
		pEta[738] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[955] = minval;
		else
			pEta[955] = -minval;
	}
	else
		pEta[955] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1327] = minval;
		else
			pEta[1327] = -minval;
	}
	else
		pEta[1327] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1614] = minval;
		else
			pEta[1614] = -minval;
	}
	else
		pEta[1614] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1883] = minval;
		else
			pEta[1883] = -minval;
	}
	else
		pEta[1883] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1982] = minval;
		else
			pEta[1982] = -minval;
	}
	else
		pEta[1982] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2351] = minval;
		else
			pEta[2351] = -minval;
	}
	else
		pEta[2351] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2623] = minval;
		else
			pEta[2623] = -minval;
	}
	else
		pEta[2623] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2698] = minval;
		else
			pEta[2698] = -minval;
	}
	else
		pEta[2698] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2934] = minval;
		else
			pEta[2934] = -minval;
	}
	else
		pEta[2934] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3223] = minval;
		else
			pEta[3223] = -minval;
	}
	else
		pEta[3223] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3393] = minval;
		else
			pEta[3393] = -minval;
	}
	else
		pEta[3393] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3506] = minval;
		else
			pEta[3506] = -minval;
	}
	else
		pEta[3506] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4106] = minval;
		else
			pEta[4106] = -minval;
	}
	else
		pEta[4106] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4189] = minval;
		else
			pEta[4189] = -minval;
	}
	else
		pEta[4189] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4679] = minval;
		else
			pEta[4679] = -minval;
	}
	else
		pEta[4679] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 332     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[76] + pEtaPrev[307];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[155] + pEtaPrev[622];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[185] + pEtaPrev[742];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[239] + pEtaPrev[959];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[332] + pEtaPrev[1331];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[404] + pEtaPrev[1618];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[471] + pEtaPrev[1887];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[496] + pEtaPrev[1986];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[588] + pEtaPrev[2355];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[656] + pEtaPrev[2627];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[675] + pEtaPrev[2702];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[734] + pEtaPrev[2938];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[844] + pEtaPrev[3225];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[918] + pEtaPrev[3396];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[956] + pEtaPrev[3509];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1241] + pEtaPrev[4109];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1269] + pEtaPrev[4192];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1356] + pEtaPrev[4685];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[307] = minval;
		else
			pEta[307] = -minval;
	}
	else
		pEta[307] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[622] = minval;
		else
			pEta[622] = -minval;
	}
	else
		pEta[622] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[742] = minval;
		else
			pEta[742] = -minval;
	}
	else
		pEta[742] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[959] = minval;
		else
			pEta[959] = -minval;
	}
	else
		pEta[959] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1331] = minval;
		else
			pEta[1331] = -minval;
	}
	else
		pEta[1331] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1618] = minval;
		else
			pEta[1618] = -minval;
	}
	else
		pEta[1618] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1887] = minval;
		else
			pEta[1887] = -minval;
	}
	else
		pEta[1887] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1986] = minval;
		else
			pEta[1986] = -minval;
	}
	else
		pEta[1986] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2355] = minval;
		else
			pEta[2355] = -minval;
	}
	else
		pEta[2355] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2627] = minval;
		else
			pEta[2627] = -minval;
	}
	else
		pEta[2627] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2702] = minval;
		else
			pEta[2702] = -minval;
	}
	else
		pEta[2702] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2938] = minval;
		else
			pEta[2938] = -minval;
	}
	else
		pEta[2938] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3225] = minval;
		else
			pEta[3225] = -minval;
	}
	else
		pEta[3225] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3396] = minval;
		else
			pEta[3396] = -minval;
	}
	else
		pEta[3396] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3509] = minval;
		else
			pEta[3509] = -minval;
	}
	else
		pEta[3509] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4109] = minval;
		else
			pEta[4109] = -minval;
	}
	else
		pEta[4109] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4192] = minval;
		else
			pEta[4192] = -minval;
	}
	else
		pEta[4192] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4685] = minval;
		else
			pEta[4685] = -minval;
	}
	else
		pEta[4685] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 333     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[77] + pEtaPrev[311];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[156] + pEtaPrev[626];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[186] + pEtaPrev[746];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[240] + pEtaPrev[963];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[333] + pEtaPrev[1335];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[405] + pEtaPrev[1622];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[472] + pEtaPrev[1891];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[497] + pEtaPrev[1990];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[589] + pEtaPrev[2359];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[657] + pEtaPrev[2631];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[676] + pEtaPrev[2706];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[735] + pEtaPrev[2942];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[845] + pEtaPrev[3227];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[919] + pEtaPrev[3399];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[957] + pEtaPrev[3512];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1242] + pEtaPrev[4112];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1270] + pEtaPrev[4195];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1357] + pEtaPrev[4691];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[311] = minval;
		else
			pEta[311] = -minval;
	}
	else
		pEta[311] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[626] = minval;
		else
			pEta[626] = -minval;
	}
	else
		pEta[626] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[746] = minval;
		else
			pEta[746] = -minval;
	}
	else
		pEta[746] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[963] = minval;
		else
			pEta[963] = -minval;
	}
	else
		pEta[963] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1335] = minval;
		else
			pEta[1335] = -minval;
	}
	else
		pEta[1335] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1622] = minval;
		else
			pEta[1622] = -minval;
	}
	else
		pEta[1622] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1891] = minval;
		else
			pEta[1891] = -minval;
	}
	else
		pEta[1891] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1990] = minval;
		else
			pEta[1990] = -minval;
	}
	else
		pEta[1990] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2359] = minval;
		else
			pEta[2359] = -minval;
	}
	else
		pEta[2359] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2631] = minval;
		else
			pEta[2631] = -minval;
	}
	else
		pEta[2631] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2706] = minval;
		else
			pEta[2706] = -minval;
	}
	else
		pEta[2706] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2942] = minval;
		else
			pEta[2942] = -minval;
	}
	else
		pEta[2942] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3227] = minval;
		else
			pEta[3227] = -minval;
	}
	else
		pEta[3227] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3399] = minval;
		else
			pEta[3399] = -minval;
	}
	else
		pEta[3399] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3512] = minval;
		else
			pEta[3512] = -minval;
	}
	else
		pEta[3512] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4112] = minval;
		else
			pEta[4112] = -minval;
	}
	else
		pEta[4112] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4195] = minval;
		else
			pEta[4195] = -minval;
	}
	else
		pEta[4195] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4691] = minval;
		else
			pEta[4691] = -minval;
	}
	else
		pEta[4691] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 334     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[78] + pEtaPrev[315];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[157] + pEtaPrev[630];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[187] + pEtaPrev[750];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[241] + pEtaPrev[967];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[334] + pEtaPrev[1339];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[406] + pEtaPrev[1626];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[473] + pEtaPrev[1895];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[498] + pEtaPrev[1994];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[590] + pEtaPrev[2363];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[658] + pEtaPrev[2635];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[677] + pEtaPrev[2710];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[704] + pEtaPrev[2818];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[846] + pEtaPrev[3229];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[920] + pEtaPrev[3402];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[958] + pEtaPrev[3515];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1243] + pEtaPrev[4115];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1271] + pEtaPrev[4198];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1358] + pEtaPrev[4697];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[315] = minval;
		else
			pEta[315] = -minval;
	}
	else
		pEta[315] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[630] = minval;
		else
			pEta[630] = -minval;
	}
	else
		pEta[630] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[750] = minval;
		else
			pEta[750] = -minval;
	}
	else
		pEta[750] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[967] = minval;
		else
			pEta[967] = -minval;
	}
	else
		pEta[967] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1339] = minval;
		else
			pEta[1339] = -minval;
	}
	else
		pEta[1339] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1626] = minval;
		else
			pEta[1626] = -minval;
	}
	else
		pEta[1626] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1895] = minval;
		else
			pEta[1895] = -minval;
	}
	else
		pEta[1895] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1994] = minval;
		else
			pEta[1994] = -minval;
	}
	else
		pEta[1994] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2363] = minval;
		else
			pEta[2363] = -minval;
	}
	else
		pEta[2363] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2635] = minval;
		else
			pEta[2635] = -minval;
	}
	else
		pEta[2635] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2710] = minval;
		else
			pEta[2710] = -minval;
	}
	else
		pEta[2710] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2818] = minval;
		else
			pEta[2818] = -minval;
	}
	else
		pEta[2818] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3229] = minval;
		else
			pEta[3229] = -minval;
	}
	else
		pEta[3229] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3402] = minval;
		else
			pEta[3402] = -minval;
	}
	else
		pEta[3402] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3515] = minval;
		else
			pEta[3515] = -minval;
	}
	else
		pEta[3515] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4115] = minval;
		else
			pEta[4115] = -minval;
	}
	else
		pEta[4115] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4198] = minval;
		else
			pEta[4198] = -minval;
	}
	else
		pEta[4198] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4697] = minval;
		else
			pEta[4697] = -minval;
	}
	else
		pEta[4697] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 335     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[79] + pEtaPrev[319];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[158] + pEtaPrev[634];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[188] + pEtaPrev[754];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[242] + pEtaPrev[971];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[335] + pEtaPrev[1343];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[407] + pEtaPrev[1630];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[474] + pEtaPrev[1899];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[499] + pEtaPrev[1998];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[591] + pEtaPrev[2367];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[659] + pEtaPrev[2639];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[678] + pEtaPrev[2714];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[705] + pEtaPrev[2822];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[847] + pEtaPrev[3231];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[921] + pEtaPrev[3405];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[959] + pEtaPrev[3518];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1244] + pEtaPrev[4118];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1272] + pEtaPrev[4201];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1359] + pEtaPrev[4703];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[319] = minval;
		else
			pEta[319] = -minval;
	}
	else
		pEta[319] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[634] = minval;
		else
			pEta[634] = -minval;
	}
	else
		pEta[634] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[754] = minval;
		else
			pEta[754] = -minval;
	}
	else
		pEta[754] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[971] = minval;
		else
			pEta[971] = -minval;
	}
	else
		pEta[971] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1343] = minval;
		else
			pEta[1343] = -minval;
	}
	else
		pEta[1343] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1630] = minval;
		else
			pEta[1630] = -minval;
	}
	else
		pEta[1630] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1899] = minval;
		else
			pEta[1899] = -minval;
	}
	else
		pEta[1899] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1998] = minval;
		else
			pEta[1998] = -minval;
	}
	else
		pEta[1998] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2367] = minval;
		else
			pEta[2367] = -minval;
	}
	else
		pEta[2367] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2639] = minval;
		else
			pEta[2639] = -minval;
	}
	else
		pEta[2639] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2714] = minval;
		else
			pEta[2714] = -minval;
	}
	else
		pEta[2714] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2822] = minval;
		else
			pEta[2822] = -minval;
	}
	else
		pEta[2822] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3231] = minval;
		else
			pEta[3231] = -minval;
	}
	else
		pEta[3231] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3405] = minval;
		else
			pEta[3405] = -minval;
	}
	else
		pEta[3405] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3518] = minval;
		else
			pEta[3518] = -minval;
	}
	else
		pEta[3518] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4118] = minval;
		else
			pEta[4118] = -minval;
	}
	else
		pEta[4118] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4201] = minval;
		else
			pEta[4201] = -minval;
	}
	else
		pEta[4201] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4703] = minval;
		else
			pEta[4703] = -minval;
	}
	else
		pEta[4703] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 336     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[80] + pEtaPrev[323];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[159] + pEtaPrev[638];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[189] + pEtaPrev[758];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[243] + pEtaPrev[975];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[336] + pEtaPrev[1347];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[408] + pEtaPrev[1634];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[475] + pEtaPrev[1903];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[500] + pEtaPrev[2002];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[592] + pEtaPrev[2371];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[660] + pEtaPrev[2643];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[679] + pEtaPrev[2718];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[706] + pEtaPrev[2826];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[848] + pEtaPrev[3233];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[922] + pEtaPrev[3408];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[928] + pEtaPrev[3425];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1245] + pEtaPrev[4121];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1273] + pEtaPrev[4204];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1360] + pEtaPrev[4709];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[323] = minval;
		else
			pEta[323] = -minval;
	}
	else
		pEta[323] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[638] = minval;
		else
			pEta[638] = -minval;
	}
	else
		pEta[638] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[758] = minval;
		else
			pEta[758] = -minval;
	}
	else
		pEta[758] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[975] = minval;
		else
			pEta[975] = -minval;
	}
	else
		pEta[975] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1347] = minval;
		else
			pEta[1347] = -minval;
	}
	else
		pEta[1347] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1634] = minval;
		else
			pEta[1634] = -minval;
	}
	else
		pEta[1634] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1903] = minval;
		else
			pEta[1903] = -minval;
	}
	else
		pEta[1903] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2002] = minval;
		else
			pEta[2002] = -minval;
	}
	else
		pEta[2002] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2371] = minval;
		else
			pEta[2371] = -minval;
	}
	else
		pEta[2371] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2643] = minval;
		else
			pEta[2643] = -minval;
	}
	else
		pEta[2643] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2718] = minval;
		else
			pEta[2718] = -minval;
	}
	else
		pEta[2718] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2826] = minval;
		else
			pEta[2826] = -minval;
	}
	else
		pEta[2826] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3233] = minval;
		else
			pEta[3233] = -minval;
	}
	else
		pEta[3233] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3408] = minval;
		else
			pEta[3408] = -minval;
	}
	else
		pEta[3408] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3425] = minval;
		else
			pEta[3425] = -minval;
	}
	else
		pEta[3425] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4121] = minval;
		else
			pEta[4121] = -minval;
	}
	else
		pEta[4121] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4204] = minval;
		else
			pEta[4204] = -minval;
	}
	else
		pEta[4204] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4709] = minval;
		else
			pEta[4709] = -minval;
	}
	else
		pEta[4709] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 337     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[81] + pEtaPrev[327];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[128] + pEtaPrev[514];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[190] + pEtaPrev[762];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[244] + pEtaPrev[979];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[337] + pEtaPrev[1351];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[409] + pEtaPrev[1638];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[476] + pEtaPrev[1907];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[501] + pEtaPrev[2006];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[593] + pEtaPrev[2375];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[661] + pEtaPrev[2647];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[680] + pEtaPrev[2722];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[707] + pEtaPrev[2830];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[849] + pEtaPrev[3235];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[923] + pEtaPrev[3411];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[929] + pEtaPrev[3428];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1246] + pEtaPrev[4124];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1274] + pEtaPrev[4207];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1361] + pEtaPrev[4715];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[327] = minval;
		else
			pEta[327] = -minval;
	}
	else
		pEta[327] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[514] = minval;
		else
			pEta[514] = -minval;
	}
	else
		pEta[514] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[762] = minval;
		else
			pEta[762] = -minval;
	}
	else
		pEta[762] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[979] = minval;
		else
			pEta[979] = -minval;
	}
	else
		pEta[979] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1351] = minval;
		else
			pEta[1351] = -minval;
	}
	else
		pEta[1351] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1638] = minval;
		else
			pEta[1638] = -minval;
	}
	else
		pEta[1638] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1907] = minval;
		else
			pEta[1907] = -minval;
	}
	else
		pEta[1907] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2006] = minval;
		else
			pEta[2006] = -minval;
	}
	else
		pEta[2006] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2375] = minval;
		else
			pEta[2375] = -minval;
	}
	else
		pEta[2375] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2647] = minval;
		else
			pEta[2647] = -minval;
	}
	else
		pEta[2647] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2722] = minval;
		else
			pEta[2722] = -minval;
	}
	else
		pEta[2722] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2830] = minval;
		else
			pEta[2830] = -minval;
	}
	else
		pEta[2830] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3235] = minval;
		else
			pEta[3235] = -minval;
	}
	else
		pEta[3235] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3411] = minval;
		else
			pEta[3411] = -minval;
	}
	else
		pEta[3411] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3428] = minval;
		else
			pEta[3428] = -minval;
	}
	else
		pEta[3428] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4124] = minval;
		else
			pEta[4124] = -minval;
	}
	else
		pEta[4124] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4207] = minval;
		else
			pEta[4207] = -minval;
	}
	else
		pEta[4207] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4715] = minval;
		else
			pEta[4715] = -minval;
	}
	else
		pEta[4715] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 338     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[82] + pEtaPrev[331];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[129] + pEtaPrev[518];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[191] + pEtaPrev[766];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[245] + pEtaPrev[983];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[338] + pEtaPrev[1355];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[410] + pEtaPrev[1642];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[477] + pEtaPrev[1911];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[502] + pEtaPrev[2010];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[594] + pEtaPrev[2379];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[662] + pEtaPrev[2651];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[681] + pEtaPrev[2726];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[708] + pEtaPrev[2834];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[850] + pEtaPrev[3237];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[924] + pEtaPrev[3414];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[930] + pEtaPrev[3431];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1247] + pEtaPrev[4127];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1275] + pEtaPrev[4210];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1362] + pEtaPrev[4721];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[331] = minval;
		else
			pEta[331] = -minval;
	}
	else
		pEta[331] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[518] = minval;
		else
			pEta[518] = -minval;
	}
	else
		pEta[518] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[766] = minval;
		else
			pEta[766] = -minval;
	}
	else
		pEta[766] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[983] = minval;
		else
			pEta[983] = -minval;
	}
	else
		pEta[983] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1355] = minval;
		else
			pEta[1355] = -minval;
	}
	else
		pEta[1355] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1642] = minval;
		else
			pEta[1642] = -minval;
	}
	else
		pEta[1642] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1911] = minval;
		else
			pEta[1911] = -minval;
	}
	else
		pEta[1911] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2010] = minval;
		else
			pEta[2010] = -minval;
	}
	else
		pEta[2010] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2379] = minval;
		else
			pEta[2379] = -minval;
	}
	else
		pEta[2379] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2651] = minval;
		else
			pEta[2651] = -minval;
	}
	else
		pEta[2651] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2726] = minval;
		else
			pEta[2726] = -minval;
	}
	else
		pEta[2726] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2834] = minval;
		else
			pEta[2834] = -minval;
	}
	else
		pEta[2834] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3237] = minval;
		else
			pEta[3237] = -minval;
	}
	else
		pEta[3237] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3414] = minval;
		else
			pEta[3414] = -minval;
	}
	else
		pEta[3414] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3431] = minval;
		else
			pEta[3431] = -minval;
	}
	else
		pEta[3431] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4127] = minval;
		else
			pEta[4127] = -minval;
	}
	else
		pEta[4127] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4210] = minval;
		else
			pEta[4210] = -minval;
	}
	else
		pEta[4210] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4721] = minval;
		else
			pEta[4721] = -minval;
	}
	else
		pEta[4721] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 339     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[83] + pEtaPrev[335];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[130] + pEtaPrev[522];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[160] + pEtaPrev[642];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[246] + pEtaPrev[987];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[339] + pEtaPrev[1359];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[411] + pEtaPrev[1646];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[478] + pEtaPrev[1915];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[503] + pEtaPrev[2014];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[595] + pEtaPrev[2383];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[663] + pEtaPrev[2655];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[682] + pEtaPrev[2730];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[709] + pEtaPrev[2838];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[851] + pEtaPrev[3239];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[925] + pEtaPrev[3417];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[931] + pEtaPrev[3434];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1216] + pEtaPrev[4034];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1276] + pEtaPrev[4213];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1363] + pEtaPrev[4727];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[335] = minval;
		else
			pEta[335] = -minval;
	}
	else
		pEta[335] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[522] = minval;
		else
			pEta[522] = -minval;
	}
	else
		pEta[522] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[642] = minval;
		else
			pEta[642] = -minval;
	}
	else
		pEta[642] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[987] = minval;
		else
			pEta[987] = -minval;
	}
	else
		pEta[987] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1359] = minval;
		else
			pEta[1359] = -minval;
	}
	else
		pEta[1359] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1646] = minval;
		else
			pEta[1646] = -minval;
	}
	else
		pEta[1646] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1915] = minval;
		else
			pEta[1915] = -minval;
	}
	else
		pEta[1915] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2014] = minval;
		else
			pEta[2014] = -minval;
	}
	else
		pEta[2014] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2383] = minval;
		else
			pEta[2383] = -minval;
	}
	else
		pEta[2383] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2655] = minval;
		else
			pEta[2655] = -minval;
	}
	else
		pEta[2655] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2730] = minval;
		else
			pEta[2730] = -minval;
	}
	else
		pEta[2730] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2838] = minval;
		else
			pEta[2838] = -minval;
	}
	else
		pEta[2838] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3239] = minval;
		else
			pEta[3239] = -minval;
	}
	else
		pEta[3239] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3417] = minval;
		else
			pEta[3417] = -minval;
	}
	else
		pEta[3417] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3434] = minval;
		else
			pEta[3434] = -minval;
	}
	else
		pEta[3434] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4034] = minval;
		else
			pEta[4034] = -minval;
	}
	else
		pEta[4034] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4213] = minval;
		else
			pEta[4213] = -minval;
	}
	else
		pEta[4213] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4727] = minval;
		else
			pEta[4727] = -minval;
	}
	else
		pEta[4727] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 340     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[84] + pEtaPrev[339];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[131] + pEtaPrev[526];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[161] + pEtaPrev[646];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[247] + pEtaPrev[991];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[340] + pEtaPrev[1363];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[412] + pEtaPrev[1650];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[479] + pEtaPrev[1919];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[504] + pEtaPrev[2018];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[596] + pEtaPrev[2387];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[664] + pEtaPrev[2659];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[683] + pEtaPrev[2734];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[710] + pEtaPrev[2842];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[852] + pEtaPrev[3241];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[926] + pEtaPrev[3420];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[932] + pEtaPrev[3437];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1217] + pEtaPrev[4037];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1277] + pEtaPrev[4216];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1364] + pEtaPrev[4733];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[339] = minval;
		else
			pEta[339] = -minval;
	}
	else
		pEta[339] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[526] = minval;
		else
			pEta[526] = -minval;
	}
	else
		pEta[526] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[646] = minval;
		else
			pEta[646] = -minval;
	}
	else
		pEta[646] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[991] = minval;
		else
			pEta[991] = -minval;
	}
	else
		pEta[991] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1363] = minval;
		else
			pEta[1363] = -minval;
	}
	else
		pEta[1363] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1650] = minval;
		else
			pEta[1650] = -minval;
	}
	else
		pEta[1650] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1919] = minval;
		else
			pEta[1919] = -minval;
	}
	else
		pEta[1919] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2018] = minval;
		else
			pEta[2018] = -minval;
	}
	else
		pEta[2018] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2387] = minval;
		else
			pEta[2387] = -minval;
	}
	else
		pEta[2387] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2659] = minval;
		else
			pEta[2659] = -minval;
	}
	else
		pEta[2659] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2734] = minval;
		else
			pEta[2734] = -minval;
	}
	else
		pEta[2734] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2842] = minval;
		else
			pEta[2842] = -minval;
	}
	else
		pEta[2842] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3241] = minval;
		else
			pEta[3241] = -minval;
	}
	else
		pEta[3241] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3420] = minval;
		else
			pEta[3420] = -minval;
	}
	else
		pEta[3420] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3437] = minval;
		else
			pEta[3437] = -minval;
	}
	else
		pEta[3437] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4037] = minval;
		else
			pEta[4037] = -minval;
	}
	else
		pEta[4037] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4216] = minval;
		else
			pEta[4216] = -minval;
	}
	else
		pEta[4216] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4733] = minval;
		else
			pEta[4733] = -minval;
	}
	else
		pEta[4733] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 341     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[85] + pEtaPrev[343];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[132] + pEtaPrev[530];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[162] + pEtaPrev[650];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[248] + pEtaPrev[995];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[341] + pEtaPrev[1367];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[413] + pEtaPrev[1654];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[448] + pEtaPrev[1795];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[505] + pEtaPrev[2022];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[597] + pEtaPrev[2391];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[665] + pEtaPrev[2663];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[684] + pEtaPrev[2738];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[711] + pEtaPrev[2846];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[853] + pEtaPrev[3243];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[927] + pEtaPrev[3423];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[933] + pEtaPrev[3440];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1218] + pEtaPrev[4040];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1278] + pEtaPrev[4219];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1365] + pEtaPrev[4739];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[343] = minval;
		else
			pEta[343] = -minval;
	}
	else
		pEta[343] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[530] = minval;
		else
			pEta[530] = -minval;
	}
	else
		pEta[530] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[650] = minval;
		else
			pEta[650] = -minval;
	}
	else
		pEta[650] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[995] = minval;
		else
			pEta[995] = -minval;
	}
	else
		pEta[995] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1367] = minval;
		else
			pEta[1367] = -minval;
	}
	else
		pEta[1367] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1654] = minval;
		else
			pEta[1654] = -minval;
	}
	else
		pEta[1654] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1795] = minval;
		else
			pEta[1795] = -minval;
	}
	else
		pEta[1795] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2022] = minval;
		else
			pEta[2022] = -minval;
	}
	else
		pEta[2022] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2391] = minval;
		else
			pEta[2391] = -minval;
	}
	else
		pEta[2391] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2663] = minval;
		else
			pEta[2663] = -minval;
	}
	else
		pEta[2663] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2738] = minval;
		else
			pEta[2738] = -minval;
	}
	else
		pEta[2738] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2846] = minval;
		else
			pEta[2846] = -minval;
	}
	else
		pEta[2846] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3243] = minval;
		else
			pEta[3243] = -minval;
	}
	else
		pEta[3243] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3423] = minval;
		else
			pEta[3423] = -minval;
	}
	else
		pEta[3423] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3440] = minval;
		else
			pEta[3440] = -minval;
	}
	else
		pEta[3440] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4040] = minval;
		else
			pEta[4040] = -minval;
	}
	else
		pEta[4040] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4219] = minval;
		else
			pEta[4219] = -minval;
	}
	else
		pEta[4219] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4739] = minval;
		else
			pEta[4739] = -minval;
	}
	else
		pEta[4739] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 342     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[86] + pEtaPrev[347];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[133] + pEtaPrev[534];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[163] + pEtaPrev[654];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[249] + pEtaPrev[999];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[342] + pEtaPrev[1371];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[414] + pEtaPrev[1658];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[449] + pEtaPrev[1799];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[506] + pEtaPrev[2026];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[598] + pEtaPrev[2395];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[666] + pEtaPrev[2667];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[685] + pEtaPrev[2742];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[712] + pEtaPrev[2850];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[854] + pEtaPrev[3245];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[896] + pEtaPrev[3330];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[934] + pEtaPrev[3443];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1219] + pEtaPrev[4043];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1279] + pEtaPrev[4222];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1366] + pEtaPrev[4745];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[347] = minval;
		else
			pEta[347] = -minval;
	}
	else
		pEta[347] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[534] = minval;
		else
			pEta[534] = -minval;
	}
	else
		pEta[534] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[654] = minval;
		else
			pEta[654] = -minval;
	}
	else
		pEta[654] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[999] = minval;
		else
			pEta[999] = -minval;
	}
	else
		pEta[999] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1371] = minval;
		else
			pEta[1371] = -minval;
	}
	else
		pEta[1371] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1658] = minval;
		else
			pEta[1658] = -minval;
	}
	else
		pEta[1658] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1799] = minval;
		else
			pEta[1799] = -minval;
	}
	else
		pEta[1799] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2026] = minval;
		else
			pEta[2026] = -minval;
	}
	else
		pEta[2026] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2395] = minval;
		else
			pEta[2395] = -minval;
	}
	else
		pEta[2395] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2667] = minval;
		else
			pEta[2667] = -minval;
	}
	else
		pEta[2667] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2742] = minval;
		else
			pEta[2742] = -minval;
	}
	else
		pEta[2742] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2850] = minval;
		else
			pEta[2850] = -minval;
	}
	else
		pEta[2850] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3245] = minval;
		else
			pEta[3245] = -minval;
	}
	else
		pEta[3245] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3330] = minval;
		else
			pEta[3330] = -minval;
	}
	else
		pEta[3330] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3443] = minval;
		else
			pEta[3443] = -minval;
	}
	else
		pEta[3443] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4043] = minval;
		else
			pEta[4043] = -minval;
	}
	else
		pEta[4043] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4222] = minval;
		else
			pEta[4222] = -minval;
	}
	else
		pEta[4222] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4745] = minval;
		else
			pEta[4745] = -minval;
	}
	else
		pEta[4745] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 343     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[87] + pEtaPrev[351];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[134] + pEtaPrev[538];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[164] + pEtaPrev[658];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[250] + pEtaPrev[1003];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[343] + pEtaPrev[1375];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[415] + pEtaPrev[1662];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[450] + pEtaPrev[1803];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[507] + pEtaPrev[2030];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[599] + pEtaPrev[2399];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[667] + pEtaPrev[2671];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[686] + pEtaPrev[2746];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[713] + pEtaPrev[2854];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[855] + pEtaPrev[3247];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[897] + pEtaPrev[3333];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[935] + pEtaPrev[3446];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1220] + pEtaPrev[4046];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1248] + pEtaPrev[4129];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1367] + pEtaPrev[4751];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[351] = minval;
		else
			pEta[351] = -minval;
	}
	else
		pEta[351] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[538] = minval;
		else
			pEta[538] = -minval;
	}
	else
		pEta[538] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[658] = minval;
		else
			pEta[658] = -minval;
	}
	else
		pEta[658] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1003] = minval;
		else
			pEta[1003] = -minval;
	}
	else
		pEta[1003] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1375] = minval;
		else
			pEta[1375] = -minval;
	}
	else
		pEta[1375] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1662] = minval;
		else
			pEta[1662] = -minval;
	}
	else
		pEta[1662] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1803] = minval;
		else
			pEta[1803] = -minval;
	}
	else
		pEta[1803] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2030] = minval;
		else
			pEta[2030] = -minval;
	}
	else
		pEta[2030] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2399] = minval;
		else
			pEta[2399] = -minval;
	}
	else
		pEta[2399] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2671] = minval;
		else
			pEta[2671] = -minval;
	}
	else
		pEta[2671] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2746] = minval;
		else
			pEta[2746] = -minval;
	}
	else
		pEta[2746] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2854] = minval;
		else
			pEta[2854] = -minval;
	}
	else
		pEta[2854] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3247] = minval;
		else
			pEta[3247] = -minval;
	}
	else
		pEta[3247] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3333] = minval;
		else
			pEta[3333] = -minval;
	}
	else
		pEta[3333] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3446] = minval;
		else
			pEta[3446] = -minval;
	}
	else
		pEta[3446] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4046] = minval;
		else
			pEta[4046] = -minval;
	}
	else
		pEta[4046] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4129] = minval;
		else
			pEta[4129] = -minval;
	}
	else
		pEta[4129] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4751] = minval;
		else
			pEta[4751] = -minval;
	}
	else
		pEta[4751] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 344     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[88] + pEtaPrev[355];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[135] + pEtaPrev[542];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[165] + pEtaPrev[662];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[251] + pEtaPrev[1007];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[344] + pEtaPrev[1379];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[384] + pEtaPrev[1538];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[451] + pEtaPrev[1807];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[508] + pEtaPrev[2034];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[600] + pEtaPrev[2403];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[668] + pEtaPrev[2675];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[687] + pEtaPrev[2750];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[714] + pEtaPrev[2858];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[856] + pEtaPrev[3249];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[898] + pEtaPrev[3336];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[936] + pEtaPrev[3449];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1221] + pEtaPrev[4049];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1249] + pEtaPrev[4132];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1368] + pEtaPrev[4757];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[355] = minval;
		else
			pEta[355] = -minval;
	}
	else
		pEta[355] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[542] = minval;
		else
			pEta[542] = -minval;
	}
	else
		pEta[542] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[662] = minval;
		else
			pEta[662] = -minval;
	}
	else
		pEta[662] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1007] = minval;
		else
			pEta[1007] = -minval;
	}
	else
		pEta[1007] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1379] = minval;
		else
			pEta[1379] = -minval;
	}
	else
		pEta[1379] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1538] = minval;
		else
			pEta[1538] = -minval;
	}
	else
		pEta[1538] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1807] = minval;
		else
			pEta[1807] = -minval;
	}
	else
		pEta[1807] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2034] = minval;
		else
			pEta[2034] = -minval;
	}
	else
		pEta[2034] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2403] = minval;
		else
			pEta[2403] = -minval;
	}
	else
		pEta[2403] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2675] = minval;
		else
			pEta[2675] = -minval;
	}
	else
		pEta[2675] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2750] = minval;
		else
			pEta[2750] = -minval;
	}
	else
		pEta[2750] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2858] = minval;
		else
			pEta[2858] = -minval;
	}
	else
		pEta[2858] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3249] = minval;
		else
			pEta[3249] = -minval;
	}
	else
		pEta[3249] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3336] = minval;
		else
			pEta[3336] = -minval;
	}
	else
		pEta[3336] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3449] = minval;
		else
			pEta[3449] = -minval;
	}
	else
		pEta[3449] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4049] = minval;
		else
			pEta[4049] = -minval;
	}
	else
		pEta[4049] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4132] = minval;
		else
			pEta[4132] = -minval;
	}
	else
		pEta[4132] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4757] = minval;
		else
			pEta[4757] = -minval;
	}
	else
		pEta[4757] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 345     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[89] + pEtaPrev[359];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[136] + pEtaPrev[546];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[166] + pEtaPrev[666];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[252] + pEtaPrev[1011];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[345] + pEtaPrev[1383];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[385] + pEtaPrev[1542];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[452] + pEtaPrev[1811];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[509] + pEtaPrev[2038];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[601] + pEtaPrev[2407];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[669] + pEtaPrev[2679];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[688] + pEtaPrev[2754];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[715] + pEtaPrev[2862];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[857] + pEtaPrev[3251];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[899] + pEtaPrev[3339];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[937] + pEtaPrev[3452];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1222] + pEtaPrev[4052];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1250] + pEtaPrev[4135];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1369] + pEtaPrev[4763];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[359] = minval;
		else
			pEta[359] = -minval;
	}
	else
		pEta[359] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[546] = minval;
		else
			pEta[546] = -minval;
	}
	else
		pEta[546] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[666] = minval;
		else
			pEta[666] = -minval;
	}
	else
		pEta[666] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1011] = minval;
		else
			pEta[1011] = -minval;
	}
	else
		pEta[1011] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1383] = minval;
		else
			pEta[1383] = -minval;
	}
	else
		pEta[1383] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1542] = minval;
		else
			pEta[1542] = -minval;
	}
	else
		pEta[1542] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1811] = minval;
		else
			pEta[1811] = -minval;
	}
	else
		pEta[1811] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2038] = minval;
		else
			pEta[2038] = -minval;
	}
	else
		pEta[2038] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2407] = minval;
		else
			pEta[2407] = -minval;
	}
	else
		pEta[2407] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2679] = minval;
		else
			pEta[2679] = -minval;
	}
	else
		pEta[2679] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2754] = minval;
		else
			pEta[2754] = -minval;
	}
	else
		pEta[2754] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2862] = minval;
		else
			pEta[2862] = -minval;
	}
	else
		pEta[2862] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3251] = minval;
		else
			pEta[3251] = -minval;
	}
	else
		pEta[3251] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3339] = minval;
		else
			pEta[3339] = -minval;
	}
	else
		pEta[3339] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3452] = minval;
		else
			pEta[3452] = -minval;
	}
	else
		pEta[3452] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4052] = minval;
		else
			pEta[4052] = -minval;
	}
	else
		pEta[4052] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4135] = minval;
		else
			pEta[4135] = -minval;
	}
	else
		pEta[4135] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4763] = minval;
		else
			pEta[4763] = -minval;
	}
	else
		pEta[4763] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 346     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[90] + pEtaPrev[363];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[137] + pEtaPrev[550];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[167] + pEtaPrev[670];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[253] + pEtaPrev[1015];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[346] + pEtaPrev[1387];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[386] + pEtaPrev[1546];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[453] + pEtaPrev[1815];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[510] + pEtaPrev[2042];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[602] + pEtaPrev[2411];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[670] + pEtaPrev[2683];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[689] + pEtaPrev[2758];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[716] + pEtaPrev[2866];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[858] + pEtaPrev[3253];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[900] + pEtaPrev[3342];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[938] + pEtaPrev[3455];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1223] + pEtaPrev[4055];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1251] + pEtaPrev[4138];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1370] + pEtaPrev[4769];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[363] = minval;
		else
			pEta[363] = -minval;
	}
	else
		pEta[363] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[550] = minval;
		else
			pEta[550] = -minval;
	}
	else
		pEta[550] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[670] = minval;
		else
			pEta[670] = -minval;
	}
	else
		pEta[670] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1015] = minval;
		else
			pEta[1015] = -minval;
	}
	else
		pEta[1015] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1387] = minval;
		else
			pEta[1387] = -minval;
	}
	else
		pEta[1387] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1546] = minval;
		else
			pEta[1546] = -minval;
	}
	else
		pEta[1546] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1815] = minval;
		else
			pEta[1815] = -minval;
	}
	else
		pEta[1815] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2042] = minval;
		else
			pEta[2042] = -minval;
	}
	else
		pEta[2042] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2411] = minval;
		else
			pEta[2411] = -minval;
	}
	else
		pEta[2411] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2683] = minval;
		else
			pEta[2683] = -minval;
	}
	else
		pEta[2683] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2758] = minval;
		else
			pEta[2758] = -minval;
	}
	else
		pEta[2758] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2866] = minval;
		else
			pEta[2866] = -minval;
	}
	else
		pEta[2866] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3253] = minval;
		else
			pEta[3253] = -minval;
	}
	else
		pEta[3253] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3342] = minval;
		else
			pEta[3342] = -minval;
	}
	else
		pEta[3342] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3455] = minval;
		else
			pEta[3455] = -minval;
	}
	else
		pEta[3455] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4055] = minval;
		else
			pEta[4055] = -minval;
	}
	else
		pEta[4055] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4138] = minval;
		else
			pEta[4138] = -minval;
	}
	else
		pEta[4138] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4769] = minval;
		else
			pEta[4769] = -minval;
	}
	else
		pEta[4769] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 347     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[91] + pEtaPrev[367];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[138] + pEtaPrev[554];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[168] + pEtaPrev[674];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[254] + pEtaPrev[1019];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[347] + pEtaPrev[1391];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[387] + pEtaPrev[1550];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[454] + pEtaPrev[1819];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[511] + pEtaPrev[2046];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[603] + pEtaPrev[2415];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[671] + pEtaPrev[2687];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[690] + pEtaPrev[2762];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[717] + pEtaPrev[2870];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[859] + pEtaPrev[3255];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[901] + pEtaPrev[3345];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[939] + pEtaPrev[3458];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1224] + pEtaPrev[4058];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1252] + pEtaPrev[4141];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1371] + pEtaPrev[4775];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[367] = minval;
		else
			pEta[367] = -minval;
	}
	else
		pEta[367] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[554] = minval;
		else
			pEta[554] = -minval;
	}
	else
		pEta[554] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[674] = minval;
		else
			pEta[674] = -minval;
	}
	else
		pEta[674] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1019] = minval;
		else
			pEta[1019] = -minval;
	}
	else
		pEta[1019] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1391] = minval;
		else
			pEta[1391] = -minval;
	}
	else
		pEta[1391] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1550] = minval;
		else
			pEta[1550] = -minval;
	}
	else
		pEta[1550] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1819] = minval;
		else
			pEta[1819] = -minval;
	}
	else
		pEta[1819] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2046] = minval;
		else
			pEta[2046] = -minval;
	}
	else
		pEta[2046] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2415] = minval;
		else
			pEta[2415] = -minval;
	}
	else
		pEta[2415] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2687] = minval;
		else
			pEta[2687] = -minval;
	}
	else
		pEta[2687] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2762] = minval;
		else
			pEta[2762] = -minval;
	}
	else
		pEta[2762] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2870] = minval;
		else
			pEta[2870] = -minval;
	}
	else
		pEta[2870] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3255] = minval;
		else
			pEta[3255] = -minval;
	}
	else
		pEta[3255] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3345] = minval;
		else
			pEta[3345] = -minval;
	}
	else
		pEta[3345] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3458] = minval;
		else
			pEta[3458] = -minval;
	}
	else
		pEta[3458] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4058] = minval;
		else
			pEta[4058] = -minval;
	}
	else
		pEta[4058] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4141] = minval;
		else
			pEta[4141] = -minval;
	}
	else
		pEta[4141] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4775] = minval;
		else
			pEta[4775] = -minval;
	}
	else
		pEta[4775] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 348     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[92] + pEtaPrev[371];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[139] + pEtaPrev[558];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[169] + pEtaPrev[678];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[255] + pEtaPrev[1023];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[348] + pEtaPrev[1395];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[388] + pEtaPrev[1554];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[455] + pEtaPrev[1823];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[480] + pEtaPrev[1922];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[604] + pEtaPrev[2419];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[640] + pEtaPrev[2563];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[691] + pEtaPrev[2766];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[718] + pEtaPrev[2874];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[860] + pEtaPrev[3257];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[902] + pEtaPrev[3348];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[940] + pEtaPrev[3461];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1225] + pEtaPrev[4061];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1253] + pEtaPrev[4144];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1372] + pEtaPrev[4781];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[371] = minval;
		else
			pEta[371] = -minval;
	}
	else
		pEta[371] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[558] = minval;
		else
			pEta[558] = -minval;
	}
	else
		pEta[558] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[678] = minval;
		else
			pEta[678] = -minval;
	}
	else
		pEta[678] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[1023] = minval;
		else
			pEta[1023] = -minval;
	}
	else
		pEta[1023] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1395] = minval;
		else
			pEta[1395] = -minval;
	}
	else
		pEta[1395] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1554] = minval;
		else
			pEta[1554] = -minval;
	}
	else
		pEta[1554] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1823] = minval;
		else
			pEta[1823] = -minval;
	}
	else
		pEta[1823] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1922] = minval;
		else
			pEta[1922] = -minval;
	}
	else
		pEta[1922] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2419] = minval;
		else
			pEta[2419] = -minval;
	}
	else
		pEta[2419] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2563] = minval;
		else
			pEta[2563] = -minval;
	}
	else
		pEta[2563] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2766] = minval;
		else
			pEta[2766] = -minval;
	}
	else
		pEta[2766] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2874] = minval;
		else
			pEta[2874] = -minval;
	}
	else
		pEta[2874] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3257] = minval;
		else
			pEta[3257] = -minval;
	}
	else
		pEta[3257] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3348] = minval;
		else
			pEta[3348] = -minval;
	}
	else
		pEta[3348] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3461] = minval;
		else
			pEta[3461] = -minval;
	}
	else
		pEta[3461] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4061] = minval;
		else
			pEta[4061] = -minval;
	}
	else
		pEta[4061] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4144] = minval;
		else
			pEta[4144] = -minval;
	}
	else
		pEta[4144] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4781] = minval;
		else
			pEta[4781] = -minval;
	}
	else
		pEta[4781] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 349     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[93] + pEtaPrev[375];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[140] + pEtaPrev[562];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[170] + pEtaPrev[682];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[224] + pEtaPrev[899];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[349] + pEtaPrev[1399];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[389] + pEtaPrev[1558];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[456] + pEtaPrev[1827];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[481] + pEtaPrev[1926];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[605] + pEtaPrev[2423];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[641] + pEtaPrev[2567];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[692] + pEtaPrev[2770];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[719] + pEtaPrev[2878];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[861] + pEtaPrev[3259];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[903] + pEtaPrev[3351];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[941] + pEtaPrev[3464];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1226] + pEtaPrev[4064];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1254] + pEtaPrev[4147];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1373] + pEtaPrev[4787];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[375] = minval;
		else
			pEta[375] = -minval;
	}
	else
		pEta[375] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[562] = minval;
		else
			pEta[562] = -minval;
	}
	else
		pEta[562] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[682] = minval;
		else
			pEta[682] = -minval;
	}
	else
		pEta[682] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[899] = minval;
		else
			pEta[899] = -minval;
	}
	else
		pEta[899] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1399] = minval;
		else
			pEta[1399] = -minval;
	}
	else
		pEta[1399] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1558] = minval;
		else
			pEta[1558] = -minval;
	}
	else
		pEta[1558] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1827] = minval;
		else
			pEta[1827] = -minval;
	}
	else
		pEta[1827] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1926] = minval;
		else
			pEta[1926] = -minval;
	}
	else
		pEta[1926] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2423] = minval;
		else
			pEta[2423] = -minval;
	}
	else
		pEta[2423] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2567] = minval;
		else
			pEta[2567] = -minval;
	}
	else
		pEta[2567] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2770] = minval;
		else
			pEta[2770] = -minval;
	}
	else
		pEta[2770] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2878] = minval;
		else
			pEta[2878] = -minval;
	}
	else
		pEta[2878] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3259] = minval;
		else
			pEta[3259] = -minval;
	}
	else
		pEta[3259] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3351] = minval;
		else
			pEta[3351] = -minval;
	}
	else
		pEta[3351] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3464] = minval;
		else
			pEta[3464] = -minval;
	}
	else
		pEta[3464] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4064] = minval;
		else
			pEta[4064] = -minval;
	}
	else
		pEta[4064] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4147] = minval;
		else
			pEta[4147] = -minval;
	}
	else
		pEta[4147] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4787] = minval;
		else
			pEta[4787] = -minval;
	}
	else
		pEta[4787] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 350     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[94] + pEtaPrev[379];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[141] + pEtaPrev[566];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[171] + pEtaPrev[686];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[225] + pEtaPrev[903];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[350] + pEtaPrev[1403];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[390] + pEtaPrev[1562];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[457] + pEtaPrev[1831];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[482] + pEtaPrev[1930];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[606] + pEtaPrev[2427];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[642] + pEtaPrev[2571];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[693] + pEtaPrev[2774];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[720] + pEtaPrev[2882];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[862] + pEtaPrev[3261];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[904] + pEtaPrev[3354];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[942] + pEtaPrev[3467];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1227] + pEtaPrev[4067];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1255] + pEtaPrev[4150];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1374] + pEtaPrev[4793];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[379] = minval;
		else
			pEta[379] = -minval;
	}
	else
		pEta[379] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[566] = minval;
		else
			pEta[566] = -minval;
	}
	else
		pEta[566] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[686] = minval;
		else
			pEta[686] = -minval;
	}
	else
		pEta[686] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[903] = minval;
		else
			pEta[903] = -minval;
	}
	else
		pEta[903] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1403] = minval;
		else
			pEta[1403] = -minval;
	}
	else
		pEta[1403] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1562] = minval;
		else
			pEta[1562] = -minval;
	}
	else
		pEta[1562] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1831] = minval;
		else
			pEta[1831] = -minval;
	}
	else
		pEta[1831] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1930] = minval;
		else
			pEta[1930] = -minval;
	}
	else
		pEta[1930] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2427] = minval;
		else
			pEta[2427] = -minval;
	}
	else
		pEta[2427] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2571] = minval;
		else
			pEta[2571] = -minval;
	}
	else
		pEta[2571] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2774] = minval;
		else
			pEta[2774] = -minval;
	}
	else
		pEta[2774] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2882] = minval;
		else
			pEta[2882] = -minval;
	}
	else
		pEta[2882] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3261] = minval;
		else
			pEta[3261] = -minval;
	}
	else
		pEta[3261] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3354] = minval;
		else
			pEta[3354] = -minval;
	}
	else
		pEta[3354] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3467] = minval;
		else
			pEta[3467] = -minval;
	}
	else
		pEta[3467] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4067] = minval;
		else
			pEta[4067] = -minval;
	}
	else
		pEta[4067] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4150] = minval;
		else
			pEta[4150] = -minval;
	}
	else
		pEta[4150] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4793] = minval;
		else
			pEta[4793] = -minval;
	}
	else
		pEta[4793] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 351     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[95] + pEtaPrev[383];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[142] + pEtaPrev[570];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[172] + pEtaPrev[690];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[226] + pEtaPrev[907];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[351] + pEtaPrev[1407];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[391] + pEtaPrev[1566];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[458] + pEtaPrev[1835];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[483] + pEtaPrev[1934];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[607] + pEtaPrev[2431];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[643] + pEtaPrev[2575];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[694] + pEtaPrev[2778];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[721] + pEtaPrev[2886];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[863] + pEtaPrev[3263];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[905] + pEtaPrev[3357];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[943] + pEtaPrev[3470];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1228] + pEtaPrev[4070];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1256] + pEtaPrev[4153];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1375] + pEtaPrev[4799];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[383] = minval;
		else
			pEta[383] = -minval;
	}
	else
		pEta[383] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[570] = minval;
		else
			pEta[570] = -minval;
	}
	else
		pEta[570] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[690] = minval;
		else
			pEta[690] = -minval;
	}
	else
		pEta[690] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[907] = minval;
		else
			pEta[907] = -minval;
	}
	else
		pEta[907] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1407] = minval;
		else
			pEta[1407] = -minval;
	}
	else
		pEta[1407] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1566] = minval;
		else
			pEta[1566] = -minval;
	}
	else
		pEta[1566] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1835] = minval;
		else
			pEta[1835] = -minval;
	}
	else
		pEta[1835] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1934] = minval;
		else
			pEta[1934] = -minval;
	}
	else
		pEta[1934] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2431] = minval;
		else
			pEta[2431] = -minval;
	}
	else
		pEta[2431] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2575] = minval;
		else
			pEta[2575] = -minval;
	}
	else
		pEta[2575] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2778] = minval;
		else
			pEta[2778] = -minval;
	}
	else
		pEta[2778] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2886] = minval;
		else
			pEta[2886] = -minval;
	}
	else
		pEta[2886] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3263] = minval;
		else
			pEta[3263] = -minval;
	}
	else
		pEta[3263] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3357] = minval;
		else
			pEta[3357] = -minval;
	}
	else
		pEta[3357] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3470] = minval;
		else
			pEta[3470] = -minval;
	}
	else
		pEta[3470] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[4070] = minval;
		else
			pEta[4070] = -minval;
	}
	else
		pEta[4070] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4153] = minval;
		else
			pEta[4153] = -minval;
	}
	else
		pEta[4153] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4799] = minval;
		else
			pEta[4799] = -minval;
	}
	else
		pEta[4799] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 352     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[96] + pEtaPrev[387];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[141] + pEtaPrev[567];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[162] + pEtaPrev[651];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[210] + pEtaPrev[843];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[352] + pEtaPrev[1411];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[401] + pEtaPrev[1607];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[425] + pEtaPrev[1703];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[501] + pEtaPrev[2007];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[608] + pEtaPrev[2435];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[680] + pEtaPrev[2723];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[726] + pEtaPrev[2907];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[756] + pEtaPrev[3027];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[864] + pEtaPrev[3265];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[943] + pEtaPrev[3471];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[980] + pEtaPrev[3582];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1156] + pEtaPrev[3854];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1265] + pEtaPrev[4181];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1376] + pEtaPrev[4805];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[387] = minval;
		else
			pEta[387] = -minval;
	}
	else
		pEta[387] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[567] = minval;
		else
			pEta[567] = -minval;
	}
	else
		pEta[567] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[651] = minval;
		else
			pEta[651] = -minval;
	}
	else
		pEta[651] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[843] = minval;
		else
			pEta[843] = -minval;
	}
	else
		pEta[843] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1411] = minval;
		else
			pEta[1411] = -minval;
	}
	else
		pEta[1411] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1607] = minval;
		else
			pEta[1607] = -minval;
	}
	else
		pEta[1607] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1703] = minval;
		else
			pEta[1703] = -minval;
	}
	else
		pEta[1703] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2007] = minval;
		else
			pEta[2007] = -minval;
	}
	else
		pEta[2007] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2435] = minval;
		else
			pEta[2435] = -minval;
	}
	else
		pEta[2435] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2723] = minval;
		else
			pEta[2723] = -minval;
	}
	else
		pEta[2723] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2907] = minval;
		else
			pEta[2907] = -minval;
	}
	else
		pEta[2907] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3027] = minval;
		else
			pEta[3027] = -minval;
	}
	else
		pEta[3027] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3265] = minval;
		else
			pEta[3265] = -minval;
	}
	else
		pEta[3265] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3471] = minval;
		else
			pEta[3471] = -minval;
	}
	else
		pEta[3471] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3582] = minval;
		else
			pEta[3582] = -minval;
	}
	else
		pEta[3582] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3854] = minval;
		else
			pEta[3854] = -minval;
	}
	else
		pEta[3854] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4181] = minval;
		else
			pEta[4181] = -minval;
	}
	else
		pEta[4181] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4805] = minval;
		else
			pEta[4805] = -minval;
	}
	else
		pEta[4805] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 353     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[97] + pEtaPrev[391];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[142] + pEtaPrev[571];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[163] + pEtaPrev[655];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[211] + pEtaPrev[847];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[353] + pEtaPrev[1415];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[402] + pEtaPrev[1611];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[426] + pEtaPrev[1707];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[502] + pEtaPrev[2011];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[609] + pEtaPrev[2439];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[681] + pEtaPrev[2727];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[727] + pEtaPrev[2911];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[757] + pEtaPrev[3031];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[865] + pEtaPrev[3267];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[944] + pEtaPrev[3474];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[981] + pEtaPrev[3585];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1157] + pEtaPrev[3857];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1266] + pEtaPrev[4184];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1377] + pEtaPrev[4811];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[391] = minval;
		else
			pEta[391] = -minval;
	}
	else
		pEta[391] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[571] = minval;
		else
			pEta[571] = -minval;
	}
	else
		pEta[571] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[655] = minval;
		else
			pEta[655] = -minval;
	}
	else
		pEta[655] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[847] = minval;
		else
			pEta[847] = -minval;
	}
	else
		pEta[847] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1415] = minval;
		else
			pEta[1415] = -minval;
	}
	else
		pEta[1415] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1611] = minval;
		else
			pEta[1611] = -minval;
	}
	else
		pEta[1611] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1707] = minval;
		else
			pEta[1707] = -minval;
	}
	else
		pEta[1707] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2011] = minval;
		else
			pEta[2011] = -minval;
	}
	else
		pEta[2011] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2439] = minval;
		else
			pEta[2439] = -minval;
	}
	else
		pEta[2439] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2727] = minval;
		else
			pEta[2727] = -minval;
	}
	else
		pEta[2727] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2911] = minval;
		else
			pEta[2911] = -minval;
	}
	else
		pEta[2911] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3031] = minval;
		else
			pEta[3031] = -minval;
	}
	else
		pEta[3031] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3267] = minval;
		else
			pEta[3267] = -minval;
	}
	else
		pEta[3267] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3474] = minval;
		else
			pEta[3474] = -minval;
	}
	else
		pEta[3474] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3585] = minval;
		else
			pEta[3585] = -minval;
	}
	else
		pEta[3585] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3857] = minval;
		else
			pEta[3857] = -minval;
	}
	else
		pEta[3857] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4184] = minval;
		else
			pEta[4184] = -minval;
	}
	else
		pEta[4184] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4811] = minval;
		else
			pEta[4811] = -minval;
	}
	else
		pEta[4811] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 354     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[98] + pEtaPrev[395];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[143] + pEtaPrev[575];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[164] + pEtaPrev[659];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[212] + pEtaPrev[851];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[354] + pEtaPrev[1419];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[403] + pEtaPrev[1615];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[427] + pEtaPrev[1711];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[503] + pEtaPrev[2015];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[610] + pEtaPrev[2443];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[682] + pEtaPrev[2731];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[728] + pEtaPrev[2915];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[758] + pEtaPrev[3035];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[866] + pEtaPrev[3269];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[945] + pEtaPrev[3477];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[982] + pEtaPrev[3588];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1158] + pEtaPrev[3860];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1267] + pEtaPrev[4187];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1378] + pEtaPrev[4817];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[395] = minval;
		else
			pEta[395] = -minval;
	}
	else
		pEta[395] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[575] = minval;
		else
			pEta[575] = -minval;
	}
	else
		pEta[575] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[659] = minval;
		else
			pEta[659] = -minval;
	}
	else
		pEta[659] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[851] = minval;
		else
			pEta[851] = -minval;
	}
	else
		pEta[851] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1419] = minval;
		else
			pEta[1419] = -minval;
	}
	else
		pEta[1419] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1615] = minval;
		else
			pEta[1615] = -minval;
	}
	else
		pEta[1615] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1711] = minval;
		else
			pEta[1711] = -minval;
	}
	else
		pEta[1711] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2015] = minval;
		else
			pEta[2015] = -minval;
	}
	else
		pEta[2015] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2443] = minval;
		else
			pEta[2443] = -minval;
	}
	else
		pEta[2443] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2731] = minval;
		else
			pEta[2731] = -minval;
	}
	else
		pEta[2731] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2915] = minval;
		else
			pEta[2915] = -minval;
	}
	else
		pEta[2915] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3035] = minval;
		else
			pEta[3035] = -minval;
	}
	else
		pEta[3035] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3269] = minval;
		else
			pEta[3269] = -minval;
	}
	else
		pEta[3269] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3477] = minval;
		else
			pEta[3477] = -minval;
	}
	else
		pEta[3477] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3588] = minval;
		else
			pEta[3588] = -minval;
	}
	else
		pEta[3588] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3860] = minval;
		else
			pEta[3860] = -minval;
	}
	else
		pEta[3860] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4187] = minval;
		else
			pEta[4187] = -minval;
	}
	else
		pEta[4187] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4817] = minval;
		else
			pEta[4817] = -minval;
	}
	else
		pEta[4817] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 355     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[99] + pEtaPrev[399];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[144] + pEtaPrev[579];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[165] + pEtaPrev[663];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[213] + pEtaPrev[855];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[355] + pEtaPrev[1423];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[404] + pEtaPrev[1619];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[428] + pEtaPrev[1715];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[504] + pEtaPrev[2019];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[611] + pEtaPrev[2447];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[683] + pEtaPrev[2735];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[729] + pEtaPrev[2919];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[759] + pEtaPrev[3039];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[867] + pEtaPrev[3271];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[946] + pEtaPrev[3480];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[983] + pEtaPrev[3591];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1159] + pEtaPrev[3863];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1268] + pEtaPrev[4190];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1379] + pEtaPrev[4823];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[399] = minval;
		else
			pEta[399] = -minval;
	}
	else
		pEta[399] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[579] = minval;
		else
			pEta[579] = -minval;
	}
	else
		pEta[579] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[663] = minval;
		else
			pEta[663] = -minval;
	}
	else
		pEta[663] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[855] = minval;
		else
			pEta[855] = -minval;
	}
	else
		pEta[855] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1423] = minval;
		else
			pEta[1423] = -minval;
	}
	else
		pEta[1423] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1619] = minval;
		else
			pEta[1619] = -minval;
	}
	else
		pEta[1619] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1715] = minval;
		else
			pEta[1715] = -minval;
	}
	else
		pEta[1715] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2019] = minval;
		else
			pEta[2019] = -minval;
	}
	else
		pEta[2019] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2447] = minval;
		else
			pEta[2447] = -minval;
	}
	else
		pEta[2447] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2735] = minval;
		else
			pEta[2735] = -minval;
	}
	else
		pEta[2735] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2919] = minval;
		else
			pEta[2919] = -minval;
	}
	else
		pEta[2919] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3039] = minval;
		else
			pEta[3039] = -minval;
	}
	else
		pEta[3039] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3271] = minval;
		else
			pEta[3271] = -minval;
	}
	else
		pEta[3271] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3480] = minval;
		else
			pEta[3480] = -minval;
	}
	else
		pEta[3480] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3591] = minval;
		else
			pEta[3591] = -minval;
	}
	else
		pEta[3591] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3863] = minval;
		else
			pEta[3863] = -minval;
	}
	else
		pEta[3863] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4190] = minval;
		else
			pEta[4190] = -minval;
	}
	else
		pEta[4190] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4823] = minval;
		else
			pEta[4823] = -minval;
	}
	else
		pEta[4823] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 356     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[100] + pEtaPrev[403];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[145] + pEtaPrev[583];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[166] + pEtaPrev[667];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[214] + pEtaPrev[859];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[356] + pEtaPrev[1427];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[405] + pEtaPrev[1623];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[429] + pEtaPrev[1719];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[505] + pEtaPrev[2023];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[612] + pEtaPrev[2451];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[684] + pEtaPrev[2739];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[730] + pEtaPrev[2923];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[760] + pEtaPrev[3043];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[868] + pEtaPrev[3273];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[947] + pEtaPrev[3483];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[984] + pEtaPrev[3594];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1160] + pEtaPrev[3866];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1269] + pEtaPrev[4193];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1380] + pEtaPrev[4829];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[403] = minval;
		else
			pEta[403] = -minval;
	}
	else
		pEta[403] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[583] = minval;
		else
			pEta[583] = -minval;
	}
	else
		pEta[583] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[667] = minval;
		else
			pEta[667] = -minval;
	}
	else
		pEta[667] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[859] = minval;
		else
			pEta[859] = -minval;
	}
	else
		pEta[859] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1427] = minval;
		else
			pEta[1427] = -minval;
	}
	else
		pEta[1427] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1623] = minval;
		else
			pEta[1623] = -minval;
	}
	else
		pEta[1623] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1719] = minval;
		else
			pEta[1719] = -minval;
	}
	else
		pEta[1719] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2023] = minval;
		else
			pEta[2023] = -minval;
	}
	else
		pEta[2023] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2451] = minval;
		else
			pEta[2451] = -minval;
	}
	else
		pEta[2451] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2739] = minval;
		else
			pEta[2739] = -minval;
	}
	else
		pEta[2739] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2923] = minval;
		else
			pEta[2923] = -minval;
	}
	else
		pEta[2923] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3043] = minval;
		else
			pEta[3043] = -minval;
	}
	else
		pEta[3043] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3273] = minval;
		else
			pEta[3273] = -minval;
	}
	else
		pEta[3273] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3483] = minval;
		else
			pEta[3483] = -minval;
	}
	else
		pEta[3483] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3594] = minval;
		else
			pEta[3594] = -minval;
	}
	else
		pEta[3594] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3866] = minval;
		else
			pEta[3866] = -minval;
	}
	else
		pEta[3866] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4193] = minval;
		else
			pEta[4193] = -minval;
	}
	else
		pEta[4193] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4829] = minval;
		else
			pEta[4829] = -minval;
	}
	else
		pEta[4829] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 357     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[101] + pEtaPrev[407];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[146] + pEtaPrev[587];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[167] + pEtaPrev[671];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[215] + pEtaPrev[863];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[357] + pEtaPrev[1431];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[406] + pEtaPrev[1627];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[430] + pEtaPrev[1723];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[506] + pEtaPrev[2027];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[613] + pEtaPrev[2455];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[685] + pEtaPrev[2743];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[731] + pEtaPrev[2927];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[761] + pEtaPrev[3047];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[869] + pEtaPrev[3275];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[948] + pEtaPrev[3486];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[985] + pEtaPrev[3597];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1161] + pEtaPrev[3869];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1270] + pEtaPrev[4196];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1381] + pEtaPrev[4835];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[407] = minval;
		else
			pEta[407] = -minval;
	}
	else
		pEta[407] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[587] = minval;
		else
			pEta[587] = -minval;
	}
	else
		pEta[587] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[671] = minval;
		else
			pEta[671] = -minval;
	}
	else
		pEta[671] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[863] = minval;
		else
			pEta[863] = -minval;
	}
	else
		pEta[863] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1431] = minval;
		else
			pEta[1431] = -minval;
	}
	else
		pEta[1431] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1627] = minval;
		else
			pEta[1627] = -minval;
	}
	else
		pEta[1627] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1723] = minval;
		else
			pEta[1723] = -minval;
	}
	else
		pEta[1723] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2027] = minval;
		else
			pEta[2027] = -minval;
	}
	else
		pEta[2027] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2455] = minval;
		else
			pEta[2455] = -minval;
	}
	else
		pEta[2455] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2743] = minval;
		else
			pEta[2743] = -minval;
	}
	else
		pEta[2743] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2927] = minval;
		else
			pEta[2927] = -minval;
	}
	else
		pEta[2927] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3047] = minval;
		else
			pEta[3047] = -minval;
	}
	else
		pEta[3047] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3275] = minval;
		else
			pEta[3275] = -minval;
	}
	else
		pEta[3275] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3486] = minval;
		else
			pEta[3486] = -minval;
	}
	else
		pEta[3486] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3597] = minval;
		else
			pEta[3597] = -minval;
	}
	else
		pEta[3597] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3869] = minval;
		else
			pEta[3869] = -minval;
	}
	else
		pEta[3869] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4196] = minval;
		else
			pEta[4196] = -minval;
	}
	else
		pEta[4196] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4835] = minval;
		else
			pEta[4835] = -minval;
	}
	else
		pEta[4835] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 358     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[102] + pEtaPrev[411];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[147] + pEtaPrev[591];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[168] + pEtaPrev[675];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[216] + pEtaPrev[867];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[358] + pEtaPrev[1435];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[407] + pEtaPrev[1631];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[431] + pEtaPrev[1727];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[507] + pEtaPrev[2031];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[614] + pEtaPrev[2459];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[686] + pEtaPrev[2747];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[732] + pEtaPrev[2931];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[762] + pEtaPrev[3051];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[870] + pEtaPrev[3277];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[949] + pEtaPrev[3489];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[986] + pEtaPrev[3600];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1162] + pEtaPrev[3872];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1271] + pEtaPrev[4199];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1382] + pEtaPrev[4841];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[411] = minval;
		else
			pEta[411] = -minval;
	}
	else
		pEta[411] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[591] = minval;
		else
			pEta[591] = -minval;
	}
	else
		pEta[591] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[675] = minval;
		else
			pEta[675] = -minval;
	}
	else
		pEta[675] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[867] = minval;
		else
			pEta[867] = -minval;
	}
	else
		pEta[867] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1435] = minval;
		else
			pEta[1435] = -minval;
	}
	else
		pEta[1435] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1631] = minval;
		else
			pEta[1631] = -minval;
	}
	else
		pEta[1631] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1727] = minval;
		else
			pEta[1727] = -minval;
	}
	else
		pEta[1727] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2031] = minval;
		else
			pEta[2031] = -minval;
	}
	else
		pEta[2031] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2459] = minval;
		else
			pEta[2459] = -minval;
	}
	else
		pEta[2459] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2747] = minval;
		else
			pEta[2747] = -minval;
	}
	else
		pEta[2747] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2931] = minval;
		else
			pEta[2931] = -minval;
	}
	else
		pEta[2931] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3051] = minval;
		else
			pEta[3051] = -minval;
	}
	else
		pEta[3051] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3277] = minval;
		else
			pEta[3277] = -minval;
	}
	else
		pEta[3277] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3489] = minval;
		else
			pEta[3489] = -minval;
	}
	else
		pEta[3489] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3600] = minval;
		else
			pEta[3600] = -minval;
	}
	else
		pEta[3600] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3872] = minval;
		else
			pEta[3872] = -minval;
	}
	else
		pEta[3872] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4199] = minval;
		else
			pEta[4199] = -minval;
	}
	else
		pEta[4199] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4841] = minval;
		else
			pEta[4841] = -minval;
	}
	else
		pEta[4841] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 359     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[103] + pEtaPrev[415];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[148] + pEtaPrev[595];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[169] + pEtaPrev[679];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[217] + pEtaPrev[871];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[359] + pEtaPrev[1439];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[408] + pEtaPrev[1635];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[432] + pEtaPrev[1731];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[508] + pEtaPrev[2035];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[615] + pEtaPrev[2463];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[687] + pEtaPrev[2751];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[733] + pEtaPrev[2935];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[763] + pEtaPrev[3055];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[871] + pEtaPrev[3279];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[950] + pEtaPrev[3492];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[987] + pEtaPrev[3603];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1163] + pEtaPrev[3875];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1272] + pEtaPrev[4202];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1383] + pEtaPrev[4847];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[415] = minval;
		else
			pEta[415] = -minval;
	}
	else
		pEta[415] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[595] = minval;
		else
			pEta[595] = -minval;
	}
	else
		pEta[595] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[679] = minval;
		else
			pEta[679] = -minval;
	}
	else
		pEta[679] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[871] = minval;
		else
			pEta[871] = -minval;
	}
	else
		pEta[871] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1439] = minval;
		else
			pEta[1439] = -minval;
	}
	else
		pEta[1439] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1635] = minval;
		else
			pEta[1635] = -minval;
	}
	else
		pEta[1635] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1731] = minval;
		else
			pEta[1731] = -minval;
	}
	else
		pEta[1731] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2035] = minval;
		else
			pEta[2035] = -minval;
	}
	else
		pEta[2035] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2463] = minval;
		else
			pEta[2463] = -minval;
	}
	else
		pEta[2463] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2751] = minval;
		else
			pEta[2751] = -minval;
	}
	else
		pEta[2751] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2935] = minval;
		else
			pEta[2935] = -minval;
	}
	else
		pEta[2935] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3055] = minval;
		else
			pEta[3055] = -minval;
	}
	else
		pEta[3055] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3279] = minval;
		else
			pEta[3279] = -minval;
	}
	else
		pEta[3279] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3492] = minval;
		else
			pEta[3492] = -minval;
	}
	else
		pEta[3492] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3603] = minval;
		else
			pEta[3603] = -minval;
	}
	else
		pEta[3603] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3875] = minval;
		else
			pEta[3875] = -minval;
	}
	else
		pEta[3875] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4202] = minval;
		else
			pEta[4202] = -minval;
	}
	else
		pEta[4202] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4847] = minval;
		else
			pEta[4847] = -minval;
	}
	else
		pEta[4847] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 360     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[104] + pEtaPrev[419];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[149] + pEtaPrev[599];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[170] + pEtaPrev[683];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[218] + pEtaPrev[875];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[360] + pEtaPrev[1443];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[409] + pEtaPrev[1639];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[433] + pEtaPrev[1735];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[509] + pEtaPrev[2039];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[616] + pEtaPrev[2467];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[688] + pEtaPrev[2755];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[734] + pEtaPrev[2939];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[764] + pEtaPrev[3059];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[872] + pEtaPrev[3281];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[951] + pEtaPrev[3495];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[988] + pEtaPrev[3606];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1164] + pEtaPrev[3878];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1273] + pEtaPrev[4205];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1384] + pEtaPrev[4853];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[419] = minval;
		else
			pEta[419] = -minval;
	}
	else
		pEta[419] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[599] = minval;
		else
			pEta[599] = -minval;
	}
	else
		pEta[599] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[683] = minval;
		else
			pEta[683] = -minval;
	}
	else
		pEta[683] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[875] = minval;
		else
			pEta[875] = -minval;
	}
	else
		pEta[875] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1443] = minval;
		else
			pEta[1443] = -minval;
	}
	else
		pEta[1443] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1639] = minval;
		else
			pEta[1639] = -minval;
	}
	else
		pEta[1639] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1735] = minval;
		else
			pEta[1735] = -minval;
	}
	else
		pEta[1735] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2039] = minval;
		else
			pEta[2039] = -minval;
	}
	else
		pEta[2039] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2467] = minval;
		else
			pEta[2467] = -minval;
	}
	else
		pEta[2467] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2755] = minval;
		else
			pEta[2755] = -minval;
	}
	else
		pEta[2755] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2939] = minval;
		else
			pEta[2939] = -minval;
	}
	else
		pEta[2939] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3059] = minval;
		else
			pEta[3059] = -minval;
	}
	else
		pEta[3059] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3281] = minval;
		else
			pEta[3281] = -minval;
	}
	else
		pEta[3281] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3495] = minval;
		else
			pEta[3495] = -minval;
	}
	else
		pEta[3495] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3606] = minval;
		else
			pEta[3606] = -minval;
	}
	else
		pEta[3606] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3878] = minval;
		else
			pEta[3878] = -minval;
	}
	else
		pEta[3878] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4205] = minval;
		else
			pEta[4205] = -minval;
	}
	else
		pEta[4205] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4853] = minval;
		else
			pEta[4853] = -minval;
	}
	else
		pEta[4853] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 361     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[105] + pEtaPrev[423];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[150] + pEtaPrev[603];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[171] + pEtaPrev[687];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[219] + pEtaPrev[879];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[361] + pEtaPrev[1447];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[410] + pEtaPrev[1643];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[434] + pEtaPrev[1739];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[510] + pEtaPrev[2043];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[617] + pEtaPrev[2471];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[689] + pEtaPrev[2759];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[735] + pEtaPrev[2943];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[765] + pEtaPrev[3063];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[873] + pEtaPrev[3283];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[952] + pEtaPrev[3498];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[989] + pEtaPrev[3609];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1165] + pEtaPrev[3881];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1274] + pEtaPrev[4208];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1385] + pEtaPrev[4859];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[423] = minval;
		else
			pEta[423] = -minval;
	}
	else
		pEta[423] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[603] = minval;
		else
			pEta[603] = -minval;
	}
	else
		pEta[603] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[687] = minval;
		else
			pEta[687] = -minval;
	}
	else
		pEta[687] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[879] = minval;
		else
			pEta[879] = -minval;
	}
	else
		pEta[879] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1447] = minval;
		else
			pEta[1447] = -minval;
	}
	else
		pEta[1447] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1643] = minval;
		else
			pEta[1643] = -minval;
	}
	else
		pEta[1643] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1739] = minval;
		else
			pEta[1739] = -minval;
	}
	else
		pEta[1739] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2043] = minval;
		else
			pEta[2043] = -minval;
	}
	else
		pEta[2043] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2471] = minval;
		else
			pEta[2471] = -minval;
	}
	else
		pEta[2471] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2759] = minval;
		else
			pEta[2759] = -minval;
	}
	else
		pEta[2759] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2943] = minval;
		else
			pEta[2943] = -minval;
	}
	else
		pEta[2943] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3063] = minval;
		else
			pEta[3063] = -minval;
	}
	else
		pEta[3063] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3283] = minval;
		else
			pEta[3283] = -minval;
	}
	else
		pEta[3283] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3498] = minval;
		else
			pEta[3498] = -minval;
	}
	else
		pEta[3498] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3609] = minval;
		else
			pEta[3609] = -minval;
	}
	else
		pEta[3609] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3881] = minval;
		else
			pEta[3881] = -minval;
	}
	else
		pEta[3881] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4208] = minval;
		else
			pEta[4208] = -minval;
	}
	else
		pEta[4208] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4859] = minval;
		else
			pEta[4859] = -minval;
	}
	else
		pEta[4859] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 362     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[106] + pEtaPrev[427];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[151] + pEtaPrev[607];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[172] + pEtaPrev[691];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[220] + pEtaPrev[883];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[362] + pEtaPrev[1451];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[411] + pEtaPrev[1647];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[435] + pEtaPrev[1743];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[511] + pEtaPrev[2047];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[618] + pEtaPrev[2475];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[690] + pEtaPrev[2763];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[704] + pEtaPrev[2819];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[766] + pEtaPrev[3067];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[874] + pEtaPrev[3285];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[953] + pEtaPrev[3501];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[990] + pEtaPrev[3612];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1166] + pEtaPrev[3884];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1275] + pEtaPrev[4211];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1386] + pEtaPrev[4865];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[427] = minval;
		else
			pEta[427] = -minval;
	}
	else
		pEta[427] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[607] = minval;
		else
			pEta[607] = -minval;
	}
	else
		pEta[607] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[691] = minval;
		else
			pEta[691] = -minval;
	}
	else
		pEta[691] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[883] = minval;
		else
			pEta[883] = -minval;
	}
	else
		pEta[883] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1451] = minval;
		else
			pEta[1451] = -minval;
	}
	else
		pEta[1451] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1647] = minval;
		else
			pEta[1647] = -minval;
	}
	else
		pEta[1647] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1743] = minval;
		else
			pEta[1743] = -minval;
	}
	else
		pEta[1743] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2047] = minval;
		else
			pEta[2047] = -minval;
	}
	else
		pEta[2047] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2475] = minval;
		else
			pEta[2475] = -minval;
	}
	else
		pEta[2475] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2763] = minval;
		else
			pEta[2763] = -minval;
	}
	else
		pEta[2763] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2819] = minval;
		else
			pEta[2819] = -minval;
	}
	else
		pEta[2819] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3067] = minval;
		else
			pEta[3067] = -minval;
	}
	else
		pEta[3067] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3285] = minval;
		else
			pEta[3285] = -minval;
	}
	else
		pEta[3285] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3501] = minval;
		else
			pEta[3501] = -minval;
	}
	else
		pEta[3501] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3612] = minval;
		else
			pEta[3612] = -minval;
	}
	else
		pEta[3612] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3884] = minval;
		else
			pEta[3884] = -minval;
	}
	else
		pEta[3884] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4211] = minval;
		else
			pEta[4211] = -minval;
	}
	else
		pEta[4211] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4865] = minval;
		else
			pEta[4865] = -minval;
	}
	else
		pEta[4865] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 363     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[107] + pEtaPrev[431];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[152] + pEtaPrev[611];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[173] + pEtaPrev[695];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[221] + pEtaPrev[887];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[363] + pEtaPrev[1455];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[412] + pEtaPrev[1651];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[436] + pEtaPrev[1747];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[480] + pEtaPrev[1923];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[619] + pEtaPrev[2479];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[691] + pEtaPrev[2767];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[705] + pEtaPrev[2823];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[767] + pEtaPrev[3071];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[875] + pEtaPrev[3287];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[954] + pEtaPrev[3504];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[991] + pEtaPrev[3615];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1167] + pEtaPrev[3887];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1276] + pEtaPrev[4214];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1387] + pEtaPrev[4871];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[431] = minval;
		else
			pEta[431] = -minval;
	}
	else
		pEta[431] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[611] = minval;
		else
			pEta[611] = -minval;
	}
	else
		pEta[611] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[695] = minval;
		else
			pEta[695] = -minval;
	}
	else
		pEta[695] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[887] = minval;
		else
			pEta[887] = -minval;
	}
	else
		pEta[887] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1455] = minval;
		else
			pEta[1455] = -minval;
	}
	else
		pEta[1455] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1651] = minval;
		else
			pEta[1651] = -minval;
	}
	else
		pEta[1651] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1747] = minval;
		else
			pEta[1747] = -minval;
	}
	else
		pEta[1747] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1923] = minval;
		else
			pEta[1923] = -minval;
	}
	else
		pEta[1923] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2479] = minval;
		else
			pEta[2479] = -minval;
	}
	else
		pEta[2479] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2767] = minval;
		else
			pEta[2767] = -minval;
	}
	else
		pEta[2767] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2823] = minval;
		else
			pEta[2823] = -minval;
	}
	else
		pEta[2823] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3071] = minval;
		else
			pEta[3071] = -minval;
	}
	else
		pEta[3071] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3287] = minval;
		else
			pEta[3287] = -minval;
	}
	else
		pEta[3287] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3504] = minval;
		else
			pEta[3504] = -minval;
	}
	else
		pEta[3504] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3615] = minval;
		else
			pEta[3615] = -minval;
	}
	else
		pEta[3615] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3887] = minval;
		else
			pEta[3887] = -minval;
	}
	else
		pEta[3887] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4214] = minval;
		else
			pEta[4214] = -minval;
	}
	else
		pEta[4214] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4871] = minval;
		else
			pEta[4871] = -minval;
	}
	else
		pEta[4871] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 364     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[108] + pEtaPrev[435];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[153] + pEtaPrev[615];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[174] + pEtaPrev[699];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[222] + pEtaPrev[891];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[364] + pEtaPrev[1459];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[413] + pEtaPrev[1655];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[437] + pEtaPrev[1751];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[481] + pEtaPrev[1927];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[620] + pEtaPrev[2483];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[692] + pEtaPrev[2771];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[706] + pEtaPrev[2827];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[736] + pEtaPrev[2947];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[876] + pEtaPrev[3289];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[955] + pEtaPrev[3507];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[960] + pEtaPrev[3522];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1168] + pEtaPrev[3890];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1277] + pEtaPrev[4217];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1388] + pEtaPrev[4877];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[435] = minval;
		else
			pEta[435] = -minval;
	}
	else
		pEta[435] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[615] = minval;
		else
			pEta[615] = -minval;
	}
	else
		pEta[615] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[699] = minval;
		else
			pEta[699] = -minval;
	}
	else
		pEta[699] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[891] = minval;
		else
			pEta[891] = -minval;
	}
	else
		pEta[891] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1459] = minval;
		else
			pEta[1459] = -minval;
	}
	else
		pEta[1459] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1655] = minval;
		else
			pEta[1655] = -minval;
	}
	else
		pEta[1655] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1751] = minval;
		else
			pEta[1751] = -minval;
	}
	else
		pEta[1751] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1927] = minval;
		else
			pEta[1927] = -minval;
	}
	else
		pEta[1927] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2483] = minval;
		else
			pEta[2483] = -minval;
	}
	else
		pEta[2483] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2771] = minval;
		else
			pEta[2771] = -minval;
	}
	else
		pEta[2771] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2827] = minval;
		else
			pEta[2827] = -minval;
	}
	else
		pEta[2827] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2947] = minval;
		else
			pEta[2947] = -minval;
	}
	else
		pEta[2947] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3289] = minval;
		else
			pEta[3289] = -minval;
	}
	else
		pEta[3289] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3507] = minval;
		else
			pEta[3507] = -minval;
	}
	else
		pEta[3507] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3522] = minval;
		else
			pEta[3522] = -minval;
	}
	else
		pEta[3522] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3890] = minval;
		else
			pEta[3890] = -minval;
	}
	else
		pEta[3890] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4217] = minval;
		else
			pEta[4217] = -minval;
	}
	else
		pEta[4217] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4877] = minval;
		else
			pEta[4877] = -minval;
	}
	else
		pEta[4877] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 365     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[109] + pEtaPrev[439];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[154] + pEtaPrev[619];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[175] + pEtaPrev[703];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[223] + pEtaPrev[895];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[365] + pEtaPrev[1463];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[414] + pEtaPrev[1659];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[438] + pEtaPrev[1755];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[482] + pEtaPrev[1931];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[621] + pEtaPrev[2487];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[693] + pEtaPrev[2775];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[707] + pEtaPrev[2831];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[737] + pEtaPrev[2951];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[877] + pEtaPrev[3291];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[956] + pEtaPrev[3510];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[961] + pEtaPrev[3525];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1169] + pEtaPrev[3893];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1278] + pEtaPrev[4220];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1389] + pEtaPrev[4883];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[439] = minval;
		else
			pEta[439] = -minval;
	}
	else
		pEta[439] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[619] = minval;
		else
			pEta[619] = -minval;
	}
	else
		pEta[619] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[703] = minval;
		else
			pEta[703] = -minval;
	}
	else
		pEta[703] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[895] = minval;
		else
			pEta[895] = -minval;
	}
	else
		pEta[895] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1463] = minval;
		else
			pEta[1463] = -minval;
	}
	else
		pEta[1463] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1659] = minval;
		else
			pEta[1659] = -minval;
	}
	else
		pEta[1659] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1755] = minval;
		else
			pEta[1755] = -minval;
	}
	else
		pEta[1755] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1931] = minval;
		else
			pEta[1931] = -minval;
	}
	else
		pEta[1931] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2487] = minval;
		else
			pEta[2487] = -minval;
	}
	else
		pEta[2487] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2775] = minval;
		else
			pEta[2775] = -minval;
	}
	else
		pEta[2775] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2831] = minval;
		else
			pEta[2831] = -minval;
	}
	else
		pEta[2831] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2951] = minval;
		else
			pEta[2951] = -minval;
	}
	else
		pEta[2951] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3291] = minval;
		else
			pEta[3291] = -minval;
	}
	else
		pEta[3291] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3510] = minval;
		else
			pEta[3510] = -minval;
	}
	else
		pEta[3510] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3525] = minval;
		else
			pEta[3525] = -minval;
	}
	else
		pEta[3525] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3893] = minval;
		else
			pEta[3893] = -minval;
	}
	else
		pEta[3893] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4220] = minval;
		else
			pEta[4220] = -minval;
	}
	else
		pEta[4220] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4883] = minval;
		else
			pEta[4883] = -minval;
	}
	else
		pEta[4883] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 366     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[110] + pEtaPrev[443];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[155] + pEtaPrev[623];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[176] + pEtaPrev[707];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[192] + pEtaPrev[771];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[366] + pEtaPrev[1467];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[415] + pEtaPrev[1663];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[439] + pEtaPrev[1759];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[483] + pEtaPrev[1935];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[622] + pEtaPrev[2491];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[694] + pEtaPrev[2779];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[708] + pEtaPrev[2835];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[738] + pEtaPrev[2955];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[878] + pEtaPrev[3293];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[957] + pEtaPrev[3513];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[962] + pEtaPrev[3528];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1170] + pEtaPrev[3896];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1279] + pEtaPrev[4223];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1390] + pEtaPrev[4889];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[443] = minval;
		else
			pEta[443] = -minval;
	}
	else
		pEta[443] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[623] = minval;
		else
			pEta[623] = -minval;
	}
	else
		pEta[623] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[707] = minval;
		else
			pEta[707] = -minval;
	}
	else
		pEta[707] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[771] = minval;
		else
			pEta[771] = -minval;
	}
	else
		pEta[771] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1467] = minval;
		else
			pEta[1467] = -minval;
	}
	else
		pEta[1467] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1663] = minval;
		else
			pEta[1663] = -minval;
	}
	else
		pEta[1663] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1759] = minval;
		else
			pEta[1759] = -minval;
	}
	else
		pEta[1759] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1935] = minval;
		else
			pEta[1935] = -minval;
	}
	else
		pEta[1935] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2491] = minval;
		else
			pEta[2491] = -minval;
	}
	else
		pEta[2491] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2779] = minval;
		else
			pEta[2779] = -minval;
	}
	else
		pEta[2779] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2835] = minval;
		else
			pEta[2835] = -minval;
	}
	else
		pEta[2835] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2955] = minval;
		else
			pEta[2955] = -minval;
	}
	else
		pEta[2955] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3293] = minval;
		else
			pEta[3293] = -minval;
	}
	else
		pEta[3293] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3513] = minval;
		else
			pEta[3513] = -minval;
	}
	else
		pEta[3513] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3528] = minval;
		else
			pEta[3528] = -minval;
	}
	else
		pEta[3528] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3896] = minval;
		else
			pEta[3896] = -minval;
	}
	else
		pEta[3896] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4223] = minval;
		else
			pEta[4223] = -minval;
	}
	else
		pEta[4223] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4889] = minval;
		else
			pEta[4889] = -minval;
	}
	else
		pEta[4889] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 367     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[111] + pEtaPrev[447];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[156] + pEtaPrev[627];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[177] + pEtaPrev[711];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[193] + pEtaPrev[775];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[367] + pEtaPrev[1471];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[384] + pEtaPrev[1539];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[440] + pEtaPrev[1763];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[484] + pEtaPrev[1939];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[623] + pEtaPrev[2495];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[695] + pEtaPrev[2783];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[709] + pEtaPrev[2839];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[739] + pEtaPrev[2959];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[879] + pEtaPrev[3295];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[958] + pEtaPrev[3516];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[963] + pEtaPrev[3531];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1171] + pEtaPrev[3899];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1248] + pEtaPrev[4130];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1391] + pEtaPrev[4895];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[447] = minval;
		else
			pEta[447] = -minval;
	}
	else
		pEta[447] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[627] = minval;
		else
			pEta[627] = -minval;
	}
	else
		pEta[627] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[711] = minval;
		else
			pEta[711] = -minval;
	}
	else
		pEta[711] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[775] = minval;
		else
			pEta[775] = -minval;
	}
	else
		pEta[775] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1471] = minval;
		else
			pEta[1471] = -minval;
	}
	else
		pEta[1471] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1539] = minval;
		else
			pEta[1539] = -minval;
	}
	else
		pEta[1539] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1763] = minval;
		else
			pEta[1763] = -minval;
	}
	else
		pEta[1763] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1939] = minval;
		else
			pEta[1939] = -minval;
	}
	else
		pEta[1939] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2495] = minval;
		else
			pEta[2495] = -minval;
	}
	else
		pEta[2495] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2783] = minval;
		else
			pEta[2783] = -minval;
	}
	else
		pEta[2783] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2839] = minval;
		else
			pEta[2839] = -minval;
	}
	else
		pEta[2839] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2959] = minval;
		else
			pEta[2959] = -minval;
	}
	else
		pEta[2959] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3295] = minval;
		else
			pEta[3295] = -minval;
	}
	else
		pEta[3295] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3516] = minval;
		else
			pEta[3516] = -minval;
	}
	else
		pEta[3516] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3531] = minval;
		else
			pEta[3531] = -minval;
	}
	else
		pEta[3531] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3899] = minval;
		else
			pEta[3899] = -minval;
	}
	else
		pEta[3899] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4130] = minval;
		else
			pEta[4130] = -minval;
	}
	else
		pEta[4130] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4895] = minval;
		else
			pEta[4895] = -minval;
	}
	else
		pEta[4895] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 368     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[112] + pEtaPrev[451];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[157] + pEtaPrev[631];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[178] + pEtaPrev[715];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[194] + pEtaPrev[779];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[368] + pEtaPrev[1475];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[385] + pEtaPrev[1543];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[441] + pEtaPrev[1767];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[485] + pEtaPrev[1943];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[624] + pEtaPrev[2499];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[696] + pEtaPrev[2787];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[710] + pEtaPrev[2843];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[740] + pEtaPrev[2963];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[880] + pEtaPrev[3297];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[959] + pEtaPrev[3519];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[964] + pEtaPrev[3534];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1172] + pEtaPrev[3902];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1249] + pEtaPrev[4133];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1392] + pEtaPrev[4901];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[451] = minval;
		else
			pEta[451] = -minval;
	}
	else
		pEta[451] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[631] = minval;
		else
			pEta[631] = -minval;
	}
	else
		pEta[631] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[715] = minval;
		else
			pEta[715] = -minval;
	}
	else
		pEta[715] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[779] = minval;
		else
			pEta[779] = -minval;
	}
	else
		pEta[779] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1475] = minval;
		else
			pEta[1475] = -minval;
	}
	else
		pEta[1475] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1543] = minval;
		else
			pEta[1543] = -minval;
	}
	else
		pEta[1543] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1767] = minval;
		else
			pEta[1767] = -minval;
	}
	else
		pEta[1767] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1943] = minval;
		else
			pEta[1943] = -minval;
	}
	else
		pEta[1943] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2499] = minval;
		else
			pEta[2499] = -minval;
	}
	else
		pEta[2499] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2787] = minval;
		else
			pEta[2787] = -minval;
	}
	else
		pEta[2787] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2843] = minval;
		else
			pEta[2843] = -minval;
	}
	else
		pEta[2843] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2963] = minval;
		else
			pEta[2963] = -minval;
	}
	else
		pEta[2963] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3297] = minval;
		else
			pEta[3297] = -minval;
	}
	else
		pEta[3297] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3519] = minval;
		else
			pEta[3519] = -minval;
	}
	else
		pEta[3519] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3534] = minval;
		else
			pEta[3534] = -minval;
	}
	else
		pEta[3534] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3902] = minval;
		else
			pEta[3902] = -minval;
	}
	else
		pEta[3902] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4133] = minval;
		else
			pEta[4133] = -minval;
	}
	else
		pEta[4133] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4901] = minval;
		else
			pEta[4901] = -minval;
	}
	else
		pEta[4901] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 369     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[113] + pEtaPrev[455];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[158] + pEtaPrev[635];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[179] + pEtaPrev[719];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[195] + pEtaPrev[783];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[369] + pEtaPrev[1479];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[386] + pEtaPrev[1547];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[442] + pEtaPrev[1771];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[486] + pEtaPrev[1947];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[625] + pEtaPrev[2503];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[697] + pEtaPrev[2791];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[711] + pEtaPrev[2847];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[741] + pEtaPrev[2967];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[881] + pEtaPrev[3299];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[928] + pEtaPrev[3426];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[965] + pEtaPrev[3537];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1173] + pEtaPrev[3905];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1250] + pEtaPrev[4136];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1393] + pEtaPrev[4907];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[455] = minval;
		else
			pEta[455] = -minval;
	}
	else
		pEta[455] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[635] = minval;
		else
			pEta[635] = -minval;
	}
	else
		pEta[635] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[719] = minval;
		else
			pEta[719] = -minval;
	}
	else
		pEta[719] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[783] = minval;
		else
			pEta[783] = -minval;
	}
	else
		pEta[783] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1479] = minval;
		else
			pEta[1479] = -minval;
	}
	else
		pEta[1479] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1547] = minval;
		else
			pEta[1547] = -minval;
	}
	else
		pEta[1547] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1771] = minval;
		else
			pEta[1771] = -minval;
	}
	else
		pEta[1771] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1947] = minval;
		else
			pEta[1947] = -minval;
	}
	else
		pEta[1947] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2503] = minval;
		else
			pEta[2503] = -minval;
	}
	else
		pEta[2503] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2791] = minval;
		else
			pEta[2791] = -minval;
	}
	else
		pEta[2791] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2847] = minval;
		else
			pEta[2847] = -minval;
	}
	else
		pEta[2847] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2967] = minval;
		else
			pEta[2967] = -minval;
	}
	else
		pEta[2967] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3299] = minval;
		else
			pEta[3299] = -minval;
	}
	else
		pEta[3299] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3426] = minval;
		else
			pEta[3426] = -minval;
	}
	else
		pEta[3426] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3537] = minval;
		else
			pEta[3537] = -minval;
	}
	else
		pEta[3537] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3905] = minval;
		else
			pEta[3905] = -minval;
	}
	else
		pEta[3905] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4136] = minval;
		else
			pEta[4136] = -minval;
	}
	else
		pEta[4136] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4907] = minval;
		else
			pEta[4907] = -minval;
	}
	else
		pEta[4907] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 370     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[114] + pEtaPrev[459];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[159] + pEtaPrev[639];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[180] + pEtaPrev[723];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[196] + pEtaPrev[787];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[370] + pEtaPrev[1483];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[387] + pEtaPrev[1551];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[443] + pEtaPrev[1775];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[487] + pEtaPrev[1951];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[626] + pEtaPrev[2507];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[698] + pEtaPrev[2795];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[712] + pEtaPrev[2851];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[742] + pEtaPrev[2971];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[882] + pEtaPrev[3301];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[929] + pEtaPrev[3429];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[966] + pEtaPrev[3540];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1174] + pEtaPrev[3908];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1251] + pEtaPrev[4139];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1394] + pEtaPrev[4913];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[459] = minval;
		else
			pEta[459] = -minval;
	}
	else
		pEta[459] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[639] = minval;
		else
			pEta[639] = -minval;
	}
	else
		pEta[639] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[723] = minval;
		else
			pEta[723] = -minval;
	}
	else
		pEta[723] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[787] = minval;
		else
			pEta[787] = -minval;
	}
	else
		pEta[787] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1483] = minval;
		else
			pEta[1483] = -minval;
	}
	else
		pEta[1483] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1551] = minval;
		else
			pEta[1551] = -minval;
	}
	else
		pEta[1551] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1775] = minval;
		else
			pEta[1775] = -minval;
	}
	else
		pEta[1775] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1951] = minval;
		else
			pEta[1951] = -minval;
	}
	else
		pEta[1951] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2507] = minval;
		else
			pEta[2507] = -minval;
	}
	else
		pEta[2507] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2795] = minval;
		else
			pEta[2795] = -minval;
	}
	else
		pEta[2795] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2851] = minval;
		else
			pEta[2851] = -minval;
	}
	else
		pEta[2851] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2971] = minval;
		else
			pEta[2971] = -minval;
	}
	else
		pEta[2971] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3301] = minval;
		else
			pEta[3301] = -minval;
	}
	else
		pEta[3301] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3429] = minval;
		else
			pEta[3429] = -minval;
	}
	else
		pEta[3429] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3540] = minval;
		else
			pEta[3540] = -minval;
	}
	else
		pEta[3540] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3908] = minval;
		else
			pEta[3908] = -minval;
	}
	else
		pEta[3908] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4139] = minval;
		else
			pEta[4139] = -minval;
	}
	else
		pEta[4139] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4913] = minval;
		else
			pEta[4913] = -minval;
	}
	else
		pEta[4913] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 371     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[115] + pEtaPrev[463];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[128] + pEtaPrev[515];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[181] + pEtaPrev[727];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[197] + pEtaPrev[791];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[371] + pEtaPrev[1487];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[388] + pEtaPrev[1555];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[444] + pEtaPrev[1779];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[488] + pEtaPrev[1955];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[627] + pEtaPrev[2511];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[699] + pEtaPrev[2799];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[713] + pEtaPrev[2855];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[743] + pEtaPrev[2975];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[883] + pEtaPrev[3303];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[930] + pEtaPrev[3432];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[967] + pEtaPrev[3543];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1175] + pEtaPrev[3911];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1252] + pEtaPrev[4142];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1395] + pEtaPrev[4919];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[463] = minval;
		else
			pEta[463] = -minval;
	}
	else
		pEta[463] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[515] = minval;
		else
			pEta[515] = -minval;
	}
	else
		pEta[515] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[727] = minval;
		else
			pEta[727] = -minval;
	}
	else
		pEta[727] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[791] = minval;
		else
			pEta[791] = -minval;
	}
	else
		pEta[791] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1487] = minval;
		else
			pEta[1487] = -minval;
	}
	else
		pEta[1487] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1555] = minval;
		else
			pEta[1555] = -minval;
	}
	else
		pEta[1555] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1779] = minval;
		else
			pEta[1779] = -minval;
	}
	else
		pEta[1779] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1955] = minval;
		else
			pEta[1955] = -minval;
	}
	else
		pEta[1955] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2511] = minval;
		else
			pEta[2511] = -minval;
	}
	else
		pEta[2511] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2799] = minval;
		else
			pEta[2799] = -minval;
	}
	else
		pEta[2799] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2855] = minval;
		else
			pEta[2855] = -minval;
	}
	else
		pEta[2855] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2975] = minval;
		else
			pEta[2975] = -minval;
	}
	else
		pEta[2975] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3303] = minval;
		else
			pEta[3303] = -minval;
	}
	else
		pEta[3303] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3432] = minval;
		else
			pEta[3432] = -minval;
	}
	else
		pEta[3432] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3543] = minval;
		else
			pEta[3543] = -minval;
	}
	else
		pEta[3543] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3911] = minval;
		else
			pEta[3911] = -minval;
	}
	else
		pEta[3911] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4142] = minval;
		else
			pEta[4142] = -minval;
	}
	else
		pEta[4142] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4919] = minval;
		else
			pEta[4919] = -minval;
	}
	else
		pEta[4919] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 372     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[116] + pEtaPrev[467];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[129] + pEtaPrev[519];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[182] + pEtaPrev[731];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[198] + pEtaPrev[795];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[372] + pEtaPrev[1491];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[389] + pEtaPrev[1559];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[445] + pEtaPrev[1783];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[489] + pEtaPrev[1959];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[628] + pEtaPrev[2515];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[700] + pEtaPrev[2803];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[714] + pEtaPrev[2859];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[744] + pEtaPrev[2979];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[884] + pEtaPrev[3305];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[931] + pEtaPrev[3435];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[968] + pEtaPrev[3546];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1176] + pEtaPrev[3914];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1253] + pEtaPrev[4145];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1396] + pEtaPrev[4925];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[467] = minval;
		else
			pEta[467] = -minval;
	}
	else
		pEta[467] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[519] = minval;
		else
			pEta[519] = -minval;
	}
	else
		pEta[519] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[731] = minval;
		else
			pEta[731] = -minval;
	}
	else
		pEta[731] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[795] = minval;
		else
			pEta[795] = -minval;
	}
	else
		pEta[795] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1491] = minval;
		else
			pEta[1491] = -minval;
	}
	else
		pEta[1491] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1559] = minval;
		else
			pEta[1559] = -minval;
	}
	else
		pEta[1559] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1783] = minval;
		else
			pEta[1783] = -minval;
	}
	else
		pEta[1783] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1959] = minval;
		else
			pEta[1959] = -minval;
	}
	else
		pEta[1959] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2515] = minval;
		else
			pEta[2515] = -minval;
	}
	else
		pEta[2515] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2803] = minval;
		else
			pEta[2803] = -minval;
	}
	else
		pEta[2803] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2859] = minval;
		else
			pEta[2859] = -minval;
	}
	else
		pEta[2859] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2979] = minval;
		else
			pEta[2979] = -minval;
	}
	else
		pEta[2979] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3305] = minval;
		else
			pEta[3305] = -minval;
	}
	else
		pEta[3305] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3435] = minval;
		else
			pEta[3435] = -minval;
	}
	else
		pEta[3435] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3546] = minval;
		else
			pEta[3546] = -minval;
	}
	else
		pEta[3546] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3914] = minval;
		else
			pEta[3914] = -minval;
	}
	else
		pEta[3914] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4145] = minval;
		else
			pEta[4145] = -minval;
	}
	else
		pEta[4145] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4925] = minval;
		else
			pEta[4925] = -minval;
	}
	else
		pEta[4925] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 373     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[117] + pEtaPrev[471];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[130] + pEtaPrev[523];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[183] + pEtaPrev[735];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[199] + pEtaPrev[799];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[373] + pEtaPrev[1495];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[390] + pEtaPrev[1563];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[446] + pEtaPrev[1787];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[490] + pEtaPrev[1963];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[629] + pEtaPrev[2519];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[701] + pEtaPrev[2807];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[715] + pEtaPrev[2863];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[745] + pEtaPrev[2983];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[885] + pEtaPrev[3307];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[932] + pEtaPrev[3438];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[969] + pEtaPrev[3549];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1177] + pEtaPrev[3917];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1254] + pEtaPrev[4148];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1397] + pEtaPrev[4931];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[471] = minval;
		else
			pEta[471] = -minval;
	}
	else
		pEta[471] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[523] = minval;
		else
			pEta[523] = -minval;
	}
	else
		pEta[523] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[735] = minval;
		else
			pEta[735] = -minval;
	}
	else
		pEta[735] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[799] = minval;
		else
			pEta[799] = -minval;
	}
	else
		pEta[799] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1495] = minval;
		else
			pEta[1495] = -minval;
	}
	else
		pEta[1495] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1563] = minval;
		else
			pEta[1563] = -minval;
	}
	else
		pEta[1563] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1787] = minval;
		else
			pEta[1787] = -minval;
	}
	else
		pEta[1787] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1963] = minval;
		else
			pEta[1963] = -minval;
	}
	else
		pEta[1963] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2519] = minval;
		else
			pEta[2519] = -minval;
	}
	else
		pEta[2519] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2807] = minval;
		else
			pEta[2807] = -minval;
	}
	else
		pEta[2807] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2863] = minval;
		else
			pEta[2863] = -minval;
	}
	else
		pEta[2863] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2983] = minval;
		else
			pEta[2983] = -minval;
	}
	else
		pEta[2983] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3307] = minval;
		else
			pEta[3307] = -minval;
	}
	else
		pEta[3307] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3438] = minval;
		else
			pEta[3438] = -minval;
	}
	else
		pEta[3438] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3549] = minval;
		else
			pEta[3549] = -minval;
	}
	else
		pEta[3549] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3917] = minval;
		else
			pEta[3917] = -minval;
	}
	else
		pEta[3917] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4148] = minval;
		else
			pEta[4148] = -minval;
	}
	else
		pEta[4148] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4931] = minval;
		else
			pEta[4931] = -minval;
	}
	else
		pEta[4931] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 374     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[118] + pEtaPrev[475];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[131] + pEtaPrev[527];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[184] + pEtaPrev[739];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[200] + pEtaPrev[803];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[374] + pEtaPrev[1499];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[391] + pEtaPrev[1567];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[447] + pEtaPrev[1791];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[491] + pEtaPrev[1967];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[630] + pEtaPrev[2523];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[702] + pEtaPrev[2811];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[716] + pEtaPrev[2867];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[746] + pEtaPrev[2987];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[886] + pEtaPrev[3309];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[933] + pEtaPrev[3441];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[970] + pEtaPrev[3552];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1178] + pEtaPrev[3920];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1255] + pEtaPrev[4151];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1398] + pEtaPrev[4937];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[475] = minval;
		else
			pEta[475] = -minval;
	}
	else
		pEta[475] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[527] = minval;
		else
			pEta[527] = -minval;
	}
	else
		pEta[527] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[739] = minval;
		else
			pEta[739] = -minval;
	}
	else
		pEta[739] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[803] = minval;
		else
			pEta[803] = -minval;
	}
	else
		pEta[803] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1499] = minval;
		else
			pEta[1499] = -minval;
	}
	else
		pEta[1499] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1567] = minval;
		else
			pEta[1567] = -minval;
	}
	else
		pEta[1567] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1791] = minval;
		else
			pEta[1791] = -minval;
	}
	else
		pEta[1791] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1967] = minval;
		else
			pEta[1967] = -minval;
	}
	else
		pEta[1967] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2523] = minval;
		else
			pEta[2523] = -minval;
	}
	else
		pEta[2523] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2811] = minval;
		else
			pEta[2811] = -minval;
	}
	else
		pEta[2811] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2867] = minval;
		else
			pEta[2867] = -minval;
	}
	else
		pEta[2867] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2987] = minval;
		else
			pEta[2987] = -minval;
	}
	else
		pEta[2987] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3309] = minval;
		else
			pEta[3309] = -minval;
	}
	else
		pEta[3309] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3441] = minval;
		else
			pEta[3441] = -minval;
	}
	else
		pEta[3441] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3552] = minval;
		else
			pEta[3552] = -minval;
	}
	else
		pEta[3552] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3920] = minval;
		else
			pEta[3920] = -minval;
	}
	else
		pEta[3920] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4151] = minval;
		else
			pEta[4151] = -minval;
	}
	else
		pEta[4151] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4937] = minval;
		else
			pEta[4937] = -minval;
	}
	else
		pEta[4937] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 375     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[119] + pEtaPrev[479];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[132] + pEtaPrev[531];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[185] + pEtaPrev[743];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[201] + pEtaPrev[807];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[375] + pEtaPrev[1503];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[392] + pEtaPrev[1571];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[416] + pEtaPrev[1667];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[492] + pEtaPrev[1971];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[631] + pEtaPrev[2527];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[703] + pEtaPrev[2815];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[717] + pEtaPrev[2871];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[747] + pEtaPrev[2991];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[887] + pEtaPrev[3311];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[934] + pEtaPrev[3444];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[971] + pEtaPrev[3555];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1179] + pEtaPrev[3923];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1256] + pEtaPrev[4154];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1399] + pEtaPrev[4943];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[479] = minval;
		else
			pEta[479] = -minval;
	}
	else
		pEta[479] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[531] = minval;
		else
			pEta[531] = -minval;
	}
	else
		pEta[531] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[743] = minval;
		else
			pEta[743] = -minval;
	}
	else
		pEta[743] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[807] = minval;
		else
			pEta[807] = -minval;
	}
	else
		pEta[807] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1503] = minval;
		else
			pEta[1503] = -minval;
	}
	else
		pEta[1503] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1571] = minval;
		else
			pEta[1571] = -minval;
	}
	else
		pEta[1571] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1667] = minval;
		else
			pEta[1667] = -minval;
	}
	else
		pEta[1667] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1971] = minval;
		else
			pEta[1971] = -minval;
	}
	else
		pEta[1971] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2527] = minval;
		else
			pEta[2527] = -minval;
	}
	else
		pEta[2527] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2815] = minval;
		else
			pEta[2815] = -minval;
	}
	else
		pEta[2815] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2871] = minval;
		else
			pEta[2871] = -minval;
	}
	else
		pEta[2871] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2991] = minval;
		else
			pEta[2991] = -minval;
	}
	else
		pEta[2991] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3311] = minval;
		else
			pEta[3311] = -minval;
	}
	else
		pEta[3311] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3444] = minval;
		else
			pEta[3444] = -minval;
	}
	else
		pEta[3444] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3555] = minval;
		else
			pEta[3555] = -minval;
	}
	else
		pEta[3555] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3923] = minval;
		else
			pEta[3923] = -minval;
	}
	else
		pEta[3923] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4154] = minval;
		else
			pEta[4154] = -minval;
	}
	else
		pEta[4154] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4943] = minval;
		else
			pEta[4943] = -minval;
	}
	else
		pEta[4943] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 376     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[120] + pEtaPrev[483];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[133] + pEtaPrev[535];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[186] + pEtaPrev[747];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[202] + pEtaPrev[811];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[376] + pEtaPrev[1507];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[393] + pEtaPrev[1575];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[417] + pEtaPrev[1671];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[493] + pEtaPrev[1975];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[632] + pEtaPrev[2531];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[672] + pEtaPrev[2691];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[718] + pEtaPrev[2875];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[748] + pEtaPrev[2995];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[888] + pEtaPrev[3313];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[935] + pEtaPrev[3447];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[972] + pEtaPrev[3558];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1180] + pEtaPrev[3926];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1257] + pEtaPrev[4157];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1400] + pEtaPrev[4949];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[483] = minval;
		else
			pEta[483] = -minval;
	}
	else
		pEta[483] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[535] = minval;
		else
			pEta[535] = -minval;
	}
	else
		pEta[535] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[747] = minval;
		else
			pEta[747] = -minval;
	}
	else
		pEta[747] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[811] = minval;
		else
			pEta[811] = -minval;
	}
	else
		pEta[811] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1507] = minval;
		else
			pEta[1507] = -minval;
	}
	else
		pEta[1507] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1575] = minval;
		else
			pEta[1575] = -minval;
	}
	else
		pEta[1575] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1671] = minval;
		else
			pEta[1671] = -minval;
	}
	else
		pEta[1671] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1975] = minval;
		else
			pEta[1975] = -minval;
	}
	else
		pEta[1975] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2531] = minval;
		else
			pEta[2531] = -minval;
	}
	else
		pEta[2531] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2691] = minval;
		else
			pEta[2691] = -minval;
	}
	else
		pEta[2691] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2875] = minval;
		else
			pEta[2875] = -minval;
	}
	else
		pEta[2875] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2995] = minval;
		else
			pEta[2995] = -minval;
	}
	else
		pEta[2995] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3313] = minval;
		else
			pEta[3313] = -minval;
	}
	else
		pEta[3313] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3447] = minval;
		else
			pEta[3447] = -minval;
	}
	else
		pEta[3447] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3558] = minval;
		else
			pEta[3558] = -minval;
	}
	else
		pEta[3558] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3926] = minval;
		else
			pEta[3926] = -minval;
	}
	else
		pEta[3926] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4157] = minval;
		else
			pEta[4157] = -minval;
	}
	else
		pEta[4157] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4949] = minval;
		else
			pEta[4949] = -minval;
	}
	else
		pEta[4949] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 377     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[121] + pEtaPrev[487];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[134] + pEtaPrev[539];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[187] + pEtaPrev[751];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[203] + pEtaPrev[815];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[377] + pEtaPrev[1511];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[394] + pEtaPrev[1579];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[418] + pEtaPrev[1675];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[494] + pEtaPrev[1979];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[633] + pEtaPrev[2535];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[673] + pEtaPrev[2695];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[719] + pEtaPrev[2879];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[749] + pEtaPrev[2999];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[889] + pEtaPrev[3315];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[936] + pEtaPrev[3450];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[973] + pEtaPrev[3561];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1181] + pEtaPrev[3929];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1258] + pEtaPrev[4160];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1401] + pEtaPrev[4955];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[487] = minval;
		else
			pEta[487] = -minval;
	}
	else
		pEta[487] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[539] = minval;
		else
			pEta[539] = -minval;
	}
	else
		pEta[539] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[751] = minval;
		else
			pEta[751] = -minval;
	}
	else
		pEta[751] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[815] = minval;
		else
			pEta[815] = -minval;
	}
	else
		pEta[815] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1511] = minval;
		else
			pEta[1511] = -minval;
	}
	else
		pEta[1511] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1579] = minval;
		else
			pEta[1579] = -minval;
	}
	else
		pEta[1579] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1675] = minval;
		else
			pEta[1675] = -minval;
	}
	else
		pEta[1675] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1979] = minval;
		else
			pEta[1979] = -minval;
	}
	else
		pEta[1979] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2535] = minval;
		else
			pEta[2535] = -minval;
	}
	else
		pEta[2535] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2695] = minval;
		else
			pEta[2695] = -minval;
	}
	else
		pEta[2695] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2879] = minval;
		else
			pEta[2879] = -minval;
	}
	else
		pEta[2879] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[2999] = minval;
		else
			pEta[2999] = -minval;
	}
	else
		pEta[2999] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3315] = minval;
		else
			pEta[3315] = -minval;
	}
	else
		pEta[3315] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3450] = minval;
		else
			pEta[3450] = -minval;
	}
	else
		pEta[3450] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3561] = minval;
		else
			pEta[3561] = -minval;
	}
	else
		pEta[3561] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3929] = minval;
		else
			pEta[3929] = -minval;
	}
	else
		pEta[3929] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4160] = minval;
		else
			pEta[4160] = -minval;
	}
	else
		pEta[4160] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4955] = minval;
		else
			pEta[4955] = -minval;
	}
	else
		pEta[4955] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 378     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[122] + pEtaPrev[491];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[135] + pEtaPrev[543];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[188] + pEtaPrev[755];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[204] + pEtaPrev[819];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[378] + pEtaPrev[1515];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[395] + pEtaPrev[1583];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[419] + pEtaPrev[1679];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[495] + pEtaPrev[1983];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[634] + pEtaPrev[2539];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[674] + pEtaPrev[2699];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[720] + pEtaPrev[2883];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[750] + pEtaPrev[3003];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[890] + pEtaPrev[3317];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[937] + pEtaPrev[3453];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[974] + pEtaPrev[3564];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1182] + pEtaPrev[3932];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1259] + pEtaPrev[4163];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1402] + pEtaPrev[4961];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[491] = minval;
		else
			pEta[491] = -minval;
	}
	else
		pEta[491] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[543] = minval;
		else
			pEta[543] = -minval;
	}
	else
		pEta[543] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[755] = minval;
		else
			pEta[755] = -minval;
	}
	else
		pEta[755] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[819] = minval;
		else
			pEta[819] = -minval;
	}
	else
		pEta[819] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1515] = minval;
		else
			pEta[1515] = -minval;
	}
	else
		pEta[1515] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1583] = minval;
		else
			pEta[1583] = -minval;
	}
	else
		pEta[1583] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1679] = minval;
		else
			pEta[1679] = -minval;
	}
	else
		pEta[1679] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1983] = minval;
		else
			pEta[1983] = -minval;
	}
	else
		pEta[1983] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2539] = minval;
		else
			pEta[2539] = -minval;
	}
	else
		pEta[2539] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2699] = minval;
		else
			pEta[2699] = -minval;
	}
	else
		pEta[2699] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2883] = minval;
		else
			pEta[2883] = -minval;
	}
	else
		pEta[2883] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3003] = minval;
		else
			pEta[3003] = -minval;
	}
	else
		pEta[3003] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3317] = minval;
		else
			pEta[3317] = -minval;
	}
	else
		pEta[3317] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3453] = minval;
		else
			pEta[3453] = -minval;
	}
	else
		pEta[3453] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3564] = minval;
		else
			pEta[3564] = -minval;
	}
	else
		pEta[3564] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3932] = minval;
		else
			pEta[3932] = -minval;
	}
	else
		pEta[3932] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4163] = minval;
		else
			pEta[4163] = -minval;
	}
	else
		pEta[4163] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4961] = minval;
		else
			pEta[4961] = -minval;
	}
	else
		pEta[4961] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 379     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[123] + pEtaPrev[495];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[136] + pEtaPrev[547];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[189] + pEtaPrev[759];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[205] + pEtaPrev[823];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[379] + pEtaPrev[1519];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[396] + pEtaPrev[1587];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[420] + pEtaPrev[1683];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[496] + pEtaPrev[1987];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[635] + pEtaPrev[2543];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[675] + pEtaPrev[2703];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[721] + pEtaPrev[2887];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[751] + pEtaPrev[3007];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[891] + pEtaPrev[3319];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[938] + pEtaPrev[3456];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[975] + pEtaPrev[3567];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1183] + pEtaPrev[3935];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1260] + pEtaPrev[4166];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1403] + pEtaPrev[4967];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[495] = minval;
		else
			pEta[495] = -minval;
	}
	else
		pEta[495] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[547] = minval;
		else
			pEta[547] = -minval;
	}
	else
		pEta[547] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[759] = minval;
		else
			pEta[759] = -minval;
	}
	else
		pEta[759] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[823] = minval;
		else
			pEta[823] = -minval;
	}
	else
		pEta[823] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1519] = minval;
		else
			pEta[1519] = -minval;
	}
	else
		pEta[1519] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1587] = minval;
		else
			pEta[1587] = -minval;
	}
	else
		pEta[1587] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1683] = minval;
		else
			pEta[1683] = -minval;
	}
	else
		pEta[1683] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1987] = minval;
		else
			pEta[1987] = -minval;
	}
	else
		pEta[1987] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2543] = minval;
		else
			pEta[2543] = -minval;
	}
	else
		pEta[2543] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2703] = minval;
		else
			pEta[2703] = -minval;
	}
	else
		pEta[2703] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2887] = minval;
		else
			pEta[2887] = -minval;
	}
	else
		pEta[2887] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3007] = minval;
		else
			pEta[3007] = -minval;
	}
	else
		pEta[3007] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3319] = minval;
		else
			pEta[3319] = -minval;
	}
	else
		pEta[3319] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3456] = minval;
		else
			pEta[3456] = -minval;
	}
	else
		pEta[3456] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3567] = minval;
		else
			pEta[3567] = -minval;
	}
	else
		pEta[3567] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3935] = minval;
		else
			pEta[3935] = -minval;
	}
	else
		pEta[3935] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4166] = minval;
		else
			pEta[4166] = -minval;
	}
	else
		pEta[4166] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4967] = minval;
		else
			pEta[4967] = -minval;
	}
	else
		pEta[4967] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 380     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[124] + pEtaPrev[499];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[137] + pEtaPrev[551];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[190] + pEtaPrev[763];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[206] + pEtaPrev[827];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[380] + pEtaPrev[1523];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[397] + pEtaPrev[1591];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[421] + pEtaPrev[1687];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[497] + pEtaPrev[1991];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[636] + pEtaPrev[2547];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[676] + pEtaPrev[2707];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[722] + pEtaPrev[2891];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[752] + pEtaPrev[3011];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[892] + pEtaPrev[3321];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[939] + pEtaPrev[3459];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[976] + pEtaPrev[3570];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1152] + pEtaPrev[3842];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1261] + pEtaPrev[4169];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1404] + pEtaPrev[4973];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[499] = minval;
		else
			pEta[499] = -minval;
	}
	else
		pEta[499] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[551] = minval;
		else
			pEta[551] = -minval;
	}
	else
		pEta[551] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[763] = minval;
		else
			pEta[763] = -minval;
	}
	else
		pEta[763] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[827] = minval;
		else
			pEta[827] = -minval;
	}
	else
		pEta[827] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1523] = minval;
		else
			pEta[1523] = -minval;
	}
	else
		pEta[1523] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1591] = minval;
		else
			pEta[1591] = -minval;
	}
	else
		pEta[1591] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1687] = minval;
		else
			pEta[1687] = -minval;
	}
	else
		pEta[1687] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1991] = minval;
		else
			pEta[1991] = -minval;
	}
	else
		pEta[1991] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2547] = minval;
		else
			pEta[2547] = -minval;
	}
	else
		pEta[2547] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2707] = minval;
		else
			pEta[2707] = -minval;
	}
	else
		pEta[2707] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2891] = minval;
		else
			pEta[2891] = -minval;
	}
	else
		pEta[2891] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3011] = minval;
		else
			pEta[3011] = -minval;
	}
	else
		pEta[3011] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3321] = minval;
		else
			pEta[3321] = -minval;
	}
	else
		pEta[3321] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3459] = minval;
		else
			pEta[3459] = -minval;
	}
	else
		pEta[3459] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3570] = minval;
		else
			pEta[3570] = -minval;
	}
	else
		pEta[3570] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3842] = minval;
		else
			pEta[3842] = -minval;
	}
	else
		pEta[3842] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4169] = minval;
		else
			pEta[4169] = -minval;
	}
	else
		pEta[4169] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4973] = minval;
		else
			pEta[4973] = -minval;
	}
	else
		pEta[4973] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 381     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[125] + pEtaPrev[503];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[138] + pEtaPrev[555];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[191] + pEtaPrev[767];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[207] + pEtaPrev[831];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[381] + pEtaPrev[1527];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[398] + pEtaPrev[1595];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[422] + pEtaPrev[1691];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[498] + pEtaPrev[1995];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[637] + pEtaPrev[2551];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[677] + pEtaPrev[2711];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[723] + pEtaPrev[2895];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[753] + pEtaPrev[3015];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[893] + pEtaPrev[3323];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[940] + pEtaPrev[3462];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[977] + pEtaPrev[3573];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1153] + pEtaPrev[3845];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1262] + pEtaPrev[4172];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1405] + pEtaPrev[4979];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[503] = minval;
		else
			pEta[503] = -minval;
	}
	else
		pEta[503] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[555] = minval;
		else
			pEta[555] = -minval;
	}
	else
		pEta[555] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[767] = minval;
		else
			pEta[767] = -minval;
	}
	else
		pEta[767] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[831] = minval;
		else
			pEta[831] = -minval;
	}
	else
		pEta[831] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1527] = minval;
		else
			pEta[1527] = -minval;
	}
	else
		pEta[1527] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1595] = minval;
		else
			pEta[1595] = -minval;
	}
	else
		pEta[1595] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1691] = minval;
		else
			pEta[1691] = -minval;
	}
	else
		pEta[1691] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1995] = minval;
		else
			pEta[1995] = -minval;
	}
	else
		pEta[1995] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2551] = minval;
		else
			pEta[2551] = -minval;
	}
	else
		pEta[2551] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2711] = minval;
		else
			pEta[2711] = -minval;
	}
	else
		pEta[2711] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2895] = minval;
		else
			pEta[2895] = -minval;
	}
	else
		pEta[2895] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3015] = minval;
		else
			pEta[3015] = -minval;
	}
	else
		pEta[3015] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3323] = minval;
		else
			pEta[3323] = -minval;
	}
	else
		pEta[3323] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3462] = minval;
		else
			pEta[3462] = -minval;
	}
	else
		pEta[3462] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3573] = minval;
		else
			pEta[3573] = -minval;
	}
	else
		pEta[3573] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3845] = minval;
		else
			pEta[3845] = -minval;
	}
	else
		pEta[3845] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4172] = minval;
		else
			pEta[4172] = -minval;
	}
	else
		pEta[4172] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4979] = minval;
		else
			pEta[4979] = -minval;
	}
	else
		pEta[4979] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 382     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[126] + pEtaPrev[507];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[139] + pEtaPrev[559];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[160] + pEtaPrev[643];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[208] + pEtaPrev[835];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[382] + pEtaPrev[1531];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[399] + pEtaPrev[1599];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[423] + pEtaPrev[1695];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[499] + pEtaPrev[1999];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[638] + pEtaPrev[2555];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[678] + pEtaPrev[2715];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[724] + pEtaPrev[2899];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[754] + pEtaPrev[3019];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[894] + pEtaPrev[3325];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[941] + pEtaPrev[3465];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[978] + pEtaPrev[3576];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1154] + pEtaPrev[3848];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1263] + pEtaPrev[4175];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1406] + pEtaPrev[4985];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[507] = minval;
		else
			pEta[507] = -minval;
	}
	else
		pEta[507] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[559] = minval;
		else
			pEta[559] = -minval;
	}
	else
		pEta[559] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[643] = minval;
		else
			pEta[643] = -minval;
	}
	else
		pEta[643] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[835] = minval;
		else
			pEta[835] = -minval;
	}
	else
		pEta[835] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1531] = minval;
		else
			pEta[1531] = -minval;
	}
	else
		pEta[1531] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1599] = minval;
		else
			pEta[1599] = -minval;
	}
	else
		pEta[1599] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1695] = minval;
		else
			pEta[1695] = -minval;
	}
	else
		pEta[1695] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[1999] = minval;
		else
			pEta[1999] = -minval;
	}
	else
		pEta[1999] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2555] = minval;
		else
			pEta[2555] = -minval;
	}
	else
		pEta[2555] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2715] = minval;
		else
			pEta[2715] = -minval;
	}
	else
		pEta[2715] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2899] = minval;
		else
			pEta[2899] = -minval;
	}
	else
		pEta[2899] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3019] = minval;
		else
			pEta[3019] = -minval;
	}
	else
		pEta[3019] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3325] = minval;
		else
			pEta[3325] = -minval;
	}
	else
		pEta[3325] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3465] = minval;
		else
			pEta[3465] = -minval;
	}
	else
		pEta[3465] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3576] = minval;
		else
			pEta[3576] = -minval;
	}
	else
		pEta[3576] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3848] = minval;
		else
			pEta[3848] = -minval;
	}
	else
		pEta[3848] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4175] = minval;
		else
			pEta[4175] = -minval;
	}
	else
		pEta[4175] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4985] = minval;
		else
			pEta[4985] = -minval;
	}
	else
		pEta[4985] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

	// ******* Begin  M loop = 383     nLenNset loop = 18  ********** 
	vMetric = 32000;
	last = 0;
	min = -1;
	vArg = -pLambda[127] + pEtaPrev[511];
	est[0] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 0;
	vArg = -pLambda[140] + pEtaPrev[563];
	est[1] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 1;
	vArg = -pLambda[161] + pEtaPrev[647];
	est[2] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 2;
	vArg = -pLambda[209] + pEtaPrev[839];
	est[3] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 3;
	vArg = -pLambda[383] + pEtaPrev[1535];
	est[4] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 4;
	vArg = -pLambda[400] + pEtaPrev[1603];
	est[5] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 5;
	vArg = -pLambda[424] + pEtaPrev[1699];
	est[6] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 6;
	vArg = -pLambda[500] + pEtaPrev[2003];
	est[7] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 7;
	vArg = -pLambda[639] + pEtaPrev[2559];
	est[8] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 8;
	vArg = -pLambda[679] + pEtaPrev[2719];
	est[9] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 9;
	vArg = -pLambda[725] + pEtaPrev[2903];
	est[10] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 10;
	vArg = -pLambda[755] + pEtaPrev[3023];
	est[11] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 11;
	vArg = -pLambda[895] + pEtaPrev[3327];
	est[12] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 12;
	vArg = -pLambda[942] + pEtaPrev[3468];
	est[13] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 13;
	vArg = -pLambda[979] + pEtaPrev[3579];
	est[14] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 14;
	vArg = -pLambda[1155] + pEtaPrev[3851];
	est[15] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 15;
	vArg = -pLambda[1264] + pEtaPrev[4178];
	est[16] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 16;
	vArg = -pLambda[1407] + pEtaPrev[4991];
	est[17] = vArg;
	vMetric = MetricFunctionScaledMin(vMetric, vArg);
	if ((vMetric == vArg) || (vMetric == -vArg))
		min = 17;

	minval = 32000;
	if (0 != min)
	{
		vArg = est[0];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (1 != min)
	{
		vArg = est[1];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (2 != min)
	{
		vArg = est[2];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (3 != min)
	{
		vArg = est[3];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (4 != min)
	{
		vArg = est[4];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (5 != min)
	{
		vArg = est[5];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (6 != min)
	{
		vArg = est[6];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (7 != min)
	{
		vArg = est[7];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (8 != min)
	{
		vArg = est[8];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (9 != min)
	{
		vArg = est[9];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (10 != min)
	{
		vArg = est[10];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (11 != min)
	{
		vArg = est[11];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (12 != min)
	{
		vArg = est[12];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (13 != min)
	{
		vArg = est[13];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (14 != min)
	{
		vArg = est[14];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (15 != min)
	{
		vArg = est[15];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (16 != min)
	{
		vArg = est[16];
		minval = MetricFunctionScaledMin(minval, vArg);
	}
	if (17 != min)
	{
		vArg = est[17];
		minval = MetricFunctionScaledMin(minval, vArg);
	}

	last = (3 * minval) >> 2;
	minval = (3 * vMetric) >> 2;

	if (0 != min)
	{
		if (est[0] < 0)
			pEta[511] = minval;
		else
			pEta[511] = -minval;
	}
	else
		pEta[511] = -last;
	if (1 != min)
	{
		if (est[1] < 0)
			pEta[563] = minval;
		else
			pEta[563] = -minval;
	}
	else
		pEta[563] = -last;
	if (2 != min)
	{
		if (est[2] < 0)
			pEta[647] = minval;
		else
			pEta[647] = -minval;
	}
	else
		pEta[647] = -last;
	if (3 != min)
	{
		if (est[3] < 0)
			pEta[839] = minval;
		else
			pEta[839] = -minval;
	}
	else
		pEta[839] = -last;
	if (4 != min)
	{
		if (est[4] < 0)
			pEta[1535] = minval;
		else
			pEta[1535] = -minval;
	}
	else
		pEta[1535] = -last;
	if (5 != min)
	{
		if (est[5] < 0)
			pEta[1603] = minval;
		else
			pEta[1603] = -minval;
	}
	else
		pEta[1603] = -last;
	if (6 != min)
	{
		if (est[6] < 0)
			pEta[1699] = minval;
		else
			pEta[1699] = -minval;
	}
	else
		pEta[1699] = -last;
	if (7 != min)
	{
		if (est[7] < 0)
			pEta[2003] = minval;
		else
			pEta[2003] = -minval;
	}
	else
		pEta[2003] = -last;
	if (8 != min)
	{
		if (est[8] < 0)
			pEta[2559] = minval;
		else
			pEta[2559] = -minval;
	}
	else
		pEta[2559] = -last;
	if (9 != min)
	{
		if (est[9] < 0)
			pEta[2719] = minval;
		else
			pEta[2719] = -minval;
	}
	else
		pEta[2719] = -last;
	if (10 != min)
	{
		if (est[10] < 0)
			pEta[2903] = minval;
		else
			pEta[2903] = -minval;
	}
	else
		pEta[2903] = -last;
	if (11 != min)
	{
		if (est[11] < 0)
			pEta[3023] = minval;
		else
			pEta[3023] = -minval;
	}
	else
		pEta[3023] = -last;
	if (12 != min)
	{
		if (est[12] < 0)
			pEta[3327] = minval;
		else
			pEta[3327] = -minval;
	}
	else
		pEta[3327] = -last;
	if (13 != min)
	{
		if (est[13] < 0)
			pEta[3468] = minval;
		else
			pEta[3468] = -minval;
	}
	else
		pEta[3468] = -last;
	if (14 != min)
	{
		if (est[14] < 0)
			pEta[3579] = minval;
		else
			pEta[3579] = -minval;
	}
	else
		pEta[3579] = -last;
	if (15 != min)
	{
		if (est[15] < 0)
			pEta[3851] = minval;
		else
			pEta[3851] = -minval;
	}
	else
		pEta[3851] = -last;
	if (16 != min)
	{
		if (est[16] < 0)
			pEta[4178] = minval;
		else
			pEta[4178] = -minval;
	}
	else
		pEta[4178] = -last;
	if (17 != min)
	{
		if (est[17] < 0)
			pEta[4991] = minval;
		else
			pEta[4991] = -minval;
	}
	else
		pEta[4991] = -last;
	// etaIndex += nLenNset;
	// lambdaIndex += nLenNset;

}
//   
// end of file 
