-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18AGfk_rom is 
    generic(
             dwidth     : integer := 20; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18AGfk_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00001100000001000111", 1 => "00010000000011001000", 
    2 => "00010100000101001001", 3 => "00011000000111001010", 
    4 => "00011100001001001011", 5 => "00100000001011001100", 
    6 => "00100100001101001101", 7 => "00101000001111001110", 
    8 => "00101100010001001111", 9 => "00110000010011010000", 
    10 => "00110100010101010001", 11 => "00111000010111010010", 
    12 => "00111100011001010011", 13 => "01000000011011010100", 
    14 => "01000100011101010101", 15 => "01001000011111010110", 
    16 => "01001100100001010111", 17 => "01010000100011011000", 
    18 => "01010100100101011001", 19 => "01011000100111011010", 
    20 => "01011100101001011011", 21 => "01100000101011011100", 
    22 => "01100100101101011101", 23 => "01101000101111011110", 
    24 => "01101100110001011111", 25 => "01110000110011000000", 
    26 => "01110100110101000001", 27 => "01111000110111000010", 
    28 => "01111100111001000011", 29 => "00000000111011000100", 
    30 => "00000100111101000101", 31 => "00001000111111000110", 
    32 => "11101001000001111111", 33 => "11101101000011100000", 
    34 => "11110001000101100001", 35 => "11110101000111100010", 
    36 => "11111001001001100011", 37 => "11111101001011100100", 
    38 => "10000001001101100101", 39 => "10000101001111100110", 
    40 => "10001001010001100111", 41 => "10001101010011101000", 
    42 => "10010001010101101001", 43 => "10010101010111101010", 
    44 => "10011001011001101011", 45 => "10011101011011101100", 
    46 => "10100001011101101101", 47 => "10100101011111101110", 
    48 => "10101001100001101111", 49 => "10101101100011110000", 
    50 => "10110001100101110001", 51 => "10110101100111110010", 
    52 => "10111001101001110011", 53 => "10111101101011110100", 
    54 => "11000001101101110101", 55 => "11000101101111110110", 
    56 => "11001001110001110111", 57 => "11001101110011111000", 
    58 => "11010001110101111001", 59 => "11010101110111111010", 
    60 => "11011001111001111011", 61 => "11011101111011111100", 
    62 => "11100001111101111101", 63 => "11100101111111111110", 
    64 => "01000010000001100011", 65 => "01000110000011100100", 
    66 => "01001010000101100101", 67 => "01001110000111100110", 
    68 => "01010010001001100111", 69 => "01010110001011101000", 
    70 => "01011010001101101001", 71 => "01011110001111101010", 
    72 => "01100010010001101011", 73 => "01100110010011101100", 
    74 => "01101010010101101101", 75 => "01101110010111101110", 
    76 => "01110010011001101111", 77 => "01110110011011110000", 
    78 => "01111010011101110001", 79 => "01111110011111110010", 
    80 => "00000010100001110011", 81 => "00000110100011110100", 
    82 => "00001010100101110101", 83 => "00001110100111110110", 
    84 => "00010010101001110111", 85 => "00010110101011111000", 
    86 => "00011010101101111001", 87 => "00011110101111111010", 
    88 => "00100010110001111011", 89 => "00100110110011111100", 
    90 => "00101010110101111101", 91 => "00101110110111111110", 
    92 => "00110010111001111111", 93 => "00110110111011100000", 
    94 => "00111010111101100001", 95 => "00111110111111100010", 
    96 => "00101111000001110011", 97 => "00110011000011110100", 
    98 => "00110111000101110101", 99 => "00111011000111110110", 
    100 => "00111111001001110111", 101 => "01000011001011111000", 
    102 => "01000111001101111001", 103 => "01001011001111111010", 
    104 => "01001111010001111011", 105 => "01010011010011111100", 
    106 => "01010111010101111101", 107 => "01011011010111111110", 
    108 => "01011111011001111111", 109 => "01100011011011100000", 
    110 => "01100111011101100001", 111 => "01101011011111100010", 
    112 => "01101111100001100011", 113 => "01110011100011100100", 
    114 => "01110111100101100101", 115 => "01111011100111100110", 
    116 => "01111111101001100111", 117 => "00000011101011101000", 
    118 => "00000111101101101001", 119 => "00001011101111101010", 
    120 => "00001111110001101011", 121 => "00010011110011101100", 
    122 => "00010111110101101101", 123 => "00011011110111101110", 
    124 => "00011111111001101111", 125 => "00100011111011110000", 
    126 => "00100111111101110001", 127 => "00101011111111110010", 
    128 to 511=> "00000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18AGfk is
    generic (
        DataWidth : INTEGER := 20;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18AGfk is
    component mcalcAA_varinx18AGfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18AGfk_rom_U :  component mcalcAA_varinx18AGfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


