-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18BKfY_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18BKfY_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "101101001010010000000", 1 => "101101101010100000001", 
    2 => "101110001010110000010", 3 => "101110101011000000011", 
    4 => "101111001011010000100", 5 => "101111101011100000101", 
    6 => "100000001011110000110", 7 => "100000101100000000111", 
    8 => "100001001100010001000", 9 => "100001101100100001001", 
    10 => "100010001100110001010", 11 => "100010101101000001011", 
    12 => "100011001101010001100", 13 => "100011101101100001101", 
    14 => "100100001101110001110", 15 => "100100101110000001111", 
    16 => "100101001110010010000", 17 => "100101101110100010001", 
    18 => "100110001110110010010", 19 => "100110101111000010011", 
    20 => "100111001111010010100", 21 => "100111101111100010101", 
    22 => "101000001111110010110", 23 => "101000101000000010111", 
    24 => "101001001000010011000", 25 => "101001101000100011001", 
    26 => "101010001000110011010", 27 => "101010101001000011011", 
    28 => "101011001001010011100", 29 => "101011101001100011101", 
    30 => "101100001001110011110", 31 => "101100101010000011111", 
    32 => "101101000100010100000", 33 => "101101100100100100001", 
    34 => "101110000100110100010", 35 => "101110100101000100011", 
    36 => "101111000101010100100", 37 => "101111100101100100101", 
    38 => "100000000101110100110", 39 => "100000100110000100111", 
    40 => "100001000110010101000", 41 => "100001100110100101001", 
    42 => "100010000110110101010", 43 => "100010100111000101011", 
    44 => "100011000111010101100", 45 => "100011100111100101101", 
    46 => "100100000111110101110", 47 => "100100100000000101111", 
    48 => "100101000000010110000", 49 => "100101100000100110001", 
    50 => "100110000000110110010", 51 => "100110100001000110011", 
    52 => "100111000001010110100", 53 => "100111100001100110101", 
    54 => "101000000001110110110", 55 => "101000100010000110111", 
    56 => "101001000010010111000", 57 => "101001100010100111001", 
    58 => "101010000010110111010", 59 => "101010100011000111011", 
    60 => "101011000011010111100", 61 => "101011100011100111101", 
    62 => "101100000011110111110", 63 => "101100100100000111111", 
    64 => "010110100011111000000", 65 => "010111000100001000001", 
    66 => "010111100100011000010", 67 => "011000000100101000011", 
    68 => "011000100100111000100", 69 => "011001000101001000101", 
    70 => "011001100101011000110", 71 => "011010000101101000111", 
    72 => "011010100101111001000", 73 => "011011000110001001001", 
    74 => "011011100110011001010", 75 => "011100000110101001011", 
    76 => "011100100110111001100", 77 => "011101000111001001101", 
    78 => "011101100111011001110", 79 => "011110000111101001111", 
    80 => "011110100111111010000", 81 => "011111000000001010001", 
    82 => "011111100000011010010", 83 => "010000000000101010011", 
    84 => "010000100000111010100", 85 => "010001000001001010101", 
    86 => "010001100001011010110", 87 => "010010000001101010111", 
    88 => "010010100001111011000", 89 => "010011000010001011001", 
    90 => "010011100010011011010", 91 => "010100000010101011011", 
    92 => "010100100010111011100", 93 => "010101000011001011101", 
    94 => "010101100011011011110", 95 => "010110000011101011111", 
    96 => "010001000011011100000", 97 => "010001100011101100001", 
    98 => "010010000011111100010", 99 => "010010100100001100011", 
    100 => "010011000100011100100", 101 => "010011100100101100101", 
    102 => "010100000100111100110", 103 => "010100100101001100111", 
    104 => "010101000101011101000", 105 => "010101100101101101001", 
    106 => "010110000101111101010", 107 => "010110100110001101011", 
    108 => "010111000110011101100", 109 => "010111100110101101101", 
    110 => "011000000110111101110", 111 => "011000100111001101111", 
    112 => "011001000111011110000", 113 => "011001100111101110001", 
    114 => "011010000111111110010", 115 => "011010100000001110011", 
    116 => "011011000000011110100", 117 => "011011100000101110101", 
    118 => "011100000000111110110", 119 => "011100100001001110111", 
    120 => "011101000001011111000", 121 => "011101100001101111001", 
    122 => "011110000001111111010", 123 => "011110100010001111011", 
    124 => "011111000010011111100", 125 => "011111100010101111101", 
    126 => "010000000010111111110", 127 => "010000100011001111111", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18BKfY is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18BKfY is
    component mcalcAA_varinx18BKfY_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18BKfY_rom_U :  component mcalcAA_varinx18BKfY_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


