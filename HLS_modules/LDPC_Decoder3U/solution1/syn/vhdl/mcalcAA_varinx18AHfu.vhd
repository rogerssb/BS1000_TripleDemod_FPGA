-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18AHfu_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18AHfu_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "000000010000110110110", 1 => "000000110001000110111", 
    2 => "000001010001010111000", 3 => "000001110001100111001", 
    4 => "000010010001110111010", 5 => "000010110010000111011", 
    6 => "000011010010010111100", 7 => "000011110010100111101", 
    8 => "000100010010110111110", 9 => "000100110011000111111", 
    10 => "000101010011010100000", 11 => "000101110011100100001", 
    12 => "000110010011110100010", 13 => "000110110100000100011", 
    14 => "000111010100010100100", 15 => "000111110100100100101", 
    16 => "001000010100110100110", 17 => "001000110101000100111", 
    18 => "001001010101010101000", 19 => "001001110101100101001", 
    20 => "001010010101110101010", 21 => "001010110110000101011", 
    22 => "001011010110010101100", 23 => "001011110110100101101", 
    24 => "001100010110110101110", 25 => "001100110111000101111", 
    26 => "001101010111010110000", 27 => "001101110111100110001", 
    28 => "001110010111110110010", 29 => "001110110000000110011", 
    30 => "001111010000010110100", 31 => "001111110000100110101", 
    32 => "010000011001001011000", 33 => "010000111001011011001", 
    34 => "010001011001101011010", 35 => "010001111001111011011", 
    36 => "010010011010001011100", 37 => "010010111010011011101", 
    38 => "010011011010101011110", 39 => "010011111010111011111", 
    40 => "010100011011001000000", 41 => "010100111011011000001", 
    42 => "010101011011101000010", 43 => "010101111011111000011", 
    44 => "010110011100001000100", 45 => "010110111100011000101", 
    46 => "010111011100101000110", 47 => "010111111100111000111", 
    48 => "011000011101001001000", 49 => "011000111101011001001", 
    50 => "011001011101101001010", 51 => "011001111101111001011", 
    52 => "011010011110001001100", 53 => "011010111110011001101", 
    54 => "011011011110101001110", 55 => "011011111110111001111", 
    56 => "011100011111001010000", 57 => "011100111111011010001", 
    58 => "011101011111101010010", 59 => "011101111111111010011", 
    60 => "011110011000001010100", 61 => "011110111000011010101", 
    62 => "011111011000101010110", 63 => "011111111000111010111", 
    64 => "100000011011111000111", 65 => "100000111100001001000", 
    66 => "100001011100011001001", 67 => "100001111100101001010", 
    68 => "100010011100111001011", 69 => "100010111101001001100", 
    70 => "100011011101011001101", 71 => "100011111101101001110", 
    72 => "100100011101111001111", 73 => "100100111110001010000", 
    74 => "100101011110011010001", 75 => "100101111110101010010", 
    76 => "100110011110111010011", 77 => "100110111111001010100", 
    78 => "100111011111011010101", 79 => "100111111111101010110", 
    80 => "101000011111111010111", 81 => "101000111000001011000", 
    82 => "101001011000011011001", 83 => "101001111000101011010", 
    84 => "101010011000111011011", 85 => "101010111001001011100", 
    86 => "101011011001011011101", 87 => "101011111001101011110", 
    88 => "101100011001111011111", 89 => "101100111010001000000", 
    90 => "101101011010011000001", 91 => "101101111010101000010", 
    92 => "101110011010111000011", 93 => "101110111011001000100", 
    94 => "101111011011011000101", 95 => "101111111011101000110", 
    96 => "110000011001000110001", 97 => "110000111001010110010", 
    98 => "110001011001100110011", 99 => "110001111001110110100", 
    100 => "110010011010000110101", 101 => "110010111010010110110", 
    102 => "110011011010100110111", 103 => "110011111010110111000", 
    104 => "110100011011000111001", 105 => "110100111011010111010", 
    106 => "110101011011100111011", 107 => "110101111011110111100", 
    108 => "110110011100000111101", 109 => "110110111100010111110", 
    110 => "110111011100100111111", 111 => "110111111100110100000", 
    112 => "111000011101000100001", 113 => "111000111101010100010", 
    114 => "111001011101100100011", 115 => "111001111101110100100", 
    116 => "111010011110000100101", 117 => "111010111110010100110", 
    118 => "111011011110100100111", 119 => "111011111110110101000", 
    120 => "111100011111000101001", 121 => "111100111111010101010", 
    122 => "111101011111100101011", 123 => "111101111111110101100", 
    124 => "111110011000000101101", 125 => "111110111000010101110", 
    126 => "111111011000100101111", 127 => "111111111000110110000", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18AHfu is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18AHfu is
    component mcalcAA_varinx18AHfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18AHfu_rom_U :  component mcalcAA_varinx18AHfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


