-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18BPgM_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18BPgM_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "000000001100100000101", 1 => "000000101100110000110", 
    2 => "000001001101000000111", 3 => "000001101101010001000", 
    4 => "000010001101100001001", 5 => "000010101101110001010", 
    6 => "000011001110000001011", 7 => "000011101110010001100", 
    8 => "000100001110100001101", 9 => "000100101110110001110", 
    10 => "000101001111000001111", 11 => "000101101111010010000", 
    12 => "000110001111100010001", 13 => "000110101111110010010", 
    14 => "000111001000000010011", 15 => "000111101000010010100", 
    16 => "001000001000100010101", 17 => "001000101000110010110", 
    18 => "001001001001000010111", 19 => "001001101001010011000", 
    20 => "001010001001100011001", 21 => "001010101001110011010", 
    22 => "001011001010000011011", 23 => "001011101010010011100", 
    24 => "001100001010100011101", 25 => "001100101010110011110", 
    26 => "001101001011000011111", 27 => "001101101011010000000", 
    28 => "001110001011100000001", 29 => "001110101011110000010", 
    30 => "001111001100000000011", 31 => "001111101100010000100", 
    32 => "010000010101000101000", 33 => "010000110101010101001", 
    34 => "010001010101100101010", 35 => "010001110101110101011", 
    36 => "010010010110000101100", 37 => "010010110110010101101", 
    38 => "010011010110100101110", 39 => "010011110110110101111", 
    40 => "010100010111000110000", 41 => "010100110111010110001", 
    42 => "010101010111100110010", 43 => "010101110111110110011", 
    44 => "010110010000000110100", 45 => "010110110000010110101", 
    46 => "010111010000100110110", 47 => "010111110000110110111", 
    48 => "011000010001000111000", 49 => "011000110001010111001", 
    50 => "011001010001100111010", 51 => "011001110001110111011", 
    52 => "011010010010000111100", 53 => "011010110010010111101", 
    54 => "011011010010100111110", 55 => "011011110010110111111", 
    56 => "011100010011000100000", 57 => "011100110011010100001", 
    58 => "011101010011100100010", 59 => "011101110011110100011", 
    60 => "011110010100000100100", 61 => "011110110100010100101", 
    62 => "011111010100100100110", 63 => "011111110100110100111", 
    64 => "100000011010011001101", 65 => "100000111010101001110", 
    66 => "100001011010111001111", 67 => "100001111011001010000", 
    68 => "100010011011011010001", 69 => "100010111011101010010", 
    70 => "100011011011111010011", 71 => "100011111100001010100", 
    72 => "100100011100011010101", 73 => "100100111100101010110", 
    74 => "100101011100111010111", 75 => "100101111101001011000", 
    76 => "100110011101011011001", 77 => "100110111101101011010", 
    78 => "100111011101111011011", 79 => "100111111110001011100", 
    80 => "101000011110011011101", 81 => "101000111110101011110", 
    82 => "101001011110111011111", 83 => "101001111111001000000", 
    84 => "101010011111011000001", 85 => "101010111111101000010", 
    86 => "101011011111111000011", 87 => "101011111000001000100", 
    88 => "101100011000011000101", 89 => "101100111000101000110", 
    90 => "101101011000111000111", 91 => "101101111001001001000", 
    92 => "101110011001011001001", 93 => "101110111001101001010", 
    94 => "101111011001111001011", 95 => "101111111010001001100", 
    96 => "110000011100010000100", 97 => "110000111100100000101", 
    98 => "110001011100110000110", 99 => "110001111101000000111", 
    100 => "110010011101010001000", 101 => "110010111101100001001", 
    102 => "110011011101110001010", 103 => "110011111110000001011", 
    104 => "110100011110010001100", 105 => "110100111110100001101", 
    106 => "110101011110110001110", 107 => "110101111111000001111", 
    108 => "110110011111010010000", 109 => "110110111111100010001", 
    110 => "110111011111110010010", 111 => "110111111000000010011", 
    112 => "111000011000010010100", 113 => "111000111000100010101", 
    114 => "111001011000110010110", 115 => "111001111001000010111", 
    116 => "111010011001010011000", 117 => "111010111001100011001", 
    118 => "111011011001110011010", 119 => "111011111010000011011", 
    120 => "111100011010010011100", 121 => "111100111010100011101", 
    122 => "111101011010110011110", 123 => "111101111011000011111", 
    124 => "111110011011010000000", 125 => "111110111011100000001", 
    126 => "111111011011110000010", 127 => "111111111100000000011", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18BPgM is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18BPgM is
    component mcalcAA_varinx18BPgM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18BPgM_rom_U :  component mcalcAA_varinx18BPgM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


