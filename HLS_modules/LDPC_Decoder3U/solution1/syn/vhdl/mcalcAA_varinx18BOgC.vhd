-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18BOgC_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18BOgC_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "110101010000000000000", 1 => "110101110000010000001", 
    2 => "110110010000100000010", 3 => "110110110000110000011", 
    4 => "110111010001000000100", 5 => "110111110001010000101", 
    6 => "111000010001100000110", 7 => "111000110001110000111", 
    8 => "111001010010000001000", 9 => "111001110010010001001", 
    10 => "111010010010100001010", 11 => "111010110010110001011", 
    12 => "111011010011000001100", 13 => "111011110011010001101", 
    14 => "111100010011100001110", 15 => "111100110011110001111", 
    16 => "111101010100000010000", 17 => "111101110100010010001", 
    18 => "111110010100100010010", 19 => "111110110100110010011", 
    20 => "111111010101000010100", 21 => "111111110101010010101", 
    22 => "110000010101100010110", 23 => "110000110101110010111", 
    24 => "110001010110000011000", 25 => "110001110110010011001", 
    26 => "110010010110100011010", 27 => "110010110110110011011", 
    28 => "110011010111000011100", 29 => "110011110111010011101", 
    30 => "110100010111100011110", 31 => "110100110111110011111", 
    32 => "110011100000010100000", 33 => "110100000000100100001", 
    34 => "110100100000110100010", 35 => "110101000001000100011", 
    36 => "110101100001010100100", 37 => "110110000001100100101", 
    38 => "110110100001110100110", 39 => "110111000010000100111", 
    40 => "110111100010010101000", 41 => "111000000010100101001", 
    42 => "111000100010110101010", 43 => "111001000011000101011", 
    44 => "111001100011010101100", 45 => "111010000011100101101", 
    46 => "111010100011110101110", 47 => "111011000100000101111", 
    48 => "111011100100010110000", 49 => "111100000100100110001", 
    50 => "111100100100110110010", 51 => "111101000101000110011", 
    52 => "111101100101010110100", 53 => "111110000101100110101", 
    54 => "111110100101110110110", 55 => "111111000110000110111", 
    56 => "111111100110010111000", 57 => "110000000110100111001", 
    58 => "110000100110110111010", 59 => "110001000111000111011", 
    60 => "110001100111010111100", 61 => "110010000111100111101", 
    62 => "110010100111110111110", 63 => "110011000000000111111", 
    64 => "011000000010101000000", 65 => "011000100010111000001", 
    66 => "011001000011001000010", 67 => "011001100011011000011", 
    68 => "011010000011101000100", 69 => "011010100011111000101", 
    70 => "011011000100001000110", 71 => "011011100100011000111", 
    72 => "011100000100101001000", 73 => "011100100100111001001", 
    74 => "011101000101001001010", 75 => "011101100101011001011", 
    76 => "011110000101101001100", 77 => "011110100101111001101", 
    78 => "011111000110001001110", 79 => "011111100110011001111", 
    80 => "010000000110101010000", 81 => "010000100110111010001", 
    82 => "010001000111001010010", 83 => "010001100111011010011", 
    84 => "010010000111101010100", 85 => "010010100111111010101", 
    86 => "010011000000001010110", 87 => "010011100000011010111", 
    88 => "010100000000101011000", 89 => "010100100000111011001", 
    90 => "010101000001001011010", 91 => "010101100001011011011", 
    92 => "010110000001101011100", 93 => "010110100001111011101", 
    94 => "010111000010001011110", 95 => "010111100010011011111", 
    96 => "101010001011111100000", 97 => "101010101100001100001", 
    98 => "101011001100011100010", 99 => "101011101100101100011", 
    100 => "101100001100111100100", 101 => "101100101101001100101", 
    102 => "101101001101011100110", 103 => "101101101101101100111", 
    104 => "101110001101111101000", 105 => "101110101110001101001", 
    106 => "101111001110011101010", 107 => "101111101110101101011", 
    108 => "100000001110111101100", 109 => "100000101111001101101", 
    110 => "100001001111011101110", 111 => "100001101111101101111", 
    112 => "100010001111111110000", 113 => "100010101000001110001", 
    114 => "100011001000011110010", 115 => "100011101000101110011", 
    116 => "100100001000111110100", 117 => "100100101001001110101", 
    118 => "100101001001011110110", 119 => "100101101001101110111", 
    120 => "100110001001111111000", 121 => "100110101010001111001", 
    122 => "100111001010011111010", 123 => "100111101010101111011", 
    124 => "101000001010111111100", 125 => "101000101011001111101", 
    126 => "101001001011011111110", 127 => "101001101011101111111", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18BOgC is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18BOgC is
    component mcalcAA_varinx18BOgC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18BOgC_rom_U :  component mcalcAA_varinx18BOgC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


