-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18AEe0_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18AEe0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "100011101100110000100", 1 => "100100001101000000101", 
    2 => "100100101101010000110", 3 => "100101001101100000111", 
    4 => "100101101101110001000", 5 => "100110001110000001001", 
    6 => "100110101110010001010", 7 => "100111001110100001011", 
    8 => "100111101110110001100", 9 => "101000001111000001101", 
    10 => "101000101111010001110", 11 => "101001001111100001111", 
    12 => "101001101111110010000", 13 => "101010001000000010001", 
    14 => "101010101000010010010", 15 => "101011001000100010011", 
    16 => "101011101000110010100", 17 => "101100001001000010101", 
    18 => "101100101001010010110", 19 => "101101001001100010111", 
    20 => "101101101001110011000", 21 => "101110001010000011001", 
    22 => "101110101010010011010", 23 => "101111001010100011011", 
    24 => "101111101010110011100", 25 => "100000001011000011101", 
    26 => "100000101011010011110", 27 => "100001001011100011111", 
    28 => "100001101011110000000", 29 => "100010001100000000001", 
    30 => "100010101100010000010", 31 => "100011001100100000011", 
    32 => "110101110001010100010", 33 => "110110010001100100011", 
    34 => "110110110001110100100", 35 => "110111010010000100101", 
    36 => "110111110010010100110", 37 => "111000010010100100111", 
    38 => "111000110010110101000", 39 => "111001010011000101001", 
    40 => "111001110011010101010", 41 => "111010010011100101011", 
    42 => "111010110011110101100", 43 => "111011010100000101101", 
    44 => "111011110100010101110", 45 => "111100010100100101111", 
    46 => "111100110100110110000", 47 => "111101010101000110001", 
    48 => "111101110101010110010", 49 => "111110010101100110011", 
    50 => "111110110101110110100", 51 => "111111010110000110101", 
    52 => "111111110110010110110", 53 => "110000010110100110111", 
    54 => "110000110110110111000", 55 => "110001010111000111001", 
    56 => "110001110111010111010", 57 => "110010010111100111011", 
    58 => "110010110111110111100", 59 => "110011010000000111101", 
    60 => "110011110000010111110", 61 => "110100010000100111111", 
    62 => "110100110000110100000", 63 => "110101010001000100001", 
    64 => "110101110000100001011", 65 => "110110010000110001100", 
    66 => "110110110001000001101", 67 => "110111010001010001110", 
    68 => "110111110001100001111", 69 => "111000010001110010000", 
    70 => "111000110010000010001", 71 => "111001010010010010010", 
    72 => "111001110010100010011", 73 => "111010010010110010100", 
    74 => "111010110011000010101", 75 => "111011010011010010110", 
    76 => "111011110011100010111", 77 => "111100010011110011000", 
    78 => "111100110100000011001", 79 => "111101010100010011010", 
    80 => "111101110100100011011", 81 => "111110010100110011100", 
    82 => "111110110101000011101", 83 => "111111010101010011110", 
    84 => "111111110101100011111", 85 => "110000010101110000000", 
    86 => "110000110110000000001", 87 => "110001010110010000010", 
    88 => "110001110110100000011", 89 => "110010010110110000100", 
    90 => "110010110111000000101", 91 => "110011010111010000110", 
    92 => "110011110111100000111", 93 => "110100010111110001000", 
    94 => "110100110000000001001", 95 => "110101010000010001010", 
    96 => "111010001111110010010", 97 => "111010101000000010011", 
    98 => "111011001000010010100", 99 => "111011101000100010101", 
    100 => "111100001000110010110", 101 => "111100101001000010111", 
    102 => "111101001001010011000", 103 => "111101101001100011001", 
    104 => "111110001001110011010", 105 => "111110101010000011011", 
    106 => "111111001010010011100", 107 => "111111101010100011101", 
    108 => "110000001010110011110", 109 => "110000101011000011111", 
    110 => "110001001011010000000", 111 => "110001101011100000001", 
    112 => "110010001011110000010", 113 => "110010101100000000011", 
    114 => "110011001100010000100", 115 => "110011101100100000101", 
    116 => "110100001100110000110", 117 => "110100101101000000111", 
    118 => "110101001101010001000", 119 => "110101101101100001001", 
    120 => "110110001101110001010", 121 => "110110101110000001011", 
    122 => "110111001110010001100", 123 => "110111101110100001101", 
    124 => "111000001110110001110", 125 => "111000101111000001111", 
    126 => "111001001111010010000", 127 => "111001101111100010001", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18AEe0 is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18AEe0 is
    component mcalcAA_varinx18AEe0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18AEe0_rom_U :  component mcalcAA_varinx18AEe0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


