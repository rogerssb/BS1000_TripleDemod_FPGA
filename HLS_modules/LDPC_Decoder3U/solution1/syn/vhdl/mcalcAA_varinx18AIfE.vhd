-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18AIfE_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18AIfE_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "000000000000000000000", 1 => "000000100000010000001", 
    2 => "000001000000100000010", 3 => "000001100000110000011", 
    4 => "000010000001000000100", 5 => "000010100001010000101", 
    6 => "000011000001100000110", 7 => "000011100001110000111", 
    8 => "000100000010000001000", 9 => "000100100010010001001", 
    10 => "000101000010100001010", 11 => "000101100010110001011", 
    12 => "000110000011000001100", 13 => "000110100011010001101", 
    14 => "000111000011100001110", 15 => "000111100011110001111", 
    16 => "001000000100000010000", 17 => "001000100100010010001", 
    18 => "001001000100100010010", 19 => "001001100100110010011", 
    20 => "001010000101000010100", 21 => "001010100101010010101", 
    22 => "001011000101100010110", 23 => "001011100101110010111", 
    24 => "001100000110000011000", 25 => "001100100110010011001", 
    26 => "001101000110100011010", 27 => "001101100110110011011", 
    28 => "001110000111000011100", 29 => "001110100111010011101", 
    30 => "001111000111100011110", 31 => "001111100111110011111", 
    32 => "010000001000000100000", 33 => "010000101000010100001", 
    34 => "010001001000100100010", 35 => "010001101000110100011", 
    36 => "010010001001000100100", 37 => "010010101001010100101", 
    38 => "010011001001100100110", 39 => "010011101001110100111", 
    40 => "010100001010000101000", 41 => "010100101010010101001", 
    42 => "010101001010100101010", 43 => "010101101010110101011", 
    44 => "010110001011000101100", 45 => "010110101011010101101", 
    46 => "010111001011100101110", 47 => "010111101011110101111", 
    48 => "011000001100000110000", 49 => "011000101100010110001", 
    50 => "011001001100100110010", 51 => "011001101100110110011", 
    52 => "011010001101000110100", 53 => "011010101101010110101", 
    54 => "011011001101100110110", 55 => "011011101101110110111", 
    56 => "011100001110000111000", 57 => "011100101110010111001", 
    58 => "011101001110100111010", 59 => "011101101110110111011", 
    60 => "011110001111000111100", 61 => "011110101111010111101", 
    62 => "011111001111100111110", 63 => "011111101111110111111", 
    64 => "100000010000001000000", 65 => "100000110000011000001", 
    66 => "100001010000101000010", 67 => "100001110000111000011", 
    68 => "100010010001001000100", 69 => "100010110001011000101", 
    70 => "100011010001101000110", 71 => "100011110001111000111", 
    72 => "100100010010001001000", 73 => "100100110010011001001", 
    74 => "100101010010101001010", 75 => "100101110010111001011", 
    76 => "100110010011001001100", 77 => "100110110011011001101", 
    78 => "100111010011101001110", 79 => "100111110011111001111", 
    80 => "101000010100001010000", 81 => "101000110100011010001", 
    82 => "101001010100101010010", 83 => "101001110100111010011", 
    84 => "101010010101001010100", 85 => "101010110101011010101", 
    86 => "101011010101101010110", 87 => "101011110101111010111", 
    88 => "101100010110001011000", 89 => "101100110110011011001", 
    90 => "101101010110101011010", 91 => "101101110110111011011", 
    92 => "101110010111001011100", 93 => "101110110111011011101", 
    94 => "101111010111101011110", 95 => "101111110111111011111", 
    96 => "110000011000001100000", 97 => "110000111000011100001", 
    98 => "110001011000101100010", 99 => "110001111000111100011", 
    100 => "110010011001001100100", 101 => "110010111001011100101", 
    102 => "110011011001101100110", 103 => "110011111001111100111", 
    104 => "110100011010001101000", 105 => "110100111010011101001", 
    106 => "110101011010101101010", 107 => "110101111010111101011", 
    108 => "110110011011001101100", 109 => "110110111011011101101", 
    110 => "110111011011101101110", 111 => "110111111011111101111", 
    112 => "111000011100001110000", 113 => "111000111100011110001", 
    114 => "111001011100101110010", 115 => "111001111100111110011", 
    116 => "111010011101001110100", 117 => "111010111101011110101", 
    118 => "111011011101101110110", 119 => "111011111101111110111", 
    120 => "111100011110001111000", 121 => "111100111110011111001", 
    122 => "111101011110101111010", 123 => "111101111110111111011", 
    124 => "111110011111001111100", 125 => "111110111111011111101", 
    126 => "111111011111101111110", 127 => "111111111111111111111", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18AIfE is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18AIfE is
    component mcalcAA_varinx18AIfE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18AIfE_rom_U :  component mcalcAA_varinx18AIfE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


