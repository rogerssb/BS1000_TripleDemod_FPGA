// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __mcalcAA_varinx18AEe0_H__
#define __mcalcAA_varinx18AEe0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mcalcAA_varinx18AEe0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 21;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mcalcAA_varinx18AEe0_ram) {
        ram[0] = "0b100011101100110000100";
        ram[1] = "0b100100001101000000101";
        ram[2] = "0b100100101101010000110";
        ram[3] = "0b100101001101100000111";
        ram[4] = "0b100101101101110001000";
        ram[5] = "0b100110001110000001001";
        ram[6] = "0b100110101110010001010";
        ram[7] = "0b100111001110100001011";
        ram[8] = "0b100111101110110001100";
        ram[9] = "0b101000001111000001101";
        ram[10] = "0b101000101111010001110";
        ram[11] = "0b101001001111100001111";
        ram[12] = "0b101001101111110010000";
        ram[13] = "0b101010001000000010001";
        ram[14] = "0b101010101000010010010";
        ram[15] = "0b101011001000100010011";
        ram[16] = "0b101011101000110010100";
        ram[17] = "0b101100001001000010101";
        ram[18] = "0b101100101001010010110";
        ram[19] = "0b101101001001100010111";
        ram[20] = "0b101101101001110011000";
        ram[21] = "0b101110001010000011001";
        ram[22] = "0b101110101010010011010";
        ram[23] = "0b101111001010100011011";
        ram[24] = "0b101111101010110011100";
        ram[25] = "0b100000001011000011101";
        ram[26] = "0b100000101011010011110";
        ram[27] = "0b100001001011100011111";
        ram[28] = "0b100001101011110000000";
        ram[29] = "0b100010001100000000001";
        ram[30] = "0b100010101100010000010";
        ram[31] = "0b100011001100100000011";
        ram[32] = "0b110101110001010100010";
        ram[33] = "0b110110010001100100011";
        ram[34] = "0b110110110001110100100";
        ram[35] = "0b110111010010000100101";
        ram[36] = "0b110111110010010100110";
        ram[37] = "0b111000010010100100111";
        ram[38] = "0b111000110010110101000";
        ram[39] = "0b111001010011000101001";
        ram[40] = "0b111001110011010101010";
        ram[41] = "0b111010010011100101011";
        ram[42] = "0b111010110011110101100";
        ram[43] = "0b111011010100000101101";
        ram[44] = "0b111011110100010101110";
        ram[45] = "0b111100010100100101111";
        ram[46] = "0b111100110100110110000";
        ram[47] = "0b111101010101000110001";
        ram[48] = "0b111101110101010110010";
        ram[49] = "0b111110010101100110011";
        ram[50] = "0b111110110101110110100";
        ram[51] = "0b111111010110000110101";
        ram[52] = "0b111111110110010110110";
        ram[53] = "0b110000010110100110111";
        ram[54] = "0b110000110110110111000";
        ram[55] = "0b110001010111000111001";
        ram[56] = "0b110001110111010111010";
        ram[57] = "0b110010010111100111011";
        ram[58] = "0b110010110111110111100";
        ram[59] = "0b110011010000000111101";
        ram[60] = "0b110011110000010111110";
        ram[61] = "0b110100010000100111111";
        ram[62] = "0b110100110000110100000";
        ram[63] = "0b110101010001000100001";
        ram[64] = "0b110101110000100001011";
        ram[65] = "0b110110010000110001100";
        ram[66] = "0b110110110001000001101";
        ram[67] = "0b110111010001010001110";
        ram[68] = "0b110111110001100001111";
        ram[69] = "0b111000010001110010000";
        ram[70] = "0b111000110010000010001";
        ram[71] = "0b111001010010010010010";
        ram[72] = "0b111001110010100010011";
        ram[73] = "0b111010010010110010100";
        ram[74] = "0b111010110011000010101";
        ram[75] = "0b111011010011010010110";
        ram[76] = "0b111011110011100010111";
        ram[77] = "0b111100010011110011000";
        ram[78] = "0b111100110100000011001";
        ram[79] = "0b111101010100010011010";
        ram[80] = "0b111101110100100011011";
        ram[81] = "0b111110010100110011100";
        ram[82] = "0b111110110101000011101";
        ram[83] = "0b111111010101010011110";
        ram[84] = "0b111111110101100011111";
        ram[85] = "0b110000010101110000000";
        ram[86] = "0b110000110110000000001";
        ram[87] = "0b110001010110010000010";
        ram[88] = "0b110001110110100000011";
        ram[89] = "0b110010010110110000100";
        ram[90] = "0b110010110111000000101";
        ram[91] = "0b110011010111010000110";
        ram[92] = "0b110011110111100000111";
        ram[93] = "0b110100010111110001000";
        ram[94] = "0b110100110000000001001";
        ram[95] = "0b110101010000010001010";
        ram[96] = "0b111010001111110010010";
        ram[97] = "0b111010101000000010011";
        ram[98] = "0b111011001000010010100";
        ram[99] = "0b111011101000100010101";
        ram[100] = "0b111100001000110010110";
        ram[101] = "0b111100101001000010111";
        ram[102] = "0b111101001001010011000";
        ram[103] = "0b111101101001100011001";
        ram[104] = "0b111110001001110011010";
        ram[105] = "0b111110101010000011011";
        ram[106] = "0b111111001010010011100";
        ram[107] = "0b111111101010100011101";
        ram[108] = "0b110000001010110011110";
        ram[109] = "0b110000101011000011111";
        ram[110] = "0b110001001011010000000";
        ram[111] = "0b110001101011100000001";
        ram[112] = "0b110010001011110000010";
        ram[113] = "0b110010101100000000011";
        ram[114] = "0b110011001100010000100";
        ram[115] = "0b110011101100100000101";
        ram[116] = "0b110100001100110000110";
        ram[117] = "0b110100101101000000111";
        ram[118] = "0b110101001101010001000";
        ram[119] = "0b110101101101100001001";
        ram[120] = "0b110110001101110001010";
        ram[121] = "0b110110101110000001011";
        ram[122] = "0b110111001110010001100";
        ram[123] = "0b110111101110100001101";
        ram[124] = "0b111000001110110001110";
        ram[125] = "0b111000101111000001111";
        ram[126] = "0b111001001111010010000";
        ram[127] = "0b111001101111100010001";
        for (unsigned i = 128; i < 512 ; i = i + 1) {
            ram[i] = "0b000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mcalcAA_varinx18AEe0) {


static const unsigned DataWidth = 21;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mcalcAA_varinx18AEe0_ram* meminst;


SC_CTOR(mcalcAA_varinx18AEe0) {
meminst = new mcalcAA_varinx18AEe0_ram("mcalcAA_varinx18AEe0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~mcalcAA_varinx18AEe0() {
    delete meminst;
}


};//endmodule
#endif
