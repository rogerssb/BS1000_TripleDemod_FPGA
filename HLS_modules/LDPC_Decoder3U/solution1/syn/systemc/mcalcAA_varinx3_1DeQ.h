// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __mcalcAA_varinx3_1DeQ_H__
#define __mcalcAA_varinx3_1DeQ_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mcalcAA_varinx3_1DeQ_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 21;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mcalcAA_varinx3_1DeQ_ram) {
        ram[0] = "0b110000100000000000000";
        ram[1] = "0b110001000000010000001";
        ram[2] = "0b110001100000100000010";
        ram[3] = "0b110010000000110000011";
        ram[4] = "0b110010100001000000100";
        ram[5] = "0b110011000001010000101";
        ram[6] = "0b110011100001100000110";
        ram[7] = "0b110100000001110000111";
        ram[8] = "0b110100100010000001000";
        ram[9] = "0b110101000010010001001";
        ram[10] = "0b110101100010100001010";
        ram[11] = "0b110110000010110001011";
        ram[12] = "0b110110100011000001100";
        ram[13] = "0b110111000011010001101";
        ram[14] = "0b110111100011100001110";
        ram[15] = "0b111000000011110001111";
        ram[16] = "0b111000100100000010000";
        ram[17] = "0b111001000100010010001";
        ram[18] = "0b111001100100100010010";
        ram[19] = "0b111010000100110010011";
        ram[20] = "0b111010100101000010100";
        ram[21] = "0b111011000101010010101";
        ram[22] = "0b111011100101100010110";
        ram[23] = "0b111100000101110010111";
        ram[24] = "0b111100100110000011000";
        ram[25] = "0b111101000110010011001";
        ram[26] = "0b111101100110100011010";
        ram[27] = "0b111110000110110011011";
        ram[28] = "0b111110100111000011100";
        ram[29] = "0b111111000111010011101";
        ram[30] = "0b111111100111100011110";
        ram[31] = "0b110000000111110011111";
        ram[32] = "0b010000000000000100000";
        ram[33] = "0b010000100000010100001";
        ram[34] = "0b010001000000100100010";
        ram[35] = "0b010001100000110100011";
        ram[36] = "0b010010000001000100100";
        ram[37] = "0b010010100001010100101";
        ram[38] = "0b010011000001100100110";
        ram[39] = "0b010011100001110100111";
        ram[40] = "0b010100000010000101000";
        ram[41] = "0b010100100010010101001";
        ram[42] = "0b010101000010100101010";
        ram[43] = "0b010101100010110101011";
        ram[44] = "0b010110000011000101100";
        ram[45] = "0b010110100011010101101";
        ram[46] = "0b010111000011100101110";
        ram[47] = "0b010111100011110101111";
        ram[48] = "0b011000000100000110000";
        ram[49] = "0b011000100100010110001";
        ram[50] = "0b011001000100100110010";
        ram[51] = "0b011001100100110110011";
        ram[52] = "0b011010000101000110100";
        ram[53] = "0b011010100101010110101";
        ram[54] = "0b011011000101100110110";
        ram[55] = "0b011011100101110110111";
        ram[56] = "0b011100000110000111000";
        ram[57] = "0b011100100110010111001";
        ram[58] = "0b011101000110100111010";
        ram[59] = "0b011101100110110111011";
        ram[60] = "0b011110000111000111100";
        ram[61] = "0b011110100111010111101";
        ram[62] = "0b011111000111100111110";
        ram[63] = "0b011111100111110111111";
        ram[64] = "0b100000001000001000000";
        ram[65] = "0b100000101000011000001";
        ram[66] = "0b100001001000101000010";
        ram[67] = "0b100001101000111000011";
        ram[68] = "0b100010001001001000100";
        ram[69] = "0b100010101001011000101";
        ram[70] = "0b100011001001101000110";
        ram[71] = "0b100011101001111000111";
        ram[72] = "0b100100001010001001000";
        ram[73] = "0b100100101010011001001";
        ram[74] = "0b100101001010101001010";
        ram[75] = "0b100101101010111001011";
        ram[76] = "0b100110001011001001100";
        ram[77] = "0b100110101011011001101";
        ram[78] = "0b100111001011101001110";
        ram[79] = "0b100111101011111001111";
        ram[80] = "0b101000001100001010000";
        ram[81] = "0b101000101100011010001";
        ram[82] = "0b101001001100101010010";
        ram[83] = "0b101001101100111010011";
        ram[84] = "0b101010001101001010100";
        ram[85] = "0b101010101101011010101";
        ram[86] = "0b101011001101101010110";
        ram[87] = "0b101011101101111010111";
        ram[88] = "0b101100001110001011000";
        ram[89] = "0b101100101110011011001";
        ram[90] = "0b101101001110101011010";
        ram[91] = "0b101101101110111011011";
        ram[92] = "0b101110001111001011100";
        ram[93] = "0b101110101111011011101";
        ram[94] = "0b101111001111101011110";
        ram[95] = "0b101111101111111011111";
        ram[96] = "0b110000010000001100000";
        ram[97] = "0b110000110000011100001";
        ram[98] = "0b110001010000101100010";
        ram[99] = "0b110001110000111100011";
        ram[100] = "0b110010010001001100100";
        ram[101] = "0b110010110001011100101";
        ram[102] = "0b110011010001101100110";
        ram[103] = "0b110011110001111100111";
        ram[104] = "0b110100010010001101000";
        ram[105] = "0b110100110010011101001";
        ram[106] = "0b110101010010101101010";
        ram[107] = "0b110101110010111101011";
        ram[108] = "0b110110010011001101100";
        ram[109] = "0b110110110011011101101";
        ram[110] = "0b110111010011101101110";
        ram[111] = "0b110111110011111101111";
        ram[112] = "0b111000010100001110000";
        ram[113] = "0b111000110100011110001";
        ram[114] = "0b111001010100101110010";
        ram[115] = "0b111001110100111110011";
        ram[116] = "0b111010010101001110100";
        ram[117] = "0b111010110101011110101";
        ram[118] = "0b111011010101101110110";
        ram[119] = "0b111011110101111110111";
        ram[120] = "0b111100010110001111000";
        ram[121] = "0b111100110110011111001";
        ram[122] = "0b111101010110101111010";
        ram[123] = "0b111101110110111111011";
        ram[124] = "0b111110010111001111100";
        ram[125] = "0b111110110111011111101";
        ram[126] = "0b111111010111101111110";
        ram[127] = "0b111111110111111111111";
        for (unsigned i = 128; i < 512 ; i = i + 1) {
            ram[i] = "0b000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mcalcAA_varinx3_1DeQ) {


static const unsigned DataWidth = 21;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mcalcAA_varinx3_1DeQ_ram* meminst;


SC_CTOR(mcalcAA_varinx3_1DeQ) {
meminst = new mcalcAA_varinx3_1DeQ_ram("mcalcAA_varinx3_1DeQ_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~mcalcAA_varinx3_1DeQ() {
    delete meminst;
}


};//endmodule
#endif
