// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __mcalcAA_varinx18BPgM_H__
#define __mcalcAA_varinx18BPgM_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mcalcAA_varinx18BPgM_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 21;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mcalcAA_varinx18BPgM_ram) {
        ram[0] = "0b000000001100100000101";
        ram[1] = "0b000000101100110000110";
        ram[2] = "0b000001001101000000111";
        ram[3] = "0b000001101101010001000";
        ram[4] = "0b000010001101100001001";
        ram[5] = "0b000010101101110001010";
        ram[6] = "0b000011001110000001011";
        ram[7] = "0b000011101110010001100";
        ram[8] = "0b000100001110100001101";
        ram[9] = "0b000100101110110001110";
        ram[10] = "0b000101001111000001111";
        ram[11] = "0b000101101111010010000";
        ram[12] = "0b000110001111100010001";
        ram[13] = "0b000110101111110010010";
        ram[14] = "0b000111001000000010011";
        ram[15] = "0b000111101000010010100";
        ram[16] = "0b001000001000100010101";
        ram[17] = "0b001000101000110010110";
        ram[18] = "0b001001001001000010111";
        ram[19] = "0b001001101001010011000";
        ram[20] = "0b001010001001100011001";
        ram[21] = "0b001010101001110011010";
        ram[22] = "0b001011001010000011011";
        ram[23] = "0b001011101010010011100";
        ram[24] = "0b001100001010100011101";
        ram[25] = "0b001100101010110011110";
        ram[26] = "0b001101001011000011111";
        ram[27] = "0b001101101011010000000";
        ram[28] = "0b001110001011100000001";
        ram[29] = "0b001110101011110000010";
        ram[30] = "0b001111001100000000011";
        ram[31] = "0b001111101100010000100";
        ram[32] = "0b010000010101000101000";
        ram[33] = "0b010000110101010101001";
        ram[34] = "0b010001010101100101010";
        ram[35] = "0b010001110101110101011";
        ram[36] = "0b010010010110000101100";
        ram[37] = "0b010010110110010101101";
        ram[38] = "0b010011010110100101110";
        ram[39] = "0b010011110110110101111";
        ram[40] = "0b010100010111000110000";
        ram[41] = "0b010100110111010110001";
        ram[42] = "0b010101010111100110010";
        ram[43] = "0b010101110111110110011";
        ram[44] = "0b010110010000000110100";
        ram[45] = "0b010110110000010110101";
        ram[46] = "0b010111010000100110110";
        ram[47] = "0b010111110000110110111";
        ram[48] = "0b011000010001000111000";
        ram[49] = "0b011000110001010111001";
        ram[50] = "0b011001010001100111010";
        ram[51] = "0b011001110001110111011";
        ram[52] = "0b011010010010000111100";
        ram[53] = "0b011010110010010111101";
        ram[54] = "0b011011010010100111110";
        ram[55] = "0b011011110010110111111";
        ram[56] = "0b011100010011000100000";
        ram[57] = "0b011100110011010100001";
        ram[58] = "0b011101010011100100010";
        ram[59] = "0b011101110011110100011";
        ram[60] = "0b011110010100000100100";
        ram[61] = "0b011110110100010100101";
        ram[62] = "0b011111010100100100110";
        ram[63] = "0b011111110100110100111";
        ram[64] = "0b100000011010011001101";
        ram[65] = "0b100000111010101001110";
        ram[66] = "0b100001011010111001111";
        ram[67] = "0b100001111011001010000";
        ram[68] = "0b100010011011011010001";
        ram[69] = "0b100010111011101010010";
        ram[70] = "0b100011011011111010011";
        ram[71] = "0b100011111100001010100";
        ram[72] = "0b100100011100011010101";
        ram[73] = "0b100100111100101010110";
        ram[74] = "0b100101011100111010111";
        ram[75] = "0b100101111101001011000";
        ram[76] = "0b100110011101011011001";
        ram[77] = "0b100110111101101011010";
        ram[78] = "0b100111011101111011011";
        ram[79] = "0b100111111110001011100";
        ram[80] = "0b101000011110011011101";
        ram[81] = "0b101000111110101011110";
        ram[82] = "0b101001011110111011111";
        ram[83] = "0b101001111111001000000";
        ram[84] = "0b101010011111011000001";
        ram[85] = "0b101010111111101000010";
        ram[86] = "0b101011011111111000011";
        ram[87] = "0b101011111000001000100";
        ram[88] = "0b101100011000011000101";
        ram[89] = "0b101100111000101000110";
        ram[90] = "0b101101011000111000111";
        ram[91] = "0b101101111001001001000";
        ram[92] = "0b101110011001011001001";
        ram[93] = "0b101110111001101001010";
        ram[94] = "0b101111011001111001011";
        ram[95] = "0b101111111010001001100";
        ram[96] = "0b110000011100010000100";
        ram[97] = "0b110000111100100000101";
        ram[98] = "0b110001011100110000110";
        ram[99] = "0b110001111101000000111";
        ram[100] = "0b110010011101010001000";
        ram[101] = "0b110010111101100001001";
        ram[102] = "0b110011011101110001010";
        ram[103] = "0b110011111110000001011";
        ram[104] = "0b110100011110010001100";
        ram[105] = "0b110100111110100001101";
        ram[106] = "0b110101011110110001110";
        ram[107] = "0b110101111111000001111";
        ram[108] = "0b110110011111010010000";
        ram[109] = "0b110110111111100010001";
        ram[110] = "0b110111011111110010010";
        ram[111] = "0b110111111000000010011";
        ram[112] = "0b111000011000010010100";
        ram[113] = "0b111000111000100010101";
        ram[114] = "0b111001011000110010110";
        ram[115] = "0b111001111001000010111";
        ram[116] = "0b111010011001010011000";
        ram[117] = "0b111010111001100011001";
        ram[118] = "0b111011011001110011010";
        ram[119] = "0b111011111010000011011";
        ram[120] = "0b111100011010010011100";
        ram[121] = "0b111100111010100011101";
        ram[122] = "0b111101011010110011110";
        ram[123] = "0b111101111011000011111";
        ram[124] = "0b111110011011010000000";
        ram[125] = "0b111110111011100000001";
        ram[126] = "0b111111011011110000010";
        ram[127] = "0b111111111100000000011";
        for (unsigned i = 128; i < 512 ; i = i + 1) {
            ram[i] = "0b000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mcalcAA_varinx18BPgM) {


static const unsigned DataWidth = 21;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mcalcAA_varinx18BPgM_ram* meminst;


SC_CTOR(mcalcAA_varinx18BPgM) {
meminst = new mcalcAA_varinx18BPgM_ram("mcalcAA_varinx18BPgM_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~mcalcAA_varinx18BPgM() {
    delete meminst;
}


};//endmodule
#endif
