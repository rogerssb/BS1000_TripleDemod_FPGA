// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __mcalcAA_varinx18BMgi_H__
#define __mcalcAA_varinx18BMgi_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mcalcAA_varinx18BMgi_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 21;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mcalcAA_varinx18BMgi_ram) {
        ram[0] = "0b000000010010100101111";
        ram[1] = "0b000000110010110110000";
        ram[2] = "0b000001010011000110001";
        ram[3] = "0b000001110011010110010";
        ram[4] = "0b000010010011100110011";
        ram[5] = "0b000010110011110110100";
        ram[6] = "0b000011010100000110101";
        ram[7] = "0b000011110100010110110";
        ram[8] = "0b000100010100100110111";
        ram[9] = "0b000100110100110111000";
        ram[10] = "0b000101010101000111001";
        ram[11] = "0b000101110101010111010";
        ram[12] = "0b000110010101100111011";
        ram[13] = "0b000110110101110111100";
        ram[14] = "0b000111010110000111101";
        ram[15] = "0b000111110110010111110";
        ram[16] = "0b001000010110100111111";
        ram[17] = "0b001000110110110100000";
        ram[18] = "0b001001010111000100001";
        ram[19] = "0b001001110111010100010";
        ram[20] = "0b001010010111100100011";
        ram[21] = "0b001010110111110100100";
        ram[22] = "0b001011010000000100101";
        ram[23] = "0b001011110000010100110";
        ram[24] = "0b001100010000100100111";
        ram[25] = "0b001100110000110101000";
        ram[26] = "0b001101010001000101001";
        ram[27] = "0b001101110001010101010";
        ram[28] = "0b001110010001100101011";
        ram[29] = "0b001110110001110101100";
        ram[30] = "0b001111010010000101101";
        ram[31] = "0b001111110010010101110";
        ram[32] = "0b010000011101011011101";
        ram[33] = "0b010000111101101011110";
        ram[34] = "0b010001011101111011111";
        ram[35] = "0b010001111110001000000";
        ram[36] = "0b010010011110011000001";
        ram[37] = "0b010010111110101000010";
        ram[38] = "0b010011011110111000011";
        ram[39] = "0b010011111111001000100";
        ram[40] = "0b010100011111011000101";
        ram[41] = "0b010100111111101000110";
        ram[42] = "0b010101011111111000111";
        ram[43] = "0b010101111000001001000";
        ram[44] = "0b010110011000011001001";
        ram[45] = "0b010110111000101001010";
        ram[46] = "0b010111011000111001011";
        ram[47] = "0b010111111001001001100";
        ram[48] = "0b011000011001011001101";
        ram[49] = "0b011000111001101001110";
        ram[50] = "0b011001011001111001111";
        ram[51] = "0b011001111010001010000";
        ram[52] = "0b011010011010011010001";
        ram[53] = "0b011010111010101010010";
        ram[54] = "0b011011011010111010011";
        ram[55] = "0b011011111011001010100";
        ram[56] = "0b011100011011011010101";
        ram[57] = "0b011100111011101010110";
        ram[58] = "0b011101011011111010111";
        ram[59] = "0b011101111100001011000";
        ram[60] = "0b011110011100011011001";
        ram[61] = "0b011110111100101011010";
        ram[62] = "0b011111011100111011011";
        ram[63] = "0b011111111101001011100";
        ram[64] = "0b100000011001001001011";
        ram[65] = "0b100000111001011001100";
        ram[66] = "0b100001011001101001101";
        ram[67] = "0b100001111001111001110";
        ram[68] = "0b100010011010001001111";
        ram[69] = "0b100010111010011010000";
        ram[70] = "0b100011011010101010001";
        ram[71] = "0b100011111010111010010";
        ram[72] = "0b100100011011001010011";
        ram[73] = "0b100100111011011010100";
        ram[74] = "0b100101011011101010101";
        ram[75] = "0b100101111011111010110";
        ram[76] = "0b100110011100001010111";
        ram[77] = "0b100110111100011011000";
        ram[78] = "0b100111011100101011001";
        ram[79] = "0b100111111100111011010";
        ram[80] = "0b101000011101001011011";
        ram[81] = "0b101000111101011011100";
        ram[82] = "0b101001011101101011101";
        ram[83] = "0b101001111101111011110";
        ram[84] = "0b101010011110001011111";
        ram[85] = "0b101010111110011000000";
        ram[86] = "0b101011011110101000001";
        ram[87] = "0b101011111110111000010";
        ram[88] = "0b101100011111001000011";
        ram[89] = "0b101100111111011000100";
        ram[90] = "0b101101011111101000101";
        ram[91] = "0b101101111111111000110";
        ram[92] = "0b101110011000001000111";
        ram[93] = "0b101110111000011001000";
        ram[94] = "0b101111011000101001001";
        ram[95] = "0b101111111000111001010";
        ram[96] = "0b110000011101010101001";
        ram[97] = "0b110000111101100101010";
        ram[98] = "0b110001011101110101011";
        ram[99] = "0b110001111110000101100";
        ram[100] = "0b110010011110010101101";
        ram[101] = "0b110010111110100101110";
        ram[102] = "0b110011011110110101111";
        ram[103] = "0b110011111111000110000";
        ram[104] = "0b110100011111010110001";
        ram[105] = "0b110100111111100110010";
        ram[106] = "0b110101011111110110011";
        ram[107] = "0b110101111000000110100";
        ram[108] = "0b110110011000010110101";
        ram[109] = "0b110110111000100110110";
        ram[110] = "0b110111011000110110111";
        ram[111] = "0b110111111001000111000";
        ram[112] = "0b111000011001010111001";
        ram[113] = "0b111000111001100111010";
        ram[114] = "0b111001011001110111011";
        ram[115] = "0b111001111010000111100";
        ram[116] = "0b111010011010010111101";
        ram[117] = "0b111010111010100111110";
        ram[118] = "0b111011011010110111111";
        ram[119] = "0b111011111011000100000";
        ram[120] = "0b111100011011010100001";
        ram[121] = "0b111100111011100100010";
        ram[122] = "0b111101011011110100011";
        ram[123] = "0b111101111100000100100";
        ram[124] = "0b111110011100010100101";
        ram[125] = "0b111110111100100100110";
        ram[126] = "0b111111011100110100111";
        ram[127] = "0b111111111101000101000";
        for (unsigned i = 128; i < 512 ; i = i + 1) {
            ram[i] = "0b000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mcalcAA_varinx18BMgi) {


static const unsigned DataWidth = 21;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mcalcAA_varinx18BMgi_ram* meminst;


SC_CTOR(mcalcAA_varinx18BMgi) {
meminst = new mcalcAA_varinx18BMgi_ram("mcalcAA_varinx18BMgi_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~mcalcAA_varinx18BMgi() {
    delete meminst;
}


};//endmodule
#endif
