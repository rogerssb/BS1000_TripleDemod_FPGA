// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __mcalcAA_varinx18BLf8_H__
#define __mcalcAA_varinx18BLf8_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mcalcAA_varinx18BLf8_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 20;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mcalcAA_varinx18BLf8_ram) {
        ram[0] = "0b00011100000001110001";
        ram[1] = "0b00100000000011110010";
        ram[2] = "0b00100100000101110011";
        ram[3] = "0b00101000000111110100";
        ram[4] = "0b00101100001001110101";
        ram[5] = "0b00110000001011110110";
        ram[6] = "0b00110100001101110111";
        ram[7] = "0b00111000001111111000";
        ram[8] = "0b00111100010001111001";
        ram[9] = "0b01000000010011111010";
        ram[10] = "0b01000100010101111011";
        ram[11] = "0b01001000010111111100";
        ram[12] = "0b01001100011001111101";
        ram[13] = "0b01010000011011111110";
        ram[14] = "0b01010100011101111111";
        ram[15] = "0b01011000011111100000";
        ram[16] = "0b01011100100001100001";
        ram[17] = "0b01100000100011100010";
        ram[18] = "0b01100100100101100011";
        ram[19] = "0b01101000100111100100";
        ram[20] = "0b01101100101001100101";
        ram[21] = "0b01110000101011100110";
        ram[22] = "0b01110100101101100111";
        ram[23] = "0b01111000101111101000";
        ram[24] = "0b01111100110001101001";
        ram[25] = "0b00000000110011101010";
        ram[26] = "0b00000100110101101011";
        ram[27] = "0b00001000110111101100";
        ram[28] = "0b00001100111001101101";
        ram[29] = "0b00010000111011101110";
        ram[30] = "0b00010100111101101111";
        ram[31] = "0b00011000111111110000";
        ram[32] = "0b10001101000001101001";
        ram[33] = "0b10010001000011101010";
        ram[34] = "0b10010101000101101011";
        ram[35] = "0b10011001000111101100";
        ram[36] = "0b10011101001001101101";
        ram[37] = "0b10100001001011101110";
        ram[38] = "0b10100101001101101111";
        ram[39] = "0b10101001001111110000";
        ram[40] = "0b10101101010001110001";
        ram[41] = "0b10110001010011110010";
        ram[42] = "0b10110101010101110011";
        ram[43] = "0b10111001010111110100";
        ram[44] = "0b10111101011001110101";
        ram[45] = "0b11000001011011110110";
        ram[46] = "0b11000101011101110111";
        ram[47] = "0b11001001011111111000";
        ram[48] = "0b11001101100001111001";
        ram[49] = "0b11010001100011111010";
        ram[50] = "0b11010101100101111011";
        ram[51] = "0b11011001100111111100";
        ram[52] = "0b11011101101001111101";
        ram[53] = "0b11100001101011111110";
        ram[54] = "0b11100101101101111111";
        ram[55] = "0b11101001101111100000";
        ram[56] = "0b11101101110001100001";
        ram[57] = "0b11110001110011100010";
        ram[58] = "0b11110101110101100011";
        ram[59] = "0b11111001110111100100";
        ram[60] = "0b11111101111001100101";
        ram[61] = "0b10000001111011100110";
        ram[62] = "0b10000101111101100111";
        ram[63] = "0b10001001111111101000";
        ram[64] = "0b00100010000001100011";
        ram[65] = "0b00100110000011100100";
        ram[66] = "0b00101010000101100101";
        ram[67] = "0b00101110000111100110";
        ram[68] = "0b00110010001001100111";
        ram[69] = "0b00110110001011101000";
        ram[70] = "0b00111010001101101001";
        ram[71] = "0b00111110001111101010";
        ram[72] = "0b01000010010001101011";
        ram[73] = "0b01000110010011101100";
        ram[74] = "0b01001010010101101101";
        ram[75] = "0b01001110010111101110";
        ram[76] = "0b01010010011001101111";
        ram[77] = "0b01010110011011110000";
        ram[78] = "0b01011010011101110001";
        ram[79] = "0b01011110011111110010";
        ram[80] = "0b01100010100001110011";
        ram[81] = "0b01100110100011110100";
        ram[82] = "0b01101010100101110101";
        ram[83] = "0b01101110100111110110";
        ram[84] = "0b01110010101001110111";
        ram[85] = "0b01110110101011111000";
        ram[86] = "0b01111010101101111001";
        ram[87] = "0b01111110101111111010";
        ram[88] = "0b00000010110001111011";
        ram[89] = "0b00000110110011111100";
        ram[90] = "0b00001010110101111101";
        ram[91] = "0b00001110110111111110";
        ram[92] = "0b00010010111001111111";
        ram[93] = "0b00010110111011100000";
        ram[94] = "0b00011010111101100001";
        ram[95] = "0b00011110111111100010";
        ram[96] = "0b01000111000001010010";
        ram[97] = "0b01001011000011010011";
        ram[98] = "0b01001111000101010100";
        ram[99] = "0b01010011000111010101";
        ram[100] = "0b01010111001001010110";
        ram[101] = "0b01011011001011010111";
        ram[102] = "0b01011111001101011000";
        ram[103] = "0b01100011001111011001";
        ram[104] = "0b01100111010001011010";
        ram[105] = "0b01101011010011011011";
        ram[106] = "0b01101111010101011100";
        ram[107] = "0b01110011010111011101";
        ram[108] = "0b01110111011001011110";
        ram[109] = "0b01111011011011011111";
        ram[110] = "0b01111111011101000000";
        ram[111] = "0b00000011011111000001";
        ram[112] = "0b00000111100001000010";
        ram[113] = "0b00001011100011000011";
        ram[114] = "0b00001111100101000100";
        ram[115] = "0b00010011100111000101";
        ram[116] = "0b00010111101001000110";
        ram[117] = "0b00011011101011000111";
        ram[118] = "0b00011111101101001000";
        ram[119] = "0b00100011101111001001";
        ram[120] = "0b00100111110001001010";
        ram[121] = "0b00101011110011001011";
        ram[122] = "0b00101111110101001100";
        ram[123] = "0b00110011110111001101";
        ram[124] = "0b00110111111001001110";
        ram[125] = "0b00111011111011001111";
        ram[126] = "0b00111111111101010000";
        ram[127] = "0b01000011111111010001";
        for (unsigned i = 128; i < 512 ; i = i + 1) {
            ram[i] = "0b00000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mcalcAA_varinx18BLf8) {


static const unsigned DataWidth = 20;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mcalcAA_varinx18BLf8_ram* meminst;


SC_CTOR(mcalcAA_varinx18BLf8) {
meminst = new mcalcAA_varinx18BLf8_ram("mcalcAA_varinx18BLf8_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~mcalcAA_varinx18BLf8() {
    delete meminst;
}


};//endmodule
#endif
