// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __mcalcAA_varinx18AFfa_H__
#define __mcalcAA_varinx18AFfa_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mcalcAA_varinx18AFfa_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 21;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mcalcAA_varinx18AFfa_ram) {
        ram[0] = "0b011101100000100000000";
        ram[1] = "0b011110000000110000001";
        ram[2] = "0b011110100001000000010";
        ram[3] = "0b011111000001010000011";
        ram[4] = "0b011111100001100000100";
        ram[5] = "0b010000000001110000101";
        ram[6] = "0b010000100010000000110";
        ram[7] = "0b010001000010010000111";
        ram[8] = "0b010001100010100001000";
        ram[9] = "0b010010000010110001001";
        ram[10] = "0b010010100011000001010";
        ram[11] = "0b010011000011010001011";
        ram[12] = "0b010011100011100001100";
        ram[13] = "0b010100000011110001101";
        ram[14] = "0b010100100100000001110";
        ram[15] = "0b010101000100010001111";
        ram[16] = "0b010101100100100010000";
        ram[17] = "0b010110000100110010001";
        ram[18] = "0b010110100101000010010";
        ram[19] = "0b010111000101010010011";
        ram[20] = "0b010111100101100010100";
        ram[21] = "0b011000000101110010101";
        ram[22] = "0b011000100110000010110";
        ram[23] = "0b011001000110010010111";
        ram[24] = "0b011001100110100011000";
        ram[25] = "0b011010000110110011001";
        ram[26] = "0b011010100111000011010";
        ram[27] = "0b011011000111010011011";
        ram[28] = "0b011011100111100011100";
        ram[29] = "0b011100000111110011101";
        ram[30] = "0b011100100000000011110";
        ram[31] = "0b011101000000010011111";
        ram[32] = "0b101011001011110100000";
        ram[33] = "0b101011101100000100001";
        ram[34] = "0b101100001100010100010";
        ram[35] = "0b101100101100100100011";
        ram[36] = "0b101101001100110100100";
        ram[37] = "0b101101101101000100101";
        ram[38] = "0b101110001101010100110";
        ram[39] = "0b101110101101100100111";
        ram[40] = "0b101111001101110101000";
        ram[41] = "0b101111101110000101001";
        ram[42] = "0b100000001110010101010";
        ram[43] = "0b100000101110100101011";
        ram[44] = "0b100001001110110101100";
        ram[45] = "0b100001101111000101101";
        ram[46] = "0b100010001111010101110";
        ram[47] = "0b100010101111100101111";
        ram[48] = "0b100011001111110110000";
        ram[49] = "0b100011101000000110001";
        ram[50] = "0b100100001000010110010";
        ram[51] = "0b100100101000100110011";
        ram[52] = "0b100101001000110110100";
        ram[53] = "0b100101101001000110101";
        ram[54] = "0b100110001001010110110";
        ram[55] = "0b100110101001100110111";
        ram[56] = "0b100111001001110111000";
        ram[57] = "0b100111101010000111001";
        ram[58] = "0b101000001010010111010";
        ram[59] = "0b101000101010100111011";
        ram[60] = "0b101001001010110111100";
        ram[61] = "0b101001101011000111101";
        ram[62] = "0b101010001011010111110";
        ram[63] = "0b101010101011100111111";
        ram[64] = "0b100010100111011000000";
        ram[65] = "0b100011000111101000001";
        ram[66] = "0b100011100111111000010";
        ram[67] = "0b100100000000001000011";
        ram[68] = "0b100100100000011000100";
        ram[69] = "0b100101000000101000101";
        ram[70] = "0b100101100000111000110";
        ram[71] = "0b100110000001001000111";
        ram[72] = "0b100110100001011001000";
        ram[73] = "0b100111000001101001001";
        ram[74] = "0b100111100001111001010";
        ram[75] = "0b101000000010001001011";
        ram[76] = "0b101000100010011001100";
        ram[77] = "0b101001000010101001101";
        ram[78] = "0b101001100010111001110";
        ram[79] = "0b101010000011001001111";
        ram[80] = "0b101010100011011010000";
        ram[81] = "0b101011000011101010001";
        ram[82] = "0b101011100011111010010";
        ram[83] = "0b101100000100001010011";
        ram[84] = "0b101100100100011010100";
        ram[85] = "0b101101000100101010101";
        ram[86] = "0b101101100100111010110";
        ram[87] = "0b101110000101001010111";
        ram[88] = "0b101110100101011011000";
        ram[89] = "0b101111000101101011001";
        ram[90] = "0b101111100101111011010";
        ram[91] = "0b100000000110001011011";
        ram[92] = "0b100000100110011011100";
        ram[93] = "0b100001000110101011101";
        ram[94] = "0b100001100110111011110";
        ram[95] = "0b100010000111001011111";
        ram[96] = "0b010010100011111100000";
        ram[97] = "0b010011000100001100001";
        ram[98] = "0b010011100100011100010";
        ram[99] = "0b010100000100101100011";
        ram[100] = "0b010100100100111100100";
        ram[101] = "0b010101000101001100101";
        ram[102] = "0b010101100101011100110";
        ram[103] = "0b010110000101101100111";
        ram[104] = "0b010110100101111101000";
        ram[105] = "0b010111000110001101001";
        ram[106] = "0b010111100110011101010";
        ram[107] = "0b011000000110101101011";
        ram[108] = "0b011000100110111101100";
        ram[109] = "0b011001000111001101101";
        ram[110] = "0b011001100111011101110";
        ram[111] = "0b011010000111101101111";
        ram[112] = "0b011010100111111110000";
        ram[113] = "0b011011000000001110001";
        ram[114] = "0b011011100000011110010";
        ram[115] = "0b011100000000101110011";
        ram[116] = "0b011100100000111110100";
        ram[117] = "0b011101000001001110101";
        ram[118] = "0b011101100001011110110";
        ram[119] = "0b011110000001101110111";
        ram[120] = "0b011110100001111111000";
        ram[121] = "0b011111000010001111001";
        ram[122] = "0b011111100010011111010";
        ram[123] = "0b010000000010101111011";
        ram[124] = "0b010000100010111111100";
        ram[125] = "0b010001000011001111101";
        ram[126] = "0b010001100011011111110";
        ram[127] = "0b010010000011101111111";
        for (unsigned i = 128; i < 512 ; i = i + 1) {
            ram[i] = "0b000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mcalcAA_varinx18AFfa) {


static const unsigned DataWidth = 21;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mcalcAA_varinx18AFfa_ram* meminst;


SC_CTOR(mcalcAA_varinx18AFfa) {
meminst = new mcalcAA_varinx18AFfa_ram("mcalcAA_varinx18AFfa_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~mcalcAA_varinx18AFfa() {
    delete meminst;
}


};//endmodule
#endif
