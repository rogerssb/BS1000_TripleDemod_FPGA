// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __mcalcAA_varinx18AGfk_H__
#define __mcalcAA_varinx18AGfk_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mcalcAA_varinx18AGfk_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 20;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mcalcAA_varinx18AGfk_ram) {
        ram[0] = "0b00001100000001000111";
        ram[1] = "0b00010000000011001000";
        ram[2] = "0b00010100000101001001";
        ram[3] = "0b00011000000111001010";
        ram[4] = "0b00011100001001001011";
        ram[5] = "0b00100000001011001100";
        ram[6] = "0b00100100001101001101";
        ram[7] = "0b00101000001111001110";
        ram[8] = "0b00101100010001001111";
        ram[9] = "0b00110000010011010000";
        ram[10] = "0b00110100010101010001";
        ram[11] = "0b00111000010111010010";
        ram[12] = "0b00111100011001010011";
        ram[13] = "0b01000000011011010100";
        ram[14] = "0b01000100011101010101";
        ram[15] = "0b01001000011111010110";
        ram[16] = "0b01001100100001010111";
        ram[17] = "0b01010000100011011000";
        ram[18] = "0b01010100100101011001";
        ram[19] = "0b01011000100111011010";
        ram[20] = "0b01011100101001011011";
        ram[21] = "0b01100000101011011100";
        ram[22] = "0b01100100101101011101";
        ram[23] = "0b01101000101111011110";
        ram[24] = "0b01101100110001011111";
        ram[25] = "0b01110000110011000000";
        ram[26] = "0b01110100110101000001";
        ram[27] = "0b01111000110111000010";
        ram[28] = "0b01111100111001000011";
        ram[29] = "0b00000000111011000100";
        ram[30] = "0b00000100111101000101";
        ram[31] = "0b00001000111111000110";
        ram[32] = "0b11101001000001111111";
        ram[33] = "0b11101101000011100000";
        ram[34] = "0b11110001000101100001";
        ram[35] = "0b11110101000111100010";
        ram[36] = "0b11111001001001100011";
        ram[37] = "0b11111101001011100100";
        ram[38] = "0b10000001001101100101";
        ram[39] = "0b10000101001111100110";
        ram[40] = "0b10001001010001100111";
        ram[41] = "0b10001101010011101000";
        ram[42] = "0b10010001010101101001";
        ram[43] = "0b10010101010111101010";
        ram[44] = "0b10011001011001101011";
        ram[45] = "0b10011101011011101100";
        ram[46] = "0b10100001011101101101";
        ram[47] = "0b10100101011111101110";
        ram[48] = "0b10101001100001101111";
        ram[49] = "0b10101101100011110000";
        ram[50] = "0b10110001100101110001";
        ram[51] = "0b10110101100111110010";
        ram[52] = "0b10111001101001110011";
        ram[53] = "0b10111101101011110100";
        ram[54] = "0b11000001101101110101";
        ram[55] = "0b11000101101111110110";
        ram[56] = "0b11001001110001110111";
        ram[57] = "0b11001101110011111000";
        ram[58] = "0b11010001110101111001";
        ram[59] = "0b11010101110111111010";
        ram[60] = "0b11011001111001111011";
        ram[61] = "0b11011101111011111100";
        ram[62] = "0b11100001111101111101";
        ram[63] = "0b11100101111111111110";
        ram[64] = "0b01000010000001100011";
        ram[65] = "0b01000110000011100100";
        ram[66] = "0b01001010000101100101";
        ram[67] = "0b01001110000111100110";
        ram[68] = "0b01010010001001100111";
        ram[69] = "0b01010110001011101000";
        ram[70] = "0b01011010001101101001";
        ram[71] = "0b01011110001111101010";
        ram[72] = "0b01100010010001101011";
        ram[73] = "0b01100110010011101100";
        ram[74] = "0b01101010010101101101";
        ram[75] = "0b01101110010111101110";
        ram[76] = "0b01110010011001101111";
        ram[77] = "0b01110110011011110000";
        ram[78] = "0b01111010011101110001";
        ram[79] = "0b01111110011111110010";
        ram[80] = "0b00000010100001110011";
        ram[81] = "0b00000110100011110100";
        ram[82] = "0b00001010100101110101";
        ram[83] = "0b00001110100111110110";
        ram[84] = "0b00010010101001110111";
        ram[85] = "0b00010110101011111000";
        ram[86] = "0b00011010101101111001";
        ram[87] = "0b00011110101111111010";
        ram[88] = "0b00100010110001111011";
        ram[89] = "0b00100110110011111100";
        ram[90] = "0b00101010110101111101";
        ram[91] = "0b00101110110111111110";
        ram[92] = "0b00110010111001111111";
        ram[93] = "0b00110110111011100000";
        ram[94] = "0b00111010111101100001";
        ram[95] = "0b00111110111111100010";
        ram[96] = "0b00101111000001110011";
        ram[97] = "0b00110011000011110100";
        ram[98] = "0b00110111000101110101";
        ram[99] = "0b00111011000111110110";
        ram[100] = "0b00111111001001110111";
        ram[101] = "0b01000011001011111000";
        ram[102] = "0b01000111001101111001";
        ram[103] = "0b01001011001111111010";
        ram[104] = "0b01001111010001111011";
        ram[105] = "0b01010011010011111100";
        ram[106] = "0b01010111010101111101";
        ram[107] = "0b01011011010111111110";
        ram[108] = "0b01011111011001111111";
        ram[109] = "0b01100011011011100000";
        ram[110] = "0b01100111011101100001";
        ram[111] = "0b01101011011111100010";
        ram[112] = "0b01101111100001100011";
        ram[113] = "0b01110011100011100100";
        ram[114] = "0b01110111100101100101";
        ram[115] = "0b01111011100111100110";
        ram[116] = "0b01111111101001100111";
        ram[117] = "0b00000011101011101000";
        ram[118] = "0b00000111101101101001";
        ram[119] = "0b00001011101111101010";
        ram[120] = "0b00001111110001101011";
        ram[121] = "0b00010011110011101100";
        ram[122] = "0b00010111110101101101";
        ram[123] = "0b00011011110111101110";
        ram[124] = "0b00011111111001101111";
        ram[125] = "0b00100011111011110000";
        ram[126] = "0b00100111111101110001";
        ram[127] = "0b00101011111111110010";
        for (unsigned i = 128; i < 512 ; i = i + 1) {
            ram[i] = "0b00000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mcalcAA_varinx18AGfk) {


static const unsigned DataWidth = 20;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mcalcAA_varinx18AGfk_ram* meminst;


SC_CTOR(mcalcAA_varinx18AGfk) {
meminst = new mcalcAA_varinx18AGfk_ram("mcalcAA_varinx18AGfk_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~mcalcAA_varinx18AGfk() {
    delete meminst;
}


};//endmodule
#endif
