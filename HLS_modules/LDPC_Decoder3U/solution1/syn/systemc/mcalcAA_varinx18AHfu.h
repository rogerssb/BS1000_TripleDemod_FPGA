// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __mcalcAA_varinx18AHfu_H__
#define __mcalcAA_varinx18AHfu_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mcalcAA_varinx18AHfu_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 21;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mcalcAA_varinx18AHfu_ram) {
        ram[0] = "0b000000010000110110110";
        ram[1] = "0b000000110001000110111";
        ram[2] = "0b000001010001010111000";
        ram[3] = "0b000001110001100111001";
        ram[4] = "0b000010010001110111010";
        ram[5] = "0b000010110010000111011";
        ram[6] = "0b000011010010010111100";
        ram[7] = "0b000011110010100111101";
        ram[8] = "0b000100010010110111110";
        ram[9] = "0b000100110011000111111";
        ram[10] = "0b000101010011010100000";
        ram[11] = "0b000101110011100100001";
        ram[12] = "0b000110010011110100010";
        ram[13] = "0b000110110100000100011";
        ram[14] = "0b000111010100010100100";
        ram[15] = "0b000111110100100100101";
        ram[16] = "0b001000010100110100110";
        ram[17] = "0b001000110101000100111";
        ram[18] = "0b001001010101010101000";
        ram[19] = "0b001001110101100101001";
        ram[20] = "0b001010010101110101010";
        ram[21] = "0b001010110110000101011";
        ram[22] = "0b001011010110010101100";
        ram[23] = "0b001011110110100101101";
        ram[24] = "0b001100010110110101110";
        ram[25] = "0b001100110111000101111";
        ram[26] = "0b001101010111010110000";
        ram[27] = "0b001101110111100110001";
        ram[28] = "0b001110010111110110010";
        ram[29] = "0b001110110000000110011";
        ram[30] = "0b001111010000010110100";
        ram[31] = "0b001111110000100110101";
        ram[32] = "0b010000011001001011000";
        ram[33] = "0b010000111001011011001";
        ram[34] = "0b010001011001101011010";
        ram[35] = "0b010001111001111011011";
        ram[36] = "0b010010011010001011100";
        ram[37] = "0b010010111010011011101";
        ram[38] = "0b010011011010101011110";
        ram[39] = "0b010011111010111011111";
        ram[40] = "0b010100011011001000000";
        ram[41] = "0b010100111011011000001";
        ram[42] = "0b010101011011101000010";
        ram[43] = "0b010101111011111000011";
        ram[44] = "0b010110011100001000100";
        ram[45] = "0b010110111100011000101";
        ram[46] = "0b010111011100101000110";
        ram[47] = "0b010111111100111000111";
        ram[48] = "0b011000011101001001000";
        ram[49] = "0b011000111101011001001";
        ram[50] = "0b011001011101101001010";
        ram[51] = "0b011001111101111001011";
        ram[52] = "0b011010011110001001100";
        ram[53] = "0b011010111110011001101";
        ram[54] = "0b011011011110101001110";
        ram[55] = "0b011011111110111001111";
        ram[56] = "0b011100011111001010000";
        ram[57] = "0b011100111111011010001";
        ram[58] = "0b011101011111101010010";
        ram[59] = "0b011101111111111010011";
        ram[60] = "0b011110011000001010100";
        ram[61] = "0b011110111000011010101";
        ram[62] = "0b011111011000101010110";
        ram[63] = "0b011111111000111010111";
        ram[64] = "0b100000011011111000111";
        ram[65] = "0b100000111100001001000";
        ram[66] = "0b100001011100011001001";
        ram[67] = "0b100001111100101001010";
        ram[68] = "0b100010011100111001011";
        ram[69] = "0b100010111101001001100";
        ram[70] = "0b100011011101011001101";
        ram[71] = "0b100011111101101001110";
        ram[72] = "0b100100011101111001111";
        ram[73] = "0b100100111110001010000";
        ram[74] = "0b100101011110011010001";
        ram[75] = "0b100101111110101010010";
        ram[76] = "0b100110011110111010011";
        ram[77] = "0b100110111111001010100";
        ram[78] = "0b100111011111011010101";
        ram[79] = "0b100111111111101010110";
        ram[80] = "0b101000011111111010111";
        ram[81] = "0b101000111000001011000";
        ram[82] = "0b101001011000011011001";
        ram[83] = "0b101001111000101011010";
        ram[84] = "0b101010011000111011011";
        ram[85] = "0b101010111001001011100";
        ram[86] = "0b101011011001011011101";
        ram[87] = "0b101011111001101011110";
        ram[88] = "0b101100011001111011111";
        ram[89] = "0b101100111010001000000";
        ram[90] = "0b101101011010011000001";
        ram[91] = "0b101101111010101000010";
        ram[92] = "0b101110011010111000011";
        ram[93] = "0b101110111011001000100";
        ram[94] = "0b101111011011011000101";
        ram[95] = "0b101111111011101000110";
        ram[96] = "0b110000011001000110001";
        ram[97] = "0b110000111001010110010";
        ram[98] = "0b110001011001100110011";
        ram[99] = "0b110001111001110110100";
        ram[100] = "0b110010011010000110101";
        ram[101] = "0b110010111010010110110";
        ram[102] = "0b110011011010100110111";
        ram[103] = "0b110011111010110111000";
        ram[104] = "0b110100011011000111001";
        ram[105] = "0b110100111011010111010";
        ram[106] = "0b110101011011100111011";
        ram[107] = "0b110101111011110111100";
        ram[108] = "0b110110011100000111101";
        ram[109] = "0b110110111100010111110";
        ram[110] = "0b110111011100100111111";
        ram[111] = "0b110111111100110100000";
        ram[112] = "0b111000011101000100001";
        ram[113] = "0b111000111101010100010";
        ram[114] = "0b111001011101100100011";
        ram[115] = "0b111001111101110100100";
        ram[116] = "0b111010011110000100101";
        ram[117] = "0b111010111110010100110";
        ram[118] = "0b111011011110100100111";
        ram[119] = "0b111011111110110101000";
        ram[120] = "0b111100011111000101001";
        ram[121] = "0b111100111111010101010";
        ram[122] = "0b111101011111100101011";
        ram[123] = "0b111101111111110101100";
        ram[124] = "0b111110011000000101101";
        ram[125] = "0b111110111000010101110";
        ram[126] = "0b111111011000100101111";
        ram[127] = "0b111111111000110110000";
        for (unsigned i = 128; i < 512 ; i = i + 1) {
            ram[i] = "0b000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mcalcAA_varinx18AHfu) {


static const unsigned DataWidth = 21;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mcalcAA_varinx18AHfu_ram* meminst;


SC_CTOR(mcalcAA_varinx18AHfu) {
meminst = new mcalcAA_varinx18AHfu_ram("mcalcAA_varinx18AHfu_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~mcalcAA_varinx18AHfu() {
    delete meminst;
}


};//endmodule
#endif
