// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __mcalcAA_varinx18BOgC_H__
#define __mcalcAA_varinx18BOgC_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mcalcAA_varinx18BOgC_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 21;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mcalcAA_varinx18BOgC_ram) {
        ram[0] = "0b110101010000000000000";
        ram[1] = "0b110101110000010000001";
        ram[2] = "0b110110010000100000010";
        ram[3] = "0b110110110000110000011";
        ram[4] = "0b110111010001000000100";
        ram[5] = "0b110111110001010000101";
        ram[6] = "0b111000010001100000110";
        ram[7] = "0b111000110001110000111";
        ram[8] = "0b111001010010000001000";
        ram[9] = "0b111001110010010001001";
        ram[10] = "0b111010010010100001010";
        ram[11] = "0b111010110010110001011";
        ram[12] = "0b111011010011000001100";
        ram[13] = "0b111011110011010001101";
        ram[14] = "0b111100010011100001110";
        ram[15] = "0b111100110011110001111";
        ram[16] = "0b111101010100000010000";
        ram[17] = "0b111101110100010010001";
        ram[18] = "0b111110010100100010010";
        ram[19] = "0b111110110100110010011";
        ram[20] = "0b111111010101000010100";
        ram[21] = "0b111111110101010010101";
        ram[22] = "0b110000010101100010110";
        ram[23] = "0b110000110101110010111";
        ram[24] = "0b110001010110000011000";
        ram[25] = "0b110001110110010011001";
        ram[26] = "0b110010010110100011010";
        ram[27] = "0b110010110110110011011";
        ram[28] = "0b110011010111000011100";
        ram[29] = "0b110011110111010011101";
        ram[30] = "0b110100010111100011110";
        ram[31] = "0b110100110111110011111";
        ram[32] = "0b110011100000010100000";
        ram[33] = "0b110100000000100100001";
        ram[34] = "0b110100100000110100010";
        ram[35] = "0b110101000001000100011";
        ram[36] = "0b110101100001010100100";
        ram[37] = "0b110110000001100100101";
        ram[38] = "0b110110100001110100110";
        ram[39] = "0b110111000010000100111";
        ram[40] = "0b110111100010010101000";
        ram[41] = "0b111000000010100101001";
        ram[42] = "0b111000100010110101010";
        ram[43] = "0b111001000011000101011";
        ram[44] = "0b111001100011010101100";
        ram[45] = "0b111010000011100101101";
        ram[46] = "0b111010100011110101110";
        ram[47] = "0b111011000100000101111";
        ram[48] = "0b111011100100010110000";
        ram[49] = "0b111100000100100110001";
        ram[50] = "0b111100100100110110010";
        ram[51] = "0b111101000101000110011";
        ram[52] = "0b111101100101010110100";
        ram[53] = "0b111110000101100110101";
        ram[54] = "0b111110100101110110110";
        ram[55] = "0b111111000110000110111";
        ram[56] = "0b111111100110010111000";
        ram[57] = "0b110000000110100111001";
        ram[58] = "0b110000100110110111010";
        ram[59] = "0b110001000111000111011";
        ram[60] = "0b110001100111010111100";
        ram[61] = "0b110010000111100111101";
        ram[62] = "0b110010100111110111110";
        ram[63] = "0b110011000000000111111";
        ram[64] = "0b011000000010101000000";
        ram[65] = "0b011000100010111000001";
        ram[66] = "0b011001000011001000010";
        ram[67] = "0b011001100011011000011";
        ram[68] = "0b011010000011101000100";
        ram[69] = "0b011010100011111000101";
        ram[70] = "0b011011000100001000110";
        ram[71] = "0b011011100100011000111";
        ram[72] = "0b011100000100101001000";
        ram[73] = "0b011100100100111001001";
        ram[74] = "0b011101000101001001010";
        ram[75] = "0b011101100101011001011";
        ram[76] = "0b011110000101101001100";
        ram[77] = "0b011110100101111001101";
        ram[78] = "0b011111000110001001110";
        ram[79] = "0b011111100110011001111";
        ram[80] = "0b010000000110101010000";
        ram[81] = "0b010000100110111010001";
        ram[82] = "0b010001000111001010010";
        ram[83] = "0b010001100111011010011";
        ram[84] = "0b010010000111101010100";
        ram[85] = "0b010010100111111010101";
        ram[86] = "0b010011000000001010110";
        ram[87] = "0b010011100000011010111";
        ram[88] = "0b010100000000101011000";
        ram[89] = "0b010100100000111011001";
        ram[90] = "0b010101000001001011010";
        ram[91] = "0b010101100001011011011";
        ram[92] = "0b010110000001101011100";
        ram[93] = "0b010110100001111011101";
        ram[94] = "0b010111000010001011110";
        ram[95] = "0b010111100010011011111";
        ram[96] = "0b101010001011111100000";
        ram[97] = "0b101010101100001100001";
        ram[98] = "0b101011001100011100010";
        ram[99] = "0b101011101100101100011";
        ram[100] = "0b101100001100111100100";
        ram[101] = "0b101100101101001100101";
        ram[102] = "0b101101001101011100110";
        ram[103] = "0b101101101101101100111";
        ram[104] = "0b101110001101111101000";
        ram[105] = "0b101110101110001101001";
        ram[106] = "0b101111001110011101010";
        ram[107] = "0b101111101110101101011";
        ram[108] = "0b100000001110111101100";
        ram[109] = "0b100000101111001101101";
        ram[110] = "0b100001001111011101110";
        ram[111] = "0b100001101111101101111";
        ram[112] = "0b100010001111111110000";
        ram[113] = "0b100010101000001110001";
        ram[114] = "0b100011001000011110010";
        ram[115] = "0b100011101000101110011";
        ram[116] = "0b100100001000111110100";
        ram[117] = "0b100100101001001110101";
        ram[118] = "0b100101001001011110110";
        ram[119] = "0b100101101001101110111";
        ram[120] = "0b100110001001111111000";
        ram[121] = "0b100110101010001111001";
        ram[122] = "0b100111001010011111010";
        ram[123] = "0b100111101010101111011";
        ram[124] = "0b101000001010111111100";
        ram[125] = "0b101000101011001111101";
        ram[126] = "0b101001001011011111110";
        ram[127] = "0b101001101011101111111";
        for (unsigned i = 128; i < 512 ; i = i + 1) {
            ram[i] = "0b000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mcalcAA_varinx18BOgC) {


static const unsigned DataWidth = 21;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mcalcAA_varinx18BOgC_ram* meminst;


SC_CTOR(mcalcAA_varinx18BOgC) {
meminst = new mcalcAA_varinx18BOgC_ram("mcalcAA_varinx18BOgC_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~mcalcAA_varinx18BOgC() {
    delete meminst;
}


};//endmodule
#endif
