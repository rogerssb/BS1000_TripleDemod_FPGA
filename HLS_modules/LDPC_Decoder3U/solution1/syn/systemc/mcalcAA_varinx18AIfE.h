// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __mcalcAA_varinx18AIfE_H__
#define __mcalcAA_varinx18AIfE_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mcalcAA_varinx18AIfE_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 21;
  static const unsigned AddressRange = 512;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mcalcAA_varinx18AIfE_ram) {
        ram[0] = "0b000000000000000000000";
        ram[1] = "0b000000100000010000001";
        ram[2] = "0b000001000000100000010";
        ram[3] = "0b000001100000110000011";
        ram[4] = "0b000010000001000000100";
        ram[5] = "0b000010100001010000101";
        ram[6] = "0b000011000001100000110";
        ram[7] = "0b000011100001110000111";
        ram[8] = "0b000100000010000001000";
        ram[9] = "0b000100100010010001001";
        ram[10] = "0b000101000010100001010";
        ram[11] = "0b000101100010110001011";
        ram[12] = "0b000110000011000001100";
        ram[13] = "0b000110100011010001101";
        ram[14] = "0b000111000011100001110";
        ram[15] = "0b000111100011110001111";
        ram[16] = "0b001000000100000010000";
        ram[17] = "0b001000100100010010001";
        ram[18] = "0b001001000100100010010";
        ram[19] = "0b001001100100110010011";
        ram[20] = "0b001010000101000010100";
        ram[21] = "0b001010100101010010101";
        ram[22] = "0b001011000101100010110";
        ram[23] = "0b001011100101110010111";
        ram[24] = "0b001100000110000011000";
        ram[25] = "0b001100100110010011001";
        ram[26] = "0b001101000110100011010";
        ram[27] = "0b001101100110110011011";
        ram[28] = "0b001110000111000011100";
        ram[29] = "0b001110100111010011101";
        ram[30] = "0b001111000111100011110";
        ram[31] = "0b001111100111110011111";
        ram[32] = "0b010000001000000100000";
        ram[33] = "0b010000101000010100001";
        ram[34] = "0b010001001000100100010";
        ram[35] = "0b010001101000110100011";
        ram[36] = "0b010010001001000100100";
        ram[37] = "0b010010101001010100101";
        ram[38] = "0b010011001001100100110";
        ram[39] = "0b010011101001110100111";
        ram[40] = "0b010100001010000101000";
        ram[41] = "0b010100101010010101001";
        ram[42] = "0b010101001010100101010";
        ram[43] = "0b010101101010110101011";
        ram[44] = "0b010110001011000101100";
        ram[45] = "0b010110101011010101101";
        ram[46] = "0b010111001011100101110";
        ram[47] = "0b010111101011110101111";
        ram[48] = "0b011000001100000110000";
        ram[49] = "0b011000101100010110001";
        ram[50] = "0b011001001100100110010";
        ram[51] = "0b011001101100110110011";
        ram[52] = "0b011010001101000110100";
        ram[53] = "0b011010101101010110101";
        ram[54] = "0b011011001101100110110";
        ram[55] = "0b011011101101110110111";
        ram[56] = "0b011100001110000111000";
        ram[57] = "0b011100101110010111001";
        ram[58] = "0b011101001110100111010";
        ram[59] = "0b011101101110110111011";
        ram[60] = "0b011110001111000111100";
        ram[61] = "0b011110101111010111101";
        ram[62] = "0b011111001111100111110";
        ram[63] = "0b011111101111110111111";
        ram[64] = "0b100000010000001000000";
        ram[65] = "0b100000110000011000001";
        ram[66] = "0b100001010000101000010";
        ram[67] = "0b100001110000111000011";
        ram[68] = "0b100010010001001000100";
        ram[69] = "0b100010110001011000101";
        ram[70] = "0b100011010001101000110";
        ram[71] = "0b100011110001111000111";
        ram[72] = "0b100100010010001001000";
        ram[73] = "0b100100110010011001001";
        ram[74] = "0b100101010010101001010";
        ram[75] = "0b100101110010111001011";
        ram[76] = "0b100110010011001001100";
        ram[77] = "0b100110110011011001101";
        ram[78] = "0b100111010011101001110";
        ram[79] = "0b100111110011111001111";
        ram[80] = "0b101000010100001010000";
        ram[81] = "0b101000110100011010001";
        ram[82] = "0b101001010100101010010";
        ram[83] = "0b101001110100111010011";
        ram[84] = "0b101010010101001010100";
        ram[85] = "0b101010110101011010101";
        ram[86] = "0b101011010101101010110";
        ram[87] = "0b101011110101111010111";
        ram[88] = "0b101100010110001011000";
        ram[89] = "0b101100110110011011001";
        ram[90] = "0b101101010110101011010";
        ram[91] = "0b101101110110111011011";
        ram[92] = "0b101110010111001011100";
        ram[93] = "0b101110110111011011101";
        ram[94] = "0b101111010111101011110";
        ram[95] = "0b101111110111111011111";
        ram[96] = "0b110000011000001100000";
        ram[97] = "0b110000111000011100001";
        ram[98] = "0b110001011000101100010";
        ram[99] = "0b110001111000111100011";
        ram[100] = "0b110010011001001100100";
        ram[101] = "0b110010111001011100101";
        ram[102] = "0b110011011001101100110";
        ram[103] = "0b110011111001111100111";
        ram[104] = "0b110100011010001101000";
        ram[105] = "0b110100111010011101001";
        ram[106] = "0b110101011010101101010";
        ram[107] = "0b110101111010111101011";
        ram[108] = "0b110110011011001101100";
        ram[109] = "0b110110111011011101101";
        ram[110] = "0b110111011011101101110";
        ram[111] = "0b110111111011111101111";
        ram[112] = "0b111000011100001110000";
        ram[113] = "0b111000111100011110001";
        ram[114] = "0b111001011100101110010";
        ram[115] = "0b111001111100111110011";
        ram[116] = "0b111010011101001110100";
        ram[117] = "0b111010111101011110101";
        ram[118] = "0b111011011101101110110";
        ram[119] = "0b111011111101111110111";
        ram[120] = "0b111100011110001111000";
        ram[121] = "0b111100111110011111001";
        ram[122] = "0b111101011110101111010";
        ram[123] = "0b111101111110111111011";
        ram[124] = "0b111110011111001111100";
        ram[125] = "0b111110111111011111101";
        ram[126] = "0b111111011111101111110";
        ram[127] = "0b111111111111111111111";
        for (unsigned i = 128; i < 512 ; i = i + 1) {
            ram[i] = "0b000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mcalcAA_varinx18AIfE) {


static const unsigned DataWidth = 21;
static const unsigned AddressRange = 512;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mcalcAA_varinx18AIfE_ram* meminst;


SC_CTOR(mcalcAA_varinx18AIfE) {
meminst = new mcalcAA_varinx18AIfE_ram("mcalcAA_varinx18AIfE_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~mcalcAA_varinx18AIfE() {
    delete meminst;
}


};//endmodule
#endif
