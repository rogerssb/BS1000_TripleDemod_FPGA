// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      HLSLdpcLogDecScaledMin
`define AUTOTB_DUT_INST AESL_inst_HLSLdpcLogDecScaledMin
`define AUTOTB_TOP      apatb_HLSLdpcLogDecScaledMin_top
`define AUTOTB_LAT_RESULT_FILE "HLSLdpcLogDecScaledMin.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "HLSLdpcLogDecScaledMin.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_HLSLdpcLogDecScaledMin_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00

`define AESL_MEM_pR AESL_automem_pR
`define AESL_MEM_INST_pR mem_inst_pR
`define AESL_MEM_pR1 AESL_automem_pR1
`define AESL_MEM_INST_pR1 mem_inst_pR1
`define AESL_MEM_pR2 AESL_automem_pR2
`define AESL_MEM_INST_pR2 mem_inst_pR2
`define AESL_MEM_pR3 AESL_automem_pR3
`define AESL_MEM_INST_pR3 mem_inst_pR3
`define AESL_MEM_pR4 AESL_automem_pR4
`define AESL_MEM_INST_pR4 mem_inst_pR4
`define AESL_MEM_pR5 AESL_automem_pR5
`define AESL_MEM_INST_pR5 mem_inst_pR5
`define AESL_MEM_pR6 AESL_automem_pR6
`define AESL_MEM_INST_pR6 mem_inst_pR6
`define AESL_MEM_pR7 AESL_automem_pR7
`define AESL_MEM_INST_pR7 mem_inst_pR7
`define AESL_MEM_pR8 AESL_automem_pR8
`define AESL_MEM_INST_pR8 mem_inst_pR8
`define AESL_MEM_pR9 AESL_automem_pR9
`define AESL_MEM_INST_pR9 mem_inst_pR9
`define AESL_MEM_pR10 AESL_automem_pR10
`define AESL_MEM_INST_pR10 mem_inst_pR10
`define AESL_MEM_pbhat0 AESL_automem_pbhat0
`define AESL_MEM_INST_pbhat0 mem_inst_pbhat0
`define AESL_MEM_pbhat1 AESL_automem_pbhat1
`define AESL_MEM_INST_pbhat1 mem_inst_pbhat1
`define AESL_MEM_pbhat2 AESL_automem_pbhat2
`define AESL_MEM_INST_pbhat2 mem_inst_pbhat2
`define AESL_MEM_pbhat3 AESL_automem_pbhat3
`define AESL_MEM_INST_pbhat3 mem_inst_pbhat3
`define AESL_MEM_pbhat4 AESL_automem_pbhat4
`define AESL_MEM_INST_pbhat4 mem_inst_pbhat4
`define AESL_MEM_pbhat5 AESL_automem_pbhat5
`define AESL_MEM_INST_pbhat5 mem_inst_pbhat5
`define AESL_MEM_pbhat6 AESL_automem_pbhat6
`define AESL_MEM_INST_pbhat6 mem_inst_pbhat6
`define AESL_MEM_pbhat7 AESL_automem_pbhat7
`define AESL_MEM_INST_pbhat7 mem_inst_pbhat7
`define AESL_DEPTH_cnt 1
`define AESL_DEPTH_nR_M 1
`define AESL_DEPTH_etaIndexM_M 1
`define AESL_DEPTH_pCodeM 1
`define AESL_DEPTH_pMaxIterations 1
`define AESL_DEPTH_itt_num 1
`define AESL_DEPTH_numbits 1
`define AESL_DEPTH_mux 1
`define AUTOTB_TVIN_pR  "./c.HLSLdpcLogDecScaledMin.autotvin_pR.dat"
`define AUTOTB_TVIN_pR1  "./c.HLSLdpcLogDecScaledMin.autotvin_pR1.dat"
`define AUTOTB_TVIN_pR2  "./c.HLSLdpcLogDecScaledMin.autotvin_pR2.dat"
`define AUTOTB_TVIN_pR3  "./c.HLSLdpcLogDecScaledMin.autotvin_pR3.dat"
`define AUTOTB_TVIN_pR4  "./c.HLSLdpcLogDecScaledMin.autotvin_pR4.dat"
`define AUTOTB_TVIN_pR5  "./c.HLSLdpcLogDecScaledMin.autotvin_pR5.dat"
`define AUTOTB_TVIN_pR6  "./c.HLSLdpcLogDecScaledMin.autotvin_pR6.dat"
`define AUTOTB_TVIN_pR7  "./c.HLSLdpcLogDecScaledMin.autotvin_pR7.dat"
`define AUTOTB_TVIN_pR8  "./c.HLSLdpcLogDecScaledMin.autotvin_pR8.dat"
`define AUTOTB_TVIN_pR9  "./c.HLSLdpcLogDecScaledMin.autotvin_pR9.dat"
`define AUTOTB_TVIN_pbhat0  "./c.HLSLdpcLogDecScaledMin.autotvin_pbhat0.dat"
`define AUTOTB_TVIN_pbhat1  "./c.HLSLdpcLogDecScaledMin.autotvin_pbhat1.dat"
`define AUTOTB_TVIN_pbhat2  "./c.HLSLdpcLogDecScaledMin.autotvin_pbhat2.dat"
`define AUTOTB_TVIN_pbhat3  "./c.HLSLdpcLogDecScaledMin.autotvin_pbhat3.dat"
`define AUTOTB_TVIN_pbhat4  "./c.HLSLdpcLogDecScaledMin.autotvin_pbhat4.dat"
`define AUTOTB_TVIN_pbhat5  "./c.HLSLdpcLogDecScaledMin.autotvin_pbhat5.dat"
`define AUTOTB_TVIN_pbhat6  "./c.HLSLdpcLogDecScaledMin.autotvin_pbhat6.dat"
`define AUTOTB_TVIN_pbhat7  "./c.HLSLdpcLogDecScaledMin.autotvin_pbhat7.dat"
`define AUTOTB_TVIN_pMaxIterations  "./c.HLSLdpcLogDecScaledMin.autotvin_pMaxIterations.dat"
`define AUTOTB_TVIN_numbits  "./c.HLSLdpcLogDecScaledMin.autotvin_numbits.dat"
`define AUTOTB_TVIN_mux  "./c.HLSLdpcLogDecScaledMin.autotvin_mux.dat"
`define AUTOTB_TVIN_pR_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pR.dat"
`define AUTOTB_TVIN_pR1_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pR1.dat"
`define AUTOTB_TVIN_pR2_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pR2.dat"
`define AUTOTB_TVIN_pR3_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pR3.dat"
`define AUTOTB_TVIN_pR4_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pR4.dat"
`define AUTOTB_TVIN_pR5_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pR5.dat"
`define AUTOTB_TVIN_pR6_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pR6.dat"
`define AUTOTB_TVIN_pR7_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pR7.dat"
`define AUTOTB_TVIN_pR8_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pR8.dat"
`define AUTOTB_TVIN_pR9_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pR9.dat"
`define AUTOTB_TVIN_pbhat0_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pbhat0.dat"
`define AUTOTB_TVIN_pbhat1_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pbhat1.dat"
`define AUTOTB_TVIN_pbhat2_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pbhat2.dat"
`define AUTOTB_TVIN_pbhat3_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pbhat3.dat"
`define AUTOTB_TVIN_pbhat4_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pbhat4.dat"
`define AUTOTB_TVIN_pbhat5_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pbhat5.dat"
`define AUTOTB_TVIN_pbhat6_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pbhat6.dat"
`define AUTOTB_TVIN_pbhat7_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pbhat7.dat"
`define AUTOTB_TVIN_pMaxIterations_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_pMaxIterations.dat"
`define AUTOTB_TVIN_numbits_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_numbits.dat"
`define AUTOTB_TVIN_mux_out_wrapc  "./rtl.HLSLdpcLogDecScaledMin.autotvin_mux.dat"
`define AUTOTB_TVOUT_pbhat0  "./c.HLSLdpcLogDecScaledMin.autotvout_pbhat0.dat"
`define AUTOTB_TVOUT_pbhat1  "./c.HLSLdpcLogDecScaledMin.autotvout_pbhat1.dat"
`define AUTOTB_TVOUT_pbhat2  "./c.HLSLdpcLogDecScaledMin.autotvout_pbhat2.dat"
`define AUTOTB_TVOUT_pbhat3  "./c.HLSLdpcLogDecScaledMin.autotvout_pbhat3.dat"
`define AUTOTB_TVOUT_pbhat4  "./c.HLSLdpcLogDecScaledMin.autotvout_pbhat4.dat"
`define AUTOTB_TVOUT_pbhat5  "./c.HLSLdpcLogDecScaledMin.autotvout_pbhat5.dat"
`define AUTOTB_TVOUT_pbhat6  "./c.HLSLdpcLogDecScaledMin.autotvout_pbhat6.dat"
`define AUTOTB_TVOUT_pbhat7  "./c.HLSLdpcLogDecScaledMin.autotvout_pbhat7.dat"
`define AUTOTB_TVOUT_cnt  "./c.HLSLdpcLogDecScaledMin.autotvout_cnt.dat"
`define AUTOTB_TVOUT_itt_num  "./c.HLSLdpcLogDecScaledMin.autotvout_itt_num.dat"
`define AUTOTB_TVOUT_pbhat0_out_wrapc  "./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat0.dat"
`define AUTOTB_TVOUT_pbhat1_out_wrapc  "./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat1.dat"
`define AUTOTB_TVOUT_pbhat2_out_wrapc  "./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat2.dat"
`define AUTOTB_TVOUT_pbhat3_out_wrapc  "./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat3.dat"
`define AUTOTB_TVOUT_pbhat4_out_wrapc  "./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat4.dat"
`define AUTOTB_TVOUT_pbhat5_out_wrapc  "./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat5.dat"
`define AUTOTB_TVOUT_pbhat6_out_wrapc  "./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat6.dat"
`define AUTOTB_TVOUT_pbhat7_out_wrapc  "./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat7.dat"
`define AUTOTB_TVOUT_cnt_out_wrapc  "./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_cnt.dat"
`define AUTOTB_TVOUT_itt_num_out_wrapc  "./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_itt_num.dat"
module `AUTOTB_TOP;

parameter AUTOTB_TRANSACTION_NUM = 1;
parameter PROGRESS_TIMEOUT = 10000000;
parameter LATENCY_ESTIMATION = -1;
parameter LENGTH_pR = 2048;
parameter LENGTH_pR1 = 2048;
parameter LENGTH_pR2 = 2048;
parameter LENGTH_pR3 = 2048;
parameter LENGTH_pR4 = 1024;
parameter LENGTH_pR5 = 1024;
parameter LENGTH_pR6 = 1024;
parameter LENGTH_pR7 = 1024;
parameter LENGTH_pR8 = 1024;
parameter LENGTH_pR9 = 1024;
parameter LENGTH_pbhat0 = 2048;
parameter LENGTH_pbhat1 = 2048;
parameter LENGTH_pbhat2 = 1024;
parameter LENGTH_pbhat3 = 1024;
parameter LENGTH_pbhat4 = 1024;
parameter LENGTH_pbhat5 = 1024;
parameter LENGTH_pbhat6 = 1024;
parameter LENGTH_pbhat7 = 1024;
parameter LENGTH_cnt = 1;
parameter LENGTH_pMaxIterations = 1;
parameter LENGTH_itt_num = 1;
parameter LENGTH_numbits = 1;
parameter LENGTH_mux = 1;

task read_token;
    input integer fp;
    output reg [143 : 0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end
endtask

task post_check;
    input integer fp1;
    input integer fp2;
    reg [143 : 0] token1;
    reg [143 : 0] token2;
    reg [143 : 0] golden;
    reg [143 : 0] result;
    integer ret;
    begin
        read_token(fp1, token1);
        read_token(fp2, token2);
        if (token1 != "[[[runtime]]]" || token2 != "[[[runtime]]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        read_token(fp1, token1);
        read_token(fp2, token2);
        while (token1 != "[[[/runtime]]]" && token2 != "[[[/runtime]]]") begin
            if (token1 != "[[transaction]]" || token2 != "[[transaction]]") begin
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
            end
            read_token(fp1, token1);  // skip transaction number
            read_token(fp2, token2);  // skip transaction number
              read_token(fp1, token1);
              read_token(fp2, token2);
            while(token1 != "[[/transaction]]" && token2 != "[[/transaction]]") begin
                ret = $sscanf(token1, "0x%x", golden);
                  if (ret != 1) begin
                      $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                      $finish;
                  end
                ret = $sscanf(token2, "0x%x", result);
                  if (ret != 1) begin
                      $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                      $finish;
                  end
                if(golden != result) begin
                      $display("%x (expected) vs. %x (actual) - mismatch", golden, result);
                    $display("ERROR: Simulation using HLS TB failed.");
                      $finish;
                end
                  read_token(fp1, token1);
                  read_token(fp2, token2);
            end
              read_token(fp1, token1);
              read_token(fp2, token2);
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg tb_continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
wire ap_start;
wire ap_done;
wire ap_idle;
wire ap_ready;
wire [10 : 0] pR_address0;
wire  pR_ce0;
wire [7 : 0] pR_q0;
wire [10 : 0] pR1_address0;
wire  pR1_ce0;
wire [7 : 0] pR1_q0;
wire [10 : 0] pR2_address0;
wire  pR2_ce0;
wire [7 : 0] pR2_q0;
wire [10 : 0] pR3_address0;
wire  pR3_ce0;
wire [7 : 0] pR3_q0;
wire [9 : 0] pR4_address0;
wire  pR4_ce0;
wire [7 : 0] pR4_q0;
wire [9 : 0] pR5_address0;
wire  pR5_ce0;
wire [7 : 0] pR5_q0;
wire [9 : 0] pR6_address0;
wire  pR6_ce0;
wire [7 : 0] pR6_q0;
wire [9 : 0] pR7_address0;
wire  pR7_ce0;
wire [7 : 0] pR7_q0;
wire [9 : 0] pR8_address0;
wire  pR8_ce0;
wire [7 : 0] pR8_q0;
wire [9 : 0] pR9_address0;
wire  pR9_ce0;
wire [7 : 0] pR9_q0;
wire [9 : 0] pR10_address0;
wire  pR10_ce0;
wire  pR10_we0;
wire [7 : 0] pR10_d0;
wire [7 : 0] pR10_q0;
wire [9 : 0] pR10_address1;
wire  pR10_ce1;
wire  pR10_we1;
wire [7 : 0] pR10_d1;
wire [7 : 0] pR10_q1;
wire [10 : 0] pbhat0_address0;
wire  pbhat0_ce0;
wire  pbhat0_we0;
wire [0 : 0] pbhat0_d0;
wire [10 : 0] pbhat1_address0;
wire  pbhat1_ce0;
wire  pbhat1_we0;
wire [0 : 0] pbhat1_d0;
wire [9 : 0] pbhat2_address0;
wire  pbhat2_ce0;
wire  pbhat2_we0;
wire [0 : 0] pbhat2_d0;
wire [9 : 0] pbhat3_address0;
wire  pbhat3_ce0;
wire  pbhat3_we0;
wire [0 : 0] pbhat3_d0;
wire [9 : 0] pbhat4_address0;
wire  pbhat4_ce0;
wire  pbhat4_we0;
wire [0 : 0] pbhat4_d0;
wire [9 : 0] pbhat5_address0;
wire  pbhat5_ce0;
wire  pbhat5_we0;
wire [0 : 0] pbhat5_d0;
wire [9 : 0] pbhat6_address0;
wire  pbhat6_ce0;
wire  pbhat6_we0;
wire [0 : 0] pbhat6_d0;
wire [9 : 0] pbhat7_address0;
wire  pbhat7_ce0;
wire  pbhat7_we0;
wire [0 : 0] pbhat7_d0;
wire [31 : 0] cnt;
wire  cnt_ap_vld;
wire [15 : 0] nR_M;
wire [15 : 0] etaIndexM_M;
wire [15 : 0] pCodeM;
wire [15 : 0] pMaxIterations;
wire [7 : 0] itt_num;
wire  itt_num_ap_vld;
wire [15 : 0] numbits;
wire  mux;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

wire ap_clk;
wire ap_rst;
wire ap_rst_n;

`AUTOTB_DUT `AUTOTB_DUT_INST(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_ready(ap_ready),
    .pR_address0(pR_address0),
    .pR_ce0(pR_ce0),
    .pR_q0(pR_q0),
    .pR1_address0(pR1_address0),
    .pR1_ce0(pR1_ce0),
    .pR1_q0(pR1_q0),
    .pR2_address0(pR2_address0),
    .pR2_ce0(pR2_ce0),
    .pR2_q0(pR2_q0),
    .pR3_address0(pR3_address0),
    .pR3_ce0(pR3_ce0),
    .pR3_q0(pR3_q0),
    .pR4_address0(pR4_address0),
    .pR4_ce0(pR4_ce0),
    .pR4_q0(pR4_q0),
    .pR5_address0(pR5_address0),
    .pR5_ce0(pR5_ce0),
    .pR5_q0(pR5_q0),
    .pR6_address0(pR6_address0),
    .pR6_ce0(pR6_ce0),
    .pR6_q0(pR6_q0),
    .pR7_address0(pR7_address0),
    .pR7_ce0(pR7_ce0),
    .pR7_q0(pR7_q0),
    .pR8_address0(pR8_address0),
    .pR8_ce0(pR8_ce0),
    .pR8_q0(pR8_q0),
    .pR9_address0(pR9_address0),
    .pR9_ce0(pR9_ce0),
    .pR9_q0(pR9_q0),
    .pR10_address0(pR10_address0),
    .pR10_ce0(pR10_ce0),
    .pR10_we0(pR10_we0),
    .pR10_d0(pR10_d0),
    .pR10_q0(pR10_q0),
    .pR10_address1(pR10_address1),
    .pR10_ce1(pR10_ce1),
    .pR10_we1(pR10_we1),
    .pR10_d1(pR10_d1),
    .pR10_q1(pR10_q1),
    .pbhat0_address0(pbhat0_address0),
    .pbhat0_ce0(pbhat0_ce0),
    .pbhat0_we0(pbhat0_we0),
    .pbhat0_d0(pbhat0_d0),
    .pbhat1_address0(pbhat1_address0),
    .pbhat1_ce0(pbhat1_ce0),
    .pbhat1_we0(pbhat1_we0),
    .pbhat1_d0(pbhat1_d0),
    .pbhat2_address0(pbhat2_address0),
    .pbhat2_ce0(pbhat2_ce0),
    .pbhat2_we0(pbhat2_we0),
    .pbhat2_d0(pbhat2_d0),
    .pbhat3_address0(pbhat3_address0),
    .pbhat3_ce0(pbhat3_ce0),
    .pbhat3_we0(pbhat3_we0),
    .pbhat3_d0(pbhat3_d0),
    .pbhat4_address0(pbhat4_address0),
    .pbhat4_ce0(pbhat4_ce0),
    .pbhat4_we0(pbhat4_we0),
    .pbhat4_d0(pbhat4_d0),
    .pbhat5_address0(pbhat5_address0),
    .pbhat5_ce0(pbhat5_ce0),
    .pbhat5_we0(pbhat5_we0),
    .pbhat5_d0(pbhat5_d0),
    .pbhat6_address0(pbhat6_address0),
    .pbhat6_ce0(pbhat6_ce0),
    .pbhat6_we0(pbhat6_we0),
    .pbhat6_d0(pbhat6_d0),
    .pbhat7_address0(pbhat7_address0),
    .pbhat7_ce0(pbhat7_ce0),
    .pbhat7_we0(pbhat7_we0),
    .pbhat7_d0(pbhat7_d0),
    .cnt(cnt),
    .cnt_ap_vld(cnt_ap_vld),
    .nR_M(nR_M),
    .etaIndexM_M(etaIndexM_M),
    .pCodeM(pCodeM),
    .pMaxIterations(pMaxIterations),
    .itt_num(itt_num),
    .itt_num_ap_vld(itt_num_ap_vld),
    .numbits(numbits),
    .mux(mux));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst = AESL_reset;
assign ap_rst_n = ~AESL_reset;
assign AESL_reset = rst;
assign ap_start = AESL_start;
assign AESL_start = start;
assign AESL_done = ap_done;
assign AESL_idle = ap_idle;
assign AESL_ready = ap_ready;
assign AESL_ce = ce;
assign AESL_continue = tb_continue;
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_done !== 1 && AESL_done !== 0) begin
                $display("ERROR: Control signal AESL_done is invalid!");
                $finish;
            end
        end
    end
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_ready !== 1 && AESL_ready !== 0) begin
                $display("ERROR: Control signal AESL_ready is invalid!");
                $finish;
            end
        end
    end
//------------------------arraypR Instantiation--------------

// The input and output of arraypR
wire    arraypR_ce0, arraypR_ce1;
wire    arraypR_we0, arraypR_we1;
wire    [10 : 0]    arraypR_address0, arraypR_address1;
wire    [7 : 0]    arraypR_din0, arraypR_din1;
wire    [7 : 0]    arraypR_dout0, arraypR_dout1;
wire    arraypR_ready;
wire    arraypR_done;

`AESL_MEM_pR `AESL_MEM_INST_pR(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypR_ce0),
    .we0        (arraypR_we0),
    .address0   (arraypR_address0),
    .din0       (arraypR_din0),
    .dout0      (arraypR_dout0),
    .ce1        (arraypR_ce1),
    .we1        (arraypR_we1),
    .address1   (arraypR_address1),
    .din1       (arraypR_din1),
    .dout1      (arraypR_dout1),
    .ready      (arraypR_ready),
    .done    (arraypR_done)
);

// Assignment between dut and arraypR
assign arraypR_address0 = pR_address0;
assign arraypR_ce0 = pR_ce0;
assign pR_q0 = arraypR_dout0;
assign arraypR_we0 = 0;
assign arraypR_din0 = 0;
assign arraypR_we1 = 0;
assign arraypR_din1 = 0;
assign arraypR_ready=    ready;
assign arraypR_done = 0;


//------------------------arraypR1 Instantiation--------------

// The input and output of arraypR1
wire    arraypR1_ce0, arraypR1_ce1;
wire    arraypR1_we0, arraypR1_we1;
wire    [10 : 0]    arraypR1_address0, arraypR1_address1;
wire    [7 : 0]    arraypR1_din0, arraypR1_din1;
wire    [7 : 0]    arraypR1_dout0, arraypR1_dout1;
wire    arraypR1_ready;
wire    arraypR1_done;

`AESL_MEM_pR1 `AESL_MEM_INST_pR1(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypR1_ce0),
    .we0        (arraypR1_we0),
    .address0   (arraypR1_address0),
    .din0       (arraypR1_din0),
    .dout0      (arraypR1_dout0),
    .ce1        (arraypR1_ce1),
    .we1        (arraypR1_we1),
    .address1   (arraypR1_address1),
    .din1       (arraypR1_din1),
    .dout1      (arraypR1_dout1),
    .ready      (arraypR1_ready),
    .done    (arraypR1_done)
);

// Assignment between dut and arraypR1
assign arraypR1_address0 = pR1_address0;
assign arraypR1_ce0 = pR1_ce0;
assign pR1_q0 = arraypR1_dout0;
assign arraypR1_we0 = 0;
assign arraypR1_din0 = 0;
assign arraypR1_we1 = 0;
assign arraypR1_din1 = 0;
assign arraypR1_ready=    ready;
assign arraypR1_done = 0;


//------------------------arraypR2 Instantiation--------------

// The input and output of arraypR2
wire    arraypR2_ce0, arraypR2_ce1;
wire    arraypR2_we0, arraypR2_we1;
wire    [10 : 0]    arraypR2_address0, arraypR2_address1;
wire    [7 : 0]    arraypR2_din0, arraypR2_din1;
wire    [7 : 0]    arraypR2_dout0, arraypR2_dout1;
wire    arraypR2_ready;
wire    arraypR2_done;

`AESL_MEM_pR2 `AESL_MEM_INST_pR2(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypR2_ce0),
    .we0        (arraypR2_we0),
    .address0   (arraypR2_address0),
    .din0       (arraypR2_din0),
    .dout0      (arraypR2_dout0),
    .ce1        (arraypR2_ce1),
    .we1        (arraypR2_we1),
    .address1   (arraypR2_address1),
    .din1       (arraypR2_din1),
    .dout1      (arraypR2_dout1),
    .ready      (arraypR2_ready),
    .done    (arraypR2_done)
);

// Assignment between dut and arraypR2
assign arraypR2_address0 = pR2_address0;
assign arraypR2_ce0 = pR2_ce0;
assign pR2_q0 = arraypR2_dout0;
assign arraypR2_we0 = 0;
assign arraypR2_din0 = 0;
assign arraypR2_we1 = 0;
assign arraypR2_din1 = 0;
assign arraypR2_ready=    ready;
assign arraypR2_done = 0;


//------------------------arraypR3 Instantiation--------------

// The input and output of arraypR3
wire    arraypR3_ce0, arraypR3_ce1;
wire    arraypR3_we0, arraypR3_we1;
wire    [10 : 0]    arraypR3_address0, arraypR3_address1;
wire    [7 : 0]    arraypR3_din0, arraypR3_din1;
wire    [7 : 0]    arraypR3_dout0, arraypR3_dout1;
wire    arraypR3_ready;
wire    arraypR3_done;

`AESL_MEM_pR3 `AESL_MEM_INST_pR3(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypR3_ce0),
    .we0        (arraypR3_we0),
    .address0   (arraypR3_address0),
    .din0       (arraypR3_din0),
    .dout0      (arraypR3_dout0),
    .ce1        (arraypR3_ce1),
    .we1        (arraypR3_we1),
    .address1   (arraypR3_address1),
    .din1       (arraypR3_din1),
    .dout1      (arraypR3_dout1),
    .ready      (arraypR3_ready),
    .done    (arraypR3_done)
);

// Assignment between dut and arraypR3
assign arraypR3_address0 = pR3_address0;
assign arraypR3_ce0 = pR3_ce0;
assign pR3_q0 = arraypR3_dout0;
assign arraypR3_we0 = 0;
assign arraypR3_din0 = 0;
assign arraypR3_we1 = 0;
assign arraypR3_din1 = 0;
assign arraypR3_ready=    ready;
assign arraypR3_done = 0;


//------------------------arraypR4 Instantiation--------------

// The input and output of arraypR4
wire    arraypR4_ce0, arraypR4_ce1;
wire    arraypR4_we0, arraypR4_we1;
wire    [9 : 0]    arraypR4_address0, arraypR4_address1;
wire    [7 : 0]    arraypR4_din0, arraypR4_din1;
wire    [7 : 0]    arraypR4_dout0, arraypR4_dout1;
wire    arraypR4_ready;
wire    arraypR4_done;

`AESL_MEM_pR4 `AESL_MEM_INST_pR4(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypR4_ce0),
    .we0        (arraypR4_we0),
    .address0   (arraypR4_address0),
    .din0       (arraypR4_din0),
    .dout0      (arraypR4_dout0),
    .ce1        (arraypR4_ce1),
    .we1        (arraypR4_we1),
    .address1   (arraypR4_address1),
    .din1       (arraypR4_din1),
    .dout1      (arraypR4_dout1),
    .ready      (arraypR4_ready),
    .done    (arraypR4_done)
);

// Assignment between dut and arraypR4
assign arraypR4_address0 = pR4_address0;
assign arraypR4_ce0 = pR4_ce0;
assign pR4_q0 = arraypR4_dout0;
assign arraypR4_we0 = 0;
assign arraypR4_din0 = 0;
assign arraypR4_we1 = 0;
assign arraypR4_din1 = 0;
assign arraypR4_ready=    ready;
assign arraypR4_done = 0;


//------------------------arraypR5 Instantiation--------------

// The input and output of arraypR5
wire    arraypR5_ce0, arraypR5_ce1;
wire    arraypR5_we0, arraypR5_we1;
wire    [9 : 0]    arraypR5_address0, arraypR5_address1;
wire    [7 : 0]    arraypR5_din0, arraypR5_din1;
wire    [7 : 0]    arraypR5_dout0, arraypR5_dout1;
wire    arraypR5_ready;
wire    arraypR5_done;

`AESL_MEM_pR5 `AESL_MEM_INST_pR5(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypR5_ce0),
    .we0        (arraypR5_we0),
    .address0   (arraypR5_address0),
    .din0       (arraypR5_din0),
    .dout0      (arraypR5_dout0),
    .ce1        (arraypR5_ce1),
    .we1        (arraypR5_we1),
    .address1   (arraypR5_address1),
    .din1       (arraypR5_din1),
    .dout1      (arraypR5_dout1),
    .ready      (arraypR5_ready),
    .done    (arraypR5_done)
);

// Assignment between dut and arraypR5
assign arraypR5_address0 = pR5_address0;
assign arraypR5_ce0 = pR5_ce0;
assign pR5_q0 = arraypR5_dout0;
assign arraypR5_we0 = 0;
assign arraypR5_din0 = 0;
assign arraypR5_we1 = 0;
assign arraypR5_din1 = 0;
assign arraypR5_ready=    ready;
assign arraypR5_done = 0;


//------------------------arraypR6 Instantiation--------------

// The input and output of arraypR6
wire    arraypR6_ce0, arraypR6_ce1;
wire    arraypR6_we0, arraypR6_we1;
wire    [9 : 0]    arraypR6_address0, arraypR6_address1;
wire    [7 : 0]    arraypR6_din0, arraypR6_din1;
wire    [7 : 0]    arraypR6_dout0, arraypR6_dout1;
wire    arraypR6_ready;
wire    arraypR6_done;

`AESL_MEM_pR6 `AESL_MEM_INST_pR6(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypR6_ce0),
    .we0        (arraypR6_we0),
    .address0   (arraypR6_address0),
    .din0       (arraypR6_din0),
    .dout0      (arraypR6_dout0),
    .ce1        (arraypR6_ce1),
    .we1        (arraypR6_we1),
    .address1   (arraypR6_address1),
    .din1       (arraypR6_din1),
    .dout1      (arraypR6_dout1),
    .ready      (arraypR6_ready),
    .done    (arraypR6_done)
);

// Assignment between dut and arraypR6
assign arraypR6_address0 = pR6_address0;
assign arraypR6_ce0 = pR6_ce0;
assign pR6_q0 = arraypR6_dout0;
assign arraypR6_we0 = 0;
assign arraypR6_din0 = 0;
assign arraypR6_we1 = 0;
assign arraypR6_din1 = 0;
assign arraypR6_ready=    ready;
assign arraypR6_done = 0;


//------------------------arraypR7 Instantiation--------------

// The input and output of arraypR7
wire    arraypR7_ce0, arraypR7_ce1;
wire    arraypR7_we0, arraypR7_we1;
wire    [9 : 0]    arraypR7_address0, arraypR7_address1;
wire    [7 : 0]    arraypR7_din0, arraypR7_din1;
wire    [7 : 0]    arraypR7_dout0, arraypR7_dout1;
wire    arraypR7_ready;
wire    arraypR7_done;

`AESL_MEM_pR7 `AESL_MEM_INST_pR7(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypR7_ce0),
    .we0        (arraypR7_we0),
    .address0   (arraypR7_address0),
    .din0       (arraypR7_din0),
    .dout0      (arraypR7_dout0),
    .ce1        (arraypR7_ce1),
    .we1        (arraypR7_we1),
    .address1   (arraypR7_address1),
    .din1       (arraypR7_din1),
    .dout1      (arraypR7_dout1),
    .ready      (arraypR7_ready),
    .done    (arraypR7_done)
);

// Assignment between dut and arraypR7
assign arraypR7_address0 = pR7_address0;
assign arraypR7_ce0 = pR7_ce0;
assign pR7_q0 = arraypR7_dout0;
assign arraypR7_we0 = 0;
assign arraypR7_din0 = 0;
assign arraypR7_we1 = 0;
assign arraypR7_din1 = 0;
assign arraypR7_ready=    ready;
assign arraypR7_done = 0;


//------------------------arraypR8 Instantiation--------------

// The input and output of arraypR8
wire    arraypR8_ce0, arraypR8_ce1;
wire    arraypR8_we0, arraypR8_we1;
wire    [9 : 0]    arraypR8_address0, arraypR8_address1;
wire    [7 : 0]    arraypR8_din0, arraypR8_din1;
wire    [7 : 0]    arraypR8_dout0, arraypR8_dout1;
wire    arraypR8_ready;
wire    arraypR8_done;

`AESL_MEM_pR8 `AESL_MEM_INST_pR8(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypR8_ce0),
    .we0        (arraypR8_we0),
    .address0   (arraypR8_address0),
    .din0       (arraypR8_din0),
    .dout0      (arraypR8_dout0),
    .ce1        (arraypR8_ce1),
    .we1        (arraypR8_we1),
    .address1   (arraypR8_address1),
    .din1       (arraypR8_din1),
    .dout1      (arraypR8_dout1),
    .ready      (arraypR8_ready),
    .done    (arraypR8_done)
);

// Assignment between dut and arraypR8
assign arraypR8_address0 = pR8_address0;
assign arraypR8_ce0 = pR8_ce0;
assign pR8_q0 = arraypR8_dout0;
assign arraypR8_we0 = 0;
assign arraypR8_din0 = 0;
assign arraypR8_we1 = 0;
assign arraypR8_din1 = 0;
assign arraypR8_ready=    ready;
assign arraypR8_done = 0;


//------------------------arraypR9 Instantiation--------------

// The input and output of arraypR9
wire    arraypR9_ce0, arraypR9_ce1;
wire    arraypR9_we0, arraypR9_we1;
wire    [9 : 0]    arraypR9_address0, arraypR9_address1;
wire    [7 : 0]    arraypR9_din0, arraypR9_din1;
wire    [7 : 0]    arraypR9_dout0, arraypR9_dout1;
wire    arraypR9_ready;
wire    arraypR9_done;

`AESL_MEM_pR9 `AESL_MEM_INST_pR9(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypR9_ce0),
    .we0        (arraypR9_we0),
    .address0   (arraypR9_address0),
    .din0       (arraypR9_din0),
    .dout0      (arraypR9_dout0),
    .ce1        (arraypR9_ce1),
    .we1        (arraypR9_we1),
    .address1   (arraypR9_address1),
    .din1       (arraypR9_din1),
    .dout1      (arraypR9_dout1),
    .ready      (arraypR9_ready),
    .done    (arraypR9_done)
);

// Assignment between dut and arraypR9
assign arraypR9_address0 = pR9_address0;
assign arraypR9_ce0 = pR9_ce0;
assign pR9_q0 = arraypR9_dout0;
assign arraypR9_we0 = 0;
assign arraypR9_din0 = 0;
assign arraypR9_we1 = 0;
assign arraypR9_din1 = 0;
assign arraypR9_ready=    ready;
assign arraypR9_done = 0;


//------------------------arraypR10 Instantiation--------------

// The input and output of arraypR10
wire    arraypR10_ce0, arraypR10_ce1;
wire    arraypR10_we0, arraypR10_we1;
wire    [9 : 0]    arraypR10_address0, arraypR10_address1;
wire    [7 : 0]    arraypR10_din0, arraypR10_din1;
wire    [7 : 0]    arraypR10_dout0, arraypR10_dout1;
wire    arraypR10_ready;
wire    arraypR10_done;

// Assignment between dut and arraypR10
assign arraypR10_done = 0;


//------------------------arraypbhat0 Instantiation--------------

// The input and output of arraypbhat0
wire    arraypbhat0_ce0, arraypbhat0_ce1;
wire    arraypbhat0_we0, arraypbhat0_we1;
wire    [10 : 0]    arraypbhat0_address0, arraypbhat0_address1;
wire    [0 : 0]    arraypbhat0_din0, arraypbhat0_din1;
wire    [0 : 0]    arraypbhat0_dout0, arraypbhat0_dout1;
wire    arraypbhat0_ready;
wire    arraypbhat0_done;

`AESL_MEM_pbhat0 `AESL_MEM_INST_pbhat0(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypbhat0_ce0),
    .we0        (arraypbhat0_we0),
    .address0   (arraypbhat0_address0),
    .din0       (arraypbhat0_din0),
    .dout0      (arraypbhat0_dout0),
    .ce1        (arraypbhat0_ce1),
    .we1        (arraypbhat0_we1),
    .address1   (arraypbhat0_address1),
    .din1       (arraypbhat0_din1),
    .dout1      (arraypbhat0_dout1),
    .ready      (arraypbhat0_ready),
    .done    (arraypbhat0_done)
);

// Assignment between dut and arraypbhat0
assign arraypbhat0_address0 = pbhat0_address0;
assign arraypbhat0_ce0 = pbhat0_ce0;
assign arraypbhat0_we0 = pbhat0_we0;
assign arraypbhat0_din0 = pbhat0_d0;
assign arraypbhat0_we1 = 0;
assign arraypbhat0_din1 = 0;
assign arraypbhat0_ready= ready_initial | arraypbhat0_done;
assign arraypbhat0_done =    AESL_done_delay;


//------------------------arraypbhat1 Instantiation--------------

// The input and output of arraypbhat1
wire    arraypbhat1_ce0, arraypbhat1_ce1;
wire    arraypbhat1_we0, arraypbhat1_we1;
wire    [10 : 0]    arraypbhat1_address0, arraypbhat1_address1;
wire    [0 : 0]    arraypbhat1_din0, arraypbhat1_din1;
wire    [0 : 0]    arraypbhat1_dout0, arraypbhat1_dout1;
wire    arraypbhat1_ready;
wire    arraypbhat1_done;

`AESL_MEM_pbhat1 `AESL_MEM_INST_pbhat1(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypbhat1_ce0),
    .we0        (arraypbhat1_we0),
    .address0   (arraypbhat1_address0),
    .din0       (arraypbhat1_din0),
    .dout0      (arraypbhat1_dout0),
    .ce1        (arraypbhat1_ce1),
    .we1        (arraypbhat1_we1),
    .address1   (arraypbhat1_address1),
    .din1       (arraypbhat1_din1),
    .dout1      (arraypbhat1_dout1),
    .ready      (arraypbhat1_ready),
    .done    (arraypbhat1_done)
);

// Assignment between dut and arraypbhat1
assign arraypbhat1_address0 = pbhat1_address0;
assign arraypbhat1_ce0 = pbhat1_ce0;
assign arraypbhat1_we0 = pbhat1_we0;
assign arraypbhat1_din0 = pbhat1_d0;
assign arraypbhat1_we1 = 0;
assign arraypbhat1_din1 = 0;
assign arraypbhat1_ready= ready_initial | arraypbhat1_done;
assign arraypbhat1_done =    AESL_done_delay;


//------------------------arraypbhat2 Instantiation--------------

// The input and output of arraypbhat2
wire    arraypbhat2_ce0, arraypbhat2_ce1;
wire    arraypbhat2_we0, arraypbhat2_we1;
wire    [9 : 0]    arraypbhat2_address0, arraypbhat2_address1;
wire    [0 : 0]    arraypbhat2_din0, arraypbhat2_din1;
wire    [0 : 0]    arraypbhat2_dout0, arraypbhat2_dout1;
wire    arraypbhat2_ready;
wire    arraypbhat2_done;

`AESL_MEM_pbhat2 `AESL_MEM_INST_pbhat2(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypbhat2_ce0),
    .we0        (arraypbhat2_we0),
    .address0   (arraypbhat2_address0),
    .din0       (arraypbhat2_din0),
    .dout0      (arraypbhat2_dout0),
    .ce1        (arraypbhat2_ce1),
    .we1        (arraypbhat2_we1),
    .address1   (arraypbhat2_address1),
    .din1       (arraypbhat2_din1),
    .dout1      (arraypbhat2_dout1),
    .ready      (arraypbhat2_ready),
    .done    (arraypbhat2_done)
);

// Assignment between dut and arraypbhat2
assign arraypbhat2_address0 = pbhat2_address0;
assign arraypbhat2_ce0 = pbhat2_ce0;
assign arraypbhat2_we0 = pbhat2_we0;
assign arraypbhat2_din0 = pbhat2_d0;
assign arraypbhat2_we1 = 0;
assign arraypbhat2_din1 = 0;
assign arraypbhat2_ready= ready_initial | arraypbhat2_done;
assign arraypbhat2_done =    AESL_done_delay;


//------------------------arraypbhat3 Instantiation--------------

// The input and output of arraypbhat3
wire    arraypbhat3_ce0, arraypbhat3_ce1;
wire    arraypbhat3_we0, arraypbhat3_we1;
wire    [9 : 0]    arraypbhat3_address0, arraypbhat3_address1;
wire    [0 : 0]    arraypbhat3_din0, arraypbhat3_din1;
wire    [0 : 0]    arraypbhat3_dout0, arraypbhat3_dout1;
wire    arraypbhat3_ready;
wire    arraypbhat3_done;

`AESL_MEM_pbhat3 `AESL_MEM_INST_pbhat3(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypbhat3_ce0),
    .we0        (arraypbhat3_we0),
    .address0   (arraypbhat3_address0),
    .din0       (arraypbhat3_din0),
    .dout0      (arraypbhat3_dout0),
    .ce1        (arraypbhat3_ce1),
    .we1        (arraypbhat3_we1),
    .address1   (arraypbhat3_address1),
    .din1       (arraypbhat3_din1),
    .dout1      (arraypbhat3_dout1),
    .ready      (arraypbhat3_ready),
    .done    (arraypbhat3_done)
);

// Assignment between dut and arraypbhat3
assign arraypbhat3_address0 = pbhat3_address0;
assign arraypbhat3_ce0 = pbhat3_ce0;
assign arraypbhat3_we0 = pbhat3_we0;
assign arraypbhat3_din0 = pbhat3_d0;
assign arraypbhat3_we1 = 0;
assign arraypbhat3_din1 = 0;
assign arraypbhat3_ready= ready_initial | arraypbhat3_done;
assign arraypbhat3_done =    AESL_done_delay;


//------------------------arraypbhat4 Instantiation--------------

// The input and output of arraypbhat4
wire    arraypbhat4_ce0, arraypbhat4_ce1;
wire    arraypbhat4_we0, arraypbhat4_we1;
wire    [9 : 0]    arraypbhat4_address0, arraypbhat4_address1;
wire    [0 : 0]    arraypbhat4_din0, arraypbhat4_din1;
wire    [0 : 0]    arraypbhat4_dout0, arraypbhat4_dout1;
wire    arraypbhat4_ready;
wire    arraypbhat4_done;

`AESL_MEM_pbhat4 `AESL_MEM_INST_pbhat4(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypbhat4_ce0),
    .we0        (arraypbhat4_we0),
    .address0   (arraypbhat4_address0),
    .din0       (arraypbhat4_din0),
    .dout0      (arraypbhat4_dout0),
    .ce1        (arraypbhat4_ce1),
    .we1        (arraypbhat4_we1),
    .address1   (arraypbhat4_address1),
    .din1       (arraypbhat4_din1),
    .dout1      (arraypbhat4_dout1),
    .ready      (arraypbhat4_ready),
    .done    (arraypbhat4_done)
);

// Assignment between dut and arraypbhat4
assign arraypbhat4_address0 = pbhat4_address0;
assign arraypbhat4_ce0 = pbhat4_ce0;
assign arraypbhat4_we0 = pbhat4_we0;
assign arraypbhat4_din0 = pbhat4_d0;
assign arraypbhat4_we1 = 0;
assign arraypbhat4_din1 = 0;
assign arraypbhat4_ready= ready_initial | arraypbhat4_done;
assign arraypbhat4_done =    AESL_done_delay;


//------------------------arraypbhat5 Instantiation--------------

// The input and output of arraypbhat5
wire    arraypbhat5_ce0, arraypbhat5_ce1;
wire    arraypbhat5_we0, arraypbhat5_we1;
wire    [9 : 0]    arraypbhat5_address0, arraypbhat5_address1;
wire    [0 : 0]    arraypbhat5_din0, arraypbhat5_din1;
wire    [0 : 0]    arraypbhat5_dout0, arraypbhat5_dout1;
wire    arraypbhat5_ready;
wire    arraypbhat5_done;

`AESL_MEM_pbhat5 `AESL_MEM_INST_pbhat5(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypbhat5_ce0),
    .we0        (arraypbhat5_we0),
    .address0   (arraypbhat5_address0),
    .din0       (arraypbhat5_din0),
    .dout0      (arraypbhat5_dout0),
    .ce1        (arraypbhat5_ce1),
    .we1        (arraypbhat5_we1),
    .address1   (arraypbhat5_address1),
    .din1       (arraypbhat5_din1),
    .dout1      (arraypbhat5_dout1),
    .ready      (arraypbhat5_ready),
    .done    (arraypbhat5_done)
);

// Assignment between dut and arraypbhat5
assign arraypbhat5_address0 = pbhat5_address0;
assign arraypbhat5_ce0 = pbhat5_ce0;
assign arraypbhat5_we0 = pbhat5_we0;
assign arraypbhat5_din0 = pbhat5_d0;
assign arraypbhat5_we1 = 0;
assign arraypbhat5_din1 = 0;
assign arraypbhat5_ready= ready_initial | arraypbhat5_done;
assign arraypbhat5_done =    AESL_done_delay;


//------------------------arraypbhat6 Instantiation--------------

// The input and output of arraypbhat6
wire    arraypbhat6_ce0, arraypbhat6_ce1;
wire    arraypbhat6_we0, arraypbhat6_we1;
wire    [9 : 0]    arraypbhat6_address0, arraypbhat6_address1;
wire    [0 : 0]    arraypbhat6_din0, arraypbhat6_din1;
wire    [0 : 0]    arraypbhat6_dout0, arraypbhat6_dout1;
wire    arraypbhat6_ready;
wire    arraypbhat6_done;

`AESL_MEM_pbhat6 `AESL_MEM_INST_pbhat6(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypbhat6_ce0),
    .we0        (arraypbhat6_we0),
    .address0   (arraypbhat6_address0),
    .din0       (arraypbhat6_din0),
    .dout0      (arraypbhat6_dout0),
    .ce1        (arraypbhat6_ce1),
    .we1        (arraypbhat6_we1),
    .address1   (arraypbhat6_address1),
    .din1       (arraypbhat6_din1),
    .dout1      (arraypbhat6_dout1),
    .ready      (arraypbhat6_ready),
    .done    (arraypbhat6_done)
);

// Assignment between dut and arraypbhat6
assign arraypbhat6_address0 = pbhat6_address0;
assign arraypbhat6_ce0 = pbhat6_ce0;
assign arraypbhat6_we0 = pbhat6_we0;
assign arraypbhat6_din0 = pbhat6_d0;
assign arraypbhat6_we1 = 0;
assign arraypbhat6_din1 = 0;
assign arraypbhat6_ready= ready_initial | arraypbhat6_done;
assign arraypbhat6_done =    AESL_done_delay;


//------------------------arraypbhat7 Instantiation--------------

// The input and output of arraypbhat7
wire    arraypbhat7_ce0, arraypbhat7_ce1;
wire    arraypbhat7_we0, arraypbhat7_we1;
wire    [9 : 0]    arraypbhat7_address0, arraypbhat7_address1;
wire    [0 : 0]    arraypbhat7_din0, arraypbhat7_din1;
wire    [0 : 0]    arraypbhat7_dout0, arraypbhat7_dout1;
wire    arraypbhat7_ready;
wire    arraypbhat7_done;

`AESL_MEM_pbhat7 `AESL_MEM_INST_pbhat7(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraypbhat7_ce0),
    .we0        (arraypbhat7_we0),
    .address0   (arraypbhat7_address0),
    .din0       (arraypbhat7_din0),
    .dout0      (arraypbhat7_dout0),
    .ce1        (arraypbhat7_ce1),
    .we1        (arraypbhat7_we1),
    .address1   (arraypbhat7_address1),
    .din1       (arraypbhat7_din1),
    .dout1      (arraypbhat7_dout1),
    .ready      (arraypbhat7_ready),
    .done    (arraypbhat7_done)
);

// Assignment between dut and arraypbhat7
assign arraypbhat7_address0 = pbhat7_address0;
assign arraypbhat7_ce0 = pbhat7_ce0;
assign arraypbhat7_we0 = pbhat7_we0;
assign arraypbhat7_din0 = pbhat7_d0;
assign arraypbhat7_we1 = 0;
assign arraypbhat7_din1 = 0;
assign arraypbhat7_ready= ready_initial | arraypbhat7_done;
assign arraypbhat7_done =    AESL_done_delay;


reg AESL_REG_cnt_ap_vld = 0;
// The signal of port cnt
reg [31: 0] AESL_REG_cnt = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_cnt = 0; 
    else if(cnt_ap_vld) begin
        AESL_REG_cnt <= cnt;
        AESL_REG_cnt_ap_vld <= 1;
    end
end 

initial begin : write_file_process_cnt
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer cnt_count;
    reg [143:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_cnt_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_cnt_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_cnt_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_cnt);
        AESL_REG_cnt_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


// The signal of port nR_M
reg [15: 0] AESL_REG_nR_M = 0;
assign nR_M = AESL_REG_nR_M;

// The signal of port etaIndexM_M
reg [15: 0] AESL_REG_etaIndexM_M = 0;
assign etaIndexM_M = AESL_REG_etaIndexM_M;

// The signal of port pCodeM
reg [15: 0] AESL_REG_pCodeM = 0;
assign pCodeM = AESL_REG_pCodeM;

// The signal of port pMaxIterations
reg [15: 0] AESL_REG_pMaxIterations = 0;
assign pMaxIterations = AESL_REG_pMaxIterations;
initial begin : read_file_process_pMaxIterations
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [143  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_pMaxIterations,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_pMaxIterations);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_pMaxIterations);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


reg AESL_REG_itt_num_ap_vld = 0;
// The signal of port itt_num
reg [7: 0] AESL_REG_itt_num = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_itt_num = 0; 
    else if(itt_num_ap_vld) begin
        AESL_REG_itt_num <= itt_num;
        AESL_REG_itt_num_ap_vld <= 1;
    end
end 

initial begin : write_file_process_itt_num
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer itt_num_count;
    reg [143:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_itt_num_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_itt_num_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_itt_num_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_itt_num);
        AESL_REG_itt_num_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


// The signal of port numbits
reg [15: 0] AESL_REG_numbits = 0;
assign numbits = AESL_REG_numbits;
initial begin : read_file_process_numbits
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [143  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_numbits,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_numbits);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_numbits);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port mux
reg [0: 0] AESL_REG_mux = 0;
assign mux = AESL_REG_mux;
initial begin : read_file_process_mux
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [143  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_mux,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_mux);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_mux);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 0);
    while(AESL_ready_cnt != AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

    event next_trigger_ready_cnt;
    
    initial begin : gen_ready_cnt
        ready_cnt = 0;
        wait (AESL_reset === 0);
        forever begin
            @ (posedge AESL_clock);
            if (ready == 1) begin
                if (ready_cnt < AUTOTB_TRANSACTION_NUM) begin
                    ready_cnt = ready_cnt + 1;
                end
            end
            -> next_trigger_ready_cnt;
        end
    end
    
    wire all_finish = (done_cnt == AUTOTB_TRANSACTION_NUM);
    
    // done_cnt
    always @ (posedge AESL_clock) begin
        if (AESL_reset) begin
            done_cnt <= 0;
        end else begin
            if (AESL_done == 1) begin
                if (done_cnt < AUTOTB_TRANSACTION_NUM) begin
                    done_cnt <= done_cnt + 1;
                end
            end
        end
    end
    
    initial begin : finish_simulation
        integer fp1;
        integer fp2;
        wait (all_finish == 1);
        // last transaction is saved at negedge right after last done
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
    fp1 = $fopen("./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat0.dat", "r");
    fp2 = $fopen("./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat0.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat0.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat0.dat\"!");
    else begin
        $display("Comparing rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat0.dat with impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat0.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
    fp1 = $fopen("./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat1.dat", "r");
    fp2 = $fopen("./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat1.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat1.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat1.dat\"!");
    else begin
        $display("Comparing rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat1.dat with impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat1.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
    fp1 = $fopen("./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat2.dat", "r");
    fp2 = $fopen("./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat2.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat2.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat2.dat\"!");
    else begin
        $display("Comparing rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat2.dat with impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat2.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
    fp1 = $fopen("./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat3.dat", "r");
    fp2 = $fopen("./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat3.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat3.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat3.dat\"!");
    else begin
        $display("Comparing rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat3.dat with impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat3.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
    fp1 = $fopen("./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat4.dat", "r");
    fp2 = $fopen("./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat4.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat4.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat4.dat\"!");
    else begin
        $display("Comparing rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat4.dat with impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat4.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
    fp1 = $fopen("./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat5.dat", "r");
    fp2 = $fopen("./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat5.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat5.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat5.dat\"!");
    else begin
        $display("Comparing rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat5.dat with impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat5.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
    fp1 = $fopen("./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat6.dat", "r");
    fp2 = $fopen("./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat6.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat6.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat6.dat\"!");
    else begin
        $display("Comparing rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat6.dat with impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat6.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
    fp1 = $fopen("./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat7.dat", "r");
    fp2 = $fopen("./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat7.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat7.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat7.dat\"!");
    else begin
        $display("Comparing rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat7.dat with impl_rtl.HLSLdpcLogDecScaledMin.autotvout_pbhat7.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
    fp1 = $fopen("./rtl.HLSLdpcLogDecScaledMin.autotvout_cnt.dat", "r");
    fp2 = $fopen("./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_cnt.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.HLSLdpcLogDecScaledMin.autotvout_cnt.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_cnt.dat\"!");
    else begin
        $display("Comparing rtl.HLSLdpcLogDecScaledMin.autotvout_cnt.dat with impl_rtl.HLSLdpcLogDecScaledMin.autotvout_cnt.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
    fp1 = $fopen("./rtl.HLSLdpcLogDecScaledMin.autotvout_itt_num.dat", "r");
    fp2 = $fopen("./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_itt_num.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.HLSLdpcLogDecScaledMin.autotvout_itt_num.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.HLSLdpcLogDecScaledMin.autotvout_itt_num.dat\"!");
    else begin
        $display("Comparing rtl.HLSLdpcLogDecScaledMin.autotvout_itt_num.dat with impl_rtl.HLSLdpcLogDecScaledMin.autotvout_itt_num.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
        $display("Simulation Passed.");
        $finish;
    end
    
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_pR;
reg [31:0] size_pR;
reg [31:0] size_pR_backup;
reg end_pR1;
reg [31:0] size_pR1;
reg [31:0] size_pR1_backup;
reg end_pR2;
reg [31:0] size_pR2;
reg [31:0] size_pR2_backup;
reg end_pR3;
reg [31:0] size_pR3;
reg [31:0] size_pR3_backup;
reg end_pR4;
reg [31:0] size_pR4;
reg [31:0] size_pR4_backup;
reg end_pR5;
reg [31:0] size_pR5;
reg [31:0] size_pR5_backup;
reg end_pR6;
reg [31:0] size_pR6;
reg [31:0] size_pR6_backup;
reg end_pR7;
reg [31:0] size_pR7;
reg [31:0] size_pR7_backup;
reg end_pR8;
reg [31:0] size_pR8;
reg [31:0] size_pR8_backup;
reg end_pR9;
reg [31:0] size_pR9;
reg [31:0] size_pR9_backup;
reg end_pbhat0;
reg [31:0] size_pbhat0;
reg [31:0] size_pbhat0_backup;
reg end_pbhat1;
reg [31:0] size_pbhat1;
reg [31:0] size_pbhat1_backup;
reg end_pbhat2;
reg [31:0] size_pbhat2;
reg [31:0] size_pbhat2_backup;
reg end_pbhat3;
reg [31:0] size_pbhat3;
reg [31:0] size_pbhat3_backup;
reg end_pbhat4;
reg [31:0] size_pbhat4;
reg [31:0] size_pbhat4_backup;
reg end_pbhat5;
reg [31:0] size_pbhat5;
reg [31:0] size_pbhat5_backup;
reg end_pbhat6;
reg [31:0] size_pbhat6;
reg [31:0] size_pbhat6_backup;
reg end_pbhat7;
reg [31:0] size_pbhat7;
reg [31:0] size_pbhat7_backup;
reg end_pMaxIterations;
reg [31:0] size_pMaxIterations;
reg [31:0] size_pMaxIterations_backup;
reg end_numbits;
reg [31:0] size_numbits;
reg [31:0] size_numbits_backup;
reg end_mux;
reg [31:0] size_mux;
reg [31:0] size_mux_backup;
reg end_cnt;
reg [31:0] size_cnt;
reg [31:0] size_cnt_backup;
reg end_itt_num;
reg [31:0] size_itt_num;
reg [31:0] size_itt_num_backup;

initial begin : initial_process
    integer proc_rand;
    rst = 1;
    # 100;
    repeat(3) @ (posedge AESL_clock);
    rst = 0;
end
initial begin : start_process
    integer proc_rand;
    reg [31:0] start_cnt;
    ce = 1;
    start = 0;
    start_cnt = 0;
    wait (AESL_reset === 0);
    @ (posedge AESL_clock);
    #0 start = 1;
    start_cnt = start_cnt + 1;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt >= AUTOTB_TRANSACTION_NUM) begin
            // keep pushing garbage in
            #0 start = 1;
        end
        if (AESL_ready) begin
            start_cnt = start_cnt + 1;
        end
    end
end

always @(AESL_done)
begin
    tb_continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end

reg dump_tvout_finish_pbhat0;

initial begin : dump_tvout_runtime_sign_pbhat0
    integer fp;
    dump_tvout_finish_pbhat0 = 0;
    fp = $fopen(`AUTOTB_TVOUT_pbhat0_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat0_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_pbhat0_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat0_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_pbhat0 = 1;
end


reg dump_tvout_finish_pbhat1;

initial begin : dump_tvout_runtime_sign_pbhat1
    integer fp;
    dump_tvout_finish_pbhat1 = 0;
    fp = $fopen(`AUTOTB_TVOUT_pbhat1_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat1_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_pbhat1_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat1_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_pbhat1 = 1;
end


reg dump_tvout_finish_pbhat2;

initial begin : dump_tvout_runtime_sign_pbhat2
    integer fp;
    dump_tvout_finish_pbhat2 = 0;
    fp = $fopen(`AUTOTB_TVOUT_pbhat2_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat2_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_pbhat2_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat2_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_pbhat2 = 1;
end


reg dump_tvout_finish_pbhat3;

initial begin : dump_tvout_runtime_sign_pbhat3
    integer fp;
    dump_tvout_finish_pbhat3 = 0;
    fp = $fopen(`AUTOTB_TVOUT_pbhat3_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat3_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_pbhat3_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat3_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_pbhat3 = 1;
end


reg dump_tvout_finish_pbhat4;

initial begin : dump_tvout_runtime_sign_pbhat4
    integer fp;
    dump_tvout_finish_pbhat4 = 0;
    fp = $fopen(`AUTOTB_TVOUT_pbhat4_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat4_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_pbhat4_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat4_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_pbhat4 = 1;
end


reg dump_tvout_finish_pbhat5;

initial begin : dump_tvout_runtime_sign_pbhat5
    integer fp;
    dump_tvout_finish_pbhat5 = 0;
    fp = $fopen(`AUTOTB_TVOUT_pbhat5_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat5_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_pbhat5_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat5_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_pbhat5 = 1;
end


reg dump_tvout_finish_pbhat6;

initial begin : dump_tvout_runtime_sign_pbhat6
    integer fp;
    dump_tvout_finish_pbhat6 = 0;
    fp = $fopen(`AUTOTB_TVOUT_pbhat6_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat6_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_pbhat6_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat6_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_pbhat6 = 1;
end


reg dump_tvout_finish_pbhat7;

initial begin : dump_tvout_runtime_sign_pbhat7
    integer fp;
    dump_tvout_finish_pbhat7 = 0;
    fp = $fopen(`AUTOTB_TVOUT_pbhat7_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat7_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_pbhat7_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_pbhat7_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_pbhat7 = 1;
end


////////////////////////////////////////////
// progress and performance
////////////////////////////////////////////

task wait_start();
    while (~AESL_start) begin
        @ (posedge AESL_clock);
    end
endtask

reg [31:0] clk_cnt = 0;
reg AESL_ready_p1;

always @ (posedge AESL_clock) begin
    clk_cnt <= clk_cnt + 1;
    AESL_ready_p1 <= AESL_ready;
end

reg [31:0] start_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] start_cnt;
reg [31:0] finish_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] finish_cnt;
event report_progress;

initial begin
    start_cnt = 0;
    finish_cnt = 0;
    wait (AESL_reset == 0);
    wait_start();
    start_timestamp[start_cnt] = clk_cnt;
    start_cnt = start_cnt + 1;
    if (AESL_done) begin
        finish_timestamp[finish_cnt] = clk_cnt;
        finish_cnt = finish_cnt + 1;
    end
    -> report_progress;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_start && AESL_ready_p1) begin
                start_timestamp[start_cnt] = clk_cnt;
                start_cnt = start_cnt + 1;
            end
        end
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                finish_timestamp[finish_cnt] = clk_cnt;
                finish_cnt = finish_cnt + 1;
            end
        end
        -> report_progress;
    end
end

reg [31:0] progress_timeout;

initial begin : simulation_progress
    real intra_progress;
    wait (AESL_reset == 0);
    progress_timeout = PROGRESS_TIMEOUT;
    $display("////////////////////////////////////////////////////////////////////////////////////");
    $display("// Inter-Transaction Progress: Completed Transaction / Total Transaction");
    $display("// Intra-Transaction Progress: Measured Latency / Latency Estimation * 100%%");
    $display("//");
    $display("// RTL Simulation : \"Inter-Transaction Progress\" [\"Intra-Transaction Progress\"] @ \"Simulation Time\"");
    $display("////////////////////////////////////////////////////////////////////////////////////");
    print_progress();
    while (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
        @ (report_progress);
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                print_progress();
                progress_timeout = PROGRESS_TIMEOUT;
            end else begin
                if (progress_timeout == 0) begin
                    print_progress();
                    progress_timeout = PROGRESS_TIMEOUT;
                end else begin
                    progress_timeout = progress_timeout - 1;
                end
            end
        end
    end
    print_progress();
    $display("////////////////////////////////////////////////////////////////////////////////////");
    calculate_performance();
end

task get_intra_progress(output real intra_progress);
    begin
        if (start_cnt > finish_cnt) begin
            intra_progress = clk_cnt - start_timestamp[finish_cnt];
        end else begin
            intra_progress = 0;
        end
        intra_progress = intra_progress / LATENCY_ESTIMATION;
    end
endtask

task print_progress();
    real intra_progress;
    begin
        if (LATENCY_ESTIMATION > 0) begin
            get_intra_progress(intra_progress);
            $display("// RTL Simulation : %0d / %0d [%2.2f%%] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, intra_progress * 100, $time);
        end else begin
            $display("// RTL Simulation : %0d / %0d [n/a] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, $time);
        end
    end
endtask

task calculate_performance();
    integer i;
    integer fp;
    reg [31:0] latency [0:AUTOTB_TRANSACTION_NUM - 1];
    reg [31:0] latency_min;
    reg [31:0] latency_max;
    reg [31:0] latency_total;
    reg [31:0] latency_average;
    reg [31:0] interval [0:AUTOTB_TRANSACTION_NUM - 2];
    reg [31:0] interval_min;
    reg [31:0] interval_max;
    reg [31:0] interval_total;
    reg [31:0] interval_average;
    begin
        latency_min = -1;
        latency_max = 0;
        latency_total = 0;
        interval_min = -1;
        interval_max = 0;
        interval_total = 0;

        for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
            // calculate latency
            latency[i] = finish_timestamp[i] - start_timestamp[i];
            if (latency[i] > latency_max) latency_max = latency[i];
            if (latency[i] < latency_min) latency_min = latency[i];
            latency_total = latency_total + latency[i];
            // calculate interval
            if (AUTOTB_TRANSACTION_NUM == 1) begin
                interval[i] = 0;
                interval_max = 0;
                interval_min = 0;
                interval_total = 0;
            end else if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                interval[i] = start_timestamp[i + 1] - start_timestamp[i];
                if (interval[i] > interval_max) interval_max = interval[i];
                if (interval[i] < interval_min) interval_min = interval[i];
                interval_total = interval_total + interval[i];
            end
        end

        latency_average = latency_total / AUTOTB_TRANSACTION_NUM;
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            interval_average = 0;
        end else begin
            interval_average = interval_total / (AUTOTB_TRANSACTION_NUM - 1);
        end

        fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

        $fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latency_max);
        $fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latency_min);
        $fdisplay(fp, "$AVER_LATENCY = \"%0d\"", latency_average);
        $fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", interval_max);
        $fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", interval_min);
        $fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", interval_average);

        $fclose(fp);

        fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");

        $fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            i = 0;
            $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
        end else begin
            for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
                if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                    $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
                end else begin
                    $fdisplay(fp, "transaction%8d:%16d               x", i, latency[i]);
                end
            end
        end

        $fclose(fp);
    end
endtask


////////////////////////////////////////////
// Dependence Check
////////////////////////////////////////////

`ifndef POST_SYN

`endif

endmodule
