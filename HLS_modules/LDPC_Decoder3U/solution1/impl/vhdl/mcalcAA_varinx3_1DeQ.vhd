-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx3_1DeQ_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx3_1DeQ_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "110000100000000000000", 1 => "110001000000010000001", 
    2 => "110001100000100000010", 3 => "110010000000110000011", 
    4 => "110010100001000000100", 5 => "110011000001010000101", 
    6 => "110011100001100000110", 7 => "110100000001110000111", 
    8 => "110100100010000001000", 9 => "110101000010010001001", 
    10 => "110101100010100001010", 11 => "110110000010110001011", 
    12 => "110110100011000001100", 13 => "110111000011010001101", 
    14 => "110111100011100001110", 15 => "111000000011110001111", 
    16 => "111000100100000010000", 17 => "111001000100010010001", 
    18 => "111001100100100010010", 19 => "111010000100110010011", 
    20 => "111010100101000010100", 21 => "111011000101010010101", 
    22 => "111011100101100010110", 23 => "111100000101110010111", 
    24 => "111100100110000011000", 25 => "111101000110010011001", 
    26 => "111101100110100011010", 27 => "111110000110110011011", 
    28 => "111110100111000011100", 29 => "111111000111010011101", 
    30 => "111111100111100011110", 31 => "110000000111110011111", 
    32 => "010000000000000100000", 33 => "010000100000010100001", 
    34 => "010001000000100100010", 35 => "010001100000110100011", 
    36 => "010010000001000100100", 37 => "010010100001010100101", 
    38 => "010011000001100100110", 39 => "010011100001110100111", 
    40 => "010100000010000101000", 41 => "010100100010010101001", 
    42 => "010101000010100101010", 43 => "010101100010110101011", 
    44 => "010110000011000101100", 45 => "010110100011010101101", 
    46 => "010111000011100101110", 47 => "010111100011110101111", 
    48 => "011000000100000110000", 49 => "011000100100010110001", 
    50 => "011001000100100110010", 51 => "011001100100110110011", 
    52 => "011010000101000110100", 53 => "011010100101010110101", 
    54 => "011011000101100110110", 55 => "011011100101110110111", 
    56 => "011100000110000111000", 57 => "011100100110010111001", 
    58 => "011101000110100111010", 59 => "011101100110110111011", 
    60 => "011110000111000111100", 61 => "011110100111010111101", 
    62 => "011111000111100111110", 63 => "011111100111110111111", 
    64 => "100000001000001000000", 65 => "100000101000011000001", 
    66 => "100001001000101000010", 67 => "100001101000111000011", 
    68 => "100010001001001000100", 69 => "100010101001011000101", 
    70 => "100011001001101000110", 71 => "100011101001111000111", 
    72 => "100100001010001001000", 73 => "100100101010011001001", 
    74 => "100101001010101001010", 75 => "100101101010111001011", 
    76 => "100110001011001001100", 77 => "100110101011011001101", 
    78 => "100111001011101001110", 79 => "100111101011111001111", 
    80 => "101000001100001010000", 81 => "101000101100011010001", 
    82 => "101001001100101010010", 83 => "101001101100111010011", 
    84 => "101010001101001010100", 85 => "101010101101011010101", 
    86 => "101011001101101010110", 87 => "101011101101111010111", 
    88 => "101100001110001011000", 89 => "101100101110011011001", 
    90 => "101101001110101011010", 91 => "101101101110111011011", 
    92 => "101110001111001011100", 93 => "101110101111011011101", 
    94 => "101111001111101011110", 95 => "101111101111111011111", 
    96 => "110000010000001100000", 97 => "110000110000011100001", 
    98 => "110001010000101100010", 99 => "110001110000111100011", 
    100 => "110010010001001100100", 101 => "110010110001011100101", 
    102 => "110011010001101100110", 103 => "110011110001111100111", 
    104 => "110100010010001101000", 105 => "110100110010011101001", 
    106 => "110101010010101101010", 107 => "110101110010111101011", 
    108 => "110110010011001101100", 109 => "110110110011011101101", 
    110 => "110111010011101101110", 111 => "110111110011111101111", 
    112 => "111000010100001110000", 113 => "111000110100011110001", 
    114 => "111001010100101110010", 115 => "111001110100111110011", 
    116 => "111010010101001110100", 117 => "111010110101011110101", 
    118 => "111011010101101110110", 119 => "111011110101111110111", 
    120 => "111100010110001111000", 121 => "111100110110011111001", 
    122 => "111101010110101111010", 123 => "111101110110111111011", 
    124 => "111110010111001111100", 125 => "111110110111011111101", 
    126 => "111111010111101111110", 127 => "111111110111111111111", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx3_1DeQ is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx3_1DeQ is
    component mcalcAA_varinx3_1DeQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx3_1DeQ_rom_U :  component mcalcAA_varinx3_1DeQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


