-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity setup_calc_23 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m : IN STD_LOGIC_VECTOR (15 downto 0);
    mA : IN STD_LOGIC_VECTOR (15 downto 0);
    mB : IN STD_LOGIC_VECTOR (15 downto 0);
    inxtab_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    inxtab_0_ap_vld : OUT STD_LOGIC;
    inxtab_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    inxtab_1_ap_vld : OUT STD_LOGIC;
    inxtab_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    inxtab_2_ap_vld : OUT STD_LOGIC;
    numb : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_buf4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_buf4_ce0 : OUT STD_LOGIC;
    Lam_buf4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_buf4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_buf4_ce1 : OUT STD_LOGIC;
    Lam_buf4_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_buf6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_buf6_ce0 : OUT STD_LOGIC;
    Lam_buf6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_buf6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_buf6_ce1 : OUT STD_LOGIC;
    Lam_buf6_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_buf6a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_buf6a_ce0 : OUT STD_LOGIC;
    Lam_buf6a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_buf6a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_buf6a_ce1 : OUT STD_LOGIC;
    Lam_buf6a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    SpEtaPrev_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    SpEtaPrev_ce0 : OUT STD_LOGIC;
    SpEtaPrev_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SpEtaPrevC_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    SpEtaPrevC_ce0 : OUT STD_LOGIC;
    SpEtaPrevC_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Lam_bufAa_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufAa_ce0 : OUT STD_LOGIC;
    Lam_bufAa_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufAa_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufAa_ce1 : OUT STD_LOGIC;
    Lam_bufAa_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufAb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufAb_ce0 : OUT STD_LOGIC;
    Lam_bufAb_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufAb_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufAb_ce1 : OUT STD_LOGIC;
    Lam_bufAb_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufAc_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufAc_ce0 : OUT STD_LOGIC;
    Lam_bufAc_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufAc_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufAc_ce1 : OUT STD_LOGIC;
    Lam_bufAc_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA1_ce0 : OUT STD_LOGIC;
    Lam_bufA1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA1_ce1 : OUT STD_LOGIC;
    Lam_bufA1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA2a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA2a_ce0 : OUT STD_LOGIC;
    Lam_bufA2a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA2a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA2a_ce1 : OUT STD_LOGIC;
    Lam_bufA2a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA3_ce0 : OUT STD_LOGIC;
    Lam_bufA3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA3_ce1 : OUT STD_LOGIC;
    Lam_bufA3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA5_ce0 : OUT STD_LOGIC;
    Lam_bufA5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA5_ce1 : OUT STD_LOGIC;
    Lam_bufA5_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA6b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA6b_ce0 : OUT STD_LOGIC;
    Lam_bufA6b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA6b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA6b_ce1 : OUT STD_LOGIC;
    Lam_bufA6b_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA6c_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA6c_ce0 : OUT STD_LOGIC;
    Lam_bufA6c_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA6c_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA6c_ce1 : OUT STD_LOGIC;
    Lam_bufA6c_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufA6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufA6_ce0 : OUT STD_LOGIC;
    Lam_bufA6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SpEtaPrevA_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    SpEtaPrevA_ce0 : OUT STD_LOGIC;
    SpEtaPrevA_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SpEtaPrevAa_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    SpEtaPrevAa_ce0 : OUT STD_LOGIC;
    SpEtaPrevAa_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SpEtaPrevAb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    SpEtaPrevAb_ce0 : OUT STD_LOGIC;
    SpEtaPrevAb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SpEtaPrevD_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    SpEtaPrevD_ce0 : OUT STD_LOGIC;
    SpEtaPrevD_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SpEtaPrevDa_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    SpEtaPrevDa_ce0 : OUT STD_LOGIC;
    SpEtaPrevDa_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SpEtaPrevDb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    SpEtaPrevDb_ce0 : OUT STD_LOGIC;
    SpEtaPrevDb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Lam_bufB_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB_ce0 : OUT STD_LOGIC;
    Lam_bufB_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB_ce1 : OUT STD_LOGIC;
    Lam_bufB_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB1a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB1a_ce0 : OUT STD_LOGIC;
    Lam_bufB1a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB1a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB1a_ce1 : OUT STD_LOGIC;
    Lam_bufB1a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB1b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB1b_ce0 : OUT STD_LOGIC;
    Lam_bufB1b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB1b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB1b_ce1 : OUT STD_LOGIC;
    Lam_bufB1b_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB1c_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB1c_ce0 : OUT STD_LOGIC;
    Lam_bufB1c_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB1c_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB1c_ce1 : OUT STD_LOGIC;
    Lam_bufB1c_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB2_ce0 : OUT STD_LOGIC;
    Lam_bufB2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB2_ce1 : OUT STD_LOGIC;
    Lam_bufB2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB3a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB3a_ce0 : OUT STD_LOGIC;
    Lam_bufB3a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB3a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB3a_ce1 : OUT STD_LOGIC;
    Lam_bufB3a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB3b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB3b_ce0 : OUT STD_LOGIC;
    Lam_bufB3b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB3b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB3b_ce1 : OUT STD_LOGIC;
    Lam_bufB3b_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB5a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB5a_ce0 : OUT STD_LOGIC;
    Lam_bufB5a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB5a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB5a_ce1 : OUT STD_LOGIC;
    Lam_bufB5a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB5b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB5b_ce0 : OUT STD_LOGIC;
    Lam_bufB5b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB5b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB5b_ce1 : OUT STD_LOGIC;
    Lam_bufB5b_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB6_ce0 : OUT STD_LOGIC;
    Lam_bufB6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Lam_bufB6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Lam_bufB6_ce1 : OUT STD_LOGIC;
    Lam_bufB6_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    SpEtaPrevB_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    SpEtaPrevB_ce0 : OUT STD_LOGIC;
    SpEtaPrevB_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SpEtaPrevBa_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    SpEtaPrevBa_ce0 : OUT STD_LOGIC;
    SpEtaPrevBa_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SpEtaPrevBb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    SpEtaPrevBb_ce0 : OUT STD_LOGIC;
    SpEtaPrevBb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SpEtaPrevE_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    SpEtaPrevE_ce0 : OUT STD_LOGIC;
    SpEtaPrevE_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    SpEtaPrevEa_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    SpEtaPrevEa_ce0 : OUT STD_LOGIC;
    SpEtaPrevEa_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SpEtaPrevEb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    SpEtaPrevEb_ce0 : OUT STD_LOGIC;
    SpEtaPrevEb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    nIterationCounter : IN STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabx_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabx_0_ap_vld : OUT STD_LOGIC;
    Eta_tabx_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabx_1_ap_vld : OUT STD_LOGIC;
    Eta_tabx_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabx_2_ap_vld : OUT STD_LOGIC;
    Lam_tabx_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabx_0_ap_vld : OUT STD_LOGIC;
    Lam_tabx_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabx_1_ap_vld : OUT STD_LOGIC;
    Lam_tabx_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabx_2_ap_vld : OUT STD_LOGIC;
    Peta_tabx_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabx_0_ap_vld : OUT STD_LOGIC;
    Peta_tabx_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabx_1_ap_vld : OUT STD_LOGIC;
    Peta_tabx_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabx_2_ap_vld : OUT STD_LOGIC;
    Eta_taby_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_taby_0_ap_vld : OUT STD_LOGIC;
    Eta_taby_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_taby_1_ap_vld : OUT STD_LOGIC;
    Eta_taby_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_taby_2_ap_vld : OUT STD_LOGIC;
    Eta_taby_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_taby_3_ap_vld : OUT STD_LOGIC;
    Eta_taby_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_taby_4_ap_vld : OUT STD_LOGIC;
    Eta_taby_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_taby_5_ap_vld : OUT STD_LOGIC;
    Eta_taby_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_taby_6_ap_vld : OUT STD_LOGIC;
    Eta_taby_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_taby_7_ap_vld : OUT STD_LOGIC;
    Eta_taby_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_taby_8_ap_vld : OUT STD_LOGIC;
    Eta_taby_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_taby_9_ap_vld : OUT STD_LOGIC;
    Lam_taby_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_0_ap_vld : OUT STD_LOGIC;
    Lam_taby_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_1_ap_vld : OUT STD_LOGIC;
    Lam_taby_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_2_ap_vld : OUT STD_LOGIC;
    Lam_taby_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_3_ap_vld : OUT STD_LOGIC;
    Lam_taby_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_4_ap_vld : OUT STD_LOGIC;
    Lam_taby_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_5_ap_vld : OUT STD_LOGIC;
    Lam_taby_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_6_ap_vld : OUT STD_LOGIC;
    Lam_taby_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_7_ap_vld : OUT STD_LOGIC;
    Lam_taby_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_8_ap_vld : OUT STD_LOGIC;
    Lam_taby_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_9_ap_vld : OUT STD_LOGIC;
    Lam_taby_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_10_ap_vld : OUT STD_LOGIC;
    Lam_taby_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_11_ap_vld : OUT STD_LOGIC;
    Lam_taby_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_12_ap_vld : OUT STD_LOGIC;
    Lam_taby_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_13_ap_vld : OUT STD_LOGIC;
    Lam_taby_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_14_ap_vld : OUT STD_LOGIC;
    Lam_taby_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_15_ap_vld : OUT STD_LOGIC;
    Lam_taby_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_16_ap_vld : OUT STD_LOGIC;
    Lam_taby_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_taby_17_ap_vld : OUT STD_LOGIC;
    Peta_taby_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_0_ap_vld : OUT STD_LOGIC;
    Peta_taby_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_1_ap_vld : OUT STD_LOGIC;
    Peta_taby_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_2_ap_vld : OUT STD_LOGIC;
    Peta_taby_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_3_ap_vld : OUT STD_LOGIC;
    Peta_taby_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_4_ap_vld : OUT STD_LOGIC;
    Peta_taby_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_5_ap_vld : OUT STD_LOGIC;
    Peta_taby_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_6_ap_vld : OUT STD_LOGIC;
    Peta_taby_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_7_ap_vld : OUT STD_LOGIC;
    Peta_taby_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_8_ap_vld : OUT STD_LOGIC;
    Peta_taby_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_9_ap_vld : OUT STD_LOGIC;
    Peta_taby_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_10_ap_vld : OUT STD_LOGIC;
    Peta_taby_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_11_ap_vld : OUT STD_LOGIC;
    Peta_taby_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_12_ap_vld : OUT STD_LOGIC;
    Peta_taby_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_13_ap_vld : OUT STD_LOGIC;
    Peta_taby_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_14_ap_vld : OUT STD_LOGIC;
    Peta_taby_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_15_ap_vld : OUT STD_LOGIC;
    Peta_taby_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_16_ap_vld : OUT STD_LOGIC;
    Peta_taby_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_taby_17_ap_vld : OUT STD_LOGIC;
    Eta_tabz_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabz_0_ap_vld : OUT STD_LOGIC;
    Eta_tabz_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabz_1_ap_vld : OUT STD_LOGIC;
    Eta_tabz_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabz_2_ap_vld : OUT STD_LOGIC;
    Eta_tabz_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabz_3_ap_vld : OUT STD_LOGIC;
    Eta_tabz_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabz_4_ap_vld : OUT STD_LOGIC;
    Eta_tabz_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabz_5_ap_vld : OUT STD_LOGIC;
    Eta_tabz_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabz_6_ap_vld : OUT STD_LOGIC;
    Eta_tabz_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabz_7_ap_vld : OUT STD_LOGIC;
    Eta_tabz_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabz_8_ap_vld : OUT STD_LOGIC;
    Eta_tabz_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabz_9_ap_vld : OUT STD_LOGIC;
    Lam_tabz_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_0_ap_vld : OUT STD_LOGIC;
    Lam_tabz_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_1_ap_vld : OUT STD_LOGIC;
    Lam_tabz_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_2_ap_vld : OUT STD_LOGIC;
    Lam_tabz_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_3_ap_vld : OUT STD_LOGIC;
    Lam_tabz_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_4_ap_vld : OUT STD_LOGIC;
    Lam_tabz_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_5_ap_vld : OUT STD_LOGIC;
    Lam_tabz_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_6_ap_vld : OUT STD_LOGIC;
    Lam_tabz_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_7_ap_vld : OUT STD_LOGIC;
    Lam_tabz_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_8_ap_vld : OUT STD_LOGIC;
    Lam_tabz_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_9_ap_vld : OUT STD_LOGIC;
    Lam_tabz_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_10_ap_vld : OUT STD_LOGIC;
    Lam_tabz_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_11_ap_vld : OUT STD_LOGIC;
    Lam_tabz_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_12_ap_vld : OUT STD_LOGIC;
    Lam_tabz_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_13_ap_vld : OUT STD_LOGIC;
    Lam_tabz_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_14_ap_vld : OUT STD_LOGIC;
    Lam_tabz_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_15_ap_vld : OUT STD_LOGIC;
    Lam_tabz_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_16_ap_vld : OUT STD_LOGIC;
    Lam_tabz_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabz_17_ap_vld : OUT STD_LOGIC;
    Peta_tabz_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_0_ap_vld : OUT STD_LOGIC;
    Peta_tabz_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_1_ap_vld : OUT STD_LOGIC;
    Peta_tabz_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_2_ap_vld : OUT STD_LOGIC;
    Peta_tabz_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_3_ap_vld : OUT STD_LOGIC;
    Peta_tabz_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_4_ap_vld : OUT STD_LOGIC;
    Peta_tabz_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_5_ap_vld : OUT STD_LOGIC;
    Peta_tabz_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_6_ap_vld : OUT STD_LOGIC;
    Peta_tabz_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_7_ap_vld : OUT STD_LOGIC;
    Peta_tabz_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_8_ap_vld : OUT STD_LOGIC;
    Peta_tabz_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_9_ap_vld : OUT STD_LOGIC;
    Peta_tabz_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_10_ap_vld : OUT STD_LOGIC;
    Peta_tabz_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_11_ap_vld : OUT STD_LOGIC;
    Peta_tabz_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_12_ap_vld : OUT STD_LOGIC;
    Peta_tabz_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_13_ap_vld : OUT STD_LOGIC;
    Peta_tabz_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_14_ap_vld : OUT STD_LOGIC;
    Peta_tabz_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_15_ap_vld : OUT STD_LOGIC;
    Peta_tabz_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_16_ap_vld : OUT STD_LOGIC;
    Peta_tabz_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabz_17_ap_vld : OUT STD_LOGIC;
    Eta_tabe_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabe_0_ap_vld : OUT STD_LOGIC;
    Eta_tabe_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabe_1_ap_vld : OUT STD_LOGIC;
    Eta_tabe_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabe_2_ap_vld : OUT STD_LOGIC;
    Lam_tabe_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabe_0_ap_vld : OUT STD_LOGIC;
    Lam_tabe_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabe_1_ap_vld : OUT STD_LOGIC;
    Lam_tabe_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabe_2_ap_vld : OUT STD_LOGIC;
    Peta_tabe_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabe_0_ap_vld : OUT STD_LOGIC;
    Peta_tabe_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabe_1_ap_vld : OUT STD_LOGIC;
    Peta_tabe_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabe_2_ap_vld : OUT STD_LOGIC;
    Eta_tabf_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabf_0_ap_vld : OUT STD_LOGIC;
    Eta_tabf_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabf_1_ap_vld : OUT STD_LOGIC;
    Eta_tabf_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabf_2_ap_vld : OUT STD_LOGIC;
    Eta_tabf_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabf_3_ap_vld : OUT STD_LOGIC;
    Eta_tabf_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabf_4_ap_vld : OUT STD_LOGIC;
    Eta_tabf_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabf_5_ap_vld : OUT STD_LOGIC;
    Eta_tabf_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabf_6_ap_vld : OUT STD_LOGIC;
    Eta_tabf_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabf_7_ap_vld : OUT STD_LOGIC;
    Eta_tabf_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabf_8_ap_vld : OUT STD_LOGIC;
    Eta_tabf_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabf_9_ap_vld : OUT STD_LOGIC;
    Lam_tabf_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_0_ap_vld : OUT STD_LOGIC;
    Lam_tabf_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_1_ap_vld : OUT STD_LOGIC;
    Lam_tabf_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_2_ap_vld : OUT STD_LOGIC;
    Lam_tabf_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_3_ap_vld : OUT STD_LOGIC;
    Lam_tabf_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_4_ap_vld : OUT STD_LOGIC;
    Lam_tabf_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_5_ap_vld : OUT STD_LOGIC;
    Lam_tabf_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_6_ap_vld : OUT STD_LOGIC;
    Lam_tabf_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_7_ap_vld : OUT STD_LOGIC;
    Lam_tabf_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_8_ap_vld : OUT STD_LOGIC;
    Lam_tabf_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_9_ap_vld : OUT STD_LOGIC;
    Lam_tabf_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_10_ap_vld : OUT STD_LOGIC;
    Lam_tabf_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_11_ap_vld : OUT STD_LOGIC;
    Lam_tabf_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_12_ap_vld : OUT STD_LOGIC;
    Lam_tabf_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_13_ap_vld : OUT STD_LOGIC;
    Lam_tabf_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_14_ap_vld : OUT STD_LOGIC;
    Lam_tabf_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_15_ap_vld : OUT STD_LOGIC;
    Lam_tabf_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_16_ap_vld : OUT STD_LOGIC;
    Lam_tabf_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabf_17_ap_vld : OUT STD_LOGIC;
    Peta_tabf_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_0_ap_vld : OUT STD_LOGIC;
    Peta_tabf_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_1_ap_vld : OUT STD_LOGIC;
    Peta_tabf_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_2_ap_vld : OUT STD_LOGIC;
    Peta_tabf_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_3_ap_vld : OUT STD_LOGIC;
    Peta_tabf_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_4_ap_vld : OUT STD_LOGIC;
    Peta_tabf_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_5_ap_vld : OUT STD_LOGIC;
    Peta_tabf_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_6_ap_vld : OUT STD_LOGIC;
    Peta_tabf_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_7_ap_vld : OUT STD_LOGIC;
    Peta_tabf_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_8_ap_vld : OUT STD_LOGIC;
    Peta_tabf_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_9_ap_vld : OUT STD_LOGIC;
    Peta_tabf_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_10_ap_vld : OUT STD_LOGIC;
    Peta_tabf_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_11_ap_vld : OUT STD_LOGIC;
    Peta_tabf_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_12_ap_vld : OUT STD_LOGIC;
    Peta_tabf_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_13_ap_vld : OUT STD_LOGIC;
    Peta_tabf_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_14_ap_vld : OUT STD_LOGIC;
    Peta_tabf_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_15_ap_vld : OUT STD_LOGIC;
    Peta_tabf_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_16_ap_vld : OUT STD_LOGIC;
    Peta_tabf_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabf_17_ap_vld : OUT STD_LOGIC;
    Eta_tabg_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabg_0_ap_vld : OUT STD_LOGIC;
    Eta_tabg_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabg_1_ap_vld : OUT STD_LOGIC;
    Eta_tabg_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabg_2_ap_vld : OUT STD_LOGIC;
    Eta_tabg_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabg_3_ap_vld : OUT STD_LOGIC;
    Eta_tabg_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabg_4_ap_vld : OUT STD_LOGIC;
    Eta_tabg_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabg_5_ap_vld : OUT STD_LOGIC;
    Eta_tabg_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabg_6_ap_vld : OUT STD_LOGIC;
    Eta_tabg_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabg_7_ap_vld : OUT STD_LOGIC;
    Eta_tabg_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabg_8_ap_vld : OUT STD_LOGIC;
    Eta_tabg_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Eta_tabg_9_ap_vld : OUT STD_LOGIC;
    Lam_tabg_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_0_ap_vld : OUT STD_LOGIC;
    Lam_tabg_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_1_ap_vld : OUT STD_LOGIC;
    Lam_tabg_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_2_ap_vld : OUT STD_LOGIC;
    Lam_tabg_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_3_ap_vld : OUT STD_LOGIC;
    Lam_tabg_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_4_ap_vld : OUT STD_LOGIC;
    Lam_tabg_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_5_ap_vld : OUT STD_LOGIC;
    Lam_tabg_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_6_ap_vld : OUT STD_LOGIC;
    Lam_tabg_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_7_ap_vld : OUT STD_LOGIC;
    Lam_tabg_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_8_ap_vld : OUT STD_LOGIC;
    Lam_tabg_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_9_ap_vld : OUT STD_LOGIC;
    Lam_tabg_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_10_ap_vld : OUT STD_LOGIC;
    Lam_tabg_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_11_ap_vld : OUT STD_LOGIC;
    Lam_tabg_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_12_ap_vld : OUT STD_LOGIC;
    Lam_tabg_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_13_ap_vld : OUT STD_LOGIC;
    Lam_tabg_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_14_ap_vld : OUT STD_LOGIC;
    Lam_tabg_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_15_ap_vld : OUT STD_LOGIC;
    Lam_tabg_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_16_ap_vld : OUT STD_LOGIC;
    Lam_tabg_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Lam_tabg_17_ap_vld : OUT STD_LOGIC;
    Peta_tabg_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_0_ap_vld : OUT STD_LOGIC;
    Peta_tabg_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_1_ap_vld : OUT STD_LOGIC;
    Peta_tabg_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_2_ap_vld : OUT STD_LOGIC;
    Peta_tabg_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_3_ap_vld : OUT STD_LOGIC;
    Peta_tabg_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_4_ap_vld : OUT STD_LOGIC;
    Peta_tabg_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_5_ap_vld : OUT STD_LOGIC;
    Peta_tabg_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_6_ap_vld : OUT STD_LOGIC;
    Peta_tabg_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_7_ap_vld : OUT STD_LOGIC;
    Peta_tabg_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_8_ap_vld : OUT STD_LOGIC;
    Peta_tabg_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_9_ap_vld : OUT STD_LOGIC;
    Peta_tabg_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_10_ap_vld : OUT STD_LOGIC;
    Peta_tabg_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_11_ap_vld : OUT STD_LOGIC;
    Peta_tabg_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_12_ap_vld : OUT STD_LOGIC;
    Peta_tabg_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_13_ap_vld : OUT STD_LOGIC;
    Peta_tabg_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_14_ap_vld : OUT STD_LOGIC;
    Peta_tabg_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_15_ap_vld : OUT STD_LOGIC;
    Peta_tabg_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_16_ap_vld : OUT STD_LOGIC;
    Peta_tabg_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Peta_tabg_17_ap_vld : OUT STD_LOGIC );
end;


architecture behav of setup_calc_23 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_80 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_mcalcAA_23_fu_556_ap_start : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_ap_done : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_ap_idle : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_ap_ready : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_buf4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_buf4_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_buf4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_buf4_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_buf6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_buf6_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_buf6_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_buf6_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_buf6a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_buf6a_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_buf6a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_buf6a_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrev_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrev_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevC_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevC_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufAa_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufAa_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufAa_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufAa_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufAb_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufAb_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufAb_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufAb_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufAc_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufAc_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufAc_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufAc_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA1_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA1_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA2a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA2a_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA2a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA2a_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA3_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA3_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA5_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA5_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA5_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA6b_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA6b_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA6b_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA6b_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA6c_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA6c_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA6c_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA6c_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufA6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufA6_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevA_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevA_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevAa_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevAa_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevAb_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevAb_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevD_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevD_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevDa_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevDa_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevDb_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevDb_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB1a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB1a_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB1a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB1a_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB1b_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB1b_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB1b_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB1b_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB1c_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB1c_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB1c_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB1c_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB2_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB2_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB3a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB3a_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB3a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB3a_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB3b_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB3b_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB3b_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB3b_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB5a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB5a_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB5a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB5a_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB5b_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB5b_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB5b_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB5b_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB6_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_Lam_bufB6_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_Lam_bufB6_ce1 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevB_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevB_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevBa_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevBa_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevBb_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevBb_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevE_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevE_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevEa_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevEa_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_SpEtaPrevEb_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_mcalcAA_23_fu_556_SpEtaPrevEb_ce0 : STD_LOGIC;
    signal grp_mcalcAA_23_fu_556_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_16 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_17 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_18 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_19 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_20 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_23 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_25 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_26 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_27 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_28 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_29 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_30 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_31 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_32 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_33 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_34 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_35 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_36 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_37 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_38 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_39 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_40 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_41 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_42 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_43 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_44 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_45 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_46 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_47 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_48 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_49 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_50 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_51 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_52 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_53 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_54 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_55 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_57 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_58 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_59 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_60 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_61 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_62 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_63 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_64 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_65 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_66 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_67 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_68 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_69 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_71 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_73 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_74 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_76 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_77 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_79 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_80 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_81 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_82 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_83 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_84 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_85 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_86 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_87 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_88 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_89 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_90 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_91 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_92 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_93 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_94 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_95 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_96 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_97 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_99 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_100 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_101 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_103 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_104 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_105 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_106 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_107 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_109 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_110 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_111 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_112 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_113 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_115 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_116 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_117 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_118 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_119 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_120 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_121 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_122 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_123 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_124 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_125 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_127 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_128 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_129 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_131 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_132 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_133 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_134 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_135 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mcalcAA_23_fu_556_ap_return_137 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";

    component mcalcAA_23 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        num_nt : IN STD_LOGIC_VECTOR (15 downto 0);
        num_ntA : IN STD_LOGIC_VECTOR (15 downto 0);
        num_ntB : IN STD_LOGIC_VECTOR (15 downto 0);
        numb : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_buf4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_buf4_ce0 : OUT STD_LOGIC;
        Lam_buf4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_buf4_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_buf4_ce1 : OUT STD_LOGIC;
        Lam_buf4_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_buf6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_buf6_ce0 : OUT STD_LOGIC;
        Lam_buf6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_buf6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_buf6_ce1 : OUT STD_LOGIC;
        Lam_buf6_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_buf6a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_buf6a_ce0 : OUT STD_LOGIC;
        Lam_buf6a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_buf6a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_buf6a_ce1 : OUT STD_LOGIC;
        Lam_buf6a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        SpEtaPrev_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SpEtaPrev_ce0 : OUT STD_LOGIC;
        SpEtaPrev_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SpEtaPrevC_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SpEtaPrevC_ce0 : OUT STD_LOGIC;
        SpEtaPrevC_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Lam_bufAa_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufAa_ce0 : OUT STD_LOGIC;
        Lam_bufAa_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufAa_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufAa_ce1 : OUT STD_LOGIC;
        Lam_bufAa_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufAb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufAb_ce0 : OUT STD_LOGIC;
        Lam_bufAb_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufAb_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufAb_ce1 : OUT STD_LOGIC;
        Lam_bufAb_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufAc_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufAc_ce0 : OUT STD_LOGIC;
        Lam_bufAc_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufAc_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufAc_ce1 : OUT STD_LOGIC;
        Lam_bufAc_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA1_ce0 : OUT STD_LOGIC;
        Lam_bufA1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA1_ce1 : OUT STD_LOGIC;
        Lam_bufA1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA2a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA2a_ce0 : OUT STD_LOGIC;
        Lam_bufA2a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA2a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA2a_ce1 : OUT STD_LOGIC;
        Lam_bufA2a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA3_ce0 : OUT STD_LOGIC;
        Lam_bufA3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA3_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA3_ce1 : OUT STD_LOGIC;
        Lam_bufA3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA5_ce0 : OUT STD_LOGIC;
        Lam_bufA5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA5_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA5_ce1 : OUT STD_LOGIC;
        Lam_bufA5_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA6b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA6b_ce0 : OUT STD_LOGIC;
        Lam_bufA6b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA6b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA6b_ce1 : OUT STD_LOGIC;
        Lam_bufA6b_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA6c_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA6c_ce0 : OUT STD_LOGIC;
        Lam_bufA6c_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA6c_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA6c_ce1 : OUT STD_LOGIC;
        Lam_bufA6c_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufA6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufA6_ce0 : OUT STD_LOGIC;
        Lam_bufA6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        SpEtaPrevA_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SpEtaPrevA_ce0 : OUT STD_LOGIC;
        SpEtaPrevA_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        SpEtaPrevAa_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SpEtaPrevAa_ce0 : OUT STD_LOGIC;
        SpEtaPrevAa_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SpEtaPrevAb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SpEtaPrevAb_ce0 : OUT STD_LOGIC;
        SpEtaPrevAb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SpEtaPrevD_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SpEtaPrevD_ce0 : OUT STD_LOGIC;
        SpEtaPrevD_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        SpEtaPrevDa_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SpEtaPrevDa_ce0 : OUT STD_LOGIC;
        SpEtaPrevDa_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SpEtaPrevDb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SpEtaPrevDb_ce0 : OUT STD_LOGIC;
        SpEtaPrevDb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Lam_bufB_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB_ce0 : OUT STD_LOGIC;
        Lam_bufB_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB_ce1 : OUT STD_LOGIC;
        Lam_bufB_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB1a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB1a_ce0 : OUT STD_LOGIC;
        Lam_bufB1a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB1a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB1a_ce1 : OUT STD_LOGIC;
        Lam_bufB1a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB1b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB1b_ce0 : OUT STD_LOGIC;
        Lam_bufB1b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB1b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB1b_ce1 : OUT STD_LOGIC;
        Lam_bufB1b_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB1c_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB1c_ce0 : OUT STD_LOGIC;
        Lam_bufB1c_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB1c_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB1c_ce1 : OUT STD_LOGIC;
        Lam_bufB1c_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB2_ce0 : OUT STD_LOGIC;
        Lam_bufB2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB2_ce1 : OUT STD_LOGIC;
        Lam_bufB2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB3a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB3a_ce0 : OUT STD_LOGIC;
        Lam_bufB3a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB3a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB3a_ce1 : OUT STD_LOGIC;
        Lam_bufB3a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB3b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB3b_ce0 : OUT STD_LOGIC;
        Lam_bufB3b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB3b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB3b_ce1 : OUT STD_LOGIC;
        Lam_bufB3b_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB5a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB5a_ce0 : OUT STD_LOGIC;
        Lam_bufB5a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB5a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB5a_ce1 : OUT STD_LOGIC;
        Lam_bufB5a_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB5b_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB5b_ce0 : OUT STD_LOGIC;
        Lam_bufB5b_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB5b_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB5b_ce1 : OUT STD_LOGIC;
        Lam_bufB5b_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB6_ce0 : OUT STD_LOGIC;
        Lam_bufB6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Lam_bufB6_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Lam_bufB6_ce1 : OUT STD_LOGIC;
        Lam_bufB6_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        SpEtaPrevB_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SpEtaPrevB_ce0 : OUT STD_LOGIC;
        SpEtaPrevB_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        SpEtaPrevBa_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SpEtaPrevBa_ce0 : OUT STD_LOGIC;
        SpEtaPrevBa_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SpEtaPrevBb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SpEtaPrevBb_ce0 : OUT STD_LOGIC;
        SpEtaPrevBb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SpEtaPrevE_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SpEtaPrevE_ce0 : OUT STD_LOGIC;
        SpEtaPrevE_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        SpEtaPrevEa_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SpEtaPrevEa_ce0 : OUT STD_LOGIC;
        SpEtaPrevEa_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SpEtaPrevEb_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SpEtaPrevEb_ce0 : OUT STD_LOGIC;
        SpEtaPrevEb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        nIterationCounter : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_40 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_41 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_42 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_43 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_44 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_45 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_46 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_47 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_48 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_49 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_50 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_51 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_52 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_53 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_54 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_55 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_56 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_57 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_58 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_59 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_60 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_61 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_62 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_63 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_64 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_65 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_66 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_67 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_68 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_69 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_70 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_71 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_72 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_73 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_74 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_75 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_76 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_77 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_78 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_79 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_80 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_81 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_82 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_83 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_84 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_85 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_86 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_87 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_88 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_89 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_90 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_91 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_92 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_93 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_94 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_95 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_96 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_97 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_98 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_99 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_100 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_101 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_102 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_103 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_104 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_105 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_106 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_107 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_108 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_109 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_110 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_111 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_112 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_113 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_114 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_115 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_116 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_117 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_118 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_119 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_120 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_121 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_122 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_123 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_124 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_125 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_126 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_127 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_128 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_129 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_130 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_131 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_132 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_133 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_134 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_135 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_136 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_137 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_mcalcAA_23_fu_556 : component mcalcAA_23
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mcalcAA_23_fu_556_ap_start,
        ap_done => grp_mcalcAA_23_fu_556_ap_done,
        ap_idle => grp_mcalcAA_23_fu_556_ap_idle,
        ap_ready => grp_mcalcAA_23_fu_556_ap_ready,
        num_nt => m,
        num_ntA => mA,
        num_ntB => mB,
        numb => numb,
        Lam_buf4_address0 => grp_mcalcAA_23_fu_556_Lam_buf4_address0,
        Lam_buf4_ce0 => grp_mcalcAA_23_fu_556_Lam_buf4_ce0,
        Lam_buf4_q0 => Lam_buf4_q0,
        Lam_buf4_address1 => grp_mcalcAA_23_fu_556_Lam_buf4_address1,
        Lam_buf4_ce1 => grp_mcalcAA_23_fu_556_Lam_buf4_ce1,
        Lam_buf4_q1 => Lam_buf4_q1,
        Lam_buf6_address0 => grp_mcalcAA_23_fu_556_Lam_buf6_address0,
        Lam_buf6_ce0 => grp_mcalcAA_23_fu_556_Lam_buf6_ce0,
        Lam_buf6_q0 => Lam_buf6_q0,
        Lam_buf6_address1 => grp_mcalcAA_23_fu_556_Lam_buf6_address1,
        Lam_buf6_ce1 => grp_mcalcAA_23_fu_556_Lam_buf6_ce1,
        Lam_buf6_q1 => Lam_buf6_q1,
        Lam_buf6a_address0 => grp_mcalcAA_23_fu_556_Lam_buf6a_address0,
        Lam_buf6a_ce0 => grp_mcalcAA_23_fu_556_Lam_buf6a_ce0,
        Lam_buf6a_q0 => Lam_buf6a_q0,
        Lam_buf6a_address1 => grp_mcalcAA_23_fu_556_Lam_buf6a_address1,
        Lam_buf6a_ce1 => grp_mcalcAA_23_fu_556_Lam_buf6a_ce1,
        Lam_buf6a_q1 => Lam_buf6a_q1,
        SpEtaPrev_address0 => grp_mcalcAA_23_fu_556_SpEtaPrev_address0,
        SpEtaPrev_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrev_ce0,
        SpEtaPrev_q0 => SpEtaPrev_q0,
        SpEtaPrevC_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevC_address0,
        SpEtaPrevC_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevC_ce0,
        SpEtaPrevC_q0 => SpEtaPrevC_q0,
        Lam_bufAa_address0 => grp_mcalcAA_23_fu_556_Lam_bufAa_address0,
        Lam_bufAa_ce0 => grp_mcalcAA_23_fu_556_Lam_bufAa_ce0,
        Lam_bufAa_q0 => Lam_bufAa_q0,
        Lam_bufAa_address1 => grp_mcalcAA_23_fu_556_Lam_bufAa_address1,
        Lam_bufAa_ce1 => grp_mcalcAA_23_fu_556_Lam_bufAa_ce1,
        Lam_bufAa_q1 => Lam_bufAa_q1,
        Lam_bufAb_address0 => grp_mcalcAA_23_fu_556_Lam_bufAb_address0,
        Lam_bufAb_ce0 => grp_mcalcAA_23_fu_556_Lam_bufAb_ce0,
        Lam_bufAb_q0 => Lam_bufAb_q0,
        Lam_bufAb_address1 => grp_mcalcAA_23_fu_556_Lam_bufAb_address1,
        Lam_bufAb_ce1 => grp_mcalcAA_23_fu_556_Lam_bufAb_ce1,
        Lam_bufAb_q1 => Lam_bufAb_q1,
        Lam_bufAc_address0 => grp_mcalcAA_23_fu_556_Lam_bufAc_address0,
        Lam_bufAc_ce0 => grp_mcalcAA_23_fu_556_Lam_bufAc_ce0,
        Lam_bufAc_q0 => Lam_bufAc_q0,
        Lam_bufAc_address1 => grp_mcalcAA_23_fu_556_Lam_bufAc_address1,
        Lam_bufAc_ce1 => grp_mcalcAA_23_fu_556_Lam_bufAc_ce1,
        Lam_bufAc_q1 => Lam_bufAc_q1,
        Lam_bufA1_address0 => grp_mcalcAA_23_fu_556_Lam_bufA1_address0,
        Lam_bufA1_ce0 => grp_mcalcAA_23_fu_556_Lam_bufA1_ce0,
        Lam_bufA1_q0 => Lam_bufA1_q0,
        Lam_bufA1_address1 => grp_mcalcAA_23_fu_556_Lam_bufA1_address1,
        Lam_bufA1_ce1 => grp_mcalcAA_23_fu_556_Lam_bufA1_ce1,
        Lam_bufA1_q1 => Lam_bufA1_q1,
        Lam_bufA2a_address0 => grp_mcalcAA_23_fu_556_Lam_bufA2a_address0,
        Lam_bufA2a_ce0 => grp_mcalcAA_23_fu_556_Lam_bufA2a_ce0,
        Lam_bufA2a_q0 => Lam_bufA2a_q0,
        Lam_bufA2a_address1 => grp_mcalcAA_23_fu_556_Lam_bufA2a_address1,
        Lam_bufA2a_ce1 => grp_mcalcAA_23_fu_556_Lam_bufA2a_ce1,
        Lam_bufA2a_q1 => Lam_bufA2a_q1,
        Lam_bufA3_address0 => grp_mcalcAA_23_fu_556_Lam_bufA3_address0,
        Lam_bufA3_ce0 => grp_mcalcAA_23_fu_556_Lam_bufA3_ce0,
        Lam_bufA3_q0 => Lam_bufA3_q0,
        Lam_bufA3_address1 => grp_mcalcAA_23_fu_556_Lam_bufA3_address1,
        Lam_bufA3_ce1 => grp_mcalcAA_23_fu_556_Lam_bufA3_ce1,
        Lam_bufA3_q1 => Lam_bufA3_q1,
        Lam_bufA5_address0 => grp_mcalcAA_23_fu_556_Lam_bufA5_address0,
        Lam_bufA5_ce0 => grp_mcalcAA_23_fu_556_Lam_bufA5_ce0,
        Lam_bufA5_q0 => Lam_bufA5_q0,
        Lam_bufA5_address1 => grp_mcalcAA_23_fu_556_Lam_bufA5_address1,
        Lam_bufA5_ce1 => grp_mcalcAA_23_fu_556_Lam_bufA5_ce1,
        Lam_bufA5_q1 => Lam_bufA5_q1,
        Lam_bufA6b_address0 => grp_mcalcAA_23_fu_556_Lam_bufA6b_address0,
        Lam_bufA6b_ce0 => grp_mcalcAA_23_fu_556_Lam_bufA6b_ce0,
        Lam_bufA6b_q0 => Lam_bufA6b_q0,
        Lam_bufA6b_address1 => grp_mcalcAA_23_fu_556_Lam_bufA6b_address1,
        Lam_bufA6b_ce1 => grp_mcalcAA_23_fu_556_Lam_bufA6b_ce1,
        Lam_bufA6b_q1 => Lam_bufA6b_q1,
        Lam_bufA6c_address0 => grp_mcalcAA_23_fu_556_Lam_bufA6c_address0,
        Lam_bufA6c_ce0 => grp_mcalcAA_23_fu_556_Lam_bufA6c_ce0,
        Lam_bufA6c_q0 => Lam_bufA6c_q0,
        Lam_bufA6c_address1 => grp_mcalcAA_23_fu_556_Lam_bufA6c_address1,
        Lam_bufA6c_ce1 => grp_mcalcAA_23_fu_556_Lam_bufA6c_ce1,
        Lam_bufA6c_q1 => Lam_bufA6c_q1,
        Lam_bufA6_address0 => grp_mcalcAA_23_fu_556_Lam_bufA6_address0,
        Lam_bufA6_ce0 => grp_mcalcAA_23_fu_556_Lam_bufA6_ce0,
        Lam_bufA6_q0 => Lam_bufA6_q0,
        SpEtaPrevA_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevA_address0,
        SpEtaPrevA_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevA_ce0,
        SpEtaPrevA_q0 => SpEtaPrevA_q0,
        SpEtaPrevAa_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevAa_address0,
        SpEtaPrevAa_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevAa_ce0,
        SpEtaPrevAa_q0 => SpEtaPrevAa_q0,
        SpEtaPrevAb_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevAb_address0,
        SpEtaPrevAb_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevAb_ce0,
        SpEtaPrevAb_q0 => SpEtaPrevAb_q0,
        SpEtaPrevD_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevD_address0,
        SpEtaPrevD_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevD_ce0,
        SpEtaPrevD_q0 => SpEtaPrevD_q0,
        SpEtaPrevDa_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevDa_address0,
        SpEtaPrevDa_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevDa_ce0,
        SpEtaPrevDa_q0 => SpEtaPrevDa_q0,
        SpEtaPrevDb_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevDb_address0,
        SpEtaPrevDb_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevDb_ce0,
        SpEtaPrevDb_q0 => SpEtaPrevDb_q0,
        Lam_bufB_address0 => grp_mcalcAA_23_fu_556_Lam_bufB_address0,
        Lam_bufB_ce0 => grp_mcalcAA_23_fu_556_Lam_bufB_ce0,
        Lam_bufB_q0 => Lam_bufB_q0,
        Lam_bufB_address1 => grp_mcalcAA_23_fu_556_Lam_bufB_address1,
        Lam_bufB_ce1 => grp_mcalcAA_23_fu_556_Lam_bufB_ce1,
        Lam_bufB_q1 => Lam_bufB_q1,
        Lam_bufB1a_address0 => grp_mcalcAA_23_fu_556_Lam_bufB1a_address0,
        Lam_bufB1a_ce0 => grp_mcalcAA_23_fu_556_Lam_bufB1a_ce0,
        Lam_bufB1a_q0 => Lam_bufB1a_q0,
        Lam_bufB1a_address1 => grp_mcalcAA_23_fu_556_Lam_bufB1a_address1,
        Lam_bufB1a_ce1 => grp_mcalcAA_23_fu_556_Lam_bufB1a_ce1,
        Lam_bufB1a_q1 => Lam_bufB1a_q1,
        Lam_bufB1b_address0 => grp_mcalcAA_23_fu_556_Lam_bufB1b_address0,
        Lam_bufB1b_ce0 => grp_mcalcAA_23_fu_556_Lam_bufB1b_ce0,
        Lam_bufB1b_q0 => Lam_bufB1b_q0,
        Lam_bufB1b_address1 => grp_mcalcAA_23_fu_556_Lam_bufB1b_address1,
        Lam_bufB1b_ce1 => grp_mcalcAA_23_fu_556_Lam_bufB1b_ce1,
        Lam_bufB1b_q1 => Lam_bufB1b_q1,
        Lam_bufB1c_address0 => grp_mcalcAA_23_fu_556_Lam_bufB1c_address0,
        Lam_bufB1c_ce0 => grp_mcalcAA_23_fu_556_Lam_bufB1c_ce0,
        Lam_bufB1c_q0 => Lam_bufB1c_q0,
        Lam_bufB1c_address1 => grp_mcalcAA_23_fu_556_Lam_bufB1c_address1,
        Lam_bufB1c_ce1 => grp_mcalcAA_23_fu_556_Lam_bufB1c_ce1,
        Lam_bufB1c_q1 => Lam_bufB1c_q1,
        Lam_bufB2_address0 => grp_mcalcAA_23_fu_556_Lam_bufB2_address0,
        Lam_bufB2_ce0 => grp_mcalcAA_23_fu_556_Lam_bufB2_ce0,
        Lam_bufB2_q0 => Lam_bufB2_q0,
        Lam_bufB2_address1 => grp_mcalcAA_23_fu_556_Lam_bufB2_address1,
        Lam_bufB2_ce1 => grp_mcalcAA_23_fu_556_Lam_bufB2_ce1,
        Lam_bufB2_q1 => Lam_bufB2_q1,
        Lam_bufB3a_address0 => grp_mcalcAA_23_fu_556_Lam_bufB3a_address0,
        Lam_bufB3a_ce0 => grp_mcalcAA_23_fu_556_Lam_bufB3a_ce0,
        Lam_bufB3a_q0 => Lam_bufB3a_q0,
        Lam_bufB3a_address1 => grp_mcalcAA_23_fu_556_Lam_bufB3a_address1,
        Lam_bufB3a_ce1 => grp_mcalcAA_23_fu_556_Lam_bufB3a_ce1,
        Lam_bufB3a_q1 => Lam_bufB3a_q1,
        Lam_bufB3b_address0 => grp_mcalcAA_23_fu_556_Lam_bufB3b_address0,
        Lam_bufB3b_ce0 => grp_mcalcAA_23_fu_556_Lam_bufB3b_ce0,
        Lam_bufB3b_q0 => Lam_bufB3b_q0,
        Lam_bufB3b_address1 => grp_mcalcAA_23_fu_556_Lam_bufB3b_address1,
        Lam_bufB3b_ce1 => grp_mcalcAA_23_fu_556_Lam_bufB3b_ce1,
        Lam_bufB3b_q1 => Lam_bufB3b_q1,
        Lam_bufB5a_address0 => grp_mcalcAA_23_fu_556_Lam_bufB5a_address0,
        Lam_bufB5a_ce0 => grp_mcalcAA_23_fu_556_Lam_bufB5a_ce0,
        Lam_bufB5a_q0 => Lam_bufB5a_q0,
        Lam_bufB5a_address1 => grp_mcalcAA_23_fu_556_Lam_bufB5a_address1,
        Lam_bufB5a_ce1 => grp_mcalcAA_23_fu_556_Lam_bufB5a_ce1,
        Lam_bufB5a_q1 => Lam_bufB5a_q1,
        Lam_bufB5b_address0 => grp_mcalcAA_23_fu_556_Lam_bufB5b_address0,
        Lam_bufB5b_ce0 => grp_mcalcAA_23_fu_556_Lam_bufB5b_ce0,
        Lam_bufB5b_q0 => Lam_bufB5b_q0,
        Lam_bufB5b_address1 => grp_mcalcAA_23_fu_556_Lam_bufB5b_address1,
        Lam_bufB5b_ce1 => grp_mcalcAA_23_fu_556_Lam_bufB5b_ce1,
        Lam_bufB5b_q1 => Lam_bufB5b_q1,
        Lam_bufB6_address0 => grp_mcalcAA_23_fu_556_Lam_bufB6_address0,
        Lam_bufB6_ce0 => grp_mcalcAA_23_fu_556_Lam_bufB6_ce0,
        Lam_bufB6_q0 => Lam_bufB6_q0,
        Lam_bufB6_address1 => grp_mcalcAA_23_fu_556_Lam_bufB6_address1,
        Lam_bufB6_ce1 => grp_mcalcAA_23_fu_556_Lam_bufB6_ce1,
        Lam_bufB6_q1 => Lam_bufB6_q1,
        SpEtaPrevB_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevB_address0,
        SpEtaPrevB_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevB_ce0,
        SpEtaPrevB_q0 => SpEtaPrevB_q0,
        SpEtaPrevBa_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevBa_address0,
        SpEtaPrevBa_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevBa_ce0,
        SpEtaPrevBa_q0 => SpEtaPrevBa_q0,
        SpEtaPrevBb_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevBb_address0,
        SpEtaPrevBb_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevBb_ce0,
        SpEtaPrevBb_q0 => SpEtaPrevBb_q0,
        SpEtaPrevE_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevE_address0,
        SpEtaPrevE_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevE_ce0,
        SpEtaPrevE_q0 => SpEtaPrevE_q0,
        SpEtaPrevEa_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevEa_address0,
        SpEtaPrevEa_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevEa_ce0,
        SpEtaPrevEa_q0 => SpEtaPrevEa_q0,
        SpEtaPrevEb_address0 => grp_mcalcAA_23_fu_556_SpEtaPrevEb_address0,
        SpEtaPrevEb_ce0 => grp_mcalcAA_23_fu_556_SpEtaPrevEb_ce0,
        SpEtaPrevEb_q0 => SpEtaPrevEb_q0,
        nIterationCounter => nIterationCounter,
        ap_return_0 => grp_mcalcAA_23_fu_556_ap_return_0,
        ap_return_1 => grp_mcalcAA_23_fu_556_ap_return_1,
        ap_return_2 => grp_mcalcAA_23_fu_556_ap_return_2,
        ap_return_3 => grp_mcalcAA_23_fu_556_ap_return_3,
        ap_return_4 => grp_mcalcAA_23_fu_556_ap_return_4,
        ap_return_5 => grp_mcalcAA_23_fu_556_ap_return_5,
        ap_return_6 => grp_mcalcAA_23_fu_556_ap_return_6,
        ap_return_7 => grp_mcalcAA_23_fu_556_ap_return_7,
        ap_return_8 => grp_mcalcAA_23_fu_556_ap_return_8,
        ap_return_9 => grp_mcalcAA_23_fu_556_ap_return_9,
        ap_return_10 => grp_mcalcAA_23_fu_556_ap_return_10,
        ap_return_11 => grp_mcalcAA_23_fu_556_ap_return_11,
        ap_return_12 => grp_mcalcAA_23_fu_556_ap_return_12,
        ap_return_13 => grp_mcalcAA_23_fu_556_ap_return_13,
        ap_return_14 => grp_mcalcAA_23_fu_556_ap_return_14,
        ap_return_15 => grp_mcalcAA_23_fu_556_ap_return_15,
        ap_return_16 => grp_mcalcAA_23_fu_556_ap_return_16,
        ap_return_17 => grp_mcalcAA_23_fu_556_ap_return_17,
        ap_return_18 => grp_mcalcAA_23_fu_556_ap_return_18,
        ap_return_19 => grp_mcalcAA_23_fu_556_ap_return_19,
        ap_return_20 => grp_mcalcAA_23_fu_556_ap_return_20,
        ap_return_21 => grp_mcalcAA_23_fu_556_ap_return_21,
        ap_return_22 => grp_mcalcAA_23_fu_556_ap_return_22,
        ap_return_23 => grp_mcalcAA_23_fu_556_ap_return_23,
        ap_return_24 => grp_mcalcAA_23_fu_556_ap_return_24,
        ap_return_25 => grp_mcalcAA_23_fu_556_ap_return_25,
        ap_return_26 => grp_mcalcAA_23_fu_556_ap_return_26,
        ap_return_27 => grp_mcalcAA_23_fu_556_ap_return_27,
        ap_return_28 => grp_mcalcAA_23_fu_556_ap_return_28,
        ap_return_29 => grp_mcalcAA_23_fu_556_ap_return_29,
        ap_return_30 => grp_mcalcAA_23_fu_556_ap_return_30,
        ap_return_31 => grp_mcalcAA_23_fu_556_ap_return_31,
        ap_return_32 => grp_mcalcAA_23_fu_556_ap_return_32,
        ap_return_33 => grp_mcalcAA_23_fu_556_ap_return_33,
        ap_return_34 => grp_mcalcAA_23_fu_556_ap_return_34,
        ap_return_35 => grp_mcalcAA_23_fu_556_ap_return_35,
        ap_return_36 => grp_mcalcAA_23_fu_556_ap_return_36,
        ap_return_37 => grp_mcalcAA_23_fu_556_ap_return_37,
        ap_return_38 => grp_mcalcAA_23_fu_556_ap_return_38,
        ap_return_39 => grp_mcalcAA_23_fu_556_ap_return_39,
        ap_return_40 => grp_mcalcAA_23_fu_556_ap_return_40,
        ap_return_41 => grp_mcalcAA_23_fu_556_ap_return_41,
        ap_return_42 => grp_mcalcAA_23_fu_556_ap_return_42,
        ap_return_43 => grp_mcalcAA_23_fu_556_ap_return_43,
        ap_return_44 => grp_mcalcAA_23_fu_556_ap_return_44,
        ap_return_45 => grp_mcalcAA_23_fu_556_ap_return_45,
        ap_return_46 => grp_mcalcAA_23_fu_556_ap_return_46,
        ap_return_47 => grp_mcalcAA_23_fu_556_ap_return_47,
        ap_return_48 => grp_mcalcAA_23_fu_556_ap_return_48,
        ap_return_49 => grp_mcalcAA_23_fu_556_ap_return_49,
        ap_return_50 => grp_mcalcAA_23_fu_556_ap_return_50,
        ap_return_51 => grp_mcalcAA_23_fu_556_ap_return_51,
        ap_return_52 => grp_mcalcAA_23_fu_556_ap_return_52,
        ap_return_53 => grp_mcalcAA_23_fu_556_ap_return_53,
        ap_return_54 => grp_mcalcAA_23_fu_556_ap_return_54,
        ap_return_55 => grp_mcalcAA_23_fu_556_ap_return_55,
        ap_return_56 => grp_mcalcAA_23_fu_556_ap_return_56,
        ap_return_57 => grp_mcalcAA_23_fu_556_ap_return_57,
        ap_return_58 => grp_mcalcAA_23_fu_556_ap_return_58,
        ap_return_59 => grp_mcalcAA_23_fu_556_ap_return_59,
        ap_return_60 => grp_mcalcAA_23_fu_556_ap_return_60,
        ap_return_61 => grp_mcalcAA_23_fu_556_ap_return_61,
        ap_return_62 => grp_mcalcAA_23_fu_556_ap_return_62,
        ap_return_63 => grp_mcalcAA_23_fu_556_ap_return_63,
        ap_return_64 => grp_mcalcAA_23_fu_556_ap_return_64,
        ap_return_65 => grp_mcalcAA_23_fu_556_ap_return_65,
        ap_return_66 => grp_mcalcAA_23_fu_556_ap_return_66,
        ap_return_67 => grp_mcalcAA_23_fu_556_ap_return_67,
        ap_return_68 => grp_mcalcAA_23_fu_556_ap_return_68,
        ap_return_69 => grp_mcalcAA_23_fu_556_ap_return_69,
        ap_return_70 => grp_mcalcAA_23_fu_556_ap_return_70,
        ap_return_71 => grp_mcalcAA_23_fu_556_ap_return_71,
        ap_return_72 => grp_mcalcAA_23_fu_556_ap_return_72,
        ap_return_73 => grp_mcalcAA_23_fu_556_ap_return_73,
        ap_return_74 => grp_mcalcAA_23_fu_556_ap_return_74,
        ap_return_75 => grp_mcalcAA_23_fu_556_ap_return_75,
        ap_return_76 => grp_mcalcAA_23_fu_556_ap_return_76,
        ap_return_77 => grp_mcalcAA_23_fu_556_ap_return_77,
        ap_return_78 => grp_mcalcAA_23_fu_556_ap_return_78,
        ap_return_79 => grp_mcalcAA_23_fu_556_ap_return_79,
        ap_return_80 => grp_mcalcAA_23_fu_556_ap_return_80,
        ap_return_81 => grp_mcalcAA_23_fu_556_ap_return_81,
        ap_return_82 => grp_mcalcAA_23_fu_556_ap_return_82,
        ap_return_83 => grp_mcalcAA_23_fu_556_ap_return_83,
        ap_return_84 => grp_mcalcAA_23_fu_556_ap_return_84,
        ap_return_85 => grp_mcalcAA_23_fu_556_ap_return_85,
        ap_return_86 => grp_mcalcAA_23_fu_556_ap_return_86,
        ap_return_87 => grp_mcalcAA_23_fu_556_ap_return_87,
        ap_return_88 => grp_mcalcAA_23_fu_556_ap_return_88,
        ap_return_89 => grp_mcalcAA_23_fu_556_ap_return_89,
        ap_return_90 => grp_mcalcAA_23_fu_556_ap_return_90,
        ap_return_91 => grp_mcalcAA_23_fu_556_ap_return_91,
        ap_return_92 => grp_mcalcAA_23_fu_556_ap_return_92,
        ap_return_93 => grp_mcalcAA_23_fu_556_ap_return_93,
        ap_return_94 => grp_mcalcAA_23_fu_556_ap_return_94,
        ap_return_95 => grp_mcalcAA_23_fu_556_ap_return_95,
        ap_return_96 => grp_mcalcAA_23_fu_556_ap_return_96,
        ap_return_97 => grp_mcalcAA_23_fu_556_ap_return_97,
        ap_return_98 => grp_mcalcAA_23_fu_556_ap_return_98,
        ap_return_99 => grp_mcalcAA_23_fu_556_ap_return_99,
        ap_return_100 => grp_mcalcAA_23_fu_556_ap_return_100,
        ap_return_101 => grp_mcalcAA_23_fu_556_ap_return_101,
        ap_return_102 => grp_mcalcAA_23_fu_556_ap_return_102,
        ap_return_103 => grp_mcalcAA_23_fu_556_ap_return_103,
        ap_return_104 => grp_mcalcAA_23_fu_556_ap_return_104,
        ap_return_105 => grp_mcalcAA_23_fu_556_ap_return_105,
        ap_return_106 => grp_mcalcAA_23_fu_556_ap_return_106,
        ap_return_107 => grp_mcalcAA_23_fu_556_ap_return_107,
        ap_return_108 => grp_mcalcAA_23_fu_556_ap_return_108,
        ap_return_109 => grp_mcalcAA_23_fu_556_ap_return_109,
        ap_return_110 => grp_mcalcAA_23_fu_556_ap_return_110,
        ap_return_111 => grp_mcalcAA_23_fu_556_ap_return_111,
        ap_return_112 => grp_mcalcAA_23_fu_556_ap_return_112,
        ap_return_113 => grp_mcalcAA_23_fu_556_ap_return_113,
        ap_return_114 => grp_mcalcAA_23_fu_556_ap_return_114,
        ap_return_115 => grp_mcalcAA_23_fu_556_ap_return_115,
        ap_return_116 => grp_mcalcAA_23_fu_556_ap_return_116,
        ap_return_117 => grp_mcalcAA_23_fu_556_ap_return_117,
        ap_return_118 => grp_mcalcAA_23_fu_556_ap_return_118,
        ap_return_119 => grp_mcalcAA_23_fu_556_ap_return_119,
        ap_return_120 => grp_mcalcAA_23_fu_556_ap_return_120,
        ap_return_121 => grp_mcalcAA_23_fu_556_ap_return_121,
        ap_return_122 => grp_mcalcAA_23_fu_556_ap_return_122,
        ap_return_123 => grp_mcalcAA_23_fu_556_ap_return_123,
        ap_return_124 => grp_mcalcAA_23_fu_556_ap_return_124,
        ap_return_125 => grp_mcalcAA_23_fu_556_ap_return_125,
        ap_return_126 => grp_mcalcAA_23_fu_556_ap_return_126,
        ap_return_127 => grp_mcalcAA_23_fu_556_ap_return_127,
        ap_return_128 => grp_mcalcAA_23_fu_556_ap_return_128,
        ap_return_129 => grp_mcalcAA_23_fu_556_ap_return_129,
        ap_return_130 => grp_mcalcAA_23_fu_556_ap_return_130,
        ap_return_131 => grp_mcalcAA_23_fu_556_ap_return_131,
        ap_return_132 => grp_mcalcAA_23_fu_556_ap_return_132,
        ap_return_133 => grp_mcalcAA_23_fu_556_ap_return_133,
        ap_return_134 => grp_mcalcAA_23_fu_556_ap_return_134,
        ap_return_135 => grp_mcalcAA_23_fu_556_ap_return_135,
        ap_return_136 => grp_mcalcAA_23_fu_556_ap_return_136,
        ap_return_137 => grp_mcalcAA_23_fu_556_ap_return_137);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    Eta_tabe_0 <= grp_mcalcAA_23_fu_556_ap_return_69;

    Eta_tabe_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabe_0_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabe_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabe_1 <= grp_mcalcAA_23_fu_556_ap_return_70;

    Eta_tabe_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabe_1_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabe_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabe_2 <= grp_mcalcAA_23_fu_556_ap_return_71;

    Eta_tabe_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabe_2_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabe_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabf_0 <= grp_mcalcAA_23_fu_556_ap_return_78;

    Eta_tabf_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabf_0_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabf_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabf_1 <= grp_mcalcAA_23_fu_556_ap_return_79;

    Eta_tabf_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabf_1_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabf_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabf_2 <= grp_mcalcAA_23_fu_556_ap_return_80;

    Eta_tabf_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabf_2_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabf_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabf_3 <= grp_mcalcAA_23_fu_556_ap_return_81;

    Eta_tabf_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabf_3_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabf_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabf_4 <= grp_mcalcAA_23_fu_556_ap_return_82;

    Eta_tabf_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabf_4_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabf_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabf_5 <= grp_mcalcAA_23_fu_556_ap_return_83;

    Eta_tabf_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabf_5_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabf_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabf_6 <= grp_mcalcAA_23_fu_556_ap_return_84;

    Eta_tabf_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabf_6_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabf_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabf_7 <= grp_mcalcAA_23_fu_556_ap_return_85;

    Eta_tabf_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabf_7_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabf_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabf_8 <= grp_mcalcAA_23_fu_556_ap_return_86;

    Eta_tabf_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabf_8_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabf_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabf_9 <= grp_mcalcAA_23_fu_556_ap_return_87;

    Eta_tabf_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabf_9_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabf_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabg_0 <= grp_mcalcAA_23_fu_556_ap_return_108;

    Eta_tabg_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabg_0_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabg_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabg_1 <= grp_mcalcAA_23_fu_556_ap_return_109;

    Eta_tabg_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabg_1_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabg_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabg_2 <= grp_mcalcAA_23_fu_556_ap_return_110;

    Eta_tabg_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabg_2_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabg_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabg_3 <= grp_mcalcAA_23_fu_556_ap_return_111;

    Eta_tabg_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabg_3_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabg_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabg_4 <= grp_mcalcAA_23_fu_556_ap_return_112;

    Eta_tabg_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabg_4_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabg_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabg_5 <= grp_mcalcAA_23_fu_556_ap_return_113;

    Eta_tabg_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabg_5_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabg_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabg_6 <= grp_mcalcAA_23_fu_556_ap_return_114;

    Eta_tabg_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabg_6_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabg_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabg_7 <= grp_mcalcAA_23_fu_556_ap_return_115;

    Eta_tabg_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabg_7_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabg_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabg_8 <= grp_mcalcAA_23_fu_556_ap_return_116;

    Eta_tabg_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabg_8_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabg_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabg_9 <= grp_mcalcAA_23_fu_556_ap_return_117;

    Eta_tabg_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabg_9_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabg_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabx_0 <= grp_mcalcAA_23_fu_556_ap_return_0;

    Eta_tabx_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabx_0_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabx_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabx_1 <= grp_mcalcAA_23_fu_556_ap_return_1;

    Eta_tabx_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabx_1_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabx_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabx_2 <= grp_mcalcAA_23_fu_556_ap_return_2;

    Eta_tabx_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabx_2_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabx_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_taby_0 <= grp_mcalcAA_23_fu_556_ap_return_9;

    Eta_taby_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_taby_0_ap_vld <= ap_const_logic_1;
        else 
            Eta_taby_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_taby_1 <= grp_mcalcAA_23_fu_556_ap_return_10;

    Eta_taby_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_taby_1_ap_vld <= ap_const_logic_1;
        else 
            Eta_taby_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_taby_2 <= grp_mcalcAA_23_fu_556_ap_return_11;

    Eta_taby_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_taby_2_ap_vld <= ap_const_logic_1;
        else 
            Eta_taby_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_taby_3 <= grp_mcalcAA_23_fu_556_ap_return_12;

    Eta_taby_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_taby_3_ap_vld <= ap_const_logic_1;
        else 
            Eta_taby_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_taby_4 <= grp_mcalcAA_23_fu_556_ap_return_13;

    Eta_taby_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_taby_4_ap_vld <= ap_const_logic_1;
        else 
            Eta_taby_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_taby_5 <= grp_mcalcAA_23_fu_556_ap_return_14;

    Eta_taby_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_taby_5_ap_vld <= ap_const_logic_1;
        else 
            Eta_taby_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_taby_6 <= grp_mcalcAA_23_fu_556_ap_return_15;

    Eta_taby_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_taby_6_ap_vld <= ap_const_logic_1;
        else 
            Eta_taby_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_taby_7 <= grp_mcalcAA_23_fu_556_ap_return_16;

    Eta_taby_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_taby_7_ap_vld <= ap_const_logic_1;
        else 
            Eta_taby_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_taby_8 <= grp_mcalcAA_23_fu_556_ap_return_17;

    Eta_taby_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_taby_8_ap_vld <= ap_const_logic_1;
        else 
            Eta_taby_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_taby_9 <= grp_mcalcAA_23_fu_556_ap_return_18;

    Eta_taby_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_taby_9_ap_vld <= ap_const_logic_1;
        else 
            Eta_taby_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabz_0 <= grp_mcalcAA_23_fu_556_ap_return_39;

    Eta_tabz_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabz_0_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabz_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabz_1 <= grp_mcalcAA_23_fu_556_ap_return_40;

    Eta_tabz_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabz_1_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabz_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabz_2 <= grp_mcalcAA_23_fu_556_ap_return_41;

    Eta_tabz_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabz_2_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabz_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabz_3 <= grp_mcalcAA_23_fu_556_ap_return_42;

    Eta_tabz_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabz_3_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabz_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabz_4 <= grp_mcalcAA_23_fu_556_ap_return_43;

    Eta_tabz_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabz_4_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabz_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabz_5 <= grp_mcalcAA_23_fu_556_ap_return_44;

    Eta_tabz_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabz_5_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabz_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabz_6 <= grp_mcalcAA_23_fu_556_ap_return_45;

    Eta_tabz_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabz_6_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabz_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabz_7 <= grp_mcalcAA_23_fu_556_ap_return_46;

    Eta_tabz_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabz_7_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabz_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabz_8 <= grp_mcalcAA_23_fu_556_ap_return_47;

    Eta_tabz_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabz_8_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabz_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Eta_tabz_9 <= grp_mcalcAA_23_fu_556_ap_return_48;

    Eta_tabz_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Eta_tabz_9_ap_vld <= ap_const_logic_1;
        else 
            Eta_tabz_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_buf4_address0 <= grp_mcalcAA_23_fu_556_Lam_buf4_address0;
    Lam_buf4_address1 <= grp_mcalcAA_23_fu_556_Lam_buf4_address1;
    Lam_buf4_ce0 <= grp_mcalcAA_23_fu_556_Lam_buf4_ce0;
    Lam_buf4_ce1 <= grp_mcalcAA_23_fu_556_Lam_buf4_ce1;
    Lam_buf6_address0 <= grp_mcalcAA_23_fu_556_Lam_buf6_address0;
    Lam_buf6_address1 <= grp_mcalcAA_23_fu_556_Lam_buf6_address1;
    Lam_buf6_ce0 <= grp_mcalcAA_23_fu_556_Lam_buf6_ce0;
    Lam_buf6_ce1 <= grp_mcalcAA_23_fu_556_Lam_buf6_ce1;
    Lam_buf6a_address0 <= grp_mcalcAA_23_fu_556_Lam_buf6a_address0;
    Lam_buf6a_address1 <= grp_mcalcAA_23_fu_556_Lam_buf6a_address1;
    Lam_buf6a_ce0 <= grp_mcalcAA_23_fu_556_Lam_buf6a_ce0;
    Lam_buf6a_ce1 <= grp_mcalcAA_23_fu_556_Lam_buf6a_ce1;
    Lam_bufA1_address0 <= grp_mcalcAA_23_fu_556_Lam_bufA1_address0;
    Lam_bufA1_address1 <= grp_mcalcAA_23_fu_556_Lam_bufA1_address1;
    Lam_bufA1_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufA1_ce0;
    Lam_bufA1_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufA1_ce1;
    Lam_bufA2a_address0 <= grp_mcalcAA_23_fu_556_Lam_bufA2a_address0;
    Lam_bufA2a_address1 <= grp_mcalcAA_23_fu_556_Lam_bufA2a_address1;
    Lam_bufA2a_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufA2a_ce0;
    Lam_bufA2a_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufA2a_ce1;
    Lam_bufA3_address0 <= grp_mcalcAA_23_fu_556_Lam_bufA3_address0;
    Lam_bufA3_address1 <= grp_mcalcAA_23_fu_556_Lam_bufA3_address1;
    Lam_bufA3_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufA3_ce0;
    Lam_bufA3_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufA3_ce1;
    Lam_bufA5_address0 <= grp_mcalcAA_23_fu_556_Lam_bufA5_address0;
    Lam_bufA5_address1 <= grp_mcalcAA_23_fu_556_Lam_bufA5_address1;
    Lam_bufA5_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufA5_ce0;
    Lam_bufA5_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufA5_ce1;
    Lam_bufA6_address0 <= grp_mcalcAA_23_fu_556_Lam_bufA6_address0;
    Lam_bufA6_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufA6_ce0;
    Lam_bufA6b_address0 <= grp_mcalcAA_23_fu_556_Lam_bufA6b_address0;
    Lam_bufA6b_address1 <= grp_mcalcAA_23_fu_556_Lam_bufA6b_address1;
    Lam_bufA6b_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufA6b_ce0;
    Lam_bufA6b_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufA6b_ce1;
    Lam_bufA6c_address0 <= grp_mcalcAA_23_fu_556_Lam_bufA6c_address0;
    Lam_bufA6c_address1 <= grp_mcalcAA_23_fu_556_Lam_bufA6c_address1;
    Lam_bufA6c_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufA6c_ce0;
    Lam_bufA6c_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufA6c_ce1;
    Lam_bufAa_address0 <= grp_mcalcAA_23_fu_556_Lam_bufAa_address0;
    Lam_bufAa_address1 <= grp_mcalcAA_23_fu_556_Lam_bufAa_address1;
    Lam_bufAa_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufAa_ce0;
    Lam_bufAa_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufAa_ce1;
    Lam_bufAb_address0 <= grp_mcalcAA_23_fu_556_Lam_bufAb_address0;
    Lam_bufAb_address1 <= grp_mcalcAA_23_fu_556_Lam_bufAb_address1;
    Lam_bufAb_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufAb_ce0;
    Lam_bufAb_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufAb_ce1;
    Lam_bufAc_address0 <= grp_mcalcAA_23_fu_556_Lam_bufAc_address0;
    Lam_bufAc_address1 <= grp_mcalcAA_23_fu_556_Lam_bufAc_address1;
    Lam_bufAc_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufAc_ce0;
    Lam_bufAc_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufAc_ce1;
    Lam_bufB1a_address0 <= grp_mcalcAA_23_fu_556_Lam_bufB1a_address0;
    Lam_bufB1a_address1 <= grp_mcalcAA_23_fu_556_Lam_bufB1a_address1;
    Lam_bufB1a_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufB1a_ce0;
    Lam_bufB1a_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufB1a_ce1;
    Lam_bufB1b_address0 <= grp_mcalcAA_23_fu_556_Lam_bufB1b_address0;
    Lam_bufB1b_address1 <= grp_mcalcAA_23_fu_556_Lam_bufB1b_address1;
    Lam_bufB1b_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufB1b_ce0;
    Lam_bufB1b_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufB1b_ce1;
    Lam_bufB1c_address0 <= grp_mcalcAA_23_fu_556_Lam_bufB1c_address0;
    Lam_bufB1c_address1 <= grp_mcalcAA_23_fu_556_Lam_bufB1c_address1;
    Lam_bufB1c_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufB1c_ce0;
    Lam_bufB1c_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufB1c_ce1;
    Lam_bufB2_address0 <= grp_mcalcAA_23_fu_556_Lam_bufB2_address0;
    Lam_bufB2_address1 <= grp_mcalcAA_23_fu_556_Lam_bufB2_address1;
    Lam_bufB2_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufB2_ce0;
    Lam_bufB2_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufB2_ce1;
    Lam_bufB3a_address0 <= grp_mcalcAA_23_fu_556_Lam_bufB3a_address0;
    Lam_bufB3a_address1 <= grp_mcalcAA_23_fu_556_Lam_bufB3a_address1;
    Lam_bufB3a_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufB3a_ce0;
    Lam_bufB3a_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufB3a_ce1;
    Lam_bufB3b_address0 <= grp_mcalcAA_23_fu_556_Lam_bufB3b_address0;
    Lam_bufB3b_address1 <= grp_mcalcAA_23_fu_556_Lam_bufB3b_address1;
    Lam_bufB3b_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufB3b_ce0;
    Lam_bufB3b_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufB3b_ce1;
    Lam_bufB5a_address0 <= grp_mcalcAA_23_fu_556_Lam_bufB5a_address0;
    Lam_bufB5a_address1 <= grp_mcalcAA_23_fu_556_Lam_bufB5a_address1;
    Lam_bufB5a_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufB5a_ce0;
    Lam_bufB5a_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufB5a_ce1;
    Lam_bufB5b_address0 <= grp_mcalcAA_23_fu_556_Lam_bufB5b_address0;
    Lam_bufB5b_address1 <= grp_mcalcAA_23_fu_556_Lam_bufB5b_address1;
    Lam_bufB5b_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufB5b_ce0;
    Lam_bufB5b_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufB5b_ce1;
    Lam_bufB6_address0 <= grp_mcalcAA_23_fu_556_Lam_bufB6_address0;
    Lam_bufB6_address1 <= grp_mcalcAA_23_fu_556_Lam_bufB6_address1;
    Lam_bufB6_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufB6_ce0;
    Lam_bufB6_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufB6_ce1;
    Lam_bufB_address0 <= grp_mcalcAA_23_fu_556_Lam_bufB_address0;
    Lam_bufB_address1 <= grp_mcalcAA_23_fu_556_Lam_bufB_address1;
    Lam_bufB_ce0 <= grp_mcalcAA_23_fu_556_Lam_bufB_ce0;
    Lam_bufB_ce1 <= grp_mcalcAA_23_fu_556_Lam_bufB_ce1;
    Lam_tabe_0 <= grp_mcalcAA_23_fu_556_ap_return_72;

    Lam_tabe_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabe_0_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabe_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabe_1 <= grp_mcalcAA_23_fu_556_ap_return_73;

    Lam_tabe_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabe_1_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabe_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabe_2 <= grp_mcalcAA_23_fu_556_ap_return_74;

    Lam_tabe_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabe_2_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabe_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_0 <= grp_mcalcAA_23_fu_556_ap_return_88;

    Lam_tabf_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabf_0_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_1 <= grp_mcalcAA_23_fu_556_ap_return_89;
    Lam_tabf_10 <= ap_const_lv16_0;

    Lam_tabf_10_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabf_10_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_11 <= ap_const_lv16_0;

    Lam_tabf_11_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabf_11_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_12 <= ap_const_lv16_0;

    Lam_tabf_12_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabf_12_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_13 <= ap_const_lv16_0;

    Lam_tabf_13_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabf_13_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_14 <= ap_const_lv16_0;

    Lam_tabf_14_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabf_14_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_15 <= ap_const_lv16_0;

    Lam_tabf_15_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabf_15_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_16 <= ap_const_lv16_0;

    Lam_tabf_16_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabf_16_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_17 <= ap_const_lv16_0;

    Lam_tabf_17_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabf_17_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Lam_tabf_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabf_1_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_2 <= grp_mcalcAA_23_fu_556_ap_return_90;

    Lam_tabf_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabf_2_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_3 <= grp_mcalcAA_23_fu_556_ap_return_91;

    Lam_tabf_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabf_3_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_4 <= grp_mcalcAA_23_fu_556_ap_return_92;

    Lam_tabf_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabf_4_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_5 <= grp_mcalcAA_23_fu_556_ap_return_93;

    Lam_tabf_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabf_5_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_6 <= grp_mcalcAA_23_fu_556_ap_return_94;

    Lam_tabf_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabf_6_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_7 <= grp_mcalcAA_23_fu_556_ap_return_95;

    Lam_tabf_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabf_7_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_8 <= grp_mcalcAA_23_fu_556_ap_return_96;

    Lam_tabf_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabf_8_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabf_9 <= grp_mcalcAA_23_fu_556_ap_return_97;

    Lam_tabf_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabf_9_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabf_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_0 <= grp_mcalcAA_23_fu_556_ap_return_118;

    Lam_tabg_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabg_0_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_1 <= grp_mcalcAA_23_fu_556_ap_return_119;
    Lam_tabg_10 <= ap_const_lv16_0;

    Lam_tabg_10_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabg_10_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_11 <= ap_const_lv16_0;

    Lam_tabg_11_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabg_11_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_12 <= ap_const_lv16_0;

    Lam_tabg_12_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabg_12_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_13 <= ap_const_lv16_0;

    Lam_tabg_13_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabg_13_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_14 <= ap_const_lv16_0;

    Lam_tabg_14_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabg_14_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_15 <= ap_const_lv16_0;

    Lam_tabg_15_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabg_15_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_16 <= ap_const_lv16_0;

    Lam_tabg_16_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabg_16_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_17 <= ap_const_lv16_0;

    Lam_tabg_17_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabg_17_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Lam_tabg_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabg_1_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_2 <= grp_mcalcAA_23_fu_556_ap_return_120;

    Lam_tabg_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabg_2_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_3 <= grp_mcalcAA_23_fu_556_ap_return_121;

    Lam_tabg_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabg_3_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_4 <= grp_mcalcAA_23_fu_556_ap_return_122;

    Lam_tabg_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabg_4_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_5 <= grp_mcalcAA_23_fu_556_ap_return_123;

    Lam_tabg_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabg_5_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_6 <= grp_mcalcAA_23_fu_556_ap_return_124;

    Lam_tabg_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabg_6_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_7 <= grp_mcalcAA_23_fu_556_ap_return_125;

    Lam_tabg_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabg_7_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_8 <= grp_mcalcAA_23_fu_556_ap_return_126;

    Lam_tabg_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabg_8_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabg_9 <= grp_mcalcAA_23_fu_556_ap_return_127;

    Lam_tabg_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabg_9_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabg_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabx_0 <= grp_mcalcAA_23_fu_556_ap_return_3;

    Lam_tabx_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabx_0_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabx_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabx_1 <= grp_mcalcAA_23_fu_556_ap_return_4;

    Lam_tabx_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabx_1_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabx_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabx_2 <= grp_mcalcAA_23_fu_556_ap_return_5;

    Lam_tabx_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabx_2_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabx_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_0 <= grp_mcalcAA_23_fu_556_ap_return_19;

    Lam_taby_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_taby_0_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_1 <= grp_mcalcAA_23_fu_556_ap_return_20;
    Lam_taby_10 <= ap_const_lv16_0;

    Lam_taby_10_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_taby_10_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_11 <= ap_const_lv16_0;

    Lam_taby_11_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_taby_11_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_12 <= ap_const_lv16_0;

    Lam_taby_12_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_taby_12_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_13 <= ap_const_lv16_0;

    Lam_taby_13_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_taby_13_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_14 <= ap_const_lv16_0;

    Lam_taby_14_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_taby_14_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_15 <= ap_const_lv16_0;

    Lam_taby_15_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_taby_15_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_16 <= ap_const_lv16_0;

    Lam_taby_16_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_taby_16_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_17 <= ap_const_lv16_0;

    Lam_taby_17_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_taby_17_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Lam_taby_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_taby_1_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_2 <= grp_mcalcAA_23_fu_556_ap_return_21;

    Lam_taby_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_taby_2_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_3 <= grp_mcalcAA_23_fu_556_ap_return_22;

    Lam_taby_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_taby_3_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_4 <= grp_mcalcAA_23_fu_556_ap_return_23;

    Lam_taby_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_taby_4_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_5 <= grp_mcalcAA_23_fu_556_ap_return_24;

    Lam_taby_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_taby_5_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_6 <= grp_mcalcAA_23_fu_556_ap_return_25;

    Lam_taby_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_taby_6_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_7 <= grp_mcalcAA_23_fu_556_ap_return_26;

    Lam_taby_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_taby_7_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_8 <= grp_mcalcAA_23_fu_556_ap_return_27;

    Lam_taby_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_taby_8_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_taby_9 <= grp_mcalcAA_23_fu_556_ap_return_28;

    Lam_taby_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_taby_9_ap_vld <= ap_const_logic_1;
        else 
            Lam_taby_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_0 <= grp_mcalcAA_23_fu_556_ap_return_49;

    Lam_tabz_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabz_0_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_1 <= grp_mcalcAA_23_fu_556_ap_return_50;
    Lam_tabz_10 <= ap_const_lv16_0;

    Lam_tabz_10_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabz_10_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_11 <= ap_const_lv16_0;

    Lam_tabz_11_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabz_11_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_12 <= ap_const_lv16_0;

    Lam_tabz_12_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabz_12_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_13 <= ap_const_lv16_0;

    Lam_tabz_13_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabz_13_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_14 <= ap_const_lv16_0;

    Lam_tabz_14_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabz_14_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_15 <= ap_const_lv16_0;

    Lam_tabz_15_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabz_15_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_16 <= ap_const_lv16_0;

    Lam_tabz_16_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabz_16_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_17 <= ap_const_lv16_0;

    Lam_tabz_17_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Lam_tabz_17_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Lam_tabz_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabz_1_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_2 <= grp_mcalcAA_23_fu_556_ap_return_51;

    Lam_tabz_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabz_2_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_3 <= grp_mcalcAA_23_fu_556_ap_return_52;

    Lam_tabz_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabz_3_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_4 <= grp_mcalcAA_23_fu_556_ap_return_53;

    Lam_tabz_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabz_4_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_5 <= grp_mcalcAA_23_fu_556_ap_return_54;

    Lam_tabz_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabz_5_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_6 <= grp_mcalcAA_23_fu_556_ap_return_55;

    Lam_tabz_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabz_6_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_7 <= grp_mcalcAA_23_fu_556_ap_return_56;

    Lam_tabz_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabz_7_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_8 <= grp_mcalcAA_23_fu_556_ap_return_57;

    Lam_tabz_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabz_8_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Lam_tabz_9 <= grp_mcalcAA_23_fu_556_ap_return_58;

    Lam_tabz_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Lam_tabz_9_ap_vld <= ap_const_logic_1;
        else 
            Lam_tabz_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabe_0 <= grp_mcalcAA_23_fu_556_ap_return_75;

    Peta_tabe_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabe_0_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabe_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabe_1 <= grp_mcalcAA_23_fu_556_ap_return_76;

    Peta_tabe_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabe_1_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabe_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabe_2 <= grp_mcalcAA_23_fu_556_ap_return_77;

    Peta_tabe_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabe_2_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabe_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_0 <= grp_mcalcAA_23_fu_556_ap_return_98;

    Peta_tabf_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabf_0_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_1 <= grp_mcalcAA_23_fu_556_ap_return_99;
    Peta_tabf_10 <= ap_const_lv16_80;

    Peta_tabf_10_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabf_10_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_11 <= ap_const_lv16_80;

    Peta_tabf_11_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabf_11_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_12 <= ap_const_lv16_80;

    Peta_tabf_12_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabf_12_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_13 <= ap_const_lv16_80;

    Peta_tabf_13_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabf_13_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_14 <= ap_const_lv16_80;

    Peta_tabf_14_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabf_14_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_15 <= ap_const_lv16_80;

    Peta_tabf_15_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabf_15_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_16 <= ap_const_lv16_80;

    Peta_tabf_16_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabf_16_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_17 <= ap_const_lv16_80;

    Peta_tabf_17_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabf_17_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Peta_tabf_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabf_1_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_2 <= grp_mcalcAA_23_fu_556_ap_return_100;

    Peta_tabf_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabf_2_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_3 <= grp_mcalcAA_23_fu_556_ap_return_101;

    Peta_tabf_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabf_3_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_4 <= grp_mcalcAA_23_fu_556_ap_return_102;

    Peta_tabf_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabf_4_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_5 <= grp_mcalcAA_23_fu_556_ap_return_103;

    Peta_tabf_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabf_5_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_6 <= grp_mcalcAA_23_fu_556_ap_return_104;

    Peta_tabf_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabf_6_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_7 <= grp_mcalcAA_23_fu_556_ap_return_105;

    Peta_tabf_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabf_7_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_8 <= grp_mcalcAA_23_fu_556_ap_return_106;

    Peta_tabf_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabf_8_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabf_9 <= grp_mcalcAA_23_fu_556_ap_return_107;

    Peta_tabf_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabf_9_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabf_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_0 <= grp_mcalcAA_23_fu_556_ap_return_128;

    Peta_tabg_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabg_0_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_1 <= grp_mcalcAA_23_fu_556_ap_return_129;
    Peta_tabg_10 <= ap_const_lv16_80;

    Peta_tabg_10_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabg_10_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_11 <= ap_const_lv16_80;

    Peta_tabg_11_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabg_11_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_12 <= ap_const_lv16_80;

    Peta_tabg_12_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabg_12_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_13 <= ap_const_lv16_80;

    Peta_tabg_13_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabg_13_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_14 <= ap_const_lv16_80;

    Peta_tabg_14_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabg_14_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_15 <= ap_const_lv16_80;

    Peta_tabg_15_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabg_15_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_16 <= ap_const_lv16_80;

    Peta_tabg_16_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabg_16_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_17 <= ap_const_lv16_80;

    Peta_tabg_17_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabg_17_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Peta_tabg_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabg_1_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_2 <= grp_mcalcAA_23_fu_556_ap_return_130;

    Peta_tabg_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabg_2_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_3 <= grp_mcalcAA_23_fu_556_ap_return_131;

    Peta_tabg_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabg_3_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_4 <= grp_mcalcAA_23_fu_556_ap_return_132;

    Peta_tabg_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabg_4_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_5 <= grp_mcalcAA_23_fu_556_ap_return_133;

    Peta_tabg_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabg_5_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_6 <= grp_mcalcAA_23_fu_556_ap_return_134;

    Peta_tabg_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabg_6_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_7 <= grp_mcalcAA_23_fu_556_ap_return_135;

    Peta_tabg_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabg_7_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_8 <= grp_mcalcAA_23_fu_556_ap_return_136;

    Peta_tabg_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabg_8_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabg_9 <= grp_mcalcAA_23_fu_556_ap_return_137;

    Peta_tabg_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabg_9_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabg_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabx_0 <= grp_mcalcAA_23_fu_556_ap_return_6;

    Peta_tabx_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabx_0_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabx_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabx_1 <= grp_mcalcAA_23_fu_556_ap_return_7;

    Peta_tabx_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabx_1_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabx_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabx_2 <= grp_mcalcAA_23_fu_556_ap_return_8;

    Peta_tabx_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabx_2_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabx_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_0 <= grp_mcalcAA_23_fu_556_ap_return_29;

    Peta_taby_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_taby_0_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_1 <= grp_mcalcAA_23_fu_556_ap_return_30;
    Peta_taby_10 <= ap_const_lv16_80;

    Peta_taby_10_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_taby_10_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_11 <= ap_const_lv16_80;

    Peta_taby_11_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_taby_11_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_12 <= ap_const_lv16_80;

    Peta_taby_12_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_taby_12_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_13 <= ap_const_lv16_80;

    Peta_taby_13_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_taby_13_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_14 <= ap_const_lv16_80;

    Peta_taby_14_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_taby_14_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_15 <= ap_const_lv16_80;

    Peta_taby_15_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_taby_15_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_16 <= ap_const_lv16_80;

    Peta_taby_16_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_taby_16_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_17 <= ap_const_lv16_80;

    Peta_taby_17_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_taby_17_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Peta_taby_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_taby_1_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_2 <= grp_mcalcAA_23_fu_556_ap_return_31;

    Peta_taby_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_taby_2_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_3 <= grp_mcalcAA_23_fu_556_ap_return_32;

    Peta_taby_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_taby_3_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_4 <= grp_mcalcAA_23_fu_556_ap_return_33;

    Peta_taby_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_taby_4_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_5 <= grp_mcalcAA_23_fu_556_ap_return_34;

    Peta_taby_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_taby_5_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_6 <= grp_mcalcAA_23_fu_556_ap_return_35;

    Peta_taby_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_taby_6_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_7 <= grp_mcalcAA_23_fu_556_ap_return_36;

    Peta_taby_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_taby_7_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_8 <= grp_mcalcAA_23_fu_556_ap_return_37;

    Peta_taby_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_taby_8_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_taby_9 <= grp_mcalcAA_23_fu_556_ap_return_38;

    Peta_taby_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_taby_9_ap_vld <= ap_const_logic_1;
        else 
            Peta_taby_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_0 <= grp_mcalcAA_23_fu_556_ap_return_59;

    Peta_tabz_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabz_0_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_1 <= grp_mcalcAA_23_fu_556_ap_return_60;
    Peta_tabz_10 <= ap_const_lv16_80;

    Peta_tabz_10_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabz_10_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_11 <= ap_const_lv16_80;

    Peta_tabz_11_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabz_11_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_12 <= ap_const_lv16_80;

    Peta_tabz_12_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabz_12_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_13 <= ap_const_lv16_80;

    Peta_tabz_13_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabz_13_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_14 <= ap_const_lv16_80;

    Peta_tabz_14_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabz_14_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_15 <= ap_const_lv16_80;

    Peta_tabz_15_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabz_15_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_16 <= ap_const_lv16_80;

    Peta_tabz_16_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabz_16_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_17 <= ap_const_lv16_80;

    Peta_tabz_17_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            Peta_tabz_17_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    Peta_tabz_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabz_1_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_2 <= grp_mcalcAA_23_fu_556_ap_return_61;

    Peta_tabz_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabz_2_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_3 <= grp_mcalcAA_23_fu_556_ap_return_62;

    Peta_tabz_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabz_3_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_4 <= grp_mcalcAA_23_fu_556_ap_return_63;

    Peta_tabz_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabz_4_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_5 <= grp_mcalcAA_23_fu_556_ap_return_64;

    Peta_tabz_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabz_5_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_6 <= grp_mcalcAA_23_fu_556_ap_return_65;

    Peta_tabz_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabz_6_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_7 <= grp_mcalcAA_23_fu_556_ap_return_66;

    Peta_tabz_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabz_7_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_8 <= grp_mcalcAA_23_fu_556_ap_return_67;

    Peta_tabz_8_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabz_8_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    Peta_tabz_9 <= grp_mcalcAA_23_fu_556_ap_return_68;

    Peta_tabz_9_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            Peta_tabz_9_ap_vld <= ap_const_logic_1;
        else 
            Peta_tabz_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    SpEtaPrevA_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevA_address0;
    SpEtaPrevA_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevA_ce0;
    SpEtaPrevAa_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevAa_address0;
    SpEtaPrevAa_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevAa_ce0;
    SpEtaPrevAb_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevAb_address0;
    SpEtaPrevAb_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevAb_ce0;
    SpEtaPrevB_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevB_address0;
    SpEtaPrevB_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevB_ce0;
    SpEtaPrevBa_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevBa_address0;
    SpEtaPrevBa_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevBa_ce0;
    SpEtaPrevBb_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevBb_address0;
    SpEtaPrevBb_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevBb_ce0;
    SpEtaPrevC_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevC_address0;
    SpEtaPrevC_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevC_ce0;
    SpEtaPrevD_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevD_address0;
    SpEtaPrevD_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevD_ce0;
    SpEtaPrevDa_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevDa_address0;
    SpEtaPrevDa_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevDa_ce0;
    SpEtaPrevDb_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevDb_address0;
    SpEtaPrevDb_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevDb_ce0;
    SpEtaPrevE_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevE_address0;
    SpEtaPrevE_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevE_ce0;
    SpEtaPrevEa_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevEa_address0;
    SpEtaPrevEa_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevEa_ce0;
    SpEtaPrevEb_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrevEb_address0;
    SpEtaPrevEb_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrevEb_ce0;
    SpEtaPrev_address0 <= grp_mcalcAA_23_fu_556_SpEtaPrev_address0;
    SpEtaPrev_ce0 <= grp_mcalcAA_23_fu_556_SpEtaPrev_ce0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_mcalcAA_23_fu_556_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            grp_mcalcAA_23_fu_556_ap_start <= ap_const_logic_1;
        else 
            grp_mcalcAA_23_fu_556_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    inxtab_0 <= m;

    inxtab_0_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            inxtab_0_ap_vld <= ap_const_logic_1;
        else 
            inxtab_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    inxtab_1 <= mA;

    inxtab_1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            inxtab_1_ap_vld <= ap_const_logic_1;
        else 
            inxtab_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    inxtab_2 <= mB;

    inxtab_2_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            inxtab_2_ap_vld <= ap_const_logic_1;
        else 
            inxtab_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
