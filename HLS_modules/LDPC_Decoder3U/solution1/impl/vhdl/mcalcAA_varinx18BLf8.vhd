-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18BLf8_rom is 
    generic(
             dwidth     : integer := 20; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18BLf8_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00011100000001110001", 1 => "00100000000011110010", 
    2 => "00100100000101110011", 3 => "00101000000111110100", 
    4 => "00101100001001110101", 5 => "00110000001011110110", 
    6 => "00110100001101110111", 7 => "00111000001111111000", 
    8 => "00111100010001111001", 9 => "01000000010011111010", 
    10 => "01000100010101111011", 11 => "01001000010111111100", 
    12 => "01001100011001111101", 13 => "01010000011011111110", 
    14 => "01010100011101111111", 15 => "01011000011111100000", 
    16 => "01011100100001100001", 17 => "01100000100011100010", 
    18 => "01100100100101100011", 19 => "01101000100111100100", 
    20 => "01101100101001100101", 21 => "01110000101011100110", 
    22 => "01110100101101100111", 23 => "01111000101111101000", 
    24 => "01111100110001101001", 25 => "00000000110011101010", 
    26 => "00000100110101101011", 27 => "00001000110111101100", 
    28 => "00001100111001101101", 29 => "00010000111011101110", 
    30 => "00010100111101101111", 31 => "00011000111111110000", 
    32 => "10001101000001101001", 33 => "10010001000011101010", 
    34 => "10010101000101101011", 35 => "10011001000111101100", 
    36 => "10011101001001101101", 37 => "10100001001011101110", 
    38 => "10100101001101101111", 39 => "10101001001111110000", 
    40 => "10101101010001110001", 41 => "10110001010011110010", 
    42 => "10110101010101110011", 43 => "10111001010111110100", 
    44 => "10111101011001110101", 45 => "11000001011011110110", 
    46 => "11000101011101110111", 47 => "11001001011111111000", 
    48 => "11001101100001111001", 49 => "11010001100011111010", 
    50 => "11010101100101111011", 51 => "11011001100111111100", 
    52 => "11011101101001111101", 53 => "11100001101011111110", 
    54 => "11100101101101111111", 55 => "11101001101111100000", 
    56 => "11101101110001100001", 57 => "11110001110011100010", 
    58 => "11110101110101100011", 59 => "11111001110111100100", 
    60 => "11111101111001100101", 61 => "10000001111011100110", 
    62 => "10000101111101100111", 63 => "10001001111111101000", 
    64 => "00100010000001100011", 65 => "00100110000011100100", 
    66 => "00101010000101100101", 67 => "00101110000111100110", 
    68 => "00110010001001100111", 69 => "00110110001011101000", 
    70 => "00111010001101101001", 71 => "00111110001111101010", 
    72 => "01000010010001101011", 73 => "01000110010011101100", 
    74 => "01001010010101101101", 75 => "01001110010111101110", 
    76 => "01010010011001101111", 77 => "01010110011011110000", 
    78 => "01011010011101110001", 79 => "01011110011111110010", 
    80 => "01100010100001110011", 81 => "01100110100011110100", 
    82 => "01101010100101110101", 83 => "01101110100111110110", 
    84 => "01110010101001110111", 85 => "01110110101011111000", 
    86 => "01111010101101111001", 87 => "01111110101111111010", 
    88 => "00000010110001111011", 89 => "00000110110011111100", 
    90 => "00001010110101111101", 91 => "00001110110111111110", 
    92 => "00010010111001111111", 93 => "00010110111011100000", 
    94 => "00011010111101100001", 95 => "00011110111111100010", 
    96 => "01000111000001010010", 97 => "01001011000011010011", 
    98 => "01001111000101010100", 99 => "01010011000111010101", 
    100 => "01010111001001010110", 101 => "01011011001011010111", 
    102 => "01011111001101011000", 103 => "01100011001111011001", 
    104 => "01100111010001011010", 105 => "01101011010011011011", 
    106 => "01101111010101011100", 107 => "01110011010111011101", 
    108 => "01110111011001011110", 109 => "01111011011011011111", 
    110 => "01111111011101000000", 111 => "00000011011111000001", 
    112 => "00000111100001000010", 113 => "00001011100011000011", 
    114 => "00001111100101000100", 115 => "00010011100111000101", 
    116 => "00010111101001000110", 117 => "00011011101011000111", 
    118 => "00011111101101001000", 119 => "00100011101111001001", 
    120 => "00100111110001001010", 121 => "00101011110011001011", 
    122 => "00101111110101001100", 123 => "00110011110111001101", 
    124 => "00110111111001001110", 125 => "00111011111011001111", 
    126 => "00111111111101010000", 127 => "01000011111111010001", 
    128 to 511=> "00000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18BLf8 is
    generic (
        DataWidth : INTEGER := 20;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18BLf8 is
    component mcalcAA_varinx18BLf8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18BLf8_rom_U :  component mcalcAA_varinx18BLf8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


