-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18BMgi_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18BMgi_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "000000010010100101111", 1 => "000000110010110110000", 
    2 => "000001010011000110001", 3 => "000001110011010110010", 
    4 => "000010010011100110011", 5 => "000010110011110110100", 
    6 => "000011010100000110101", 7 => "000011110100010110110", 
    8 => "000100010100100110111", 9 => "000100110100110111000", 
    10 => "000101010101000111001", 11 => "000101110101010111010", 
    12 => "000110010101100111011", 13 => "000110110101110111100", 
    14 => "000111010110000111101", 15 => "000111110110010111110", 
    16 => "001000010110100111111", 17 => "001000110110110100000", 
    18 => "001001010111000100001", 19 => "001001110111010100010", 
    20 => "001010010111100100011", 21 => "001010110111110100100", 
    22 => "001011010000000100101", 23 => "001011110000010100110", 
    24 => "001100010000100100111", 25 => "001100110000110101000", 
    26 => "001101010001000101001", 27 => "001101110001010101010", 
    28 => "001110010001100101011", 29 => "001110110001110101100", 
    30 => "001111010010000101101", 31 => "001111110010010101110", 
    32 => "010000011101011011101", 33 => "010000111101101011110", 
    34 => "010001011101111011111", 35 => "010001111110001000000", 
    36 => "010010011110011000001", 37 => "010010111110101000010", 
    38 => "010011011110111000011", 39 => "010011111111001000100", 
    40 => "010100011111011000101", 41 => "010100111111101000110", 
    42 => "010101011111111000111", 43 => "010101111000001001000", 
    44 => "010110011000011001001", 45 => "010110111000101001010", 
    46 => "010111011000111001011", 47 => "010111111001001001100", 
    48 => "011000011001011001101", 49 => "011000111001101001110", 
    50 => "011001011001111001111", 51 => "011001111010001010000", 
    52 => "011010011010011010001", 53 => "011010111010101010010", 
    54 => "011011011010111010011", 55 => "011011111011001010100", 
    56 => "011100011011011010101", 57 => "011100111011101010110", 
    58 => "011101011011111010111", 59 => "011101111100001011000", 
    60 => "011110011100011011001", 61 => "011110111100101011010", 
    62 => "011111011100111011011", 63 => "011111111101001011100", 
    64 => "100000011001001001011", 65 => "100000111001011001100", 
    66 => "100001011001101001101", 67 => "100001111001111001110", 
    68 => "100010011010001001111", 69 => "100010111010011010000", 
    70 => "100011011010101010001", 71 => "100011111010111010010", 
    72 => "100100011011001010011", 73 => "100100111011011010100", 
    74 => "100101011011101010101", 75 => "100101111011111010110", 
    76 => "100110011100001010111", 77 => "100110111100011011000", 
    78 => "100111011100101011001", 79 => "100111111100111011010", 
    80 => "101000011101001011011", 81 => "101000111101011011100", 
    82 => "101001011101101011101", 83 => "101001111101111011110", 
    84 => "101010011110001011111", 85 => "101010111110011000000", 
    86 => "101011011110101000001", 87 => "101011111110111000010", 
    88 => "101100011111001000011", 89 => "101100111111011000100", 
    90 => "101101011111101000101", 91 => "101101111111111000110", 
    92 => "101110011000001000111", 93 => "101110111000011001000", 
    94 => "101111011000101001001", 95 => "101111111000111001010", 
    96 => "110000011101010101001", 97 => "110000111101100101010", 
    98 => "110001011101110101011", 99 => "110001111110000101100", 
    100 => "110010011110010101101", 101 => "110010111110100101110", 
    102 => "110011011110110101111", 103 => "110011111111000110000", 
    104 => "110100011111010110001", 105 => "110100111111100110010", 
    106 => "110101011111110110011", 107 => "110101111000000110100", 
    108 => "110110011000010110101", 109 => "110110111000100110110", 
    110 => "110111011000110110111", 111 => "110111111001000111000", 
    112 => "111000011001010111001", 113 => "111000111001100111010", 
    114 => "111001011001110111011", 115 => "111001111010000111100", 
    116 => "111010011010010111101", 117 => "111010111010100111110", 
    118 => "111011011010110111111", 119 => "111011111011000100000", 
    120 => "111100011011010100001", 121 => "111100111011100100010", 
    122 => "111101011011110100011", 123 => "111101111100000100100", 
    124 => "111110011100010100101", 125 => "111110111100100100110", 
    126 => "111111011100110100111", 127 => "111111111101000101000", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18BMgi is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18BMgi is
    component mcalcAA_varinx18BMgi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18BMgi_rom_U :  component mcalcAA_varinx18BMgi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


