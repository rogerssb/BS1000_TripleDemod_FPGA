-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18AFfa_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18AFfa_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "011101100000100000000", 1 => "011110000000110000001", 
    2 => "011110100001000000010", 3 => "011111000001010000011", 
    4 => "011111100001100000100", 5 => "010000000001110000101", 
    6 => "010000100010000000110", 7 => "010001000010010000111", 
    8 => "010001100010100001000", 9 => "010010000010110001001", 
    10 => "010010100011000001010", 11 => "010011000011010001011", 
    12 => "010011100011100001100", 13 => "010100000011110001101", 
    14 => "010100100100000001110", 15 => "010101000100010001111", 
    16 => "010101100100100010000", 17 => "010110000100110010001", 
    18 => "010110100101000010010", 19 => "010111000101010010011", 
    20 => "010111100101100010100", 21 => "011000000101110010101", 
    22 => "011000100110000010110", 23 => "011001000110010010111", 
    24 => "011001100110100011000", 25 => "011010000110110011001", 
    26 => "011010100111000011010", 27 => "011011000111010011011", 
    28 => "011011100111100011100", 29 => "011100000111110011101", 
    30 => "011100100000000011110", 31 => "011101000000010011111", 
    32 => "101011001011110100000", 33 => "101011101100000100001", 
    34 => "101100001100010100010", 35 => "101100101100100100011", 
    36 => "101101001100110100100", 37 => "101101101101000100101", 
    38 => "101110001101010100110", 39 => "101110101101100100111", 
    40 => "101111001101110101000", 41 => "101111101110000101001", 
    42 => "100000001110010101010", 43 => "100000101110100101011", 
    44 => "100001001110110101100", 45 => "100001101111000101101", 
    46 => "100010001111010101110", 47 => "100010101111100101111", 
    48 => "100011001111110110000", 49 => "100011101000000110001", 
    50 => "100100001000010110010", 51 => "100100101000100110011", 
    52 => "100101001000110110100", 53 => "100101101001000110101", 
    54 => "100110001001010110110", 55 => "100110101001100110111", 
    56 => "100111001001110111000", 57 => "100111101010000111001", 
    58 => "101000001010010111010", 59 => "101000101010100111011", 
    60 => "101001001010110111100", 61 => "101001101011000111101", 
    62 => "101010001011010111110", 63 => "101010101011100111111", 
    64 => "100010100111011000000", 65 => "100011000111101000001", 
    66 => "100011100111111000010", 67 => "100100000000001000011", 
    68 => "100100100000011000100", 69 => "100101000000101000101", 
    70 => "100101100000111000110", 71 => "100110000001001000111", 
    72 => "100110100001011001000", 73 => "100111000001101001001", 
    74 => "100111100001111001010", 75 => "101000000010001001011", 
    76 => "101000100010011001100", 77 => "101001000010101001101", 
    78 => "101001100010111001110", 79 => "101010000011001001111", 
    80 => "101010100011011010000", 81 => "101011000011101010001", 
    82 => "101011100011111010010", 83 => "101100000100001010011", 
    84 => "101100100100011010100", 85 => "101101000100101010101", 
    86 => "101101100100111010110", 87 => "101110000101001010111", 
    88 => "101110100101011011000", 89 => "101111000101101011001", 
    90 => "101111100101111011010", 91 => "100000000110001011011", 
    92 => "100000100110011011100", 93 => "100001000110101011101", 
    94 => "100001100110111011110", 95 => "100010000111001011111", 
    96 => "010010100011111100000", 97 => "010011000100001100001", 
    98 => "010011100100011100010", 99 => "010100000100101100011", 
    100 => "010100100100111100100", 101 => "010101000101001100101", 
    102 => "010101100101011100110", 103 => "010110000101101100111", 
    104 => "010110100101111101000", 105 => "010111000110001101001", 
    106 => "010111100110011101010", 107 => "011000000110101101011", 
    108 => "011000100110111101100", 109 => "011001000111001101101", 
    110 => "011001100111011101110", 111 => "011010000111101101111", 
    112 => "011010100111111110000", 113 => "011011000000001110001", 
    114 => "011011100000011110010", 115 => "011100000000101110011", 
    116 => "011100100000111110100", 117 => "011101000001001110101", 
    118 => "011101100001011110110", 119 => "011110000001101110111", 
    120 => "011110100001111111000", 121 => "011111000010001111001", 
    122 => "011111100010011111010", 123 => "010000000010101111011", 
    124 => "010000100010111111100", 125 => "010001000011001111101", 
    126 => "010001100011011111110", 127 => "010010000011101111111", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18AFfa is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18AFfa is
    component mcalcAA_varinx18AFfa_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18AFfa_rom_U :  component mcalcAA_varinx18AFfa_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


