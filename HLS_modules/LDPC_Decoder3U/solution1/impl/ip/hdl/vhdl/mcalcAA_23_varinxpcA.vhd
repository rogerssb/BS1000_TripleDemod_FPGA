-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_23_varinxpcA_rom is 
    generic(
             dwidth     : integer := 8; 
             awidth     : integer := 8; 
             mem_size    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_23_varinxpcA_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10010111", 1 => "10011000", 2 => "10011001", 3 => "10011010", 
    4 => "10011011", 5 => "10011100", 6 => "10011101", 7 => "10011110", 
    8 => "10011111", 9 => "10100000", 10 => "10100001", 11 => "10100010", 
    12 => "10100011", 13 => "10100100", 14 => "10100101", 15 => "10100110", 
    16 => "10100111", 17 => "10101000", 18 => "10101001", 19 => "10101010", 
    20 => "10101011", 21 => "10101100", 22 => "10101101", 23 => "10101110", 
    24 => "10101111", 25 => "10110000", 26 => "10110001", 27 => "10110010", 
    28 => "10110011", 29 => "10110100", 30 => "10110101", 31 => "10110110", 
    32 => "10110111", 33 => "10111000", 34 => "10111001", 35 => "10111010", 
    36 => "10111011", 37 => "10111100", 38 => "10111101", 39 => "10111110", 
    40 => "10111111", 41 => "10000000", 42 => "10000001", 43 => "10000010", 
    44 => "10000011", 45 => "10000100", 46 => "10000101", 47 => "10000110", 
    48 => "10000111", 49 => "10001000", 50 => "10001001", 51 => "10001010", 
    52 => "10001011", 53 => "10001100", 54 => "10001101", 55 => "10001110", 
    56 => "10001111", 57 => "10010000", 58 => "10010001", 59 => "10010010", 
    60 => "10010011", 61 => "10010100", 62 => "10010101", 63 => "10010110", 
    64 => "11100100", 65 => "11100101", 66 => "11100110", 67 => "11100111", 
    68 => "11101000", 69 => "11101001", 70 => "11101010", 71 => "11101011", 
    72 => "11101100", 73 => "11101101", 74 => "11101110", 75 => "11101111", 
    76 => "11110000", 77 => "11110001", 78 => "11110010", 79 => "11110011", 
    80 => "11110100", 81 => "11110101", 82 => "11110110", 83 => "11110111", 
    84 => "11111000", 85 => "11111001", 86 => "11111010", 87 => "11111011", 
    88 => "11111100", 89 => "11111101", 90 => "11111110", 91 => "11111111", 
    92 => "11000000", 93 => "11000001", 94 => "11000010", 95 => "11000011", 
    96 => "11000100", 97 => "11000101", 98 => "11000110", 99 => "11000111", 
    100 => "11001000", 101 => "11001001", 102 => "11001010", 103 => "11001011", 
    104 => "11001100", 105 => "11001101", 106 => "11001110", 107 => "11001111", 
    108 => "11010000", 109 => "11010001", 110 => "11010010", 111 => "11010011", 
    112 => "11010100", 113 => "11010101", 114 => "11010110", 115 => "11010111", 
    116 => "11011000", 117 => "11011001", 118 => "11011010", 119 => "11011011", 
    120 => "11011100", 121 => "11011101", 122 => "11011110", 123 => "11011111", 
    124 => "11100000", 125 => "11100001", 126 => "11100010", 127 => "11100011", 
    128 => "11101101", 129 => "11101110", 130 => "11101111", 131 => "11110000", 
    132 => "11110001", 133 => "11110010", 134 => "11110011", 135 => "11110100", 
    136 => "11110101", 137 => "11110110", 138 => "11110111", 139 => "11111000", 
    140 => "11111001", 141 => "11111010", 142 => "11111011", 143 => "11111100", 
    144 => "11111101", 145 => "11111110", 146 => "11111111", 147 => "11000000", 
    148 => "11000001", 149 => "11000010", 150 => "11000011", 151 => "11000100", 
    152 => "11000101", 153 => "11000110", 154 => "11000111", 155 => "11001000", 
    156 => "11001001", 157 => "11001010", 158 => "11001011", 159 => "11001100", 
    160 => "11001101", 161 => "11001110", 162 => "11001111", 163 => "11010000", 
    164 => "11010001", 165 => "11010010", 166 => "11010011", 167 => "11010100", 
    168 => "11010101", 169 => "11010110", 170 => "11010111", 171 => "11011000", 
    172 => "11011001", 173 => "11011010", 174 => "11011011", 175 => "11011100", 
    176 => "11011101", 177 => "11011110", 178 => "11011111", 179 => "11100000", 
    180 => "11100001", 181 => "11100010", 182 => "11100011", 183 => "11100100", 
    184 => "11100101", 185 => "11100110", 186 => "11100111", 187 => "11101000", 
    188 => "11101001", 189 => "11101010", 190 => "11101011", 191 to 192=> "11101100", 
    193 => "11101101", 194 => "11101110", 195 => "11101111", 196 => "11110000", 
    197 => "11110001", 198 => "11110010", 199 => "11110011", 200 => "11110100", 
    201 => "11110101", 202 => "11110110", 203 => "11110111", 204 => "11111000", 
    205 => "11111001", 206 => "11111010", 207 => "11111011", 208 => "11111100", 
    209 => "11111101", 210 => "11111110", 211 => "11111111", 212 => "11000000", 
    213 => "11000001", 214 => "11000010", 215 => "11000011", 216 => "11000100", 
    217 => "11000101", 218 => "11000110", 219 => "11000111", 220 => "11001000", 
    221 => "11001001", 222 => "11001010", 223 => "11001011", 224 => "11001100", 
    225 => "11001101", 226 => "11001110", 227 => "11001111", 228 => "11010000", 
    229 => "11010001", 230 => "11010010", 231 => "11010011", 232 => "11010100", 
    233 => "11010101", 234 => "11010110", 235 => "11010111", 236 => "11011000", 
    237 => "11011001", 238 => "11011010", 239 => "11011011", 240 => "11011100", 
    241 => "11011101", 242 => "11011110", 243 => "11011111", 244 => "11100000", 
    245 => "11100001", 246 => "11100010", 247 => "11100011", 248 => "11100100", 
    249 => "11100101", 250 => "11100110", 251 => "11100111", 252 => "11101000", 
    253 => "11101001", 254 => "11101010", 255 => "11101011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_23_varinxpcA is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_23_varinxpcA is
    component mcalcAA_23_varinxpcA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_23_varinxpcA_rom_U :  component mcalcAA_23_varinxpcA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


