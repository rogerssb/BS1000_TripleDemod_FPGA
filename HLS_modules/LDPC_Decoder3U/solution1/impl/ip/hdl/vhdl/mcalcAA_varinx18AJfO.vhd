-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18AJfO_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18AJfO_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "101101001000000010110", 1 => "101101101000010010111", 
    2 => "101110001000100011000", 3 => "101110101000110011001", 
    4 => "101111001001000011010", 5 => "101111101001010011011", 
    6 => "100000001001100011100", 7 => "100000101001110011101", 
    8 => "100001001010000011110", 9 => "100001101010010011111", 
    10 => "100010001010100000000", 11 => "100010101010110000001", 
    12 => "100011001011000000010", 13 => "100011101011010000011", 
    14 => "100100001011100000100", 15 => "100100101011110000101", 
    16 => "100101001100000000110", 17 => "100101101100010000111", 
    18 => "100110001100100001000", 19 => "100110101100110001001", 
    20 => "100111001101000001010", 21 => "100111101101010001011", 
    22 => "101000001101100001100", 23 => "101000101101110001101", 
    24 => "101001001110000001110", 25 => "101001101110010001111", 
    26 => "101010001110100010000", 27 => "101010101110110010001", 
    28 => "101011001111000010010", 29 => "101011101111010010011", 
    30 => "101100001111100010100", 31 => "101100101111110010101", 
    32 => "111110010111100111011", 33 => "111110110111110111100", 
    34 => "111111010000000111101", 35 => "111111110000010111110", 
    36 => "110000010000100111111", 37 => "110000110000110100000", 
    38 => "110001010001000100001", 39 => "110001110001010100010", 
    40 => "110010010001100100011", 41 => "110010110001110100100", 
    42 => "110011010010000100101", 43 => "110011110010010100110", 
    44 => "110100010010100100111", 45 => "110100110010110101000", 
    46 => "110101010011000101001", 47 => "110101110011010101010", 
    48 => "110110010011100101011", 49 => "110110110011110101100", 
    50 => "110111010100000101101", 51 => "110111110100010101110", 
    52 => "111000010100100101111", 53 => "111000110100110110000", 
    54 => "111001010101000110001", 55 => "111001110101010110010", 
    56 => "111010010101100110011", 57 => "111010110101110110100", 
    58 => "111011010110000110101", 59 => "111011110110010110110", 
    60 => "111100010110100110111", 61 => "111100110110110111000", 
    62 => "111101010111000111001", 63 => "111101110111010111010", 
    64 => "111111010011000010010", 65 => "111111110011010010011", 
    66 => "110000010011100010100", 67 => "110000110011110010101", 
    68 => "110001010100000010110", 69 => "110001110100010010111", 
    70 => "110010010100100011000", 71 => "110010110100110011001", 
    72 => "110011010101000011010", 73 => "110011110101010011011", 
    74 => "110100010101100011100", 75 => "110100110101110011101", 
    76 => "110101010110000011110", 77 => "110101110110010011111", 
    78 => "110110010110100000000", 79 => "110110110110110000001", 
    80 => "110111010111000000010", 81 => "110111110111010000011", 
    82 => "111000010111100000100", 83 => "111000110111110000101", 
    84 => "111001010000000000110", 85 => "111001110000010000111", 
    86 => "111010010000100001000", 87 => "111010110000110001001", 
    88 => "111011010001000001010", 89 => "111011110001010001011", 
    90 => "111100010001100001100", 91 => "111100110001110001101", 
    92 => "111101010010000001110", 93 => "111101110010010001111", 
    94 => "111110010010100010000", 95 => "111110110010110010001", 
    96 => "110110101011100010011", 97 => "110111001011110010100", 
    98 => "110111101100000010101", 99 => "111000001100010010110", 
    100 => "111000101100100010111", 101 => "111001001100110011000", 
    102 => "111001101101000011001", 103 => "111010001101010011010", 
    104 => "111010101101100011011", 105 => "111011001101110011100", 
    106 => "111011101110000011101", 107 => "111100001110010011110", 
    108 => "111100101110100011111", 109 => "111101001110110000000", 
    110 => "111101101111000000001", 111 => "111110001111010000010", 
    112 => "111110101111100000011", 113 => "111111001111110000100", 
    114 => "111111101000000000101", 115 => "110000001000010000110", 
    116 => "110000101000100000111", 117 => "110001001000110001000", 
    118 => "110001101001000001001", 119 => "110010001001010001010", 
    120 => "110010101001100001011", 121 => "110011001001110001100", 
    122 => "110011101010000001101", 123 => "110100001010010001110", 
    124 => "110100101010100001111", 125 => "110101001010110010000", 
    126 => "110101101011000010001", 127 => "110110001011010010010", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18AJfO is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18AJfO is
    component mcalcAA_varinx18AJfO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18AJfO_rom_U :  component mcalcAA_varinx18AJfO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


