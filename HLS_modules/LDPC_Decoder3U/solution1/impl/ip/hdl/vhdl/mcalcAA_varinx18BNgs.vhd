-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mcalcAA_varinx18BNgs_rom is 
    generic(
             dwidth     : integer := 21; 
             awidth     : integer := 9; 
             mem_size    : integer := 512
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mcalcAA_varinx18BNgs_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "111100110110010001000", 1 => "111101010110100001001", 
    2 => "111101110110110001010", 3 => "111110010111000001011", 
    4 => "111110110111010001100", 5 => "111111010111100001101", 
    6 => "111111110111110001110", 7 => "110000010000000001111", 
    8 => "110000110000010010000", 9 => "110001010000100010001", 
    10 => "110001110000110010010", 11 => "110010010001000010011", 
    12 => "110010110001010010100", 13 => "110011010001100010101", 
    14 => "110011110001110010110", 15 => "110100010010000010111", 
    16 => "110100110010010011000", 17 => "110101010010100011001", 
    18 => "110101110010110011010", 19 => "110110010011000011011", 
    20 => "110110110011010011100", 21 => "110111010011100011101", 
    22 => "110111110011110011110", 23 => "111000010100000011111", 
    24 => "111000110100010000000", 25 => "111001010100100000001", 
    26 => "111001110100110000010", 27 => "111010010101000000011", 
    28 => "111010110101010000100", 29 => "111011010101100000101", 
    30 => "111011110101110000110", 31 => "111100010110000000111", 
    32 => "111011101011000001111", 33 => "111100001011010010000", 
    34 => "111100101011100010001", 35 => "111101001011110010010", 
    36 => "111101101100000010011", 37 => "111110001100010010100", 
    38 => "111110101100100010101", 39 => "111111001100110010110", 
    40 => "111111101101000010111", 41 => "110000001101010011000", 
    42 => "110000101101100011001", 43 => "110001001101110011010", 
    44 => "110001101110000011011", 45 => "110010001110010011100", 
    46 => "110010101110100011101", 47 => "110011001110110011110", 
    48 => "110011101111000011111", 49 => "110100001111010000000", 
    50 => "110100101111100000001", 51 => "110101001111110000010", 
    52 => "110101101000000000011", 53 => "110110001000010000100", 
    54 => "110110101000100000101", 55 => "110111001000110000110", 
    56 => "110111101001000000111", 57 => "111000001001010001000", 
    58 => "111000101001100001001", 59 => "111001001001110001010", 
    60 => "111001101010000001011", 61 => "111010001010010001100", 
    62 => "111010101010100001101", 63 => "111011001010110001110", 
    64 => "101001001101110000100", 65 => "101001101110000000101", 
    66 => "101010001110010000110", 67 => "101010101110100000111", 
    68 => "101011001110110001000", 69 => "101011101111000001001", 
    70 => "101100001111010001010", 71 => "101100101111100001011", 
    72 => "101101001111110001100", 73 => "101101101000000001101", 
    74 => "101110001000010001110", 75 => "101110101000100001111", 
    76 => "101111001000110010000", 77 => "101111101001000010001", 
    78 => "100000001001010010010", 79 => "100000101001100010011", 
    80 => "100001001001110010100", 81 => "100001101010000010101", 
    82 => "100010001010010010110", 83 => "100010101010100010111", 
    84 => "100011001010110011000", 85 => "100011101011000011001", 
    86 => "100100001011010011010", 87 => "100100101011100011011", 
    88 => "100101001011110011100", 89 => "100101101100000011101", 
    90 => "100110001100010011110", 91 => "100110101100100011111", 
    92 => "100111001100110000000", 93 => "100111101101000000001", 
    94 => "101000001101010000010", 95 => "101000101101100000011", 
    96 => "111010010101100101000", 97 => "111010110101110101001", 
    98 => "111011010110000101010", 99 => "111011110110010101011", 
    100 => "111100010110100101100", 101 => "111100110110110101101", 
    102 => "111101010111000101110", 103 => "111101110111010101111", 
    104 => "111110010111100110000", 105 => "111110110111110110001", 
    106 => "111111010000000110010", 107 => "111111110000010110011", 
    108 => "110000010000100110100", 109 => "110000110000110110101", 
    110 => "110001010001000110110", 111 => "110001110001010110111", 
    112 => "110010010001100111000", 113 => "110010110001110111001", 
    114 => "110011010010000111010", 115 => "110011110010010111011", 
    116 => "110100010010100111100", 117 => "110100110010110111101", 
    118 => "110101010011000111110", 119 => "110101110011010111111", 
    120 => "110110010011100100000", 121 => "110110110011110100001", 
    122 => "110111010100000100010", 123 => "110111110100010100011", 
    124 => "111000010100100100100", 125 => "111000110100110100101", 
    126 => "111001010101000100110", 127 => "111001110101010100111", 
    128 to 511=> "000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity mcalcAA_varinx18BNgs is
    generic (
        DataWidth : INTEGER := 21;
        AddressRange : INTEGER := 512;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mcalcAA_varinx18BNgs is
    component mcalcAA_varinx18BNgs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mcalcAA_varinx18BNgs_rom_U :  component mcalcAA_varinx18BNgs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


