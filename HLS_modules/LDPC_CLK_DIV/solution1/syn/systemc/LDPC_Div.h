// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _LDPC_Div_HH_
#define _LDPC_Div_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct LDPC_Div : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > reset;
    sc_out< sc_logic > rd_clk_out;
    sc_out< sc_logic > rd_clk_out_ap_vld;
    sc_in< sc_lv<16> > clk_div;
    sc_in< sc_lv<2> > block_V;


    // Module declarations
    LDPC_Div(sc_module_name name);
    SC_HAS_PROCESS(LDPC_Div);

    ~LDPC_Div();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<16> > out_count;
    sc_signal< sc_lv<16> > count;
    sc_signal< sc_lv<16> > max;
    sc_signal< sc_lv<1> > out_count_flag_1_phi_fu_72_p4;
    sc_signal< sc_lv<1> > or_cond_fu_185_p2;
    sc_signal< sc_lv<1> > not_or_cond3_fu_123_p2;
    sc_signal< sc_lv<16> > tmp_5_fu_191_p2;
    sc_signal< sc_lv<16> > out_count_new_1_phi_fu_82_p4;
    sc_signal< sc_lv<16> > count_new_phi_fu_92_p4;
    sc_signal< sc_lv<16> > tmp_2_fu_164_p3;
    sc_signal< sc_lv<1> > or_cond3_fu_117_p2;
    sc_signal< sc_lv<16> > storemerge_cast_cast_fu_144_p3;
    sc_signal< sc_lv<1> > tmp_fu_111_p2;
    sc_signal< sc_lv<1> > or_cond3_fu_117_p1;
    sc_signal< sc_lv<1> > tmp_1_fu_138_p2;
    sc_signal< sc_lv<16> > count_load_op_fu_158_p2;
    sc_signal< sc_lv<16> > out_count_load_s_fu_130_p3;
    sc_signal< sc_lv<1> > tmp_3_fu_173_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_179_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<16> ap_const_lv16_400;
    static const sc_lv<16> ap_const_lv16_1000;
    static const sc_lv<16> ap_const_lv16_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_count_load_op_fu_158_p2();
    void thread_count_new_phi_fu_92_p4();
    void thread_not_or_cond3_fu_123_p2();
    void thread_or_cond3_fu_117_p1();
    void thread_or_cond3_fu_117_p2();
    void thread_or_cond_fu_185_p2();
    void thread_out_count_flag_1_phi_fu_72_p4();
    void thread_out_count_load_s_fu_130_p3();
    void thread_out_count_new_1_phi_fu_82_p4();
    void thread_rd_clk_out();
    void thread_rd_clk_out_ap_vld();
    void thread_storemerge_cast_cast_fu_144_p3();
    void thread_tmp_1_fu_138_p2();
    void thread_tmp_2_fu_164_p3();
    void thread_tmp_3_fu_173_p2();
    void thread_tmp_4_fu_179_p2();
    void thread_tmp_5_fu_191_p2();
    void thread_tmp_fu_111_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
