// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "LDPC_Div.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic LDPC_Div::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic LDPC_Div::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> LDPC_Div::ap_ST_fsm_state1 = "1";
const sc_lv<32> LDPC_Div::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> LDPC_Div::ap_const_lv1_1 = "1";
const sc_lv<16> LDPC_Div::ap_const_lv16_0 = "0000000000000000";
const sc_lv<1> LDPC_Div::ap_const_lv1_0 = "0";
const sc_lv<2> LDPC_Div::ap_const_lv2_1 = "1";
const sc_lv<16> LDPC_Div::ap_const_lv16_400 = "10000000000";
const sc_lv<16> LDPC_Div::ap_const_lv16_1000 = "1000000000000";
const sc_lv<16> LDPC_Div::ap_const_lv16_1 = "1";

LDPC_Div::LDPC_Div(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_count_load_op_fu_158_p2);
    sensitive << ( count );

    SC_METHOD(thread_count_new_phi_fu_92_p4);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( or_cond_fu_185_p2 );
    sensitive << ( tmp_2_fu_164_p3 );

    SC_METHOD(thread_not_or_cond3_fu_123_p2);
    sensitive << ( or_cond3_fu_117_p2 );

    SC_METHOD(thread_or_cond3_fu_117_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reset );

    SC_METHOD(thread_or_cond3_fu_117_p2);
    sensitive << ( tmp_fu_111_p2 );
    sensitive << ( or_cond3_fu_117_p1 );

    SC_METHOD(thread_or_cond_fu_185_p2);
    sensitive << ( tmp_3_fu_173_p2 );
    sensitive << ( tmp_4_fu_179_p2 );

    SC_METHOD(thread_out_count_flag_1_phi_fu_72_p4);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( or_cond_fu_185_p2 );
    sensitive << ( not_or_cond3_fu_123_p2 );

    SC_METHOD(thread_out_count_load_s_fu_130_p3);
    sensitive << ( out_count );
    sensitive << ( or_cond3_fu_117_p2 );

    SC_METHOD(thread_out_count_new_1_phi_fu_82_p4);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( or_cond_fu_185_p2 );
    sensitive << ( tmp_5_fu_191_p2 );

    SC_METHOD(thread_rd_clk_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( or_cond_fu_185_p2 );

    SC_METHOD(thread_rd_clk_out_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( or_cond_fu_185_p2 );

    SC_METHOD(thread_storemerge_cast_cast_fu_144_p3);
    sensitive << ( tmp_1_fu_138_p2 );

    SC_METHOD(thread_tmp_1_fu_138_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( block_V );

    SC_METHOD(thread_tmp_2_fu_164_p3);
    sensitive << ( or_cond3_fu_117_p2 );
    sensitive << ( count_load_op_fu_158_p2 );

    SC_METHOD(thread_tmp_3_fu_173_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( clk_div );
    sensitive << ( tmp_2_fu_164_p3 );

    SC_METHOD(thread_tmp_4_fu_179_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( storemerge_cast_cast_fu_144_p3 );
    sensitive << ( out_count_load_s_fu_130_p3 );

    SC_METHOD(thread_tmp_5_fu_191_p2);
    sensitive << ( out_count_load_s_fu_130_p3 );

    SC_METHOD(thread_tmp_fu_111_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_count );
    sensitive << ( max );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    out_count = "0000000000000000";
    count = "0000000000000000";
    max = "0001001110001000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "LDPC_Div_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, rd_clk_out, "(port)rd_clk_out");
    sc_trace(mVcdFile, rd_clk_out_ap_vld, "(port)rd_clk_out_ap_vld");
    sc_trace(mVcdFile, clk_div, "(port)clk_div");
    sc_trace(mVcdFile, block_V, "(port)block_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_count, "out_count");
    sc_trace(mVcdFile, count, "count");
    sc_trace(mVcdFile, max, "max");
    sc_trace(mVcdFile, out_count_flag_1_phi_fu_72_p4, "out_count_flag_1_phi_fu_72_p4");
    sc_trace(mVcdFile, or_cond_fu_185_p2, "or_cond_fu_185_p2");
    sc_trace(mVcdFile, not_or_cond3_fu_123_p2, "not_or_cond3_fu_123_p2");
    sc_trace(mVcdFile, tmp_5_fu_191_p2, "tmp_5_fu_191_p2");
    sc_trace(mVcdFile, out_count_new_1_phi_fu_82_p4, "out_count_new_1_phi_fu_82_p4");
    sc_trace(mVcdFile, count_new_phi_fu_92_p4, "count_new_phi_fu_92_p4");
    sc_trace(mVcdFile, tmp_2_fu_164_p3, "tmp_2_fu_164_p3");
    sc_trace(mVcdFile, or_cond3_fu_117_p2, "or_cond3_fu_117_p2");
    sc_trace(mVcdFile, storemerge_cast_cast_fu_144_p3, "storemerge_cast_cast_fu_144_p3");
    sc_trace(mVcdFile, tmp_fu_111_p2, "tmp_fu_111_p2");
    sc_trace(mVcdFile, or_cond3_fu_117_p1, "or_cond3_fu_117_p1");
    sc_trace(mVcdFile, tmp_1_fu_138_p2, "tmp_1_fu_138_p2");
    sc_trace(mVcdFile, count_load_op_fu_158_p2, "count_load_op_fu_158_p2");
    sc_trace(mVcdFile, out_count_load_s_fu_130_p3, "out_count_load_s_fu_130_p3");
    sc_trace(mVcdFile, tmp_3_fu_173_p2, "tmp_3_fu_173_p2");
    sc_trace(mVcdFile, tmp_4_fu_179_p2, "tmp_4_fu_179_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("LDPC_Div.hdltvin.dat");
    mHdltvoutHandle.open("LDPC_Div.hdltvout.dat");
}

LDPC_Div::~LDPC_Div() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void LDPC_Div::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        count = count_new_phi_fu_92_p4.read();
        max = storemerge_cast_cast_fu_144_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(out_count_flag_1_phi_fu_72_p4.read(), ap_const_lv1_0))) {
        out_count = out_count_new_1_phi_fu_82_p4.read();
    }
}

void LDPC_Div::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void LDPC_Div::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void LDPC_Div::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void LDPC_Div::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void LDPC_Div::thread_count_load_op_fu_158_p2() {
    count_load_op_fu_158_p2 = (!count.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(count.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void LDPC_Div::thread_count_new_phi_fu_92_p4() {
    if (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) {
        if (esl_seteq<1,1,1>(or_cond_fu_185_p2.read(), ap_const_lv1_0)) {
            count_new_phi_fu_92_p4 = tmp_2_fu_164_p3.read();
        } else if (!esl_seteq<1,1,1>(or_cond_fu_185_p2.read(), ap_const_lv1_0)) {
            count_new_phi_fu_92_p4 = ap_const_lv16_0;
        } else {
            count_new_phi_fu_92_p4 = "XXXXXXXXXXXXXXXX";
        }
    } else {
        count_new_phi_fu_92_p4 = "XXXXXXXXXXXXXXXX";
    }
}

void LDPC_Div::thread_not_or_cond3_fu_123_p2() {
    not_or_cond3_fu_123_p2 = (or_cond3_fu_117_p2.read() ^ ap_const_lv1_1);
}

void LDPC_Div::thread_or_cond3_fu_117_p1() {
    or_cond3_fu_117_p1 =  (sc_lv<1>) (reset.read());
}

void LDPC_Div::thread_or_cond3_fu_117_p2() {
    or_cond3_fu_117_p2 = (tmp_fu_111_p2.read() | or_cond3_fu_117_p1.read());
}

void LDPC_Div::thread_or_cond_fu_185_p2() {
    or_cond_fu_185_p2 = (tmp_3_fu_173_p2.read() & tmp_4_fu_179_p2.read());
}

void LDPC_Div::thread_out_count_flag_1_phi_fu_72_p4() {
    if (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) {
        if (esl_seteq<1,1,1>(or_cond_fu_185_p2.read(), ap_const_lv1_0)) {
            out_count_flag_1_phi_fu_72_p4 = not_or_cond3_fu_123_p2.read();
        } else if (!esl_seteq<1,1,1>(or_cond_fu_185_p2.read(), ap_const_lv1_0)) {
            out_count_flag_1_phi_fu_72_p4 = ap_const_lv1_1;
        } else {
            out_count_flag_1_phi_fu_72_p4 =  (sc_lv<1>) ("X");
        }
    } else {
        out_count_flag_1_phi_fu_72_p4 =  (sc_lv<1>) ("X");
    }
}

void LDPC_Div::thread_out_count_load_s_fu_130_p3() {
    out_count_load_s_fu_130_p3 = (!or_cond3_fu_117_p2.read()[0].is_01())? sc_lv<16>(): ((or_cond3_fu_117_p2.read()[0].to_bool())? out_count.read(): ap_const_lv16_0);
}

void LDPC_Div::thread_out_count_new_1_phi_fu_82_p4() {
    if (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) {
        if (esl_seteq<1,1,1>(or_cond_fu_185_p2.read(), ap_const_lv1_0)) {
            out_count_new_1_phi_fu_82_p4 = ap_const_lv16_0;
        } else if (!esl_seteq<1,1,1>(or_cond_fu_185_p2.read(), ap_const_lv1_0)) {
            out_count_new_1_phi_fu_82_p4 = tmp_5_fu_191_p2.read();
        } else {
            out_count_new_1_phi_fu_82_p4 = "XXXXXXXXXXXXXXXX";
        }
    } else {
        out_count_new_1_phi_fu_82_p4 = "XXXXXXXXXXXXXXXX";
    }
}

void LDPC_Div::thread_rd_clk_out() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        if (!esl_seteq<1,1,1>(or_cond_fu_185_p2.read(), ap_const_lv1_0)) {
            rd_clk_out =  (sc_logic) (ap_const_lv1_1[0]);
        } else if (esl_seteq<1,1,1>(or_cond_fu_185_p2.read(), ap_const_lv1_0)) {
            rd_clk_out =  (sc_logic) (ap_const_lv1_0[0]);
        } else {
            rd_clk_out = sc_logic('X');
        }
    } else {
        rd_clk_out = sc_logic('X');
    }
}

void LDPC_Div::thread_rd_clk_out_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,1,1>(or_cond_fu_185_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(or_cond_fu_185_p2.read(), ap_const_lv1_0)))) {
        rd_clk_out_ap_vld = ap_const_logic_1;
    } else {
        rd_clk_out_ap_vld = ap_const_logic_0;
    }
}

void LDPC_Div::thread_storemerge_cast_cast_fu_144_p3() {
    storemerge_cast_cast_fu_144_p3 = (!tmp_1_fu_138_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_1_fu_138_p2.read()[0].to_bool())? ap_const_lv16_400: ap_const_lv16_1000);
}

void LDPC_Div::thread_tmp_1_fu_138_p2() {
    tmp_1_fu_138_p2 = (!block_V.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(block_V.read() == ap_const_lv2_1);
}

void LDPC_Div::thread_tmp_2_fu_164_p3() {
    tmp_2_fu_164_p3 = (!or_cond3_fu_117_p2.read()[0].is_01())? sc_lv<16>(): ((or_cond3_fu_117_p2.read()[0].to_bool())? count_load_op_fu_158_p2.read(): ap_const_lv16_1);
}

void LDPC_Div::thread_tmp_3_fu_173_p2() {
    tmp_3_fu_173_p2 = (!tmp_2_fu_164_p3.read().is_01() || !clk_div.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_164_p3.read() == clk_div.read());
}

void LDPC_Div::thread_tmp_4_fu_179_p2() {
    tmp_4_fu_179_p2 = (!out_count_load_s_fu_130_p3.read().is_01() || !storemerge_cast_cast_fu_144_p3.read().is_01())? sc_lv<1>(): (sc_bigint<16>(out_count_load_s_fu_130_p3.read()) < sc_bigint<16>(storemerge_cast_cast_fu_144_p3.read()));
}

void LDPC_Div::thread_tmp_5_fu_191_p2() {
    tmp_5_fu_191_p2 = (!out_count_load_s_fu_130_p3.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(out_count_load_s_fu_130_p3.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void LDPC_Div::thread_tmp_fu_111_p2() {
    tmp_fu_111_p2 = (!out_count.read().is_01() || !max.read().is_01())? sc_lv<1>(): (sc_bigint<16>(out_count.read()) < sc_bigint<16>(max.read()));
}

void LDPC_Div::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void LDPC_Div::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"reset\" :  \"" << reset.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rd_clk_out\" :  \"" << rd_clk_out.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rd_clk_out_ap_vld\" :  \"" << rd_clk_out_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"clk_div\" :  \"" << clk_div.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"block_V\" :  \"" << block_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

