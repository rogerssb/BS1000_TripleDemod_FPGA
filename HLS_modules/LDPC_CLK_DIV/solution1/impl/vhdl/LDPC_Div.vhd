-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LDPC_Div is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    reset : IN STD_LOGIC;
    rd_clk_out : OUT STD_LOGIC;
    rd_clk_out_ap_vld : OUT STD_LOGIC;
    clk_div : IN STD_LOGIC_VECTOR (15 downto 0);
    block_V : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of LDPC_Div is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "LDPC_Div,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.779000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=39,HLS_SYN_LUT=134}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_400 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_const_lv16_1000 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_count : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal count : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal max : STD_LOGIC_VECTOR (15 downto 0) := "0001001110001000";
    signal out_count_flag_1_phi_fu_72_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond3_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_191_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_count_new_1_phi_fu_82_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal count_new_phi_fu_92_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_164_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond3_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_cast_cast_fu_144_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_117_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_load_op_fu_158_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_count_load_s_fu_130_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                count <= count_new_phi_fu_92_p4;
                    max(3) <= storemerge_cast_cast_fu_144_p3(3);    max(10 downto 7) <= storemerge_cast_cast_fu_144_p3(10 downto 7);    max(12) <= storemerge_cast_cast_fu_144_p3(12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((out_count_flag_1_phi_fu_72_p4 = ap_const_lv1_0)))) then
                out_count <= out_count_new_1_phi_fu_82_p4;
            end if;
        end if;
    end process;
    max(2 downto 0) <= "000";
    max(6 downto 4) <= "000";
    max(11 downto 11) <= "0";
    max(15 downto 13) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count_load_op_fu_158_p2 <= std_logic_vector(unsigned(count) + unsigned(ap_const_lv16_1));

    count_new_phi_fu_92_p4_assign_proc : process(ap_CS_fsm_state1, or_cond_fu_185_p2, tmp_2_fu_164_p3)
    begin
        if ((ap_CS_fsm_state1 = ap_const_lv1_1)) then
            if ((or_cond_fu_185_p2 = ap_const_lv1_0)) then 
                count_new_phi_fu_92_p4 <= tmp_2_fu_164_p3;
            elsif (not((or_cond_fu_185_p2 = ap_const_lv1_0))) then 
                count_new_phi_fu_92_p4 <= ap_const_lv16_0;
            else 
                count_new_phi_fu_92_p4 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            count_new_phi_fu_92_p4 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    not_or_cond3_fu_123_p2 <= (or_cond3_fu_117_p2 xor ap_const_lv1_1);
    or_cond3_fu_117_p1 <= (0=>reset, others=>'-');
    or_cond3_fu_117_p2 <= (tmp_fu_111_p2 or or_cond3_fu_117_p1);
    or_cond_fu_185_p2 <= (tmp_3_fu_173_p2 and tmp_4_fu_179_p2);

    out_count_flag_1_phi_fu_72_p4_assign_proc : process(ap_CS_fsm_state1, or_cond_fu_185_p2, not_or_cond3_fu_123_p2)
    begin
        if ((ap_CS_fsm_state1 = ap_const_lv1_1)) then
            if ((or_cond_fu_185_p2 = ap_const_lv1_0)) then 
                out_count_flag_1_phi_fu_72_p4 <= not_or_cond3_fu_123_p2;
            elsif (not((or_cond_fu_185_p2 = ap_const_lv1_0))) then 
                out_count_flag_1_phi_fu_72_p4 <= ap_const_lv1_1;
            else 
                out_count_flag_1_phi_fu_72_p4 <= "X";
            end if;
        else 
            out_count_flag_1_phi_fu_72_p4 <= "X";
        end if; 
    end process;

    out_count_load_s_fu_130_p3 <= 
        out_count when (or_cond3_fu_117_p2(0) = '1') else 
        ap_const_lv16_0;

    out_count_new_1_phi_fu_82_p4_assign_proc : process(ap_CS_fsm_state1, or_cond_fu_185_p2, tmp_5_fu_191_p2)
    begin
        if ((ap_CS_fsm_state1 = ap_const_lv1_1)) then
            if ((or_cond_fu_185_p2 = ap_const_lv1_0)) then 
                out_count_new_1_phi_fu_82_p4 <= ap_const_lv16_0;
            elsif (not((or_cond_fu_185_p2 = ap_const_lv1_0))) then 
                out_count_new_1_phi_fu_82_p4 <= tmp_5_fu_191_p2;
            else 
                out_count_new_1_phi_fu_82_p4 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            out_count_new_1_phi_fu_82_p4 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rd_clk_out_assign_proc : process(ap_start, ap_CS_fsm_state1, or_cond_fu_185_p2)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
            if (not((or_cond_fu_185_p2 = ap_const_lv1_0))) then 
                rd_clk_out <= ap_const_logic_1;
            elsif ((or_cond_fu_185_p2 = ap_const_lv1_0)) then 
                rd_clk_out <= ap_const_logic_0;
            else 
                rd_clk_out <= 'X';
            end if;
        else 
            rd_clk_out <= 'X';
        end if; 
    end process;


    rd_clk_out_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, or_cond_fu_185_p2)
    begin
        if ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and not((or_cond_fu_185_p2 = ap_const_lv1_0))) or ((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_185_p2 = ap_const_lv1_0)))) then 
            rd_clk_out_ap_vld <= ap_const_logic_1;
        else 
            rd_clk_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_cast_cast_fu_144_p3 <= 
        ap_const_lv16_400 when (tmp_1_fu_138_p2(0) = '1') else 
        ap_const_lv16_1000;
    tmp_1_fu_138_p2 <= "1" when (block_V = ap_const_lv2_1) else "0";
    tmp_2_fu_164_p3 <= 
        count_load_op_fu_158_p2 when (or_cond3_fu_117_p2(0) = '1') else 
        ap_const_lv16_1;
    tmp_3_fu_173_p2 <= "1" when (tmp_2_fu_164_p3 = clk_div) else "0";
    tmp_4_fu_179_p2 <= "1" when (signed(out_count_load_s_fu_130_p3) < signed(storemerge_cast_cast_fu_144_p3)) else "0";
    tmp_5_fu_191_p2 <= std_logic_vector(unsigned(out_count_load_s_fu_130_p3) + unsigned(ap_const_lv16_1));
    tmp_fu_111_p2 <= "1" when (signed(out_count) < signed(max)) else "0";
end behav;
