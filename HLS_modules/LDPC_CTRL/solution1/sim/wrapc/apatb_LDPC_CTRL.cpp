// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "block_V"
#define AUTOTB_TVIN_block_V  "../tv/cdatafile/c.LDPC_CTRL.autotvin_block_V.dat"
// wrapc file define: "code_V"
#define AUTOTB_TVIN_code_V  "../tv/cdatafile/c.LDPC_CTRL.autotvin_code_V.dat"
// wrapc file define: "run"
#define AUTOTB_TVIN_run  "../tv/cdatafile/c.LDPC_CTRL.autotvin_run.dat"
// wrapc file define: "init_start"
#define AUTOTB_TVOUT_init_start  "../tv/cdatafile/c.LDPC_CTRL.autotvout_init_start.dat"
// wrapc file define: "init_done"
#define AUTOTB_TVIN_init_done  "../tv/cdatafile/c.LDPC_CTRL.autotvin_init_done.dat"
// wrapc file define: "init_ready"
#define AUTOTB_TVIN_init_ready  "../tv/cdatafile/c.LDPC_CTRL.autotvin_init_ready.dat"
// wrapc file define: "buff_start"
#define AUTOTB_TVOUT_buff_start  "../tv/cdatafile/c.LDPC_CTRL.autotvout_buff_start.dat"
// wrapc file define: "status_V"
#define AUTOTB_TVOUT_status_V  "../tv/cdatafile/c.LDPC_CTRL.autotvout_status_V.dat"
// wrapc file define: "err_code"
#define AUTOTB_TVOUT_err_code  "../tv/cdatafile/c.LDPC_CTRL.autotvout_err_code.dat"
// wrapc file define: "size_V"
#define AUTOTB_TVOUT_size_V  "../tv/cdatafile/c.LDPC_CTRL.autotvout_size_V.dat"
// wrapc file define: "rate_V"
#define AUTOTB_TVOUT_rate_V  "../tv/cdatafile/c.LDPC_CTRL.autotvout_rate_V.dat"
// wrapc file define: "buff_reset"
#define AUTOTB_TVOUT_buff_reset  "../tv/cdatafile/c.LDPC_CTRL.autotvout_buff_reset.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "init_start"
#define AUTOTB_TVOUT_PC_init_start  "../tv/rtldatafile/rtl.LDPC_CTRL.autotvout_init_start.dat"
// tvout file define: "buff_start"
#define AUTOTB_TVOUT_PC_buff_start  "../tv/rtldatafile/rtl.LDPC_CTRL.autotvout_buff_start.dat"
// tvout file define: "status_V"
#define AUTOTB_TVOUT_PC_status_V  "../tv/rtldatafile/rtl.LDPC_CTRL.autotvout_status_V.dat"
// tvout file define: "err_code"
#define AUTOTB_TVOUT_PC_err_code  "../tv/rtldatafile/rtl.LDPC_CTRL.autotvout_err_code.dat"
// tvout file define: "size_V"
#define AUTOTB_TVOUT_PC_size_V  "../tv/rtldatafile/rtl.LDPC_CTRL.autotvout_size_V.dat"
// tvout file define: "rate_V"
#define AUTOTB_TVOUT_PC_rate_V  "../tv/rtldatafile/rtl.LDPC_CTRL.autotvout_rate_V.dat"
// tvout file define: "buff_reset"
#define AUTOTB_TVOUT_PC_buff_reset  "../tv/rtldatafile/rtl.LDPC_CTRL.autotvout_buff_reset.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			block_V_depth = 0;
			code_V_depth = 0;
			run_depth = 0;
			init_start_depth = 0;
			init_done_depth = 0;
			init_ready_depth = 0;
			buff_start_depth = 0;
			status_V_depth = 0;
			err_code_depth = 0;
			size_V_depth = 0;
			rate_V_depth = 0;
			buff_reset_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{block_V " << block_V_depth << "}\n";
			total_list << "{code_V " << code_V_depth << "}\n";
			total_list << "{run " << run_depth << "}\n";
			total_list << "{init_start " << init_start_depth << "}\n";
			total_list << "{init_done " << init_done_depth << "}\n";
			total_list << "{init_ready " << init_ready_depth << "}\n";
			total_list << "{buff_start " << buff_start_depth << "}\n";
			total_list << "{status_V " << status_V_depth << "}\n";
			total_list << "{err_code " << err_code_depth << "}\n";
			total_list << "{size_V " << size_V_depth << "}\n";
			total_list << "{rate_V " << rate_V_depth << "}\n";
			total_list << "{buff_reset " << buff_reset_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int block_V_depth;
		int code_V_depth;
		int run_depth;
		int init_start_depth;
		int init_done_depth;
		int init_ready_depth;
		int buff_start_depth;
		int status_V_depth;
		int err_code_depth;
		int size_V_depth;
		int rate_V_depth;
		int buff_reset_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void LDPC_CTRL (
ap_uint<2> block,
ap_uint<2> code,
bool run,
bool* init_start,
bool init_done,
bool init_ready,
bool* buff_start,
ap_uint<2>* status,
short* err_code,
ap_uint<2>* size,
ap_uint<2>* rate,
bool* buff_reset);

void AESL_WRAP_LDPC_CTRL (
ap_uint<2> block,
ap_uint<2> code,
bool run,
bool* init_start,
bool init_done,
bool init_ready,
bool* buff_start,
ap_uint<2>* status,
short* err_code,
ap_uint<2>* size,
ap_uint<2>* rate,
bool* buff_reset)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "init_start"
		aesl_fh.read(AUTOTB_TVOUT_PC_init_start, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_init_start, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_init_start, AESL_token); // data

			sc_bv<1> *init_start_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'init_start', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'init_start', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					init_start_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_init_start, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_init_start))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: init_start
				{
					// bitslice(0, 0)
					// {
						// celement: init_start(0, 0)
						// {
							sc_lv<1>* init_start_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: init_start(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(init_start[0]) != NULL) // check the null address if the c port is array or others
								{
									init_start_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(init_start_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: init_start(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : init_start[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : init_start[0]
								// output_left_conversion : init_start[i_0]
								// output_type_conversion : (init_start_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(init_start[0]) != NULL) // check the null address if the c port is array or others
								{
									init_start[i_0] = (init_start_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] init_start_pc_buffer;
		}

		// output port post check: "buff_start"
		aesl_fh.read(AUTOTB_TVOUT_PC_buff_start, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_buff_start, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_buff_start, AESL_token); // data

			sc_bv<1> *buff_start_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'buff_start', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'buff_start', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					buff_start_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_buff_start, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_buff_start))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: buff_start
				{
					// bitslice(0, 0)
					// {
						// celement: buff_start(0, 0)
						// {
							sc_lv<1>* buff_start_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: buff_start(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(buff_start[0]) != NULL) // check the null address if the c port is array or others
								{
									buff_start_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(buff_start_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: buff_start(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : buff_start[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : buff_start[0]
								// output_left_conversion : buff_start[i_0]
								// output_type_conversion : (buff_start_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(buff_start[0]) != NULL) // check the null address if the c port is array or others
								{
									buff_start[i_0] = (buff_start_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] buff_start_pc_buffer;
		}

		// output port post check: "status_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_status_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_status_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_status_V, AESL_token); // data

			sc_bv<2> *status_V_pc_buffer = new sc_bv<2>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'status_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'status_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					status_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_status_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_status_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: status_V
				{
					// bitslice(1, 0)
					// {
						// celement: status.V(1, 0)
						// {
							sc_lv<2>* status_V_lv0_0_0_1 = new sc_lv<2>[1];
						// }
					// }

					// bitslice(1, 0)
					{
						int hls_map_index = 0;
						// celement: status.V(1, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(status[0]) != NULL) // check the null address if the c port is array or others
								{
									status_V_lv0_0_0_1[hls_map_index++].range(1, 0) = sc_bv<2>(status_V_pc_buffer[hls_map_index].range(1, 0));
								}
							}
						}
					}

					// bitslice(1, 0)
					{
						int hls_map_index = 0;
						// celement: status.V(1, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : status[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : status[0]
								// output_left_conversion : status[i_0]
								// output_type_conversion : (status_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(status[0]) != NULL) // check the null address if the c port is array or others
								{
									status[i_0] = (status_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] status_V_pc_buffer;
		}

		// output port post check: "err_code"
		aesl_fh.read(AUTOTB_TVOUT_PC_err_code, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_err_code, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_err_code, AESL_token); // data

			sc_bv<16> *err_code_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'err_code', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'err_code', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					err_code_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_err_code, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_err_code))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: err_code
				{
					// bitslice(15, 0)
					// {
						// celement: err_code(15, 0)
						// {
							sc_lv<16>* err_code_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: err_code(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(err_code[0]) != NULL) // check the null address if the c port is array or others
								{
									err_code_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(err_code_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: err_code(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : err_code[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : err_code[0]
								// output_left_conversion : err_code[i_0]
								// output_type_conversion : (err_code_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(err_code[0]) != NULL) // check the null address if the c port is array or others
								{
									err_code[i_0] = (err_code_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] err_code_pc_buffer;
		}

		// output port post check: "size_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_size_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_size_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_size_V, AESL_token); // data

			sc_bv<2> *size_V_pc_buffer = new sc_bv<2>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'size_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'size_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					size_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_size_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_size_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: size_V
				{
					// bitslice(1, 0)
					// {
						// celement: size.V(1, 0)
						// {
							sc_lv<2>* size_V_lv0_0_0_1 = new sc_lv<2>[1];
						// }
					// }

					// bitslice(1, 0)
					{
						int hls_map_index = 0;
						// celement: size.V(1, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(size[0]) != NULL) // check the null address if the c port is array or others
								{
									size_V_lv0_0_0_1[hls_map_index++].range(1, 0) = sc_bv<2>(size_V_pc_buffer[hls_map_index].range(1, 0));
								}
							}
						}
					}

					// bitslice(1, 0)
					{
						int hls_map_index = 0;
						// celement: size.V(1, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : size[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : size[0]
								// output_left_conversion : size[i_0]
								// output_type_conversion : (size_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(size[0]) != NULL) // check the null address if the c port is array or others
								{
									size[i_0] = (size_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] size_V_pc_buffer;
		}

		// output port post check: "rate_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_rate_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_rate_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_rate_V, AESL_token); // data

			sc_bv<2> *rate_V_pc_buffer = new sc_bv<2>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'rate_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'rate_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					rate_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_rate_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_rate_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: rate_V
				{
					// bitslice(1, 0)
					// {
						// celement: rate.V(1, 0)
						// {
							sc_lv<2>* rate_V_lv0_0_0_1 = new sc_lv<2>[1];
						// }
					// }

					// bitslice(1, 0)
					{
						int hls_map_index = 0;
						// celement: rate.V(1, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(rate[0]) != NULL) // check the null address if the c port is array or others
								{
									rate_V_lv0_0_0_1[hls_map_index++].range(1, 0) = sc_bv<2>(rate_V_pc_buffer[hls_map_index].range(1, 0));
								}
							}
						}
					}

					// bitslice(1, 0)
					{
						int hls_map_index = 0;
						// celement: rate.V(1, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : rate[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : rate[0]
								// output_left_conversion : rate[i_0]
								// output_type_conversion : (rate_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(rate[0]) != NULL) // check the null address if the c port is array or others
								{
									rate[i_0] = (rate_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] rate_V_pc_buffer;
		}

		// output port post check: "buff_reset"
		aesl_fh.read(AUTOTB_TVOUT_PC_buff_reset, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_buff_reset, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_buff_reset, AESL_token); // data

			sc_bv<1> *buff_reset_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'buff_reset', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'buff_reset', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					buff_reset_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_buff_reset, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_buff_reset))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: buff_reset
				{
					// bitslice(0, 0)
					// {
						// celement: buff_reset(0, 0)
						// {
							sc_lv<1>* buff_reset_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: buff_reset(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(buff_reset[0]) != NULL) // check the null address if the c port is array or others
								{
									buff_reset_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(buff_reset_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: buff_reset(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : buff_reset[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : buff_reset[0]
								// output_left_conversion : buff_reset[i_0]
								// output_type_conversion : (buff_reset_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(buff_reset[0]) != NULL) // check the null address if the c port is array or others
								{
									buff_reset[i_0] = (buff_reset_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] buff_reset_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "block_V"
		char* tvin_block_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_block_V);

		// "code_V"
		char* tvin_code_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_code_V);

		// "run"
		char* tvin_run = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_run);

		// "init_start"
		char* tvout_init_start = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_init_start);

		// "init_done"
		char* tvin_init_done = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_init_done);

		// "init_ready"
		char* tvin_init_ready = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_init_ready);

		// "buff_start"
		char* tvout_buff_start = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_buff_start);

		// "status_V"
		char* tvout_status_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_status_V);

		// "err_code"
		char* tvout_err_code = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_err_code);

		// "size_V"
		char* tvout_size_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_size_V);

		// "rate_V"
		char* tvout_rate_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_rate_V);

		// "buff_reset"
		char* tvout_buff_reset = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_buff_reset);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_block_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_block_V, tvin_block_V);

		sc_bv<2> block_V_tvin_wrapc_buffer;

		// RTL Name: block_V
		{
			// bitslice(1, 0)
			{
				// celement: block.V(1, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : block
						// sub_1st_elem          : 
						// ori_name_1st_elem     : block
						// regulate_c_name       : block_V
						// input_type_conversion : (block).to_string(2).c_str()
						if (&(block) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> block_V_tmp_mem;
							block_V_tmp_mem = (block).to_string(2).c_str();
							block_V_tvin_wrapc_buffer.range(1, 0) = block_V_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_block_V, "%s\n", (block_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_block_V, tvin_block_V);
		}

		tcl_file.set_num(1, &tcl_file.block_V_depth);
		sprintf(tvin_block_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_block_V, tvin_block_V);

		// [[transaction]]
		sprintf(tvin_code_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_code_V, tvin_code_V);

		sc_bv<2> code_V_tvin_wrapc_buffer;

		// RTL Name: code_V
		{
			// bitslice(1, 0)
			{
				// celement: code.V(1, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : code
						// sub_1st_elem          : 
						// ori_name_1st_elem     : code
						// regulate_c_name       : code_V
						// input_type_conversion : (code).to_string(2).c_str()
						if (&(code) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> code_V_tmp_mem;
							code_V_tmp_mem = (code).to_string(2).c_str();
							code_V_tvin_wrapc_buffer.range(1, 0) = code_V_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_code_V, "%s\n", (code_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_code_V, tvin_code_V);
		}

		tcl_file.set_num(1, &tcl_file.code_V_depth);
		sprintf(tvin_code_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_code_V, tvin_code_V);

		// [[transaction]]
		sprintf(tvin_run, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_run, tvin_run);

		sc_bv<1> run_tvin_wrapc_buffer;

		// RTL Name: run
		{
			// bitslice(0, 0)
			{
				// celement: run(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : run
						// sub_1st_elem          : 
						// ori_name_1st_elem     : run
						// regulate_c_name       : run
						// input_type_conversion : run
						if (&(run) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> run_tmp_mem;
							run_tmp_mem = run;
							run_tvin_wrapc_buffer.range(0, 0) = run_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_run, "%s\n", (run_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_run, tvin_run);
		}

		tcl_file.set_num(1, &tcl_file.run_depth);
		sprintf(tvin_run, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_run, tvin_run);

		// [[transaction]]
		sprintf(tvin_init_done, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_init_done, tvin_init_done);

		sc_bv<1> init_done_tvin_wrapc_buffer;

		// RTL Name: init_done
		{
			// bitslice(0, 0)
			{
				// celement: init_done(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : init_done
						// sub_1st_elem          : 
						// ori_name_1st_elem     : init_done
						// regulate_c_name       : init_done
						// input_type_conversion : init_done
						if (&(init_done) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> init_done_tmp_mem;
							init_done_tmp_mem = init_done;
							init_done_tvin_wrapc_buffer.range(0, 0) = init_done_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_init_done, "%s\n", (init_done_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_init_done, tvin_init_done);
		}

		tcl_file.set_num(1, &tcl_file.init_done_depth);
		sprintf(tvin_init_done, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_init_done, tvin_init_done);

		// [[transaction]]
		sprintf(tvin_init_ready, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_init_ready, tvin_init_ready);

		sc_bv<1> init_ready_tvin_wrapc_buffer;

		// RTL Name: init_ready
		{
			// bitslice(0, 0)
			{
				// celement: init_ready(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : init_ready
						// sub_1st_elem          : 
						// ori_name_1st_elem     : init_ready
						// regulate_c_name       : init_ready
						// input_type_conversion : init_ready
						if (&(init_ready) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> init_ready_tmp_mem;
							init_ready_tmp_mem = init_ready;
							init_ready_tvin_wrapc_buffer.range(0, 0) = init_ready_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_init_ready, "%s\n", (init_ready_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_init_ready, tvin_init_ready);
		}

		tcl_file.set_num(1, &tcl_file.init_ready_depth);
		sprintf(tvin_init_ready, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_init_ready, tvin_init_ready);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		LDPC_CTRL(block, code, run, init_start, init_done, init_ready, buff_start, status, err_code, size, rate, buff_reset);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_init_start, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_init_start, tvout_init_start);

		sc_bv<1>* init_start_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: init_start
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: init_start(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : init_start[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : init_start[0]
						// regulate_c_name       : init_start
						// input_type_conversion : init_start[i_0]
						if (&(init_start[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> init_start_tmp_mem;
							init_start_tmp_mem = init_start[i_0];
							init_start_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = init_start_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_init_start, "%s\n", (init_start_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_init_start, tvout_init_start);
		}

		tcl_file.set_num(1, &tcl_file.init_start_depth);
		sprintf(tvout_init_start, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_init_start, tvout_init_start);

		// release memory allocation
		delete [] init_start_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_buff_start, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_buff_start, tvout_buff_start);

		sc_bv<1>* buff_start_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: buff_start
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: buff_start(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : buff_start[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : buff_start[0]
						// regulate_c_name       : buff_start
						// input_type_conversion : buff_start[i_0]
						if (&(buff_start[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> buff_start_tmp_mem;
							buff_start_tmp_mem = buff_start[i_0];
							buff_start_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = buff_start_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_buff_start, "%s\n", (buff_start_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_buff_start, tvout_buff_start);
		}

		tcl_file.set_num(1, &tcl_file.buff_start_depth);
		sprintf(tvout_buff_start, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_buff_start, tvout_buff_start);

		// release memory allocation
		delete [] buff_start_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_status_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_status_V, tvout_status_V);

		sc_bv<2>* status_V_tvout_wrapc_buffer = new sc_bv<2>[1];

		// RTL Name: status_V
		{
			// bitslice(1, 0)
			{
				int hls_map_index = 0;
				// celement: status.V(1, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : status[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : status[0]
						// regulate_c_name       : status_V
						// input_type_conversion : (status[i_0]).to_string(2).c_str()
						if (&(status[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> status_V_tmp_mem;
							status_V_tmp_mem = (status[i_0]).to_string(2).c_str();
							status_V_tvout_wrapc_buffer[hls_map_index++].range(1, 0) = status_V_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_status_V, "%s\n", (status_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_status_V, tvout_status_V);
		}

		tcl_file.set_num(1, &tcl_file.status_V_depth);
		sprintf(tvout_status_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_status_V, tvout_status_V);

		// release memory allocation
		delete [] status_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_err_code, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_err_code, tvout_err_code);

		sc_bv<16>* err_code_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: err_code
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: err_code(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : err_code[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : err_code[0]
						// regulate_c_name       : err_code
						// input_type_conversion : err_code[i_0]
						if (&(err_code[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> err_code_tmp_mem;
							err_code_tmp_mem = err_code[i_0];
							err_code_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = err_code_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_err_code, "%s\n", (err_code_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_err_code, tvout_err_code);
		}

		tcl_file.set_num(1, &tcl_file.err_code_depth);
		sprintf(tvout_err_code, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_err_code, tvout_err_code);

		// release memory allocation
		delete [] err_code_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_size_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_size_V, tvout_size_V);

		sc_bv<2>* size_V_tvout_wrapc_buffer = new sc_bv<2>[1];

		// RTL Name: size_V
		{
			// bitslice(1, 0)
			{
				int hls_map_index = 0;
				// celement: size.V(1, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : size[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : size[0]
						// regulate_c_name       : size_V
						// input_type_conversion : (size[i_0]).to_string(2).c_str()
						if (&(size[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> size_V_tmp_mem;
							size_V_tmp_mem = (size[i_0]).to_string(2).c_str();
							size_V_tvout_wrapc_buffer[hls_map_index++].range(1, 0) = size_V_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_size_V, "%s\n", (size_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_size_V, tvout_size_V);
		}

		tcl_file.set_num(1, &tcl_file.size_V_depth);
		sprintf(tvout_size_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_size_V, tvout_size_V);

		// release memory allocation
		delete [] size_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_rate_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_rate_V, tvout_rate_V);

		sc_bv<2>* rate_V_tvout_wrapc_buffer = new sc_bv<2>[1];

		// RTL Name: rate_V
		{
			// bitslice(1, 0)
			{
				int hls_map_index = 0;
				// celement: rate.V(1, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : rate[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : rate[0]
						// regulate_c_name       : rate_V
						// input_type_conversion : (rate[i_0]).to_string(2).c_str()
						if (&(rate[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> rate_V_tmp_mem;
							rate_V_tmp_mem = (rate[i_0]).to_string(2).c_str();
							rate_V_tvout_wrapc_buffer[hls_map_index++].range(1, 0) = rate_V_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_rate_V, "%s\n", (rate_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_rate_V, tvout_rate_V);
		}

		tcl_file.set_num(1, &tcl_file.rate_V_depth);
		sprintf(tvout_rate_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_rate_V, tvout_rate_V);

		// release memory allocation
		delete [] rate_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_buff_reset, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_buff_reset, tvout_buff_reset);

		sc_bv<1>* buff_reset_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: buff_reset
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: buff_reset(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : buff_reset[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : buff_reset[0]
						// regulate_c_name       : buff_reset
						// input_type_conversion : buff_reset[i_0]
						if (&(buff_reset[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> buff_reset_tmp_mem;
							buff_reset_tmp_mem = buff_reset[i_0];
							buff_reset_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = buff_reset_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_buff_reset, "%s\n", (buff_reset_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_buff_reset, tvout_buff_reset);
		}

		tcl_file.set_num(1, &tcl_file.buff_reset_depth);
		sprintf(tvout_buff_reset, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_buff_reset, tvout_buff_reset);

		// release memory allocation
		delete [] buff_reset_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "block_V"
		delete [] tvin_block_V;
		// release memory allocation: "code_V"
		delete [] tvin_code_V;
		// release memory allocation: "run"
		delete [] tvin_run;
		// release memory allocation: "init_start"
		delete [] tvout_init_start;
		// release memory allocation: "init_done"
		delete [] tvin_init_done;
		// release memory allocation: "init_ready"
		delete [] tvin_init_ready;
		// release memory allocation: "buff_start"
		delete [] tvout_buff_start;
		// release memory allocation: "status_V"
		delete [] tvout_status_V;
		// release memory allocation: "err_code"
		delete [] tvout_err_code;
		// release memory allocation: "size_V"
		delete [] tvout_size_V;
		// release memory allocation: "rate_V"
		delete [] tvout_rate_V;
		// release memory allocation: "buff_reset"
		delete [] tvout_buff_reset;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

