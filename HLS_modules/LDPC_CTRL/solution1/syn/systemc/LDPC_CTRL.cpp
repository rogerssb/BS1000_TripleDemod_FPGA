// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "LDPC_CTRL.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic LDPC_CTRL::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic LDPC_CTRL::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> LDPC_CTRL::ap_ST_fsm_state1 = "1";
const sc_lv<32> LDPC_CTRL::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> LDPC_CTRL::ap_const_lv1_1 = "1";
const sc_lv<16> LDPC_CTRL::ap_const_lv16_0 = "0000000000000000";
const sc_lv<16> LDPC_CTRL::ap_const_lv16_1 = "1";
const sc_lv<16> LDPC_CTRL::ap_const_lv16_2 = "10";
const sc_lv<16> LDPC_CTRL::ap_const_lv16_3 = "11";
const sc_lv<1> LDPC_CTRL::ap_const_lv1_0 = "0";
const sc_lv<6> LDPC_CTRL::ap_const_lv6_0 = "000000";
const sc_lv<6> LDPC_CTRL::ap_const_lv6_A = "1010";
const sc_lv<6> LDPC_CTRL::ap_const_lv6_1 = "1";
const sc_lv<6> LDPC_CTRL::ap_const_lv6_3 = "11";
const sc_lv<6> LDPC_CTRL::ap_const_lv6_2 = "10";
const sc_lv<2> LDPC_CTRL::ap_const_lv2_0 = "00";
const sc_lv<2> LDPC_CTRL::ap_const_lv2_1 = "1";
const sc_lv<2> LDPC_CTRL::ap_const_lv2_2 = "10";
const bool LDPC_CTRL::ap_const_boolean_1 = true;

LDPC_CTRL::LDPC_CTRL(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_65);
    sensitive << ( state_load_load_fu_235_p1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_buff_reset);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );
    sensitive << ( ap_condition_65 );

    SC_METHOD(thread_buff_reset_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );

    SC_METHOD(thread_buff_start);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( run_read_read_fu_84_p2 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( init_ready_read_read_fu_72_p2 );
    sensitive << ( init_done_read_read_fu_78_p2 );

    SC_METHOD(thread_buff_start_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( run_read_read_fu_84_p2 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( init_ready_read_read_fu_72_p2 );
    sensitive << ( init_done_read_read_fu_78_p2 );

    SC_METHOD(thread_err_code);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );
    sensitive << ( ap_condition_65 );

    SC_METHOD(thread_err_code_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );

    SC_METHOD(thread_init_done_read_read_fu_78_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( init_done );

    SC_METHOD(thread_init_ready_read_read_fu_72_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( init_ready );

    SC_METHOD(thread_init_start);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );
    sensitive << ( init_ready_read_read_fu_72_p2 );

    SC_METHOD(thread_init_start_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );
    sensitive << ( init_ready_read_read_fu_72_p2 );

    SC_METHOD(thread_notlhs_fu_239_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( block_V );
    sensitive << ( state_load_load_fu_235_p1 );

    SC_METHOD(thread_notrhs_fu_245_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( block_V );
    sensitive << ( state_load_load_fu_235_p1 );

    SC_METHOD(thread_or_cond1_fu_263_p2);
    sensitive << ( or_cond_not_fu_251_p2 );
    sensitive << ( tmp_3_fu_257_p2 );

    SC_METHOD(thread_or_cond_not_fu_251_p2);
    sensitive << ( notrhs_fu_245_p2 );
    sensitive << ( notlhs_fu_239_p2 );

    SC_METHOD(thread_rate_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( code_V );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );
    sensitive << ( ap_condition_65 );

    SC_METHOD(thread_rate_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );

    SC_METHOD(thread_run_read_read_fu_84_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( run );

    SC_METHOD(thread_size_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( block_V );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );
    sensitive << ( ap_condition_65 );

    SC_METHOD(thread_size_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );

    SC_METHOD(thread_state_flag_6_phi_fu_168_p20);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( run );
    sensitive << ( run_read_read_fu_84_p2 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );
    sensitive << ( init_ready_read_read_fu_72_p2 );
    sensitive << ( init_done_read_read_fu_78_p2 );

    SC_METHOD(thread_state_load_load_fu_235_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state );

    SC_METHOD(thread_state_new_6_cast_fu_269_p1);
    sensitive << ( state_new_6_phi_fu_203_p20 );

    SC_METHOD(thread_state_new_6_phi_fu_203_p20);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( run_read_read_fu_84_p2 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );
    sensitive << ( init_ready_read_read_fu_72_p2 );
    sensitive << ( init_done_read_read_fu_78_p2 );

    SC_METHOD(thread_status_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );
    sensitive << ( ap_condition_65 );

    SC_METHOD(thread_status_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_load_load_fu_235_p1 );
    sensitive << ( or_cond1_fu_263_p2 );

    SC_METHOD(thread_tmp_3_fu_257_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( code_V );
    sensitive << ( state_load_load_fu_235_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    state = "0000000000001010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "LDPC_CTRL_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, block_V, "(port)block_V");
    sc_trace(mVcdFile, code_V, "(port)code_V");
    sc_trace(mVcdFile, run, "(port)run");
    sc_trace(mVcdFile, init_start, "(port)init_start");
    sc_trace(mVcdFile, init_start_ap_vld, "(port)init_start_ap_vld");
    sc_trace(mVcdFile, init_done, "(port)init_done");
    sc_trace(mVcdFile, init_ready, "(port)init_ready");
    sc_trace(mVcdFile, buff_start, "(port)buff_start");
    sc_trace(mVcdFile, buff_start_ap_vld, "(port)buff_start_ap_vld");
    sc_trace(mVcdFile, status_V, "(port)status_V");
    sc_trace(mVcdFile, status_V_ap_vld, "(port)status_V_ap_vld");
    sc_trace(mVcdFile, err_code, "(port)err_code");
    sc_trace(mVcdFile, err_code_ap_vld, "(port)err_code_ap_vld");
    sc_trace(mVcdFile, size_V, "(port)size_V");
    sc_trace(mVcdFile, size_V_ap_vld, "(port)size_V_ap_vld");
    sc_trace(mVcdFile, rate_V, "(port)rate_V");
    sc_trace(mVcdFile, rate_V_ap_vld, "(port)rate_V_ap_vld");
    sc_trace(mVcdFile, buff_reset, "(port)buff_reset");
    sc_trace(mVcdFile, buff_reset_ap_vld, "(port)buff_reset_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, state, "state");
    sc_trace(mVcdFile, run_read_read_fu_84_p2, "run_read_read_fu_84_p2");
    sc_trace(mVcdFile, state_flag_6_phi_fu_168_p20, "state_flag_6_phi_fu_168_p20");
    sc_trace(mVcdFile, state_load_load_fu_235_p1, "state_load_load_fu_235_p1");
    sc_trace(mVcdFile, or_cond1_fu_263_p2, "or_cond1_fu_263_p2");
    sc_trace(mVcdFile, init_ready_read_read_fu_72_p2, "init_ready_read_read_fu_72_p2");
    sc_trace(mVcdFile, init_done_read_read_fu_78_p2, "init_done_read_read_fu_78_p2");
    sc_trace(mVcdFile, state_new_6_phi_fu_203_p20, "state_new_6_phi_fu_203_p20");
    sc_trace(mVcdFile, state_new_6_cast_fu_269_p1, "state_new_6_cast_fu_269_p1");
    sc_trace(mVcdFile, notrhs_fu_245_p2, "notrhs_fu_245_p2");
    sc_trace(mVcdFile, notlhs_fu_239_p2, "notlhs_fu_239_p2");
    sc_trace(mVcdFile, or_cond_not_fu_251_p2, "or_cond_not_fu_251_p2");
    sc_trace(mVcdFile, tmp_3_fu_257_p2, "tmp_3_fu_257_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_65, "ap_condition_65");
#endif

    }
    mHdltvinHandle.open("LDPC_CTRL.hdltvin.dat");
    mHdltvoutHandle.open("LDPC_CTRL.hdltvout.dat");
}

LDPC_CTRL::~LDPC_CTRL() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void LDPC_CTRL::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(state_flag_6_phi_fu_168_p20.read(), ap_const_lv1_0))) {
        state = state_new_6_cast_fu_269_p1.read();
    }
}

void LDPC_CTRL::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void LDPC_CTRL::thread_ap_condition_65() {
    ap_condition_65 = (!esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3));
}

void LDPC_CTRL::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void LDPC_CTRL::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void LDPC_CTRL::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void LDPC_CTRL::thread_buff_reset() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        if (esl_seteq<1,1,1>(ap_condition_65.read(), ap_const_boolean_1)) {
            buff_reset =  (sc_logic) (ap_const_lv1_1[0]);
        } else if ((esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                    esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0))) {
            buff_reset =  (sc_logic) (ap_const_lv1_0[0]);
        } else {
            buff_reset = sc_logic('X');
        }
    } else {
        buff_reset = sc_logic('X');
    }
}

void LDPC_CTRL::thread_buff_reset_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3)) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0)))) {
        buff_reset_ap_vld = ap_const_logic_1;
    } else {
        buff_reset_ap_vld = ap_const_logic_0;
    }
}

void LDPC_CTRL::thread_buff_start() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, init_ready_read_read_fu_72_p2.read())) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read())))) {
        buff_start =  (sc_logic) (ap_const_lv1_1[0]);
    } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                 !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                 !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
                 !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
                 !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3)) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3) && 
                 esl_seteq<1,1,1>(run_read_read_fu_84_p2.read(), ap_const_lv1_0)))) {
        buff_start =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        buff_start = sc_logic('X');
    }
}

void LDPC_CTRL::thread_buff_start_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3)) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, init_ready_read_read_fu_72_p2.read())) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read())) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3) && 
          esl_seteq<1,1,1>(run_read_read_fu_84_p2.read(), ap_const_lv1_0)))) {
        buff_start_ap_vld = ap_const_logic_1;
    } else {
        buff_start_ap_vld = ap_const_logic_0;
    }
}

void LDPC_CTRL::thread_err_code() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        if (esl_seteq<1,1,1>(ap_condition_65.read(), ap_const_boolean_1)) {
            err_code = ap_const_lv16_0;
        } else if ((esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                    !esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0))) {
            err_code = ap_const_lv16_3;
        } else {
            err_code = "XXXXXXXXXXXXXXXX";
        }
    } else {
        err_code = "XXXXXXXXXXXXXXXX";
    }
}

void LDPC_CTRL::thread_err_code_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3)) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          !esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0)))) {
        err_code_ap_vld = ap_const_logic_1;
    } else {
        err_code_ap_vld = ap_const_logic_0;
    }
}

void LDPC_CTRL::thread_init_done_read_read_fu_78_p2() {
    init_done_read_read_fu_78_p2 =  (sc_lv<1>) (init_done.read());
}

void LDPC_CTRL::thread_init_ready_read_read_fu_72_p2() {
    init_ready_read_read_fu_72_p2 =  (sc_lv<1>) (init_ready.read());
}

void LDPC_CTRL::thread_init_start() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
         esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0))) {
        init_start =  (sc_logic) (ap_const_lv1_1[0]);
    } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                 !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                 !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
                 !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
                 !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3)) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, init_ready_read_read_fu_72_p2.read())))) {
        init_start =  (sc_logic) (ap_const_lv1_0[0]);
    } else {
        init_start = sc_logic('X');
    }
}

void LDPC_CTRL::thread_init_start_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3)) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, init_ready_read_read_fu_72_p2.read())))) {
        init_start_ap_vld = ap_const_logic_1;
    } else {
        init_start_ap_vld = ap_const_logic_0;
    }
}

void LDPC_CTRL::thread_notlhs_fu_239_p2() {
    notlhs_fu_239_p2 = (!block_V.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(block_V.read() != ap_const_lv2_1);
}

void LDPC_CTRL::thread_notrhs_fu_245_p2() {
    notrhs_fu_245_p2 = (!block_V.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(block_V.read() != ap_const_lv2_2);
}

void LDPC_CTRL::thread_or_cond1_fu_263_p2() {
    or_cond1_fu_263_p2 = (or_cond_not_fu_251_p2.read() | tmp_3_fu_257_p2.read());
}

void LDPC_CTRL::thread_or_cond_not_fu_251_p2() {
    or_cond_not_fu_251_p2 = (notrhs_fu_245_p2.read() & notlhs_fu_239_p2.read());
}

void LDPC_CTRL::thread_rate_V() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        if (esl_seteq<1,1,1>(ap_condition_65.read(), ap_const_boolean_1)) {
            rate_V = ap_const_lv2_0;
        } else if ((esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                    esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0))) {
            rate_V = code_V.read();
        } else {
            rate_V =  (sc_lv<2>) ("XX");
        }
    } else {
        rate_V =  (sc_lv<2>) ("XX");
    }
}

void LDPC_CTRL::thread_rate_V_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3)) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0)))) {
        rate_V_ap_vld = ap_const_logic_1;
    } else {
        rate_V_ap_vld = ap_const_logic_0;
    }
}

void LDPC_CTRL::thread_run_read_read_fu_84_p2() {
    run_read_read_fu_84_p2 =  (sc_lv<1>) (run.read());
}

void LDPC_CTRL::thread_size_V() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        if (esl_seteq<1,1,1>(ap_condition_65.read(), ap_const_boolean_1)) {
            size_V = ap_const_lv2_0;
        } else if ((esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                    esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0))) {
            size_V = block_V.read();
        } else {
            size_V =  (sc_lv<2>) ("XX");
        }
    } else {
        size_V =  (sc_lv<2>) ("XX");
    }
}

void LDPC_CTRL::thread_size_V_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3)) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0)))) {
        size_V_ap_vld = ap_const_logic_1;
    } else {
        size_V_ap_vld = ap_const_logic_0;
    }
}

void LDPC_CTRL::thread_state_flag_6_phi_fu_168_p20() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, init_ready_read_read_fu_72_p2.read())) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read())) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3) && 
          !esl_seteq<1,1,1>(run_read_read_fu_84_p2.read(), ap_const_lv1_0)))) {
        state_flag_6_phi_fu_168_p20 = ap_const_lv1_0;
    } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                 !esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                 esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, init_ready_read_read_fu_72_p2.read())) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, init_ready_read_read_fu_72_p2.read())) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read())) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3) && 
                 esl_seteq<1,1,1>(run_read_read_fu_84_p2.read(), ap_const_lv1_0)))) {
        state_flag_6_phi_fu_168_p20 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
                !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
                !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3))) {
        state_flag_6_phi_fu_168_p20 =  (sc_lv<1>) (run.read());
    } else {
        state_flag_6_phi_fu_168_p20 =  (sc_lv<1>) ("X");
    }
}

void LDPC_CTRL::thread_state_load_load_fu_235_p1() {
    state_load_load_fu_235_p1 = state.read();
}

void LDPC_CTRL::thread_state_new_6_cast_fu_269_p1() {
    state_new_6_cast_fu_269_p1 = esl_sext<16,6>(state_new_6_phi_fu_203_p20.read());
}

void LDPC_CTRL::thread_state_new_6_phi_fu_203_p20() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, init_ready_read_read_fu_72_p2.read()))) {
        state_new_6_phi_fu_203_p20 = ap_const_lv6_2;
    } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, init_ready_read_read_fu_72_p2.read())) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read())) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, init_done_read_read_fu_78_p2.read())))) {
        state_new_6_phi_fu_203_p20 = ap_const_lv6_3;
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0))) {
        state_new_6_phi_fu_203_p20 = ap_const_lv6_1;
    } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                 !esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3) && 
                 !esl_seteq<1,1,1>(run_read_read_fu_84_p2.read(), ap_const_lv1_0)) || 
                (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3) && 
                 esl_seteq<1,1,1>(run_read_read_fu_84_p2.read(), ap_const_lv1_0)))) {
        state_new_6_phi_fu_203_p20 = ap_const_lv6_A;
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
                !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
                !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3))) {
        state_new_6_phi_fu_203_p20 = ap_const_lv6_0;
    } else {
        state_new_6_phi_fu_203_p20 =  (sc_lv<6>) ("XXXXXX");
    }
}

void LDPC_CTRL::thread_status_V() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        if (esl_seteq<1,1,1>(ap_condition_65.read(), ap_const_boolean_1)) {
            status_V = ap_const_lv2_0;
        } else if ((esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
                    esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0))) {
            status_V = ap_const_lv2_1;
        } else {
            status_V =  (sc_lv<2>) ("XX");
        }
    } else {
        status_V =  (sc_lv<2>) ("XX");
    }
}

void LDPC_CTRL::thread_status_V_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_1) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_2) && 
          !esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_3)) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,16,16>(state_load_load_fu_235_p1.read(), ap_const_lv16_0) && 
          esl_seteq<1,1,1>(or_cond1_fu_263_p2.read(), ap_const_lv1_0)))) {
        status_V_ap_vld = ap_const_logic_1;
    } else {
        status_V_ap_vld = ap_const_logic_0;
    }
}

void LDPC_CTRL::thread_tmp_3_fu_257_p2() {
    tmp_3_fu_257_p2 = (!code_V.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(code_V.read() == ap_const_lv2_0);
}

void LDPC_CTRL::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void LDPC_CTRL::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"block_V\" :  \"" << block_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"code_V\" :  \"" << code_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"run\" :  \"" << run.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"init_start\" :  \"" << init_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"init_start_ap_vld\" :  \"" << init_start_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"init_done\" :  \"" << init_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"init_ready\" :  \"" << init_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buff_start\" :  \"" << buff_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buff_start_ap_vld\" :  \"" << buff_start_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"status_V\" :  \"" << status_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"status_V_ap_vld\" :  \"" << status_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"err_code\" :  \"" << err_code.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"err_code_ap_vld\" :  \"" << err_code_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"size_V\" :  \"" << size_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"size_V_ap_vld\" :  \"" << size_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rate_V\" :  \"" << rate_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rate_V_ap_vld\" :  \"" << rate_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buff_reset\" :  \"" << buff_reset.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"buff_reset_ap_vld\" :  \"" << buff_reset_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

