// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _LDPC_CTRL_HH_
#define _LDPC_CTRL_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct LDPC_CTRL : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<2> > block_V;
    sc_in< sc_lv<2> > code_V;
    sc_in< sc_logic > run;
    sc_out< sc_logic > init_start;
    sc_out< sc_logic > init_start_ap_vld;
    sc_in< sc_logic > init_done;
    sc_in< sc_logic > init_ready;
    sc_out< sc_logic > buff_start;
    sc_out< sc_logic > buff_start_ap_vld;
    sc_out< sc_lv<2> > status_V;
    sc_out< sc_logic > status_V_ap_vld;
    sc_out< sc_lv<16> > err_code;
    sc_out< sc_logic > err_code_ap_vld;
    sc_out< sc_lv<2> > size_V;
    sc_out< sc_logic > size_V_ap_vld;
    sc_out< sc_lv<2> > rate_V;
    sc_out< sc_logic > rate_V_ap_vld;
    sc_out< sc_logic > buff_reset;
    sc_out< sc_logic > buff_reset_ap_vld;


    // Module declarations
    LDPC_CTRL(sc_module_name name);
    SC_HAS_PROCESS(LDPC_CTRL);

    ~LDPC_CTRL();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<16> > state;
    sc_signal< sc_lv<1> > run_read_read_fu_84_p2;
    sc_signal< sc_lv<1> > state_flag_6_phi_fu_168_p20;
    sc_signal< sc_lv<16> > state_load_load_fu_235_p1;
    sc_signal< sc_lv<1> > or_cond1_fu_263_p2;
    sc_signal< sc_lv<1> > init_ready_read_read_fu_72_p2;
    sc_signal< sc_lv<1> > init_done_read_read_fu_78_p2;
    sc_signal< sc_lv<6> > state_new_6_phi_fu_203_p20;
    sc_signal< sc_lv<16> > state_new_6_cast_fu_269_p1;
    sc_signal< sc_lv<1> > notrhs_fu_245_p2;
    sc_signal< sc_lv<1> > notlhs_fu_239_p2;
    sc_signal< sc_lv<1> > or_cond_not_fu_251_p2;
    sc_signal< sc_lv<1> > tmp_3_fu_257_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< bool > ap_condition_65;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<16> ap_const_lv16_2;
    static const sc_lv<16> ap_const_lv16_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_A;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_3;
    static const sc_lv<6> ap_const_lv6_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_condition_65();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_buff_reset();
    void thread_buff_reset_ap_vld();
    void thread_buff_start();
    void thread_buff_start_ap_vld();
    void thread_err_code();
    void thread_err_code_ap_vld();
    void thread_init_done_read_read_fu_78_p2();
    void thread_init_ready_read_read_fu_72_p2();
    void thread_init_start();
    void thread_init_start_ap_vld();
    void thread_notlhs_fu_239_p2();
    void thread_notrhs_fu_245_p2();
    void thread_or_cond1_fu_263_p2();
    void thread_or_cond_not_fu_251_p2();
    void thread_rate_V();
    void thread_rate_V_ap_vld();
    void thread_run_read_read_fu_84_p2();
    void thread_size_V();
    void thread_size_V_ap_vld();
    void thread_state_flag_6_phi_fu_168_p20();
    void thread_state_load_load_fu_235_p1();
    void thread_state_new_6_cast_fu_269_p1();
    void thread_state_new_6_phi_fu_203_p20();
    void thread_status_V();
    void thread_status_V_ap_vld();
    void thread_tmp_3_fu_257_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
