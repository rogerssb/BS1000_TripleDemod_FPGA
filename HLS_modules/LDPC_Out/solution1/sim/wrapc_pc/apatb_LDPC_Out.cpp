// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "data_out"
#define AUTOTB_TVOUT_data_out  "../tv/cdatafile/c.LDPC_Out.autotvout_data_out.dat"
// wrapc file define: "reset"
#define AUTOTB_TVIN_reset  "../tv/cdatafile/c.LDPC_Out.autotvin_reset.dat"
// wrapc file define: "cur_read_pos_V"
#define AUTOTB_TVOUT_cur_read_pos_V  "../tv/cdatafile/c.LDPC_Out.autotvout_cur_read_pos_V.dat"
// wrapc file define: "numbits_V"
#define AUTOTB_TVIN_numbits_V  "../tv/cdatafile/c.LDPC_Out.autotvin_numbits_V.dat"
// wrapc file define: "rd_clk_in"
#define AUTOTB_TVIN_rd_clk_in  "../tv/cdatafile/c.LDPC_Out.autotvin_rd_clk_in.dat"
// wrapc file define: "rd_mux"
#define AUTOTB_TVOUT_rd_mux  "../tv/cdatafile/c.LDPC_Out.autotvout_rd_mux.dat"
// wrapc file define: "mem_out0"
#define AUTOTB_TVIN_mem_out0  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out0.dat"
// wrapc file define: "mem_out1"
#define AUTOTB_TVIN_mem_out1  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out1.dat"
// wrapc file define: "mem_out2"
#define AUTOTB_TVIN_mem_out2  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out2.dat"
// wrapc file define: "mem_out3"
#define AUTOTB_TVIN_mem_out3  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out3.dat"
// wrapc file define: "mem_out4"
#define AUTOTB_TVIN_mem_out4  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out4.dat"
// wrapc file define: "mem_out5"
#define AUTOTB_TVIN_mem_out5  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out5.dat"
// wrapc file define: "mem_out6"
#define AUTOTB_TVIN_mem_out6  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out6.dat"
// wrapc file define: "mem_out7"
#define AUTOTB_TVIN_mem_out7  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out7.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "data_out"
#define AUTOTB_TVOUT_PC_data_out  "../tv/rtldatafile/rtl.LDPC_Out.autotvout_data_out.dat"
// tvout file define: "cur_read_pos_V"
#define AUTOTB_TVOUT_PC_cur_read_pos_V  "../tv/rtldatafile/rtl.LDPC_Out.autotvout_cur_read_pos_V.dat"
// tvout file define: "rd_mux"
#define AUTOTB_TVOUT_PC_rd_mux  "../tv/rtldatafile/rtl.LDPC_Out.autotvout_rd_mux.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			data_out_depth = 0;
			reset_depth = 0;
			cur_read_pos_V_depth = 0;
			numbits_V_depth = 0;
			rd_clk_in_depth = 0;
			rd_mux_depth = 0;
			mem_out0_depth = 0;
			mem_out1_depth = 0;
			mem_out2_depth = 0;
			mem_out3_depth = 0;
			mem_out4_depth = 0;
			mem_out5_depth = 0;
			mem_out6_depth = 0;
			mem_out7_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{data_out " << data_out_depth << "}\n";
			total_list << "{reset " << reset_depth << "}\n";
			total_list << "{cur_read_pos_V " << cur_read_pos_V_depth << "}\n";
			total_list << "{numbits_V " << numbits_V_depth << "}\n";
			total_list << "{rd_clk_in " << rd_clk_in_depth << "}\n";
			total_list << "{rd_mux " << rd_mux_depth << "}\n";
			total_list << "{mem_out0 " << mem_out0_depth << "}\n";
			total_list << "{mem_out1 " << mem_out1_depth << "}\n";
			total_list << "{mem_out2 " << mem_out2_depth << "}\n";
			total_list << "{mem_out3 " << mem_out3_depth << "}\n";
			total_list << "{mem_out4 " << mem_out4_depth << "}\n";
			total_list << "{mem_out5 " << mem_out5_depth << "}\n";
			total_list << "{mem_out6 " << mem_out6_depth << "}\n";
			total_list << "{mem_out7 " << mem_out7_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int data_out_depth;
		int reset_depth;
		int cur_read_pos_V_depth;
		int numbits_V_depth;
		int rd_clk_in_depth;
		int rd_mux_depth;
		int mem_out0_depth;
		int mem_out1_depth;
		int mem_out2_depth;
		int mem_out3_depth;
		int mem_out4_depth;
		int mem_out5_depth;
		int mem_out6_depth;
		int mem_out7_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void LDPC_Out (
bool* data_out,
bool reset,
ap_uint<16>* cur_read_pos,
ap_uint<16> numbits,
bool rd_clk_in,
bool* rd_mux,
bool mem_out0[2048],
bool mem_out1[2048],
bool mem_out2[1024],
bool mem_out3[1024],
bool mem_out4[1024],
bool mem_out5[1024],
bool mem_out6[1024],
bool mem_out7[1024]);

void AESL_WRAP_LDPC_Out (
bool* data_out,
bool reset,
ap_uint<16>* cur_read_pos,
ap_uint<16> numbits,
bool rd_clk_in,
bool* rd_mux,
bool mem_out0[2048],
bool mem_out1[2048],
bool mem_out2[1024],
bool mem_out3[1024],
bool mem_out4[1024],
bool mem_out5[1024],
bool mem_out6[1024],
bool mem_out7[1024])
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "data_out"
		aesl_fh.read(AUTOTB_TVOUT_PC_data_out, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_data_out, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_data_out, AESL_token); // data

			sc_bv<1> *data_out_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'data_out', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'data_out', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					data_out_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_data_out, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_data_out))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: data_out
				{
					// bitslice(0, 0)
					// {
						// celement: data_out(0, 0)
						// {
							sc_lv<1>* data_out_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: data_out(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(data_out[0]) != NULL) // check the null address if the c port is array or others
								{
									data_out_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(data_out_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: data_out(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : data_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : data_out[0]
								// output_left_conversion : data_out[i_0]
								// output_type_conversion : (data_out_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(data_out[0]) != NULL) // check the null address if the c port is array or others
								{
									data_out[i_0] = (data_out_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] data_out_pc_buffer;
		}

		// output port post check: "cur_read_pos_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_cur_read_pos_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_cur_read_pos_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_cur_read_pos_V, AESL_token); // data

			sc_bv<16> *cur_read_pos_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'cur_read_pos_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'cur_read_pos_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					cur_read_pos_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_cur_read_pos_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_cur_read_pos_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: cur_read_pos_V
				{
					// bitslice(15, 0)
					// {
						// celement: cur_read_pos.V(15, 0)
						// {
							sc_lv<16>* cur_read_pos_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: cur_read_pos.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(cur_read_pos[0]) != NULL) // check the null address if the c port is array or others
								{
									cur_read_pos_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(cur_read_pos_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: cur_read_pos.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : cur_read_pos[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : cur_read_pos[0]
								// output_left_conversion : cur_read_pos[i_0]
								// output_type_conversion : (cur_read_pos_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(cur_read_pos[0]) != NULL) // check the null address if the c port is array or others
								{
									cur_read_pos[i_0] = (cur_read_pos_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] cur_read_pos_V_pc_buffer;
		}

		// output port post check: "rd_mux"
		aesl_fh.read(AUTOTB_TVOUT_PC_rd_mux, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_rd_mux, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_rd_mux, AESL_token); // data

			sc_bv<1> *rd_mux_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'rd_mux', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'rd_mux', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					rd_mux_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_rd_mux, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_rd_mux))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: rd_mux
				{
					// bitslice(0, 0)
					// {
						// celement: rd_mux(0, 0)
						// {
							sc_lv<1>* rd_mux_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: rd_mux(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(rd_mux[0]) != NULL) // check the null address if the c port is array or others
								{
									rd_mux_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(rd_mux_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: rd_mux(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : rd_mux[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : rd_mux[0]
								// output_left_conversion : rd_mux[i_0]
								// output_type_conversion : (rd_mux_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(rd_mux[0]) != NULL) // check the null address if the c port is array or others
								{
									rd_mux[i_0] = (rd_mux_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] rd_mux_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "data_out"
		char* tvout_data_out = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_data_out);

		// "reset"
		char* tvin_reset = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_reset);

		// "cur_read_pos_V"
		char* tvout_cur_read_pos_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_cur_read_pos_V);

		// "numbits_V"
		char* tvin_numbits_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_numbits_V);

		// "rd_clk_in"
		char* tvin_rd_clk_in = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_rd_clk_in);

		// "rd_mux"
		char* tvout_rd_mux = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_rd_mux);

		// "mem_out0"
		char* tvin_mem_out0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mem_out0);

		// "mem_out1"
		char* tvin_mem_out1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mem_out1);

		// "mem_out2"
		char* tvin_mem_out2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mem_out2);

		// "mem_out3"
		char* tvin_mem_out3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mem_out3);

		// "mem_out4"
		char* tvin_mem_out4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mem_out4);

		// "mem_out5"
		char* tvin_mem_out5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mem_out5);

		// "mem_out6"
		char* tvin_mem_out6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mem_out6);

		// "mem_out7"
		char* tvin_mem_out7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_mem_out7);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_reset, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_reset, tvin_reset);

		sc_bv<1> reset_tvin_wrapc_buffer;

		// RTL Name: reset
		{
			// bitslice(0, 0)
			{
				// celement: reset(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : reset
						// sub_1st_elem          : 
						// ori_name_1st_elem     : reset
						// regulate_c_name       : reset
						// input_type_conversion : reset
						if (&(reset) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> reset_tmp_mem;
							reset_tmp_mem = reset;
							reset_tvin_wrapc_buffer.range(0, 0) = reset_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_reset, "%s\n", (reset_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_reset, tvin_reset);
		}

		tcl_file.set_num(1, &tcl_file.reset_depth);
		sprintf(tvin_reset, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_reset, tvin_reset);

		// [[transaction]]
		sprintf(tvin_numbits_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_numbits_V, tvin_numbits_V);

		sc_bv<16> numbits_V_tvin_wrapc_buffer;

		// RTL Name: numbits_V
		{
			// bitslice(15, 0)
			{
				// celement: numbits.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : numbits
						// sub_1st_elem          : 
						// ori_name_1st_elem     : numbits
						// regulate_c_name       : numbits_V
						// input_type_conversion : (numbits).to_string(2).c_str()
						if (&(numbits) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> numbits_V_tmp_mem;
							numbits_V_tmp_mem = (numbits).to_string(2).c_str();
							numbits_V_tvin_wrapc_buffer.range(15, 0) = numbits_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_numbits_V, "%s\n", (numbits_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_numbits_V, tvin_numbits_V);
		}

		tcl_file.set_num(1, &tcl_file.numbits_V_depth);
		sprintf(tvin_numbits_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_numbits_V, tvin_numbits_V);

		// [[transaction]]
		sprintf(tvin_rd_clk_in, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_rd_clk_in, tvin_rd_clk_in);

		sc_bv<1> rd_clk_in_tvin_wrapc_buffer;

		// RTL Name: rd_clk_in
		{
			// bitslice(0, 0)
			{
				// celement: rd_clk_in(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : rd_clk_in
						// sub_1st_elem          : 
						// ori_name_1st_elem     : rd_clk_in
						// regulate_c_name       : rd_clk_in
						// input_type_conversion : rd_clk_in
						if (&(rd_clk_in) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> rd_clk_in_tmp_mem;
							rd_clk_in_tmp_mem = rd_clk_in;
							rd_clk_in_tvin_wrapc_buffer.range(0, 0) = rd_clk_in_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_rd_clk_in, "%s\n", (rd_clk_in_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_rd_clk_in, tvin_rd_clk_in);
		}

		tcl_file.set_num(1, &tcl_file.rd_clk_in_depth);
		sprintf(tvin_rd_clk_in, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_rd_clk_in, tvin_rd_clk_in);

		// [[transaction]]
		sprintf(tvin_mem_out0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mem_out0, tvin_mem_out0);

		sc_bv<1>* mem_out0_tvin_wrapc_buffer = new sc_bv<1>[2048];

		// RTL Name: mem_out0
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: mem_out0(0, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : mem_out0[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : mem_out0[0]
						// regulate_c_name       : mem_out0
						// input_type_conversion : mem_out0[i_0]
						if (&(mem_out0[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> mem_out0_tmp_mem;
							mem_out0_tmp_mem = mem_out0[i_0];
							mem_out0_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = mem_out0_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvin_mem_out0, "%s\n", (mem_out0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mem_out0, tvin_mem_out0);
		}

		tcl_file.set_num(2048, &tcl_file.mem_out0_depth);
		sprintf(tvin_mem_out0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mem_out0, tvin_mem_out0);

		// release memory allocation
		delete [] mem_out0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_mem_out1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mem_out1, tvin_mem_out1);

		sc_bv<1>* mem_out1_tvin_wrapc_buffer = new sc_bv<1>[2048];

		// RTL Name: mem_out1
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: mem_out1(0, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : mem_out1[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : mem_out1[0]
						// regulate_c_name       : mem_out1
						// input_type_conversion : mem_out1[i_0]
						if (&(mem_out1[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> mem_out1_tmp_mem;
							mem_out1_tmp_mem = mem_out1[i_0];
							mem_out1_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = mem_out1_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvin_mem_out1, "%s\n", (mem_out1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mem_out1, tvin_mem_out1);
		}

		tcl_file.set_num(2048, &tcl_file.mem_out1_depth);
		sprintf(tvin_mem_out1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mem_out1, tvin_mem_out1);

		// release memory allocation
		delete [] mem_out1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_mem_out2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mem_out2, tvin_mem_out2);

		sc_bv<1>* mem_out2_tvin_wrapc_buffer = new sc_bv<1>[1024];

		// RTL Name: mem_out2
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: mem_out2(0, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : mem_out2[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : mem_out2[0]
						// regulate_c_name       : mem_out2
						// input_type_conversion : mem_out2[i_0]
						if (&(mem_out2[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> mem_out2_tmp_mem;
							mem_out2_tmp_mem = mem_out2[i_0];
							mem_out2_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = mem_out2_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_mem_out2, "%s\n", (mem_out2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mem_out2, tvin_mem_out2);
		}

		tcl_file.set_num(1024, &tcl_file.mem_out2_depth);
		sprintf(tvin_mem_out2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mem_out2, tvin_mem_out2);

		// release memory allocation
		delete [] mem_out2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_mem_out3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mem_out3, tvin_mem_out3);

		sc_bv<1>* mem_out3_tvin_wrapc_buffer = new sc_bv<1>[1024];

		// RTL Name: mem_out3
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: mem_out3(0, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : mem_out3[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : mem_out3[0]
						// regulate_c_name       : mem_out3
						// input_type_conversion : mem_out3[i_0]
						if (&(mem_out3[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> mem_out3_tmp_mem;
							mem_out3_tmp_mem = mem_out3[i_0];
							mem_out3_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = mem_out3_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_mem_out3, "%s\n", (mem_out3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mem_out3, tvin_mem_out3);
		}

		tcl_file.set_num(1024, &tcl_file.mem_out3_depth);
		sprintf(tvin_mem_out3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mem_out3, tvin_mem_out3);

		// release memory allocation
		delete [] mem_out3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_mem_out4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mem_out4, tvin_mem_out4);

		sc_bv<1>* mem_out4_tvin_wrapc_buffer = new sc_bv<1>[1024];

		// RTL Name: mem_out4
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: mem_out4(0, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : mem_out4[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : mem_out4[0]
						// regulate_c_name       : mem_out4
						// input_type_conversion : mem_out4[i_0]
						if (&(mem_out4[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> mem_out4_tmp_mem;
							mem_out4_tmp_mem = mem_out4[i_0];
							mem_out4_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = mem_out4_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_mem_out4, "%s\n", (mem_out4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mem_out4, tvin_mem_out4);
		}

		tcl_file.set_num(1024, &tcl_file.mem_out4_depth);
		sprintf(tvin_mem_out4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mem_out4, tvin_mem_out4);

		// release memory allocation
		delete [] mem_out4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_mem_out5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mem_out5, tvin_mem_out5);

		sc_bv<1>* mem_out5_tvin_wrapc_buffer = new sc_bv<1>[1024];

		// RTL Name: mem_out5
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: mem_out5(0, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : mem_out5[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : mem_out5[0]
						// regulate_c_name       : mem_out5
						// input_type_conversion : mem_out5[i_0]
						if (&(mem_out5[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> mem_out5_tmp_mem;
							mem_out5_tmp_mem = mem_out5[i_0];
							mem_out5_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = mem_out5_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_mem_out5, "%s\n", (mem_out5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mem_out5, tvin_mem_out5);
		}

		tcl_file.set_num(1024, &tcl_file.mem_out5_depth);
		sprintf(tvin_mem_out5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mem_out5, tvin_mem_out5);

		// release memory allocation
		delete [] mem_out5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_mem_out6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mem_out6, tvin_mem_out6);

		sc_bv<1>* mem_out6_tvin_wrapc_buffer = new sc_bv<1>[1024];

		// RTL Name: mem_out6
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: mem_out6(0, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : mem_out6[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : mem_out6[0]
						// regulate_c_name       : mem_out6
						// input_type_conversion : mem_out6[i_0]
						if (&(mem_out6[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> mem_out6_tmp_mem;
							mem_out6_tmp_mem = mem_out6[i_0];
							mem_out6_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = mem_out6_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_mem_out6, "%s\n", (mem_out6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mem_out6, tvin_mem_out6);
		}

		tcl_file.set_num(1024, &tcl_file.mem_out6_depth);
		sprintf(tvin_mem_out6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mem_out6, tvin_mem_out6);

		// release memory allocation
		delete [] mem_out6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_mem_out7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_mem_out7, tvin_mem_out7);

		sc_bv<1>* mem_out7_tvin_wrapc_buffer = new sc_bv<1>[1024];

		// RTL Name: mem_out7
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: mem_out7(0, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : mem_out7[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : mem_out7[0]
						// regulate_c_name       : mem_out7
						// input_type_conversion : mem_out7[i_0]
						if (&(mem_out7[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> mem_out7_tmp_mem;
							mem_out7_tmp_mem = mem_out7[i_0];
							mem_out7_tvin_wrapc_buffer[hls_map_index++].range(0, 0) = mem_out7_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_mem_out7, "%s\n", (mem_out7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_mem_out7, tvin_mem_out7);
		}

		tcl_file.set_num(1024, &tcl_file.mem_out7_depth);
		sprintf(tvin_mem_out7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_mem_out7, tvin_mem_out7);

		// release memory allocation
		delete [] mem_out7_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		LDPC_Out(data_out, reset, cur_read_pos, numbits, rd_clk_in, rd_mux, mem_out0, mem_out1, mem_out2, mem_out3, mem_out4, mem_out5, mem_out6, mem_out7);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_data_out, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_data_out, tvout_data_out);

		sc_bv<1>* data_out_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: data_out
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: data_out(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : data_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : data_out[0]
						// regulate_c_name       : data_out
						// input_type_conversion : data_out[i_0]
						if (&(data_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> data_out_tmp_mem;
							data_out_tmp_mem = data_out[i_0];
							data_out_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = data_out_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_data_out, "%s\n", (data_out_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_data_out, tvout_data_out);
		}

		tcl_file.set_num(1, &tcl_file.data_out_depth);
		sprintf(tvout_data_out, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_data_out, tvout_data_out);

		// release memory allocation
		delete [] data_out_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_cur_read_pos_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_cur_read_pos_V, tvout_cur_read_pos_V);

		sc_bv<16>* cur_read_pos_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: cur_read_pos_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: cur_read_pos.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : cur_read_pos[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : cur_read_pos[0]
						// regulate_c_name       : cur_read_pos_V
						// input_type_conversion : (cur_read_pos[i_0]).to_string(2).c_str()
						if (&(cur_read_pos[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> cur_read_pos_V_tmp_mem;
							cur_read_pos_V_tmp_mem = (cur_read_pos[i_0]).to_string(2).c_str();
							cur_read_pos_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = cur_read_pos_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_cur_read_pos_V, "%s\n", (cur_read_pos_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_cur_read_pos_V, tvout_cur_read_pos_V);
		}

		tcl_file.set_num(1, &tcl_file.cur_read_pos_V_depth);
		sprintf(tvout_cur_read_pos_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_cur_read_pos_V, tvout_cur_read_pos_V);

		// release memory allocation
		delete [] cur_read_pos_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_rd_mux, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_rd_mux, tvout_rd_mux);

		sc_bv<1>* rd_mux_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: rd_mux
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: rd_mux(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : rd_mux[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : rd_mux[0]
						// regulate_c_name       : rd_mux
						// input_type_conversion : rd_mux[i_0]
						if (&(rd_mux[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> rd_mux_tmp_mem;
							rd_mux_tmp_mem = rd_mux[i_0];
							rd_mux_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = rd_mux_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_rd_mux, "%s\n", (rd_mux_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_rd_mux, tvout_rd_mux);
		}

		tcl_file.set_num(1, &tcl_file.rd_mux_depth);
		sprintf(tvout_rd_mux, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_rd_mux, tvout_rd_mux);

		// release memory allocation
		delete [] rd_mux_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "data_out"
		delete [] tvout_data_out;
		// release memory allocation: "reset"
		delete [] tvin_reset;
		// release memory allocation: "cur_read_pos_V"
		delete [] tvout_cur_read_pos_V;
		// release memory allocation: "numbits_V"
		delete [] tvin_numbits_V;
		// release memory allocation: "rd_clk_in"
		delete [] tvin_rd_clk_in;
		// release memory allocation: "rd_mux"
		delete [] tvout_rd_mux;
		// release memory allocation: "mem_out0"
		delete [] tvin_mem_out0;
		// release memory allocation: "mem_out1"
		delete [] tvin_mem_out1;
		// release memory allocation: "mem_out2"
		delete [] tvin_mem_out2;
		// release memory allocation: "mem_out3"
		delete [] tvin_mem_out3;
		// release memory allocation: "mem_out4"
		delete [] tvin_mem_out4;
		// release memory allocation: "mem_out5"
		delete [] tvin_mem_out5;
		// release memory allocation: "mem_out6"
		delete [] tvin_mem_out6;
		// release memory allocation: "mem_out7"
		delete [] tvin_mem_out7;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

