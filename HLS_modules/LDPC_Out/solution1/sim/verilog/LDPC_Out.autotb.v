// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      LDPC_Out
`define AUTOTB_DUT_INST AESL_inst_LDPC_Out
`define AUTOTB_TOP      apatb_LDPC_Out_top
`define AUTOTB_LAT_RESULT_FILE "LDPC_Out.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "LDPC_Out.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_LDPC_Out_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00

`define AESL_DEPTH_data_out 1
`define AESL_DEPTH_reset 1
`define AESL_DEPTH_cur_read_pos_V 1
`define AESL_DEPTH_numbits_V 1
`define AESL_DEPTH_rd_clk_in 1
`define AESL_DEPTH_rd_mux 1
`define AESL_MEM_mem_out0 AESL_automem_mem_out0
`define AESL_MEM_INST_mem_out0 mem_inst_mem_out0
`define AESL_MEM_mem_out1 AESL_automem_mem_out1
`define AESL_MEM_INST_mem_out1 mem_inst_mem_out1
`define AESL_MEM_mem_out2 AESL_automem_mem_out2
`define AESL_MEM_INST_mem_out2 mem_inst_mem_out2
`define AESL_MEM_mem_out3 AESL_automem_mem_out3
`define AESL_MEM_INST_mem_out3 mem_inst_mem_out3
`define AESL_MEM_mem_out4 AESL_automem_mem_out4
`define AESL_MEM_INST_mem_out4 mem_inst_mem_out4
`define AESL_MEM_mem_out5 AESL_automem_mem_out5
`define AESL_MEM_INST_mem_out5 mem_inst_mem_out5
`define AESL_MEM_mem_out6 AESL_automem_mem_out6
`define AESL_MEM_INST_mem_out6 mem_inst_mem_out6
`define AESL_MEM_mem_out7 AESL_automem_mem_out7
`define AESL_MEM_INST_mem_out7 mem_inst_mem_out7
`define AUTOTB_TVIN_reset  "../tv/cdatafile/c.LDPC_Out.autotvin_reset.dat"
`define AUTOTB_TVIN_numbits_V  "../tv/cdatafile/c.LDPC_Out.autotvin_numbits_V.dat"
`define AUTOTB_TVIN_rd_clk_in  "../tv/cdatafile/c.LDPC_Out.autotvin_rd_clk_in.dat"
`define AUTOTB_TVIN_mem_out0  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out0.dat"
`define AUTOTB_TVIN_mem_out1  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out1.dat"
`define AUTOTB_TVIN_mem_out2  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out2.dat"
`define AUTOTB_TVIN_mem_out3  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out3.dat"
`define AUTOTB_TVIN_mem_out4  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out4.dat"
`define AUTOTB_TVIN_mem_out5  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out5.dat"
`define AUTOTB_TVIN_mem_out6  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out6.dat"
`define AUTOTB_TVIN_mem_out7  "../tv/cdatafile/c.LDPC_Out.autotvin_mem_out7.dat"
`define AUTOTB_TVIN_reset_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_reset.dat"
`define AUTOTB_TVIN_numbits_V_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_numbits_V.dat"
`define AUTOTB_TVIN_rd_clk_in_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_rd_clk_in.dat"
`define AUTOTB_TVIN_mem_out0_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_mem_out0.dat"
`define AUTOTB_TVIN_mem_out1_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_mem_out1.dat"
`define AUTOTB_TVIN_mem_out2_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_mem_out2.dat"
`define AUTOTB_TVIN_mem_out3_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_mem_out3.dat"
`define AUTOTB_TVIN_mem_out4_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_mem_out4.dat"
`define AUTOTB_TVIN_mem_out5_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_mem_out5.dat"
`define AUTOTB_TVIN_mem_out6_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_mem_out6.dat"
`define AUTOTB_TVIN_mem_out7_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvin_mem_out7.dat"
`define AUTOTB_TVOUT_data_out  "../tv/cdatafile/c.LDPC_Out.autotvout_data_out.dat"
`define AUTOTB_TVOUT_cur_read_pos_V  "../tv/cdatafile/c.LDPC_Out.autotvout_cur_read_pos_V.dat"
`define AUTOTB_TVOUT_rd_mux  "../tv/cdatafile/c.LDPC_Out.autotvout_rd_mux.dat"
`define AUTOTB_TVOUT_data_out_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvout_data_out.dat"
`define AUTOTB_TVOUT_cur_read_pos_V_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvout_cur_read_pos_V.dat"
`define AUTOTB_TVOUT_rd_mux_out_wrapc  "../tv/rtldatafile/rtl.LDPC_Out.autotvout_rd_mux.dat"
module `AUTOTB_TOP;

parameter AUTOTB_TRANSACTION_NUM = 4;
parameter PROGRESS_TIMEOUT = 10000000;
parameter LATENCY_ESTIMATION = 2;
parameter LENGTH_data_out = 1;
parameter LENGTH_reset = 1;
parameter LENGTH_cur_read_pos_V = 1;
parameter LENGTH_numbits_V = 1;
parameter LENGTH_rd_clk_in = 1;
parameter LENGTH_rd_mux = 1;
parameter LENGTH_mem_out0 = 2048;
parameter LENGTH_mem_out1 = 2048;
parameter LENGTH_mem_out2 = 1024;
parameter LENGTH_mem_out3 = 1024;
parameter LENGTH_mem_out4 = 1024;
parameter LENGTH_mem_out5 = 1024;
parameter LENGTH_mem_out6 = 1024;
parameter LENGTH_mem_out7 = 1024;

task read_token;
    input integer fp;
    output reg [191 : 0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg tb_continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
wire ap_start;
wire ap_done;
wire ap_idle;
wire ap_ready;
wire  data_out;
wire  data_out_ap_vld;
wire  reset;
wire [15 : 0] cur_read_pos_V;
wire  cur_read_pos_V_ap_vld;
wire [15 : 0] numbits_V;
wire  rd_clk_in;
wire  rd_mux;
wire  rd_mux_ap_vld;
wire [10 : 0] mem_out0_address0;
wire  mem_out0_ce0;
wire [0 : 0] mem_out0_q0;
wire [10 : 0] mem_out1_address0;
wire  mem_out1_ce0;
wire [0 : 0] mem_out1_q0;
wire [9 : 0] mem_out2_address0;
wire  mem_out2_ce0;
wire [0 : 0] mem_out2_q0;
wire [9 : 0] mem_out3_address0;
wire  mem_out3_ce0;
wire [0 : 0] mem_out3_q0;
wire [9 : 0] mem_out4_address0;
wire  mem_out4_ce0;
wire [0 : 0] mem_out4_q0;
wire [9 : 0] mem_out5_address0;
wire  mem_out5_ce0;
wire [0 : 0] mem_out5_q0;
wire [9 : 0] mem_out6_address0;
wire  mem_out6_ce0;
wire [0 : 0] mem_out6_q0;
wire [9 : 0] mem_out7_address0;
wire  mem_out7_ce0;
wire [0 : 0] mem_out7_q0;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

wire ap_clk;
wire ap_rst;
wire ap_rst_n;

`AUTOTB_DUT `AUTOTB_DUT_INST(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_ready(ap_ready),
    .data_out(data_out),
    .data_out_ap_vld(data_out_ap_vld),
    .reset(reset),
    .cur_read_pos_V(cur_read_pos_V),
    .cur_read_pos_V_ap_vld(cur_read_pos_V_ap_vld),
    .numbits_V(numbits_V),
    .rd_clk_in(rd_clk_in),
    .rd_mux(rd_mux),
    .rd_mux_ap_vld(rd_mux_ap_vld),
    .mem_out0_address0(mem_out0_address0),
    .mem_out0_ce0(mem_out0_ce0),
    .mem_out0_q0(mem_out0_q0),
    .mem_out1_address0(mem_out1_address0),
    .mem_out1_ce0(mem_out1_ce0),
    .mem_out1_q0(mem_out1_q0),
    .mem_out2_address0(mem_out2_address0),
    .mem_out2_ce0(mem_out2_ce0),
    .mem_out2_q0(mem_out2_q0),
    .mem_out3_address0(mem_out3_address0),
    .mem_out3_ce0(mem_out3_ce0),
    .mem_out3_q0(mem_out3_q0),
    .mem_out4_address0(mem_out4_address0),
    .mem_out4_ce0(mem_out4_ce0),
    .mem_out4_q0(mem_out4_q0),
    .mem_out5_address0(mem_out5_address0),
    .mem_out5_ce0(mem_out5_ce0),
    .mem_out5_q0(mem_out5_q0),
    .mem_out6_address0(mem_out6_address0),
    .mem_out6_ce0(mem_out6_ce0),
    .mem_out6_q0(mem_out6_q0),
    .mem_out7_address0(mem_out7_address0),
    .mem_out7_ce0(mem_out7_ce0),
    .mem_out7_q0(mem_out7_q0));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst = AESL_reset;
assign ap_rst_n = ~AESL_reset;
assign AESL_reset = rst;
assign ap_start = AESL_start;
assign AESL_start = start;
assign AESL_done = ap_done;
assign AESL_idle = ap_idle;
assign AESL_ready = ap_ready;
assign AESL_ce = ce;
assign AESL_continue = tb_continue;
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_done !== 1 && AESL_done !== 0) begin
                $display("ERROR: Control signal AESL_done is invalid!");
                $finish;
            end
        end
    end
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_ready !== 1 && AESL_ready !== 0) begin
                $display("ERROR: Control signal AESL_ready is invalid!");
                $finish;
            end
        end
    end
reg AESL_REG_data_out_ap_vld = 0;
// The signal of port data_out
reg [0: 0] AESL_REG_data_out = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_data_out = 0; 
    else if(data_out_ap_vld) begin
        AESL_REG_data_out <= data_out;
        AESL_REG_data_out_ap_vld <= 1;
    end
end 

initial begin : write_file_process_data_out
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer data_out_count;
    reg [191:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_data_out_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_data_out_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_data_out_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_data_out);
        AESL_REG_data_out_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


// The signal of port reset
reg [0: 0] AESL_REG_reset = 0;
assign reset = AESL_REG_reset;
initial begin : read_file_process_reset
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [191  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_reset,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_reset);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_reset);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


reg AESL_REG_cur_read_pos_V_ap_vld = 0;
// The signal of port cur_read_pos_V
reg [15: 0] AESL_REG_cur_read_pos_V = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_cur_read_pos_V = 0; 
    else if(cur_read_pos_V_ap_vld) begin
        AESL_REG_cur_read_pos_V <= cur_read_pos_V;
        AESL_REG_cur_read_pos_V_ap_vld <= 1;
    end
end 

initial begin : write_file_process_cur_read_pos_V
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer cur_read_pos_V_count;
    reg [191:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_cur_read_pos_V_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_cur_read_pos_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_cur_read_pos_V_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_cur_read_pos_V);
        AESL_REG_cur_read_pos_V_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


// The signal of port numbits_V
reg [15: 0] AESL_REG_numbits_V = 0;
assign numbits_V = AESL_REG_numbits_V;
initial begin : read_file_process_numbits_V
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [191  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_numbits_V,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_numbits_V);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_numbits_V);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port rd_clk_in
reg [0: 0] AESL_REG_rd_clk_in = 0;
assign rd_clk_in = AESL_REG_rd_clk_in;
initial begin : read_file_process_rd_clk_in
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [191  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_rd_clk_in,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_rd_clk_in);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_rd_clk_in);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


reg AESL_REG_rd_mux_ap_vld = 0;
// The signal of port rd_mux
reg [0: 0] AESL_REG_rd_mux = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_rd_mux = 0; 
    else if(rd_mux_ap_vld) begin
        AESL_REG_rd_mux <= rd_mux;
        AESL_REG_rd_mux_ap_vld <= 1;
    end
end 

initial begin : write_file_process_rd_mux
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer rd_mux_count;
    reg [191:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_rd_mux_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_rd_mux_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_rd_mux_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_rd_mux);
        AESL_REG_rd_mux_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


//------------------------arraymem_out0 Instantiation--------------

// The input and output of arraymem_out0
wire    arraymem_out0_ce0, arraymem_out0_ce1;
wire    arraymem_out0_we0, arraymem_out0_we1;
wire    [10 : 0]    arraymem_out0_address0, arraymem_out0_address1;
wire    [0 : 0]    arraymem_out0_din0, arraymem_out0_din1;
wire    [0 : 0]    arraymem_out0_dout0, arraymem_out0_dout1;
wire    arraymem_out0_ready;
wire    arraymem_out0_done;

`AESL_MEM_mem_out0 `AESL_MEM_INST_mem_out0(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraymem_out0_ce0),
    .we0        (arraymem_out0_we0),
    .address0   (arraymem_out0_address0),
    .din0       (arraymem_out0_din0),
    .dout0      (arraymem_out0_dout0),
    .ce1        (arraymem_out0_ce1),
    .we1        (arraymem_out0_we1),
    .address1   (arraymem_out0_address1),
    .din1       (arraymem_out0_din1),
    .dout1      (arraymem_out0_dout1),
    .ready      (arraymem_out0_ready),
    .done    (arraymem_out0_done)
);

// Assignment between dut and arraymem_out0
assign arraymem_out0_address0 = mem_out0_address0;
assign arraymem_out0_ce0 = mem_out0_ce0;
assign mem_out0_q0 = arraymem_out0_dout0;
assign arraymem_out0_we0 = 0;
assign arraymem_out0_din0 = 0;
assign arraymem_out0_we1 = 0;
assign arraymem_out0_din1 = 0;
assign arraymem_out0_ready=    ready;
assign arraymem_out0_done = 0;


//------------------------arraymem_out1 Instantiation--------------

// The input and output of arraymem_out1
wire    arraymem_out1_ce0, arraymem_out1_ce1;
wire    arraymem_out1_we0, arraymem_out1_we1;
wire    [10 : 0]    arraymem_out1_address0, arraymem_out1_address1;
wire    [0 : 0]    arraymem_out1_din0, arraymem_out1_din1;
wire    [0 : 0]    arraymem_out1_dout0, arraymem_out1_dout1;
wire    arraymem_out1_ready;
wire    arraymem_out1_done;

`AESL_MEM_mem_out1 `AESL_MEM_INST_mem_out1(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraymem_out1_ce0),
    .we0        (arraymem_out1_we0),
    .address0   (arraymem_out1_address0),
    .din0       (arraymem_out1_din0),
    .dout0      (arraymem_out1_dout0),
    .ce1        (arraymem_out1_ce1),
    .we1        (arraymem_out1_we1),
    .address1   (arraymem_out1_address1),
    .din1       (arraymem_out1_din1),
    .dout1      (arraymem_out1_dout1),
    .ready      (arraymem_out1_ready),
    .done    (arraymem_out1_done)
);

// Assignment between dut and arraymem_out1
assign arraymem_out1_address0 = mem_out1_address0;
assign arraymem_out1_ce0 = mem_out1_ce0;
assign mem_out1_q0 = arraymem_out1_dout0;
assign arraymem_out1_we0 = 0;
assign arraymem_out1_din0 = 0;
assign arraymem_out1_we1 = 0;
assign arraymem_out1_din1 = 0;
assign arraymem_out1_ready=    ready;
assign arraymem_out1_done = 0;


//------------------------arraymem_out2 Instantiation--------------

// The input and output of arraymem_out2
wire    arraymem_out2_ce0, arraymem_out2_ce1;
wire    arraymem_out2_we0, arraymem_out2_we1;
wire    [9 : 0]    arraymem_out2_address0, arraymem_out2_address1;
wire    [0 : 0]    arraymem_out2_din0, arraymem_out2_din1;
wire    [0 : 0]    arraymem_out2_dout0, arraymem_out2_dout1;
wire    arraymem_out2_ready;
wire    arraymem_out2_done;

`AESL_MEM_mem_out2 `AESL_MEM_INST_mem_out2(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraymem_out2_ce0),
    .we0        (arraymem_out2_we0),
    .address0   (arraymem_out2_address0),
    .din0       (arraymem_out2_din0),
    .dout0      (arraymem_out2_dout0),
    .ce1        (arraymem_out2_ce1),
    .we1        (arraymem_out2_we1),
    .address1   (arraymem_out2_address1),
    .din1       (arraymem_out2_din1),
    .dout1      (arraymem_out2_dout1),
    .ready      (arraymem_out2_ready),
    .done    (arraymem_out2_done)
);

// Assignment between dut and arraymem_out2
assign arraymem_out2_address0 = mem_out2_address0;
assign arraymem_out2_ce0 = mem_out2_ce0;
assign mem_out2_q0 = arraymem_out2_dout0;
assign arraymem_out2_we0 = 0;
assign arraymem_out2_din0 = 0;
assign arraymem_out2_we1 = 0;
assign arraymem_out2_din1 = 0;
assign arraymem_out2_ready=    ready;
assign arraymem_out2_done = 0;


//------------------------arraymem_out3 Instantiation--------------

// The input and output of arraymem_out3
wire    arraymem_out3_ce0, arraymem_out3_ce1;
wire    arraymem_out3_we0, arraymem_out3_we1;
wire    [9 : 0]    arraymem_out3_address0, arraymem_out3_address1;
wire    [0 : 0]    arraymem_out3_din0, arraymem_out3_din1;
wire    [0 : 0]    arraymem_out3_dout0, arraymem_out3_dout1;
wire    arraymem_out3_ready;
wire    arraymem_out3_done;

`AESL_MEM_mem_out3 `AESL_MEM_INST_mem_out3(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraymem_out3_ce0),
    .we0        (arraymem_out3_we0),
    .address0   (arraymem_out3_address0),
    .din0       (arraymem_out3_din0),
    .dout0      (arraymem_out3_dout0),
    .ce1        (arraymem_out3_ce1),
    .we1        (arraymem_out3_we1),
    .address1   (arraymem_out3_address1),
    .din1       (arraymem_out3_din1),
    .dout1      (arraymem_out3_dout1),
    .ready      (arraymem_out3_ready),
    .done    (arraymem_out3_done)
);

// Assignment between dut and arraymem_out3
assign arraymem_out3_address0 = mem_out3_address0;
assign arraymem_out3_ce0 = mem_out3_ce0;
assign mem_out3_q0 = arraymem_out3_dout0;
assign arraymem_out3_we0 = 0;
assign arraymem_out3_din0 = 0;
assign arraymem_out3_we1 = 0;
assign arraymem_out3_din1 = 0;
assign arraymem_out3_ready=    ready;
assign arraymem_out3_done = 0;


//------------------------arraymem_out4 Instantiation--------------

// The input and output of arraymem_out4
wire    arraymem_out4_ce0, arraymem_out4_ce1;
wire    arraymem_out4_we0, arraymem_out4_we1;
wire    [9 : 0]    arraymem_out4_address0, arraymem_out4_address1;
wire    [0 : 0]    arraymem_out4_din0, arraymem_out4_din1;
wire    [0 : 0]    arraymem_out4_dout0, arraymem_out4_dout1;
wire    arraymem_out4_ready;
wire    arraymem_out4_done;

`AESL_MEM_mem_out4 `AESL_MEM_INST_mem_out4(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraymem_out4_ce0),
    .we0        (arraymem_out4_we0),
    .address0   (arraymem_out4_address0),
    .din0       (arraymem_out4_din0),
    .dout0      (arraymem_out4_dout0),
    .ce1        (arraymem_out4_ce1),
    .we1        (arraymem_out4_we1),
    .address1   (arraymem_out4_address1),
    .din1       (arraymem_out4_din1),
    .dout1      (arraymem_out4_dout1),
    .ready      (arraymem_out4_ready),
    .done    (arraymem_out4_done)
);

// Assignment between dut and arraymem_out4
assign arraymem_out4_address0 = mem_out4_address0;
assign arraymem_out4_ce0 = mem_out4_ce0;
assign mem_out4_q0 = arraymem_out4_dout0;
assign arraymem_out4_we0 = 0;
assign arraymem_out4_din0 = 0;
assign arraymem_out4_we1 = 0;
assign arraymem_out4_din1 = 0;
assign arraymem_out4_ready=    ready;
assign arraymem_out4_done = 0;


//------------------------arraymem_out5 Instantiation--------------

// The input and output of arraymem_out5
wire    arraymem_out5_ce0, arraymem_out5_ce1;
wire    arraymem_out5_we0, arraymem_out5_we1;
wire    [9 : 0]    arraymem_out5_address0, arraymem_out5_address1;
wire    [0 : 0]    arraymem_out5_din0, arraymem_out5_din1;
wire    [0 : 0]    arraymem_out5_dout0, arraymem_out5_dout1;
wire    arraymem_out5_ready;
wire    arraymem_out5_done;

`AESL_MEM_mem_out5 `AESL_MEM_INST_mem_out5(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraymem_out5_ce0),
    .we0        (arraymem_out5_we0),
    .address0   (arraymem_out5_address0),
    .din0       (arraymem_out5_din0),
    .dout0      (arraymem_out5_dout0),
    .ce1        (arraymem_out5_ce1),
    .we1        (arraymem_out5_we1),
    .address1   (arraymem_out5_address1),
    .din1       (arraymem_out5_din1),
    .dout1      (arraymem_out5_dout1),
    .ready      (arraymem_out5_ready),
    .done    (arraymem_out5_done)
);

// Assignment between dut and arraymem_out5
assign arraymem_out5_address0 = mem_out5_address0;
assign arraymem_out5_ce0 = mem_out5_ce0;
assign mem_out5_q0 = arraymem_out5_dout0;
assign arraymem_out5_we0 = 0;
assign arraymem_out5_din0 = 0;
assign arraymem_out5_we1 = 0;
assign arraymem_out5_din1 = 0;
assign arraymem_out5_ready=    ready;
assign arraymem_out5_done = 0;


//------------------------arraymem_out6 Instantiation--------------

// The input and output of arraymem_out6
wire    arraymem_out6_ce0, arraymem_out6_ce1;
wire    arraymem_out6_we0, arraymem_out6_we1;
wire    [9 : 0]    arraymem_out6_address0, arraymem_out6_address1;
wire    [0 : 0]    arraymem_out6_din0, arraymem_out6_din1;
wire    [0 : 0]    arraymem_out6_dout0, arraymem_out6_dout1;
wire    arraymem_out6_ready;
wire    arraymem_out6_done;

`AESL_MEM_mem_out6 `AESL_MEM_INST_mem_out6(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraymem_out6_ce0),
    .we0        (arraymem_out6_we0),
    .address0   (arraymem_out6_address0),
    .din0       (arraymem_out6_din0),
    .dout0      (arraymem_out6_dout0),
    .ce1        (arraymem_out6_ce1),
    .we1        (arraymem_out6_we1),
    .address1   (arraymem_out6_address1),
    .din1       (arraymem_out6_din1),
    .dout1      (arraymem_out6_dout1),
    .ready      (arraymem_out6_ready),
    .done    (arraymem_out6_done)
);

// Assignment between dut and arraymem_out6
assign arraymem_out6_address0 = mem_out6_address0;
assign arraymem_out6_ce0 = mem_out6_ce0;
assign mem_out6_q0 = arraymem_out6_dout0;
assign arraymem_out6_we0 = 0;
assign arraymem_out6_din0 = 0;
assign arraymem_out6_we1 = 0;
assign arraymem_out6_din1 = 0;
assign arraymem_out6_ready=    ready;
assign arraymem_out6_done = 0;


//------------------------arraymem_out7 Instantiation--------------

// The input and output of arraymem_out7
wire    arraymem_out7_ce0, arraymem_out7_ce1;
wire    arraymem_out7_we0, arraymem_out7_we1;
wire    [9 : 0]    arraymem_out7_address0, arraymem_out7_address1;
wire    [0 : 0]    arraymem_out7_din0, arraymem_out7_din1;
wire    [0 : 0]    arraymem_out7_dout0, arraymem_out7_dout1;
wire    arraymem_out7_ready;
wire    arraymem_out7_done;

`AESL_MEM_mem_out7 `AESL_MEM_INST_mem_out7(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraymem_out7_ce0),
    .we0        (arraymem_out7_we0),
    .address0   (arraymem_out7_address0),
    .din0       (arraymem_out7_din0),
    .dout0      (arraymem_out7_dout0),
    .ce1        (arraymem_out7_ce1),
    .we1        (arraymem_out7_we1),
    .address1   (arraymem_out7_address1),
    .din1       (arraymem_out7_din1),
    .dout1      (arraymem_out7_dout1),
    .ready      (arraymem_out7_ready),
    .done    (arraymem_out7_done)
);

// Assignment between dut and arraymem_out7
assign arraymem_out7_address0 = mem_out7_address0;
assign arraymem_out7_ce0 = mem_out7_ce0;
assign mem_out7_q0 = arraymem_out7_dout0;
assign arraymem_out7_we0 = 0;
assign arraymem_out7_din0 = 0;
assign arraymem_out7_we1 = 0;
assign arraymem_out7_din1 = 0;
assign arraymem_out7_ready=    ready;
assign arraymem_out7_done = 0;


initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 0);
    while(AESL_ready_cnt != AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

    event next_trigger_ready_cnt;
    
    initial begin : gen_ready_cnt
        ready_cnt = 0;
        wait (AESL_reset === 0);
        forever begin
            @ (posedge AESL_clock);
            if (ready == 1) begin
                if (ready_cnt < AUTOTB_TRANSACTION_NUM) begin
                    ready_cnt = ready_cnt + 1;
                end
            end
            -> next_trigger_ready_cnt;
        end
    end
    
    wire all_finish = (done_cnt == AUTOTB_TRANSACTION_NUM);
    
    // done_cnt
    always @ (posedge AESL_clock) begin
        if (AESL_reset) begin
            done_cnt <= 0;
        end else begin
            if (AESL_done == 1) begin
                if (done_cnt < AUTOTB_TRANSACTION_NUM) begin
                    done_cnt <= done_cnt + 1;
                end
            end
        end
    end
    
    initial begin : finish_simulation
        wait (all_finish == 1);
        // last transaction is saved at negedge right after last done
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        $finish;
    end
    
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_reset;
reg [31:0] size_reset;
reg [31:0] size_reset_backup;
reg end_numbits_V;
reg [31:0] size_numbits_V;
reg [31:0] size_numbits_V_backup;
reg end_rd_clk_in;
reg [31:0] size_rd_clk_in;
reg [31:0] size_rd_clk_in_backup;
reg end_mem_out0;
reg [31:0] size_mem_out0;
reg [31:0] size_mem_out0_backup;
reg end_mem_out1;
reg [31:0] size_mem_out1;
reg [31:0] size_mem_out1_backup;
reg end_mem_out2;
reg [31:0] size_mem_out2;
reg [31:0] size_mem_out2_backup;
reg end_mem_out3;
reg [31:0] size_mem_out3;
reg [31:0] size_mem_out3_backup;
reg end_mem_out4;
reg [31:0] size_mem_out4;
reg [31:0] size_mem_out4_backup;
reg end_mem_out5;
reg [31:0] size_mem_out5;
reg [31:0] size_mem_out5_backup;
reg end_mem_out6;
reg [31:0] size_mem_out6;
reg [31:0] size_mem_out6_backup;
reg end_mem_out7;
reg [31:0] size_mem_out7;
reg [31:0] size_mem_out7_backup;
reg end_data_out;
reg [31:0] size_data_out;
reg [31:0] size_data_out_backup;
reg end_cur_read_pos_V;
reg [31:0] size_cur_read_pos_V;
reg [31:0] size_cur_read_pos_V_backup;
reg end_rd_mux;
reg [31:0] size_rd_mux;
reg [31:0] size_rd_mux_backup;

initial begin : initial_process
    integer proc_rand;
    rst = 1;
    # 100;
    repeat(3) @ (posedge AESL_clock);
    rst = 0;
end
initial begin : start_process
    integer proc_rand;
    start = 0;
    ce = 1;
    wait(AESL_reset === 0);
    @ (posedge AESL_clock);
    while (1) begin
        start = 1;
        @ (posedge AESL_clock);
        while (AESL_ready !== 1) begin
            @ (posedge AESL_clock);
        end
        if (AESL_done !== 1) begin
            start = 0;
            while (AESL_done !== 1) begin
                @ (posedge AESL_clock);
            end
            @ (posedge AESL_clock);
        end
    end
end

always @(AESL_done)
begin
    tb_continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

assign ready = (ready_initial | AESL_done_delay);
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready_wire = (ready_initial | AESL_done_delay);
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end

////////////////////////////////////////////
// progress and performance
////////////////////////////////////////////

task wait_start();
    while (~AESL_start) begin
        @ (posedge AESL_clock);
    end
endtask

reg [31:0] clk_cnt = 0;
reg AESL_ready_p1;

always @ (posedge AESL_clock) begin
    clk_cnt <= clk_cnt + 1;
    AESL_ready_p1 <= AESL_ready;
end

reg [31:0] start_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] start_cnt;
reg [31:0] finish_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] finish_cnt;
event report_progress;

initial begin
    start_cnt = 0;
    finish_cnt = 0;
    wait (AESL_reset == 0);
    wait_start();
    start_timestamp[start_cnt] = clk_cnt;
    start_cnt = start_cnt + 1;
    if (AESL_done) begin
        finish_timestamp[finish_cnt] = clk_cnt;
        finish_cnt = finish_cnt + 1;
    end
    -> report_progress;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_start && AESL_ready_p1) begin
                start_timestamp[start_cnt] = clk_cnt;
                start_cnt = start_cnt + 1;
            end
        end
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                finish_timestamp[finish_cnt] = clk_cnt;
                finish_cnt = finish_cnt + 1;
            end
        end
        -> report_progress;
    end
end

reg [31:0] progress_timeout;

initial begin : simulation_progress
    real intra_progress;
    wait (AESL_reset == 0);
    progress_timeout = PROGRESS_TIMEOUT;
    $display("////////////////////////////////////////////////////////////////////////////////////");
    $display("// Inter-Transaction Progress: Completed Transaction / Total Transaction");
    $display("// Intra-Transaction Progress: Measured Latency / Latency Estimation * 100%%");
    $display("//");
    $display("// RTL Simulation : \"Inter-Transaction Progress\" [\"Intra-Transaction Progress\"] @ \"Simulation Time\"");
    $display("////////////////////////////////////////////////////////////////////////////////////");
    print_progress();
    while (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
        @ (report_progress);
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                print_progress();
                progress_timeout = PROGRESS_TIMEOUT;
            end else begin
                if (progress_timeout == 0) begin
                    print_progress();
                    progress_timeout = PROGRESS_TIMEOUT;
                end else begin
                    progress_timeout = progress_timeout - 1;
                end
            end
        end
        // non-dataflow design && latency is predictable && no AXI master/slave interface
        get_intra_progress(intra_progress);
        if (intra_progress > 1000) begin
            $display("// RTL Simulation : transaction %0d run-time latency is greater than %0f time(s) of the prediction @ \"%0t\"", start_cnt, intra_progress, $time);
            $display("////////////////////////////////////////////////////////////////////////////////////");
            $finish;
        end
    end
    print_progress();
    $display("////////////////////////////////////////////////////////////////////////////////////");
    calculate_performance();
end

task get_intra_progress(output real intra_progress);
    begin
        if (start_cnt > finish_cnt) begin
            intra_progress = clk_cnt - start_timestamp[finish_cnt];
        end else begin
            intra_progress = 0;
        end
        intra_progress = intra_progress / LATENCY_ESTIMATION;
    end
endtask

task print_progress();
    real intra_progress;
    begin
        if (LATENCY_ESTIMATION > 0) begin
            get_intra_progress(intra_progress);
            $display("// RTL Simulation : %0d / %0d [%2.2f%%] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, intra_progress * 100, $time);
        end else begin
            $display("// RTL Simulation : %0d / %0d [n/a] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, $time);
        end
    end
endtask

task calculate_performance();
    integer i;
    integer fp;
    reg [31:0] latency [0:AUTOTB_TRANSACTION_NUM - 1];
    reg [31:0] latency_min;
    reg [31:0] latency_max;
    reg [31:0] latency_total;
    reg [31:0] latency_average;
    reg [31:0] interval [0:AUTOTB_TRANSACTION_NUM - 2];
    reg [31:0] interval_min;
    reg [31:0] interval_max;
    reg [31:0] interval_total;
    reg [31:0] interval_average;
    begin
        latency_min = -1;
        latency_max = 0;
        latency_total = 0;
        interval_min = -1;
        interval_max = 0;
        interval_total = 0;

        for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
            // calculate latency
            latency[i] = finish_timestamp[i] - start_timestamp[i];
            if (latency[i] > latency_max) latency_max = latency[i];
            if (latency[i] < latency_min) latency_min = latency[i];
            latency_total = latency_total + latency[i];
            // calculate interval
            if (AUTOTB_TRANSACTION_NUM == 1) begin
                interval[i] = 0;
                interval_max = 0;
                interval_min = 0;
                interval_total = 0;
            end else if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                interval[i] = start_timestamp[i + 1] - start_timestamp[i];
                if (interval[i] > interval_max) interval_max = interval[i];
                if (interval[i] < interval_min) interval_min = interval[i];
                interval_total = interval_total + interval[i];
            end
        end

        latency_average = latency_total / AUTOTB_TRANSACTION_NUM;
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            interval_average = 0;
        end else begin
            interval_average = interval_total / (AUTOTB_TRANSACTION_NUM - 1);
        end

        fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

        $fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latency_max);
        $fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latency_min);
        $fdisplay(fp, "$AVER_LATENCY = \"%0d\"", latency_average);
        $fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", interval_max);
        $fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", interval_min);
        $fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", interval_average);

        $fclose(fp);

        fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");

        $fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            i = 0;
            $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
        end else begin
            for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
                if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                    $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
                end else begin
                    $fdisplay(fp, "transaction%8d:%16d               x", i, latency[i]);
                end
            end
        end

        $fclose(fp);
    end
endtask


////////////////////////////////////////////
// Dependence Check
////////////////////////////////////////////

`ifndef POST_SYN

`endif

endmodule
