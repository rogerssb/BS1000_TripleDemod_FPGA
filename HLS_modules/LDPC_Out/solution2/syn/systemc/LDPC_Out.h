// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _LDPC_Out_HH_
#define _LDPC_Out_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct LDPC_Out : public sc_module {
    // Port declarations 38
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > data_out;
    sc_out< sc_logic > data_out_ap_vld;
    sc_in< sc_logic > reset;
    sc_out< sc_lv<16> > cur_read_pos_V;
    sc_out< sc_logic > cur_read_pos_V_ap_vld;
    sc_in< sc_lv<2> > block_V;
    sc_in< sc_logic > rd_clk_in;
    sc_in< sc_logic > rd_mux;
    sc_out< sc_lv<9> > mem_out0_address0;
    sc_out< sc_logic > mem_out0_ce0;
    sc_in< sc_lv<1> > mem_out0_q0;
    sc_out< sc_lv<9> > mem_out1_address0;
    sc_out< sc_logic > mem_out1_ce0;
    sc_in< sc_lv<1> > mem_out1_q0;
    sc_out< sc_lv<9> > mem_out2_address0;
    sc_out< sc_logic > mem_out2_ce0;
    sc_in< sc_lv<1> > mem_out2_q0;
    sc_out< sc_lv<9> > mem_out3_address0;
    sc_out< sc_logic > mem_out3_ce0;
    sc_in< sc_lv<1> > mem_out3_q0;
    sc_out< sc_lv<9> > mem_out4_address0;
    sc_out< sc_logic > mem_out4_ce0;
    sc_in< sc_lv<1> > mem_out4_q0;
    sc_out< sc_lv<9> > mem_out5_address0;
    sc_out< sc_logic > mem_out5_ce0;
    sc_in< sc_lv<1> > mem_out5_q0;
    sc_out< sc_lv<9> > mem_out6_address0;
    sc_out< sc_logic > mem_out6_ce0;
    sc_in< sc_lv<1> > mem_out6_q0;
    sc_out< sc_lv<9> > mem_out7_address0;
    sc_out< sc_logic > mem_out7_ce0;
    sc_in< sc_lv<1> > mem_out7_q0;


    // Module declarations
    LDPC_Out(sc_module_name name);
    SC_HAS_PROCESS(LDPC_Out);

    ~LDPC_Out();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > zero;
    sc_signal< sc_lv<16> > max;
    sc_signal< sc_lv<16> > read_cnt;
    sc_signal< sc_lv<16> > pos_r;
    sc_signal< sc_lv<16> > trig;
    sc_signal< sc_lv<16> > mem;
    sc_signal< sc_lv<1> > mux;
    sc_signal< sc_lv<16> > val_assign_reg_247;
    sc_signal< sc_lv<1> > reset_read_read_fu_110_p2;
    sc_signal< sc_lv<1> > reset_read_reg_587;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter1_reset_read_reg_587;
    sc_signal< sc_lv<1> > or_cond_2_fu_286_p2;
    sc_signal< sc_lv<1> > or_cond_2_reg_599;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter1_or_cond_2_reg_599;
    sc_signal< sc_lv<1> > or_cond1_3_fu_363_p2;
    sc_signal< sc_lv<1> > or_cond1_3_reg_603;
    sc_signal< sc_lv<1> > ap_pipeline_reg_pp0_iter1_or_cond1_3_reg_603;
    sc_signal< sc_lv<16> > tmp_7_fu_369_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_407_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_652;
    sc_signal< sc_lv<13> > tmp_8_fu_270_p1;
    sc_signal< sc_lv<13> > ap_phi_precharge_reg_pp0_iter0_max_loc_1_reg_226;
    sc_signal< sc_lv<13> > max_loc_1_phi_fu_229_p6;
    sc_signal< sc_lv<13> > storemerge1_fu_316_p3;
    sc_signal< sc_lv<1> > zero_load_load_fu_262_p1;
    sc_signal< sc_lv<16> > tmp_6_fu_413_p2;
    sc_signal< sc_lv<16> > ap_phi_precharge_reg_pp0_iter1_storemerge_reg_237;
    sc_signal< sc_lv<16> > storemerge_phi_fu_240_p4;
    sc_signal< sc_lv<16> > ap_phi_precharge_reg_pp0_iter0_val_assign_reg_247;
    sc_signal< sc_lv<16> > ap_phi_precharge_reg_pp0_iter1_val_assign_reg_247;
    sc_signal< sc_lv<32> > tmp_5_fu_391_p1;
    sc_signal< sc_lv<16> > storemerge1_cast_cas_fu_325_p3;
    sc_signal< sc_lv<16> > storemerge2_cast_cas_fu_333_p3;
    sc_signal< sc_lv<16> > tmp_4_fu_575_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_436_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_280_p2;
    sc_signal< sc_lv<1> > tmp_fu_310_p2;
    sc_signal< sc_lv<16> > max_loc_1_cast_fu_353_p1;
    sc_signal< sc_lv<1> > tmp_3_fu_357_p2;
    sc_signal< sc_lv<1> > or_cond1_3_fu_363_p1;
    sc_signal< sc_lv<1> > sel_tmp3_fu_488_p2;
    sc_signal< sc_lv<1> > sel_tmp1_fu_482_p2;
    sc_signal< sc_lv<1> > sel_tmp_fu_476_p2;
    sc_signal< sc_lv<1> > sel_tmp8_fu_470_p2;
    sc_signal< sc_lv<1> > sel_tmp6_fu_464_p2;
    sc_signal< sc_lv<1> > sel_tmp4_fu_458_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_452_p2;
    sc_signal< sc_lv<1> > or_cond_fu_502_p2;
    sc_signal< sc_lv<1> > newSel_fu_494_p3;
    sc_signal< sc_lv<1> > newSel1_fu_508_p3;
    sc_signal< sc_lv<1> > or_cond1_fu_516_p2;
    sc_signal< sc_lv<1> > or_cond2_fu_530_p2;
    sc_signal< sc_lv<1> > newSel2_fu_522_p3;
    sc_signal< sc_lv<1> > newSel3_fu_536_p3;
    sc_signal< sc_lv<1> > or_cond3_fu_552_p2;
    sc_signal< sc_lv<1> > newSel4_fu_544_p3;
    sc_signal< sc_lv<1> > newSel5_fu_558_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_pipeline_idle_pp0;
    sc_signal< bool > ap_condition_139;
    sc_signal< bool > ap_condition_213;
    sc_signal< bool > ap_condition_36;
    sc_signal< bool > ap_condition_247;
    sc_signal< bool > ap_condition_231;
    sc_signal< bool > ap_condition_151;
    sc_signal< bool > ap_condition_191;
    sc_signal< bool > ap_condition_195;
    sc_signal< bool > ap_condition_202;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<16> ap_const_lv16_400;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_7F;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<13> ap_const_lv13_400;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<16> ap_const_lv16_1000;
    static const sc_lv<16> ap_const_lv16_1FF;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<16> ap_const_lv16_6;
    static const sc_lv<16> ap_const_lv16_5;
    static const sc_lv<16> ap_const_lv16_4;
    static const sc_lv<16> ap_const_lv16_3;
    static const sc_lv<16> ap_const_lv16_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_condition_139();
    void thread_ap_condition_151();
    void thread_ap_condition_191();
    void thread_ap_condition_195();
    void thread_ap_condition_202();
    void thread_ap_condition_213();
    void thread_ap_condition_231();
    void thread_ap_condition_247();
    void thread_ap_condition_36();
    void thread_ap_done();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_phi_precharge_reg_pp0_iter0_max_loc_1_reg_226();
    void thread_ap_phi_precharge_reg_pp0_iter0_val_assign_reg_247();
    void thread_ap_phi_precharge_reg_pp0_iter1_storemerge_reg_237();
    void thread_ap_pipeline_idle_pp0();
    void thread_ap_ready();
    void thread_cur_read_pos_V();
    void thread_cur_read_pos_V_ap_vld();
    void thread_data_out();
    void thread_data_out_ap_vld();
    void thread_max_loc_1_cast_fu_353_p1();
    void thread_max_loc_1_phi_fu_229_p6();
    void thread_mem_out0_address0();
    void thread_mem_out0_ce0();
    void thread_mem_out1_address0();
    void thread_mem_out1_ce0();
    void thread_mem_out2_address0();
    void thread_mem_out2_ce0();
    void thread_mem_out3_address0();
    void thread_mem_out3_ce0();
    void thread_mem_out4_address0();
    void thread_mem_out4_ce0();
    void thread_mem_out5_address0();
    void thread_mem_out5_ce0();
    void thread_mem_out6_address0();
    void thread_mem_out6_ce0();
    void thread_mem_out7_address0();
    void thread_mem_out7_ce0();
    void thread_newSel1_fu_508_p3();
    void thread_newSel2_fu_522_p3();
    void thread_newSel3_fu_536_p3();
    void thread_newSel4_fu_544_p3();
    void thread_newSel5_fu_558_p3();
    void thread_newSel_fu_494_p3();
    void thread_or_cond1_3_fu_363_p1();
    void thread_or_cond1_3_fu_363_p2();
    void thread_or_cond1_fu_516_p2();
    void thread_or_cond2_fu_530_p2();
    void thread_or_cond3_fu_552_p2();
    void thread_or_cond_2_fu_286_p2();
    void thread_or_cond_fu_502_p2();
    void thread_reset_read_read_fu_110_p2();
    void thread_sel_tmp1_fu_482_p2();
    void thread_sel_tmp2_fu_452_p2();
    void thread_sel_tmp3_fu_488_p2();
    void thread_sel_tmp4_fu_458_p2();
    void thread_sel_tmp6_fu_464_p2();
    void thread_sel_tmp8_fu_470_p2();
    void thread_sel_tmp_fu_476_p2();
    void thread_storemerge1_cast_cas_fu_325_p3();
    void thread_storemerge1_fu_316_p3();
    void thread_storemerge2_cast_cas_fu_333_p3();
    void thread_storemerge_phi_fu_240_p4();
    void thread_tmp_1_fu_280_p2();
    void thread_tmp_2_fu_436_p2();
    void thread_tmp_3_fu_357_p2();
    void thread_tmp_4_fu_575_p2();
    void thread_tmp_5_fu_391_p1();
    void thread_tmp_6_fu_413_p2();
    void thread_tmp_7_fu_369_p2();
    void thread_tmp_8_fu_270_p1();
    void thread_tmp_fu_310_p2();
    void thread_tmp_s_fu_407_p2();
    void thread_zero_load_load_fu_262_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
