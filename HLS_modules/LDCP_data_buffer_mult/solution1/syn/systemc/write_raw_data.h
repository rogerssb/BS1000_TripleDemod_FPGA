// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _write_raw_data_HH_
#define _write_raw_data_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct write_raw_data : public sc_module {
    // Port declarations 52
    sc_in< sc_lv<8> > dat;
    sc_out< sc_lv<11> > r_dat0_address0;
    sc_out< sc_logic > r_dat0_ce0;
    sc_out< sc_logic > r_dat0_we0;
    sc_out< sc_lv<8> > r_dat0_d0;
    sc_out< sc_lv<11> > r_dat1_address0;
    sc_out< sc_logic > r_dat1_ce0;
    sc_out< sc_logic > r_dat1_we0;
    sc_out< sc_lv<8> > r_dat1_d0;
    sc_out< sc_lv<11> > r_dat2_address0;
    sc_out< sc_logic > r_dat2_ce0;
    sc_out< sc_logic > r_dat2_we0;
    sc_out< sc_lv<8> > r_dat2_d0;
    sc_out< sc_lv<11> > r_dat3_address0;
    sc_out< sc_logic > r_dat3_ce0;
    sc_out< sc_logic > r_dat3_we0;
    sc_out< sc_lv<8> > r_dat3_d0;
    sc_out< sc_lv<10> > r_dat4_address0;
    sc_out< sc_logic > r_dat4_ce0;
    sc_out< sc_logic > r_dat4_we0;
    sc_out< sc_lv<8> > r_dat4_d0;
    sc_out< sc_lv<10> > r_dat5_address0;
    sc_out< sc_logic > r_dat5_ce0;
    sc_out< sc_logic > r_dat5_we0;
    sc_out< sc_lv<8> > r_dat5_d0;
    sc_out< sc_lv<10> > r_dat6_address0;
    sc_out< sc_logic > r_dat6_ce0;
    sc_out< sc_logic > r_dat6_we0;
    sc_out< sc_lv<8> > r_dat6_d0;
    sc_out< sc_lv<10> > r_dat7_address0;
    sc_out< sc_logic > r_dat7_ce0;
    sc_out< sc_logic > r_dat7_we0;
    sc_out< sc_lv<8> > r_dat7_d0;
    sc_out< sc_lv<10> > r_dat8_address0;
    sc_out< sc_logic > r_dat8_ce0;
    sc_out< sc_logic > r_dat8_we0;
    sc_out< sc_lv<8> > r_dat8_d0;
    sc_out< sc_lv<10> > r_dat9_address0;
    sc_out< sc_logic > r_dat9_ce0;
    sc_out< sc_logic > r_dat9_we0;
    sc_out< sc_lv<8> > r_dat9_d0;
    sc_out< sc_lv<10> > r_dat10_address0;
    sc_out< sc_logic > r_dat10_ce0;
    sc_out< sc_logic > r_dat10_we0;
    sc_out< sc_lv<8> > r_dat10_d0;
    sc_in< sc_lv<16> > mem_i;
    sc_out< sc_lv<16> > mem_o;
    sc_out< sc_logic > mem_o_ap_vld;
    sc_in< sc_lv<16> > pos_r_i;
    sc_out< sc_lv<16> > pos_r_o;
    sc_out< sc_logic > pos_r_o_ap_vld;
    sc_in< sc_lv<12> > trig;


    // Module declarations
    write_raw_data(sc_module_name name);
    SC_HAS_PROCESS(write_raw_data);

    ~write_raw_data();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<16> > pos_new_phi_fu_208_p4;
    sc_signal< sc_lv<1> > tmp_12_fu_293_p2;
    sc_signal< sc_lv<16> > tmp_11_fu_278_p2;
    sc_signal< sc_lv<32> > tmp_10_fu_223_p1;
    sc_signal< sc_lv<16> > mem_load_load_fu_215_p1;
    sc_signal< sc_lv<32> > tmp_s_fu_228_p1;
    sc_signal< sc_lv<32> > tmp_9_fu_233_p1;
    sc_signal< sc_lv<32> > tmp_8_fu_238_p1;
    sc_signal< sc_lv<32> > tmp_7_fu_243_p1;
    sc_signal< sc_lv<32> > tmp_6_fu_248_p1;
    sc_signal< sc_lv<32> > tmp_5_fu_253_p1;
    sc_signal< sc_lv<32> > tmp_4_fu_258_p1;
    sc_signal< sc_lv<32> > tmp_3_fu_263_p1;
    sc_signal< sc_lv<32> > tmp_2_fu_268_p1;
    sc_signal< sc_lv<32> > tmp_1_fu_273_p1;
    sc_signal< sc_lv<16> > tmp_13_fu_299_p2;
    sc_signal< sc_lv<16> > extLd_fu_289_p1;
    static const sc_lv<16> ap_const_lv16_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<16> ap_const_lv16_A;
    static const sc_lv<16> ap_const_lv16_9;
    static const sc_lv<16> ap_const_lv16_8;
    static const sc_lv<16> ap_const_lv16_7;
    static const sc_lv<16> ap_const_lv16_6;
    static const sc_lv<16> ap_const_lv16_5;
    static const sc_lv<16> ap_const_lv16_4;
    static const sc_lv<16> ap_const_lv16_3;
    static const sc_lv<16> ap_const_lv16_2;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_logic ap_const_logic_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_extLd_fu_289_p1();
    void thread_mem_load_load_fu_215_p1();
    void thread_mem_o();
    void thread_mem_o_ap_vld();
    void thread_pos_new_phi_fu_208_p4();
    void thread_pos_r_o();
    void thread_pos_r_o_ap_vld();
    void thread_r_dat0_address0();
    void thread_r_dat0_ce0();
    void thread_r_dat0_d0();
    void thread_r_dat0_we0();
    void thread_r_dat10_address0();
    void thread_r_dat10_ce0();
    void thread_r_dat10_d0();
    void thread_r_dat10_we0();
    void thread_r_dat1_address0();
    void thread_r_dat1_ce0();
    void thread_r_dat1_d0();
    void thread_r_dat1_we0();
    void thread_r_dat2_address0();
    void thread_r_dat2_ce0();
    void thread_r_dat2_d0();
    void thread_r_dat2_we0();
    void thread_r_dat3_address0();
    void thread_r_dat3_ce0();
    void thread_r_dat3_d0();
    void thread_r_dat3_we0();
    void thread_r_dat4_address0();
    void thread_r_dat4_ce0();
    void thread_r_dat4_d0();
    void thread_r_dat4_we0();
    void thread_r_dat5_address0();
    void thread_r_dat5_ce0();
    void thread_r_dat5_d0();
    void thread_r_dat5_we0();
    void thread_r_dat6_address0();
    void thread_r_dat6_ce0();
    void thread_r_dat6_d0();
    void thread_r_dat6_we0();
    void thread_r_dat7_address0();
    void thread_r_dat7_ce0();
    void thread_r_dat7_d0();
    void thread_r_dat7_we0();
    void thread_r_dat8_address0();
    void thread_r_dat8_ce0();
    void thread_r_dat8_d0();
    void thread_r_dat8_we0();
    void thread_r_dat9_address0();
    void thread_r_dat9_ce0();
    void thread_r_dat9_d0();
    void thread_r_dat9_we0();
    void thread_tmp_10_fu_223_p1();
    void thread_tmp_11_fu_278_p2();
    void thread_tmp_12_fu_293_p2();
    void thread_tmp_13_fu_299_p2();
    void thread_tmp_1_fu_273_p1();
    void thread_tmp_2_fu_268_p1();
    void thread_tmp_3_fu_263_p1();
    void thread_tmp_4_fu_258_p1();
    void thread_tmp_5_fu_253_p1();
    void thread_tmp_6_fu_248_p1();
    void thread_tmp_7_fu_243_p1();
    void thread_tmp_8_fu_238_p1();
    void thread_tmp_9_fu_233_p1();
    void thread_tmp_s_fu_228_p1();
};

}

using namespace ap_rtl;

#endif
