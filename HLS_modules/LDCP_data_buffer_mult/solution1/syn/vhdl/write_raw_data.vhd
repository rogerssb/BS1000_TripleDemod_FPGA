-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_raw_data is
port (
    dat : IN STD_LOGIC_VECTOR (7 downto 0);
    r_dat0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_dat0_ce0 : OUT STD_LOGIC;
    r_dat0_we0 : OUT STD_LOGIC;
    r_dat0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_dat1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_dat1_ce0 : OUT STD_LOGIC;
    r_dat1_we0 : OUT STD_LOGIC;
    r_dat1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_dat2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_dat2_ce0 : OUT STD_LOGIC;
    r_dat2_we0 : OUT STD_LOGIC;
    r_dat2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_dat3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_dat3_ce0 : OUT STD_LOGIC;
    r_dat3_we0 : OUT STD_LOGIC;
    r_dat3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_dat4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_dat4_ce0 : OUT STD_LOGIC;
    r_dat4_we0 : OUT STD_LOGIC;
    r_dat4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_dat5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_dat5_ce0 : OUT STD_LOGIC;
    r_dat5_we0 : OUT STD_LOGIC;
    r_dat5_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_dat6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_dat6_ce0 : OUT STD_LOGIC;
    r_dat6_we0 : OUT STD_LOGIC;
    r_dat6_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_dat7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_dat7_ce0 : OUT STD_LOGIC;
    r_dat7_we0 : OUT STD_LOGIC;
    r_dat7_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_dat8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_dat8_ce0 : OUT STD_LOGIC;
    r_dat8_we0 : OUT STD_LOGIC;
    r_dat8_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_dat9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_dat9_ce0 : OUT STD_LOGIC;
    r_dat9_we0 : OUT STD_LOGIC;
    r_dat9_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_dat10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_dat10_ce0 : OUT STD_LOGIC;
    r_dat10_we0 : OUT STD_LOGIC;
    r_dat10_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mem_i : IN STD_LOGIC_VECTOR (15 downto 0);
    mem_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    mem_o_ap_vld : OUT STD_LOGIC;
    pos_r_i : IN STD_LOGIC_VECTOR (15 downto 0);
    pos_r_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    pos_r_o_ap_vld : OUT STD_LOGIC;
    trig : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of write_raw_data is 
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_A : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001010";
    constant ap_const_lv16_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001001";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal pos_new_phi_fu_208_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_278_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_load_load_fu_215_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_299_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal extLd_fu_289_p1 : STD_LOGIC_VECTOR (15 downto 0);


begin



    extLd_fu_289_p1 <= std_logic_vector(resize(unsigned(trig),16));
    mem_load_load_fu_215_p1 <= mem_i;

    mem_o_assign_proc : process(mem_i, tmp_12_fu_293_p2, tmp_13_fu_299_p2)
    begin
        if (not((tmp_12_fu_293_p2 = ap_const_lv1_0))) then 
            mem_o <= tmp_13_fu_299_p2;
        else 
            mem_o <= mem_i;
        end if; 
    end process;


    mem_o_ap_vld_assign_proc : process(tmp_12_fu_293_p2)
    begin
        if (not((tmp_12_fu_293_p2 = ap_const_lv1_0))) then 
            mem_o_ap_vld <= ap_const_logic_1;
        else 
            mem_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pos_new_phi_fu_208_p4_assign_proc : process(tmp_12_fu_293_p2, tmp_11_fu_278_p2)
    begin
        if ((tmp_12_fu_293_p2 = ap_const_lv1_0)) then 
            pos_new_phi_fu_208_p4 <= tmp_11_fu_278_p2;
        elsif (not((tmp_12_fu_293_p2 = ap_const_lv1_0))) then 
            pos_new_phi_fu_208_p4 <= ap_const_lv16_0;
        else 
            pos_new_phi_fu_208_p4 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pos_r_o_assign_proc : process(pos_r_i, pos_new_phi_fu_208_p4)
    begin
        pos_r_o <= pos_new_phi_fu_208_p4;
    end process;

    pos_r_o_ap_vld <= ap_const_logic_1;
    r_dat0_address0 <= tmp_1_fu_273_p1(11 - 1 downto 0);
    r_dat0_ce0 <= ap_const_logic_1;
    r_dat0_d0 <= dat;

    r_dat0_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((ap_const_lv16_0 = mem_load_load_fu_215_p1))) then 
            r_dat0_we0 <= ap_const_logic_1;
        else 
            r_dat0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_dat10_address0 <= tmp_10_fu_223_p1(10 - 1 downto 0);
    r_dat10_ce0 <= ap_const_logic_1;
    r_dat10_d0 <= dat;

    r_dat10_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((mem_load_load_fu_215_p1 = ap_const_lv16_A))) then 
            r_dat10_we0 <= ap_const_logic_1;
        else 
            r_dat10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_dat1_address0 <= tmp_2_fu_268_p1(11 - 1 downto 0);
    r_dat1_ce0 <= ap_const_logic_1;
    r_dat1_d0 <= dat;

    r_dat1_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((mem_load_load_fu_215_p1 = ap_const_lv16_1))) then 
            r_dat1_we0 <= ap_const_logic_1;
        else 
            r_dat1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_dat2_address0 <= tmp_3_fu_263_p1(11 - 1 downto 0);
    r_dat2_ce0 <= ap_const_logic_1;
    r_dat2_d0 <= dat;

    r_dat2_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((mem_load_load_fu_215_p1 = ap_const_lv16_2))) then 
            r_dat2_we0 <= ap_const_logic_1;
        else 
            r_dat2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_dat3_address0 <= tmp_4_fu_258_p1(11 - 1 downto 0);
    r_dat3_ce0 <= ap_const_logic_1;
    r_dat3_d0 <= dat;

    r_dat3_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((mem_load_load_fu_215_p1 = ap_const_lv16_3))) then 
            r_dat3_we0 <= ap_const_logic_1;
        else 
            r_dat3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_dat4_address0 <= tmp_5_fu_253_p1(10 - 1 downto 0);
    r_dat4_ce0 <= ap_const_logic_1;
    r_dat4_d0 <= dat;

    r_dat4_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((mem_load_load_fu_215_p1 = ap_const_lv16_4))) then 
            r_dat4_we0 <= ap_const_logic_1;
        else 
            r_dat4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_dat5_address0 <= tmp_6_fu_248_p1(10 - 1 downto 0);
    r_dat5_ce0 <= ap_const_logic_1;
    r_dat5_d0 <= dat;

    r_dat5_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((mem_load_load_fu_215_p1 = ap_const_lv16_5))) then 
            r_dat5_we0 <= ap_const_logic_1;
        else 
            r_dat5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_dat6_address0 <= tmp_7_fu_243_p1(10 - 1 downto 0);
    r_dat6_ce0 <= ap_const_logic_1;
    r_dat6_d0 <= dat;

    r_dat6_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((mem_load_load_fu_215_p1 = ap_const_lv16_6))) then 
            r_dat6_we0 <= ap_const_logic_1;
        else 
            r_dat6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_dat7_address0 <= tmp_8_fu_238_p1(10 - 1 downto 0);
    r_dat7_ce0 <= ap_const_logic_1;
    r_dat7_d0 <= dat;

    r_dat7_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((mem_load_load_fu_215_p1 = ap_const_lv16_7))) then 
            r_dat7_we0 <= ap_const_logic_1;
        else 
            r_dat7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_dat8_address0 <= tmp_9_fu_233_p1(10 - 1 downto 0);
    r_dat8_ce0 <= ap_const_logic_1;
    r_dat8_d0 <= dat;

    r_dat8_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((mem_load_load_fu_215_p1 = ap_const_lv16_8))) then 
            r_dat8_we0 <= ap_const_logic_1;
        else 
            r_dat8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_dat9_address0 <= tmp_s_fu_228_p1(10 - 1 downto 0);
    r_dat9_ce0 <= ap_const_logic_1;
    r_dat9_d0 <= dat;

    r_dat9_we0_assign_proc : process(mem_load_load_fu_215_p1)
    begin
        if (((mem_load_load_fu_215_p1 = ap_const_lv16_9))) then 
            r_dat9_we0 <= ap_const_logic_1;
        else 
            r_dat9_we0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_fu_223_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

    tmp_11_fu_278_p2 <= std_logic_vector(unsigned(pos_r_i) + unsigned(ap_const_lv16_1));
    tmp_12_fu_293_p2 <= "1" when (tmp_11_fu_278_p2 = extLd_fu_289_p1) else "0";
    tmp_13_fu_299_p2 <= std_logic_vector(unsigned(mem_i) + unsigned(ap_const_lv16_1));
        tmp_1_fu_273_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

        tmp_2_fu_268_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

        tmp_3_fu_263_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

        tmp_4_fu_258_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

        tmp_5_fu_253_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

        tmp_6_fu_248_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

        tmp_7_fu_243_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

        tmp_8_fu_238_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

        tmp_9_fu_233_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

        tmp_s_fu_228_p1 <= std_logic_vector(resize(signed(pos_r_i),32));

end behav;
