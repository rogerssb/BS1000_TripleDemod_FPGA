#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_start", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_done", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_idle", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_ready", 1, hls_out, -1, "", "", 1),
	Port_Property("data_in", 8, hls_in, 0, "ap_none", "in_data", 1),
	Port_Property("reset", 1, hls_in, 1, "ap_none", "in_data", 1),
	Port_Property("raw_dat0_address0", 11, hls_out, 2, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat0_ce0", 1, hls_out, 2, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat0_we0", 1, hls_out, 2, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat0_d0", 8, hls_out, 2, "ap_memory", "mem_din", 1),
	Port_Property("raw_dat1_address0", 11, hls_out, 3, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat1_ce0", 1, hls_out, 3, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat1_we0", 1, hls_out, 3, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat1_d0", 8, hls_out, 3, "ap_memory", "mem_din", 1),
	Port_Property("raw_dat2_address0", 11, hls_out, 4, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat2_ce0", 1, hls_out, 4, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat2_we0", 1, hls_out, 4, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat2_d0", 8, hls_out, 4, "ap_memory", "mem_din", 1),
	Port_Property("raw_dat3_address0", 11, hls_out, 5, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat3_ce0", 1, hls_out, 5, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat3_we0", 1, hls_out, 5, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat3_d0", 8, hls_out, 5, "ap_memory", "mem_din", 1),
	Port_Property("raw_dat4_address0", 10, hls_out, 6, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat4_ce0", 1, hls_out, 6, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat4_we0", 1, hls_out, 6, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat4_d0", 8, hls_out, 6, "ap_memory", "mem_din", 1),
	Port_Property("raw_dat5_address0", 10, hls_out, 7, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat5_ce0", 1, hls_out, 7, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat5_we0", 1, hls_out, 7, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat5_d0", 8, hls_out, 7, "ap_memory", "mem_din", 1),
	Port_Property("raw_dat6_address0", 10, hls_out, 8, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat6_ce0", 1, hls_out, 8, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat6_we0", 1, hls_out, 8, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat6_d0", 8, hls_out, 8, "ap_memory", "mem_din", 1),
	Port_Property("raw_dat7_address0", 10, hls_out, 9, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat7_ce0", 1, hls_out, 9, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat7_we0", 1, hls_out, 9, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat7_d0", 8, hls_out, 9, "ap_memory", "mem_din", 1),
	Port_Property("raw_dat8_address0", 10, hls_out, 10, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat8_ce0", 1, hls_out, 10, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat8_we0", 1, hls_out, 10, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat8_d0", 8, hls_out, 10, "ap_memory", "mem_din", 1),
	Port_Property("raw_dat9_address0", 10, hls_out, 11, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat9_ce0", 1, hls_out, 11, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat9_we0", 1, hls_out, 11, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat9_d0", 8, hls_out, 11, "ap_memory", "mem_din", 1),
	Port_Property("raw_dat10_address0", 10, hls_out, 12, "ap_memory", "mem_address", 1),
	Port_Property("raw_dat10_ce0", 1, hls_out, 12, "ap_memory", "mem_ce", 1),
	Port_Property("raw_dat10_we0", 1, hls_out, 12, "ap_memory", "mem_we", 1),
	Port_Property("raw_dat10_d0", 8, hls_out, 12, "ap_memory", "mem_din", 1),
	Port_Property("numbits_V", 16, hls_in, 13, "ap_none", "in_data", 1),
	Port_Property("overrun", 1, hls_out, 14, "ap_vld", "out_data", 1),
	Port_Property("overrun_ap_vld", 1, hls_out, 14, "ap_vld", "out_vld", 1),
	Port_Property("full", 1, hls_out, 15, "ap_vld", "out_data", 1),
	Port_Property("full_ap_vld", 1, hls_out, 15, "ap_vld", "out_vld", 1),
	Port_Property("write_r", 1, hls_in, 16, "ap_none", "in_data", 1),
	Port_Property("deran_V", 2, hls_in, 17, "ap_none", "in_data", 1),
	Port_Property("mux", 1, hls_out, 18, "ap_none", "out_data", 1),
	Port_Property("decode_done", 1, hls_in, 19, "ap_none", "in_data", 1),
	Port_Property("decode_start", 1, hls_out, 20, "ap_vld", "out_data", 1),
	Port_Property("decode_start_ap_vld", 1, hls_out, 20, "ap_vld", "out_vld", 1),
	Port_Property("decode_ready", 1, hls_in, 21, "ap_none", "in_data", 1),
	Port_Property("decode_done_b", 1, hls_in, 22, "ap_none", "in_data", 1),
	Port_Property("decode_start_b", 1, hls_out, 23, "ap_vld", "out_data", 1),
	Port_Property("decode_start_b_ap_vld", 1, hls_out, 23, "ap_vld", "out_vld", 1),
	Port_Property("decode_ready_b", 1, hls_in, 24, "ap_none", "in_data", 1),
	Port_Property("deran_data", 8, hls_out, 25, "ap_vld", "out_data", 1),
	Port_Property("deran_data_ap_vld", 1, hls_out, 25, "ap_vld", "out_vld", 1),
	Port_Property("cur_write_pos_V", 16, hls_out, 26, "ap_vld", "out_data", 1),
	Port_Property("cur_write_pos_V_ap_vld", 1, hls_out, 26, "ap_vld", "out_vld", 1),
	Port_Property("out_mux", 1, hls_in, 27, "ap_none", "in_data", 1),
};
const char* HLS_Design_Meta::dut_name = "LDPC_buff";
