// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      LDPC_buff
`define AUTOTB_DUT_INST AESL_inst_LDPC_buff
`define AUTOTB_TOP      apatb_LDPC_buff_top
`define AUTOTB_LAT_RESULT_FILE "LDPC_buff.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "LDPC_buff.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_LDPC_buff_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00

`define AESL_DEPTH_data_in 1
`define AESL_DEPTH_reset 1
`define AESL_MEM_raw_dat0 AESL_automem_raw_dat0
`define AESL_MEM_INST_raw_dat0 mem_inst_raw_dat0
`define AESL_MEM_raw_dat1 AESL_automem_raw_dat1
`define AESL_MEM_INST_raw_dat1 mem_inst_raw_dat1
`define AESL_MEM_raw_dat2 AESL_automem_raw_dat2
`define AESL_MEM_INST_raw_dat2 mem_inst_raw_dat2
`define AESL_MEM_raw_dat3 AESL_automem_raw_dat3
`define AESL_MEM_INST_raw_dat3 mem_inst_raw_dat3
`define AESL_MEM_raw_dat4 AESL_automem_raw_dat4
`define AESL_MEM_INST_raw_dat4 mem_inst_raw_dat4
`define AESL_MEM_raw_dat5 AESL_automem_raw_dat5
`define AESL_MEM_INST_raw_dat5 mem_inst_raw_dat5
`define AESL_MEM_raw_dat6 AESL_automem_raw_dat6
`define AESL_MEM_INST_raw_dat6 mem_inst_raw_dat6
`define AESL_MEM_raw_dat7 AESL_automem_raw_dat7
`define AESL_MEM_INST_raw_dat7 mem_inst_raw_dat7
`define AESL_MEM_raw_dat8 AESL_automem_raw_dat8
`define AESL_MEM_INST_raw_dat8 mem_inst_raw_dat8
`define AESL_MEM_raw_dat9 AESL_automem_raw_dat9
`define AESL_MEM_INST_raw_dat9 mem_inst_raw_dat9
`define AESL_MEM_raw_dat10 AESL_automem_raw_dat10
`define AESL_MEM_INST_raw_dat10 mem_inst_raw_dat10
`define AESL_DEPTH_numbits_V 1
`define AESL_DEPTH_overrun 1
`define AESL_DEPTH_full 1
`define AESL_DEPTH_write_r 1
`define AESL_DEPTH_deran_V 1
`define AESL_DEPTH_mux 1
`define AESL_DEPTH_decode_done 1
`define AESL_DEPTH_decode_start 1
`define AESL_DEPTH_decode_ready 1
`define AESL_DEPTH_decode_done_b 1
`define AESL_DEPTH_decode_start_b 1
`define AESL_DEPTH_decode_ready_b 1
`define AESL_DEPTH_deran_data 1
`define AESL_DEPTH_cur_write_pos_V 1
`define AESL_DEPTH_out_mux 1
`define AUTOTB_TVIN_data_in  "../tv/cdatafile/c.LDPC_buff.autotvin_data_in.dat"
`define AUTOTB_TVIN_reset  "../tv/cdatafile/c.LDPC_buff.autotvin_reset.dat"
`define AUTOTB_TVIN_raw_dat0  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat0.dat"
`define AUTOTB_TVIN_raw_dat1  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat1.dat"
`define AUTOTB_TVIN_raw_dat2  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat2.dat"
`define AUTOTB_TVIN_raw_dat3  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat3.dat"
`define AUTOTB_TVIN_raw_dat4  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat4.dat"
`define AUTOTB_TVIN_raw_dat5  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat5.dat"
`define AUTOTB_TVIN_raw_dat6  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat6.dat"
`define AUTOTB_TVIN_raw_dat7  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat7.dat"
`define AUTOTB_TVIN_raw_dat8  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat8.dat"
`define AUTOTB_TVIN_raw_dat9  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat9.dat"
`define AUTOTB_TVIN_raw_dat10  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat10.dat"
`define AUTOTB_TVIN_numbits_V  "../tv/cdatafile/c.LDPC_buff.autotvin_numbits_V.dat"
`define AUTOTB_TVIN_write_r  "../tv/cdatafile/c.LDPC_buff.autotvin_write_r.dat"
`define AUTOTB_TVIN_deran_V  "../tv/cdatafile/c.LDPC_buff.autotvin_deran_V.dat"
`define AUTOTB_TVIN_decode_done  "../tv/cdatafile/c.LDPC_buff.autotvin_decode_done.dat"
`define AUTOTB_TVIN_decode_ready  "../tv/cdatafile/c.LDPC_buff.autotvin_decode_ready.dat"
`define AUTOTB_TVIN_decode_done_b  "../tv/cdatafile/c.LDPC_buff.autotvin_decode_done_b.dat"
`define AUTOTB_TVIN_decode_ready_b  "../tv/cdatafile/c.LDPC_buff.autotvin_decode_ready_b.dat"
`define AUTOTB_TVIN_out_mux  "../tv/cdatafile/c.LDPC_buff.autotvin_out_mux.dat"
`define AUTOTB_TVIN_data_in_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_data_in.dat"
`define AUTOTB_TVIN_reset_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_reset.dat"
`define AUTOTB_TVIN_raw_dat0_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat0.dat"
`define AUTOTB_TVIN_raw_dat1_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat1.dat"
`define AUTOTB_TVIN_raw_dat2_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat2.dat"
`define AUTOTB_TVIN_raw_dat3_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat3.dat"
`define AUTOTB_TVIN_raw_dat4_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat4.dat"
`define AUTOTB_TVIN_raw_dat5_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat5.dat"
`define AUTOTB_TVIN_raw_dat6_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat6.dat"
`define AUTOTB_TVIN_raw_dat7_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat7.dat"
`define AUTOTB_TVIN_raw_dat8_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat8.dat"
`define AUTOTB_TVIN_raw_dat9_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat9.dat"
`define AUTOTB_TVIN_raw_dat10_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_raw_dat10.dat"
`define AUTOTB_TVIN_numbits_V_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_numbits_V.dat"
`define AUTOTB_TVIN_write_r_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_write_r.dat"
`define AUTOTB_TVIN_deran_V_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_deran_V.dat"
`define AUTOTB_TVIN_decode_done_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_decode_done.dat"
`define AUTOTB_TVIN_decode_ready_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_decode_ready.dat"
`define AUTOTB_TVIN_decode_done_b_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_decode_done_b.dat"
`define AUTOTB_TVIN_decode_ready_b_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_decode_ready_b.dat"
`define AUTOTB_TVIN_out_mux_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvin_out_mux.dat"
`define AUTOTB_TVOUT_raw_dat0  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat0.dat"
`define AUTOTB_TVOUT_raw_dat1  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat1.dat"
`define AUTOTB_TVOUT_raw_dat2  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat2.dat"
`define AUTOTB_TVOUT_raw_dat3  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat3.dat"
`define AUTOTB_TVOUT_raw_dat4  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat4.dat"
`define AUTOTB_TVOUT_raw_dat5  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat5.dat"
`define AUTOTB_TVOUT_raw_dat6  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat6.dat"
`define AUTOTB_TVOUT_raw_dat7  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat7.dat"
`define AUTOTB_TVOUT_raw_dat8  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat8.dat"
`define AUTOTB_TVOUT_raw_dat9  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat9.dat"
`define AUTOTB_TVOUT_raw_dat10  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat10.dat"
`define AUTOTB_TVOUT_overrun  "../tv/cdatafile/c.LDPC_buff.autotvout_overrun.dat"
`define AUTOTB_TVOUT_full  "../tv/cdatafile/c.LDPC_buff.autotvout_full.dat"
`define AUTOTB_TVOUT_mux  "../tv/cdatafile/c.LDPC_buff.autotvout_mux.dat"
`define AUTOTB_TVOUT_decode_start  "../tv/cdatafile/c.LDPC_buff.autotvout_decode_start.dat"
`define AUTOTB_TVOUT_decode_start_b  "../tv/cdatafile/c.LDPC_buff.autotvout_decode_start_b.dat"
`define AUTOTB_TVOUT_deran_data  "../tv/cdatafile/c.LDPC_buff.autotvout_deran_data.dat"
`define AUTOTB_TVOUT_cur_write_pos_V  "../tv/cdatafile/c.LDPC_buff.autotvout_cur_write_pos_V.dat"
`define AUTOTB_TVOUT_raw_dat0_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat0.dat"
`define AUTOTB_TVOUT_raw_dat1_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat1.dat"
`define AUTOTB_TVOUT_raw_dat2_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat2.dat"
`define AUTOTB_TVOUT_raw_dat3_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat3.dat"
`define AUTOTB_TVOUT_raw_dat4_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat4.dat"
`define AUTOTB_TVOUT_raw_dat5_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat5.dat"
`define AUTOTB_TVOUT_raw_dat6_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat6.dat"
`define AUTOTB_TVOUT_raw_dat7_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat7.dat"
`define AUTOTB_TVOUT_raw_dat8_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat8.dat"
`define AUTOTB_TVOUT_raw_dat9_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat9.dat"
`define AUTOTB_TVOUT_raw_dat10_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat10.dat"
`define AUTOTB_TVOUT_overrun_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_overrun.dat"
`define AUTOTB_TVOUT_full_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_full.dat"
`define AUTOTB_TVOUT_mux_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_mux.dat"
`define AUTOTB_TVOUT_decode_start_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_decode_start.dat"
`define AUTOTB_TVOUT_decode_start_b_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_decode_start_b.dat"
`define AUTOTB_TVOUT_deran_data_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_deran_data.dat"
`define AUTOTB_TVOUT_cur_write_pos_V_out_wrapc  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_cur_write_pos_V.dat"
module `AUTOTB_TOP;

parameter AUTOTB_TRANSACTION_NUM = 13;
parameter PROGRESS_TIMEOUT = 10000000;
parameter LATENCY_ESTIMATION = 0;
parameter LENGTH_data_in = 1;
parameter LENGTH_reset = 1;
parameter LENGTH_raw_dat0 = 2048;
parameter LENGTH_raw_dat1 = 2048;
parameter LENGTH_raw_dat2 = 2048;
parameter LENGTH_raw_dat3 = 2048;
parameter LENGTH_raw_dat4 = 1024;
parameter LENGTH_raw_dat5 = 1024;
parameter LENGTH_raw_dat6 = 1024;
parameter LENGTH_raw_dat7 = 1024;
parameter LENGTH_raw_dat8 = 1024;
parameter LENGTH_raw_dat9 = 1024;
parameter LENGTH_raw_dat10 = 1024;
parameter LENGTH_numbits_V = 1;
parameter LENGTH_overrun = 1;
parameter LENGTH_full = 1;
parameter LENGTH_write_r = 1;
parameter LENGTH_deran_V = 1;
parameter LENGTH_mux = 1;
parameter LENGTH_decode_done = 1;
parameter LENGTH_decode_start = 1;
parameter LENGTH_decode_ready = 1;
parameter LENGTH_decode_done_b = 1;
parameter LENGTH_decode_start_b = 1;
parameter LENGTH_decode_ready_b = 1;
parameter LENGTH_deran_data = 1;
parameter LENGTH_cur_write_pos_V = 1;
parameter LENGTH_out_mux = 1;

task read_token;
    input integer fp;
    output reg [199 : 0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg tb_continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
wire ap_start;
wire ap_done;
wire ap_idle;
wire ap_ready;
wire [7 : 0] data_in;
wire  reset;
wire [10 : 0] raw_dat0_address0;
wire  raw_dat0_ce0;
wire  raw_dat0_we0;
wire [7 : 0] raw_dat0_d0;
wire [10 : 0] raw_dat1_address0;
wire  raw_dat1_ce0;
wire  raw_dat1_we0;
wire [7 : 0] raw_dat1_d0;
wire [10 : 0] raw_dat2_address0;
wire  raw_dat2_ce0;
wire  raw_dat2_we0;
wire [7 : 0] raw_dat2_d0;
wire [10 : 0] raw_dat3_address0;
wire  raw_dat3_ce0;
wire  raw_dat3_we0;
wire [7 : 0] raw_dat3_d0;
wire [9 : 0] raw_dat4_address0;
wire  raw_dat4_ce0;
wire  raw_dat4_we0;
wire [7 : 0] raw_dat4_d0;
wire [9 : 0] raw_dat5_address0;
wire  raw_dat5_ce0;
wire  raw_dat5_we0;
wire [7 : 0] raw_dat5_d0;
wire [9 : 0] raw_dat6_address0;
wire  raw_dat6_ce0;
wire  raw_dat6_we0;
wire [7 : 0] raw_dat6_d0;
wire [9 : 0] raw_dat7_address0;
wire  raw_dat7_ce0;
wire  raw_dat7_we0;
wire [7 : 0] raw_dat7_d0;
wire [9 : 0] raw_dat8_address0;
wire  raw_dat8_ce0;
wire  raw_dat8_we0;
wire [7 : 0] raw_dat8_d0;
wire [9 : 0] raw_dat9_address0;
wire  raw_dat9_ce0;
wire  raw_dat9_we0;
wire [7 : 0] raw_dat9_d0;
wire [9 : 0] raw_dat10_address0;
wire  raw_dat10_ce0;
wire  raw_dat10_we0;
wire [7 : 0] raw_dat10_d0;
wire [15 : 0] numbits_V;
wire  overrun;
wire  overrun_ap_vld;
wire  full;
wire  full_ap_vld;
wire  write_r;
wire [1 : 0] deran_V;
wire  mux;
wire  decode_done;
wire  decode_start;
wire  decode_start_ap_vld;
wire  decode_ready;
wire  decode_done_b;
wire  decode_start_b;
wire  decode_start_b_ap_vld;
wire  decode_ready_b;
wire [7 : 0] deran_data;
wire  deran_data_ap_vld;
wire [15 : 0] cur_write_pos_V;
wire  cur_write_pos_V_ap_vld;
wire  out_mux;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

wire ap_clk;
wire ap_rst;
wire ap_rst_n;

`AUTOTB_DUT `AUTOTB_DUT_INST(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_ready(ap_ready),
    .data_in(data_in),
    .reset(reset),
    .raw_dat0_address0(raw_dat0_address0),
    .raw_dat0_ce0(raw_dat0_ce0),
    .raw_dat0_we0(raw_dat0_we0),
    .raw_dat0_d0(raw_dat0_d0),
    .raw_dat1_address0(raw_dat1_address0),
    .raw_dat1_ce0(raw_dat1_ce0),
    .raw_dat1_we0(raw_dat1_we0),
    .raw_dat1_d0(raw_dat1_d0),
    .raw_dat2_address0(raw_dat2_address0),
    .raw_dat2_ce0(raw_dat2_ce0),
    .raw_dat2_we0(raw_dat2_we0),
    .raw_dat2_d0(raw_dat2_d0),
    .raw_dat3_address0(raw_dat3_address0),
    .raw_dat3_ce0(raw_dat3_ce0),
    .raw_dat3_we0(raw_dat3_we0),
    .raw_dat3_d0(raw_dat3_d0),
    .raw_dat4_address0(raw_dat4_address0),
    .raw_dat4_ce0(raw_dat4_ce0),
    .raw_dat4_we0(raw_dat4_we0),
    .raw_dat4_d0(raw_dat4_d0),
    .raw_dat5_address0(raw_dat5_address0),
    .raw_dat5_ce0(raw_dat5_ce0),
    .raw_dat5_we0(raw_dat5_we0),
    .raw_dat5_d0(raw_dat5_d0),
    .raw_dat6_address0(raw_dat6_address0),
    .raw_dat6_ce0(raw_dat6_ce0),
    .raw_dat6_we0(raw_dat6_we0),
    .raw_dat6_d0(raw_dat6_d0),
    .raw_dat7_address0(raw_dat7_address0),
    .raw_dat7_ce0(raw_dat7_ce0),
    .raw_dat7_we0(raw_dat7_we0),
    .raw_dat7_d0(raw_dat7_d0),
    .raw_dat8_address0(raw_dat8_address0),
    .raw_dat8_ce0(raw_dat8_ce0),
    .raw_dat8_we0(raw_dat8_we0),
    .raw_dat8_d0(raw_dat8_d0),
    .raw_dat9_address0(raw_dat9_address0),
    .raw_dat9_ce0(raw_dat9_ce0),
    .raw_dat9_we0(raw_dat9_we0),
    .raw_dat9_d0(raw_dat9_d0),
    .raw_dat10_address0(raw_dat10_address0),
    .raw_dat10_ce0(raw_dat10_ce0),
    .raw_dat10_we0(raw_dat10_we0),
    .raw_dat10_d0(raw_dat10_d0),
    .numbits_V(numbits_V),
    .overrun(overrun),
    .overrun_ap_vld(overrun_ap_vld),
    .full(full),
    .full_ap_vld(full_ap_vld),
    .write_r(write_r),
    .deran_V(deran_V),
    .mux(mux),
    .decode_done(decode_done),
    .decode_start(decode_start),
    .decode_start_ap_vld(decode_start_ap_vld),
    .decode_ready(decode_ready),
    .decode_done_b(decode_done_b),
    .decode_start_b(decode_start_b),
    .decode_start_b_ap_vld(decode_start_b_ap_vld),
    .decode_ready_b(decode_ready_b),
    .deran_data(deran_data),
    .deran_data_ap_vld(deran_data_ap_vld),
    .cur_write_pos_V(cur_write_pos_V),
    .cur_write_pos_V_ap_vld(cur_write_pos_V_ap_vld),
    .out_mux(out_mux));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst = AESL_reset;
assign ap_rst_n = ~AESL_reset;
assign AESL_reset = rst;
assign ap_start = AESL_start;
assign AESL_start = start;
assign AESL_done = ap_done;
assign AESL_idle = ap_idle;
assign AESL_ready = ap_ready;
assign AESL_ce = ce;
assign AESL_continue = tb_continue;
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_done !== 1 && AESL_done !== 0) begin
                $display("ERROR: Control signal AESL_done is invalid!");
                $finish;
            end
        end
    end
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_ready !== 1 && AESL_ready !== 0) begin
                $display("ERROR: Control signal AESL_ready is invalid!");
                $finish;
            end
        end
    end
// The signal of port data_in
reg [7: 0] AESL_REG_data_in = 0;
assign data_in = AESL_REG_data_in;
initial begin : read_file_process_data_in
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [199  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_data_in,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_data_in);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_data_in);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port reset
reg [0: 0] AESL_REG_reset = 0;
assign reset = AESL_REG_reset;
initial begin : read_file_process_reset
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [199  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_reset,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_reset);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_reset);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


//------------------------arrayraw_dat0 Instantiation--------------

// The input and output of arrayraw_dat0
wire    arrayraw_dat0_ce0, arrayraw_dat0_ce1;
wire    arrayraw_dat0_we0, arrayraw_dat0_we1;
wire    [10 : 0]    arrayraw_dat0_address0, arrayraw_dat0_address1;
wire    [7 : 0]    arrayraw_dat0_din0, arrayraw_dat0_din1;
wire    [7 : 0]    arrayraw_dat0_dout0, arrayraw_dat0_dout1;
wire    arrayraw_dat0_ready;
wire    arrayraw_dat0_done;

`AESL_MEM_raw_dat0 `AESL_MEM_INST_raw_dat0(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat0_ce0),
    .we0        (arrayraw_dat0_we0),
    .address0   (arrayraw_dat0_address0),
    .din0       (arrayraw_dat0_din0),
    .dout0      (arrayraw_dat0_dout0),
    .ce1        (arrayraw_dat0_ce1),
    .we1        (arrayraw_dat0_we1),
    .address1   (arrayraw_dat0_address1),
    .din1       (arrayraw_dat0_din1),
    .dout1      (arrayraw_dat0_dout1),
    .ready      (arrayraw_dat0_ready),
    .done    (arrayraw_dat0_done)
);

// Assignment between dut and arrayraw_dat0
assign arrayraw_dat0_address0 = raw_dat0_address0;
assign arrayraw_dat0_ce0 = raw_dat0_ce0;
assign arrayraw_dat0_we0 = raw_dat0_we0;
assign arrayraw_dat0_din0 = raw_dat0_d0;
assign arrayraw_dat0_we1 = 0;
assign arrayraw_dat0_din1 = 0;
assign arrayraw_dat0_ready= ready_initial | arrayraw_dat0_done;
assign arrayraw_dat0_done =    AESL_done_delay;


//------------------------arrayraw_dat1 Instantiation--------------

// The input and output of arrayraw_dat1
wire    arrayraw_dat1_ce0, arrayraw_dat1_ce1;
wire    arrayraw_dat1_we0, arrayraw_dat1_we1;
wire    [10 : 0]    arrayraw_dat1_address0, arrayraw_dat1_address1;
wire    [7 : 0]    arrayraw_dat1_din0, arrayraw_dat1_din1;
wire    [7 : 0]    arrayraw_dat1_dout0, arrayraw_dat1_dout1;
wire    arrayraw_dat1_ready;
wire    arrayraw_dat1_done;

`AESL_MEM_raw_dat1 `AESL_MEM_INST_raw_dat1(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat1_ce0),
    .we0        (arrayraw_dat1_we0),
    .address0   (arrayraw_dat1_address0),
    .din0       (arrayraw_dat1_din0),
    .dout0      (arrayraw_dat1_dout0),
    .ce1        (arrayraw_dat1_ce1),
    .we1        (arrayraw_dat1_we1),
    .address1   (arrayraw_dat1_address1),
    .din1       (arrayraw_dat1_din1),
    .dout1      (arrayraw_dat1_dout1),
    .ready      (arrayraw_dat1_ready),
    .done    (arrayraw_dat1_done)
);

// Assignment between dut and arrayraw_dat1
assign arrayraw_dat1_address0 = raw_dat1_address0;
assign arrayraw_dat1_ce0 = raw_dat1_ce0;
assign arrayraw_dat1_we0 = raw_dat1_we0;
assign arrayraw_dat1_din0 = raw_dat1_d0;
assign arrayraw_dat1_we1 = 0;
assign arrayraw_dat1_din1 = 0;
assign arrayraw_dat1_ready= ready_initial | arrayraw_dat1_done;
assign arrayraw_dat1_done =    AESL_done_delay;


//------------------------arrayraw_dat2 Instantiation--------------

// The input and output of arrayraw_dat2
wire    arrayraw_dat2_ce0, arrayraw_dat2_ce1;
wire    arrayraw_dat2_we0, arrayraw_dat2_we1;
wire    [10 : 0]    arrayraw_dat2_address0, arrayraw_dat2_address1;
wire    [7 : 0]    arrayraw_dat2_din0, arrayraw_dat2_din1;
wire    [7 : 0]    arrayraw_dat2_dout0, arrayraw_dat2_dout1;
wire    arrayraw_dat2_ready;
wire    arrayraw_dat2_done;

`AESL_MEM_raw_dat2 `AESL_MEM_INST_raw_dat2(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat2_ce0),
    .we0        (arrayraw_dat2_we0),
    .address0   (arrayraw_dat2_address0),
    .din0       (arrayraw_dat2_din0),
    .dout0      (arrayraw_dat2_dout0),
    .ce1        (arrayraw_dat2_ce1),
    .we1        (arrayraw_dat2_we1),
    .address1   (arrayraw_dat2_address1),
    .din1       (arrayraw_dat2_din1),
    .dout1      (arrayraw_dat2_dout1),
    .ready      (arrayraw_dat2_ready),
    .done    (arrayraw_dat2_done)
);

// Assignment between dut and arrayraw_dat2
assign arrayraw_dat2_address0 = raw_dat2_address0;
assign arrayraw_dat2_ce0 = raw_dat2_ce0;
assign arrayraw_dat2_we0 = raw_dat2_we0;
assign arrayraw_dat2_din0 = raw_dat2_d0;
assign arrayraw_dat2_we1 = 0;
assign arrayraw_dat2_din1 = 0;
assign arrayraw_dat2_ready= ready_initial | arrayraw_dat2_done;
assign arrayraw_dat2_done =    AESL_done_delay;


//------------------------arrayraw_dat3 Instantiation--------------

// The input and output of arrayraw_dat3
wire    arrayraw_dat3_ce0, arrayraw_dat3_ce1;
wire    arrayraw_dat3_we0, arrayraw_dat3_we1;
wire    [10 : 0]    arrayraw_dat3_address0, arrayraw_dat3_address1;
wire    [7 : 0]    arrayraw_dat3_din0, arrayraw_dat3_din1;
wire    [7 : 0]    arrayraw_dat3_dout0, arrayraw_dat3_dout1;
wire    arrayraw_dat3_ready;
wire    arrayraw_dat3_done;

`AESL_MEM_raw_dat3 `AESL_MEM_INST_raw_dat3(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat3_ce0),
    .we0        (arrayraw_dat3_we0),
    .address0   (arrayraw_dat3_address0),
    .din0       (arrayraw_dat3_din0),
    .dout0      (arrayraw_dat3_dout0),
    .ce1        (arrayraw_dat3_ce1),
    .we1        (arrayraw_dat3_we1),
    .address1   (arrayraw_dat3_address1),
    .din1       (arrayraw_dat3_din1),
    .dout1      (arrayraw_dat3_dout1),
    .ready      (arrayraw_dat3_ready),
    .done    (arrayraw_dat3_done)
);

// Assignment between dut and arrayraw_dat3
assign arrayraw_dat3_address0 = raw_dat3_address0;
assign arrayraw_dat3_ce0 = raw_dat3_ce0;
assign arrayraw_dat3_we0 = raw_dat3_we0;
assign arrayraw_dat3_din0 = raw_dat3_d0;
assign arrayraw_dat3_we1 = 0;
assign arrayraw_dat3_din1 = 0;
assign arrayraw_dat3_ready= ready_initial | arrayraw_dat3_done;
assign arrayraw_dat3_done =    AESL_done_delay;


//------------------------arrayraw_dat4 Instantiation--------------

// The input and output of arrayraw_dat4
wire    arrayraw_dat4_ce0, arrayraw_dat4_ce1;
wire    arrayraw_dat4_we0, arrayraw_dat4_we1;
wire    [9 : 0]    arrayraw_dat4_address0, arrayraw_dat4_address1;
wire    [7 : 0]    arrayraw_dat4_din0, arrayraw_dat4_din1;
wire    [7 : 0]    arrayraw_dat4_dout0, arrayraw_dat4_dout1;
wire    arrayraw_dat4_ready;
wire    arrayraw_dat4_done;

`AESL_MEM_raw_dat4 `AESL_MEM_INST_raw_dat4(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat4_ce0),
    .we0        (arrayraw_dat4_we0),
    .address0   (arrayraw_dat4_address0),
    .din0       (arrayraw_dat4_din0),
    .dout0      (arrayraw_dat4_dout0),
    .ce1        (arrayraw_dat4_ce1),
    .we1        (arrayraw_dat4_we1),
    .address1   (arrayraw_dat4_address1),
    .din1       (arrayraw_dat4_din1),
    .dout1      (arrayraw_dat4_dout1),
    .ready      (arrayraw_dat4_ready),
    .done    (arrayraw_dat4_done)
);

// Assignment between dut and arrayraw_dat4
assign arrayraw_dat4_address0 = raw_dat4_address0;
assign arrayraw_dat4_ce0 = raw_dat4_ce0;
assign arrayraw_dat4_we0 = raw_dat4_we0;
assign arrayraw_dat4_din0 = raw_dat4_d0;
assign arrayraw_dat4_we1 = 0;
assign arrayraw_dat4_din1 = 0;
assign arrayraw_dat4_ready= ready_initial | arrayraw_dat4_done;
assign arrayraw_dat4_done =    AESL_done_delay;


//------------------------arrayraw_dat5 Instantiation--------------

// The input and output of arrayraw_dat5
wire    arrayraw_dat5_ce0, arrayraw_dat5_ce1;
wire    arrayraw_dat5_we0, arrayraw_dat5_we1;
wire    [9 : 0]    arrayraw_dat5_address0, arrayraw_dat5_address1;
wire    [7 : 0]    arrayraw_dat5_din0, arrayraw_dat5_din1;
wire    [7 : 0]    arrayraw_dat5_dout0, arrayraw_dat5_dout1;
wire    arrayraw_dat5_ready;
wire    arrayraw_dat5_done;

`AESL_MEM_raw_dat5 `AESL_MEM_INST_raw_dat5(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat5_ce0),
    .we0        (arrayraw_dat5_we0),
    .address0   (arrayraw_dat5_address0),
    .din0       (arrayraw_dat5_din0),
    .dout0      (arrayraw_dat5_dout0),
    .ce1        (arrayraw_dat5_ce1),
    .we1        (arrayraw_dat5_we1),
    .address1   (arrayraw_dat5_address1),
    .din1       (arrayraw_dat5_din1),
    .dout1      (arrayraw_dat5_dout1),
    .ready      (arrayraw_dat5_ready),
    .done    (arrayraw_dat5_done)
);

// Assignment between dut and arrayraw_dat5
assign arrayraw_dat5_address0 = raw_dat5_address0;
assign arrayraw_dat5_ce0 = raw_dat5_ce0;
assign arrayraw_dat5_we0 = raw_dat5_we0;
assign arrayraw_dat5_din0 = raw_dat5_d0;
assign arrayraw_dat5_we1 = 0;
assign arrayraw_dat5_din1 = 0;
assign arrayraw_dat5_ready= ready_initial | arrayraw_dat5_done;
assign arrayraw_dat5_done =    AESL_done_delay;


//------------------------arrayraw_dat6 Instantiation--------------

// The input and output of arrayraw_dat6
wire    arrayraw_dat6_ce0, arrayraw_dat6_ce1;
wire    arrayraw_dat6_we0, arrayraw_dat6_we1;
wire    [9 : 0]    arrayraw_dat6_address0, arrayraw_dat6_address1;
wire    [7 : 0]    arrayraw_dat6_din0, arrayraw_dat6_din1;
wire    [7 : 0]    arrayraw_dat6_dout0, arrayraw_dat6_dout1;
wire    arrayraw_dat6_ready;
wire    arrayraw_dat6_done;

`AESL_MEM_raw_dat6 `AESL_MEM_INST_raw_dat6(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat6_ce0),
    .we0        (arrayraw_dat6_we0),
    .address0   (arrayraw_dat6_address0),
    .din0       (arrayraw_dat6_din0),
    .dout0      (arrayraw_dat6_dout0),
    .ce1        (arrayraw_dat6_ce1),
    .we1        (arrayraw_dat6_we1),
    .address1   (arrayraw_dat6_address1),
    .din1       (arrayraw_dat6_din1),
    .dout1      (arrayraw_dat6_dout1),
    .ready      (arrayraw_dat6_ready),
    .done    (arrayraw_dat6_done)
);

// Assignment between dut and arrayraw_dat6
assign arrayraw_dat6_address0 = raw_dat6_address0;
assign arrayraw_dat6_ce0 = raw_dat6_ce0;
assign arrayraw_dat6_we0 = raw_dat6_we0;
assign arrayraw_dat6_din0 = raw_dat6_d0;
assign arrayraw_dat6_we1 = 0;
assign arrayraw_dat6_din1 = 0;
assign arrayraw_dat6_ready= ready_initial | arrayraw_dat6_done;
assign arrayraw_dat6_done =    AESL_done_delay;


//------------------------arrayraw_dat7 Instantiation--------------

// The input and output of arrayraw_dat7
wire    arrayraw_dat7_ce0, arrayraw_dat7_ce1;
wire    arrayraw_dat7_we0, arrayraw_dat7_we1;
wire    [9 : 0]    arrayraw_dat7_address0, arrayraw_dat7_address1;
wire    [7 : 0]    arrayraw_dat7_din0, arrayraw_dat7_din1;
wire    [7 : 0]    arrayraw_dat7_dout0, arrayraw_dat7_dout1;
wire    arrayraw_dat7_ready;
wire    arrayraw_dat7_done;

`AESL_MEM_raw_dat7 `AESL_MEM_INST_raw_dat7(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat7_ce0),
    .we0        (arrayraw_dat7_we0),
    .address0   (arrayraw_dat7_address0),
    .din0       (arrayraw_dat7_din0),
    .dout0      (arrayraw_dat7_dout0),
    .ce1        (arrayraw_dat7_ce1),
    .we1        (arrayraw_dat7_we1),
    .address1   (arrayraw_dat7_address1),
    .din1       (arrayraw_dat7_din1),
    .dout1      (arrayraw_dat7_dout1),
    .ready      (arrayraw_dat7_ready),
    .done    (arrayraw_dat7_done)
);

// Assignment between dut and arrayraw_dat7
assign arrayraw_dat7_address0 = raw_dat7_address0;
assign arrayraw_dat7_ce0 = raw_dat7_ce0;
assign arrayraw_dat7_we0 = raw_dat7_we0;
assign arrayraw_dat7_din0 = raw_dat7_d0;
assign arrayraw_dat7_we1 = 0;
assign arrayraw_dat7_din1 = 0;
assign arrayraw_dat7_ready= ready_initial | arrayraw_dat7_done;
assign arrayraw_dat7_done =    AESL_done_delay;


//------------------------arrayraw_dat8 Instantiation--------------

// The input and output of arrayraw_dat8
wire    arrayraw_dat8_ce0, arrayraw_dat8_ce1;
wire    arrayraw_dat8_we0, arrayraw_dat8_we1;
wire    [9 : 0]    arrayraw_dat8_address0, arrayraw_dat8_address1;
wire    [7 : 0]    arrayraw_dat8_din0, arrayraw_dat8_din1;
wire    [7 : 0]    arrayraw_dat8_dout0, arrayraw_dat8_dout1;
wire    arrayraw_dat8_ready;
wire    arrayraw_dat8_done;

`AESL_MEM_raw_dat8 `AESL_MEM_INST_raw_dat8(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat8_ce0),
    .we0        (arrayraw_dat8_we0),
    .address0   (arrayraw_dat8_address0),
    .din0       (arrayraw_dat8_din0),
    .dout0      (arrayraw_dat8_dout0),
    .ce1        (arrayraw_dat8_ce1),
    .we1        (arrayraw_dat8_we1),
    .address1   (arrayraw_dat8_address1),
    .din1       (arrayraw_dat8_din1),
    .dout1      (arrayraw_dat8_dout1),
    .ready      (arrayraw_dat8_ready),
    .done    (arrayraw_dat8_done)
);

// Assignment between dut and arrayraw_dat8
assign arrayraw_dat8_address0 = raw_dat8_address0;
assign arrayraw_dat8_ce0 = raw_dat8_ce0;
assign arrayraw_dat8_we0 = raw_dat8_we0;
assign arrayraw_dat8_din0 = raw_dat8_d0;
assign arrayraw_dat8_we1 = 0;
assign arrayraw_dat8_din1 = 0;
assign arrayraw_dat8_ready= ready_initial | arrayraw_dat8_done;
assign arrayraw_dat8_done =    AESL_done_delay;


//------------------------arrayraw_dat9 Instantiation--------------

// The input and output of arrayraw_dat9
wire    arrayraw_dat9_ce0, arrayraw_dat9_ce1;
wire    arrayraw_dat9_we0, arrayraw_dat9_we1;
wire    [9 : 0]    arrayraw_dat9_address0, arrayraw_dat9_address1;
wire    [7 : 0]    arrayraw_dat9_din0, arrayraw_dat9_din1;
wire    [7 : 0]    arrayraw_dat9_dout0, arrayraw_dat9_dout1;
wire    arrayraw_dat9_ready;
wire    arrayraw_dat9_done;

`AESL_MEM_raw_dat9 `AESL_MEM_INST_raw_dat9(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat9_ce0),
    .we0        (arrayraw_dat9_we0),
    .address0   (arrayraw_dat9_address0),
    .din0       (arrayraw_dat9_din0),
    .dout0      (arrayraw_dat9_dout0),
    .ce1        (arrayraw_dat9_ce1),
    .we1        (arrayraw_dat9_we1),
    .address1   (arrayraw_dat9_address1),
    .din1       (arrayraw_dat9_din1),
    .dout1      (arrayraw_dat9_dout1),
    .ready      (arrayraw_dat9_ready),
    .done    (arrayraw_dat9_done)
);

// Assignment between dut and arrayraw_dat9
assign arrayraw_dat9_address0 = raw_dat9_address0;
assign arrayraw_dat9_ce0 = raw_dat9_ce0;
assign arrayraw_dat9_we0 = raw_dat9_we0;
assign arrayraw_dat9_din0 = raw_dat9_d0;
assign arrayraw_dat9_we1 = 0;
assign arrayraw_dat9_din1 = 0;
assign arrayraw_dat9_ready= ready_initial | arrayraw_dat9_done;
assign arrayraw_dat9_done =    AESL_done_delay;


//------------------------arrayraw_dat10 Instantiation--------------

// The input and output of arrayraw_dat10
wire    arrayraw_dat10_ce0, arrayraw_dat10_ce1;
wire    arrayraw_dat10_we0, arrayraw_dat10_we1;
wire    [9 : 0]    arrayraw_dat10_address0, arrayraw_dat10_address1;
wire    [7 : 0]    arrayraw_dat10_din0, arrayraw_dat10_din1;
wire    [7 : 0]    arrayraw_dat10_dout0, arrayraw_dat10_dout1;
wire    arrayraw_dat10_ready;
wire    arrayraw_dat10_done;

`AESL_MEM_raw_dat10 `AESL_MEM_INST_raw_dat10(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayraw_dat10_ce0),
    .we0        (arrayraw_dat10_we0),
    .address0   (arrayraw_dat10_address0),
    .din0       (arrayraw_dat10_din0),
    .dout0      (arrayraw_dat10_dout0),
    .ce1        (arrayraw_dat10_ce1),
    .we1        (arrayraw_dat10_we1),
    .address1   (arrayraw_dat10_address1),
    .din1       (arrayraw_dat10_din1),
    .dout1      (arrayraw_dat10_dout1),
    .ready      (arrayraw_dat10_ready),
    .done    (arrayraw_dat10_done)
);

// Assignment between dut and arrayraw_dat10
assign arrayraw_dat10_address0 = raw_dat10_address0;
assign arrayraw_dat10_ce0 = raw_dat10_ce0;
assign arrayraw_dat10_we0 = raw_dat10_we0;
assign arrayraw_dat10_din0 = raw_dat10_d0;
assign arrayraw_dat10_we1 = 0;
assign arrayraw_dat10_din1 = 0;
assign arrayraw_dat10_ready= ready_initial | arrayraw_dat10_done;
assign arrayraw_dat10_done =    AESL_done_delay;


// The signal of port numbits_V
reg [15: 0] AESL_REG_numbits_V = 0;
assign numbits_V = AESL_REG_numbits_V;
initial begin : read_file_process_numbits_V
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [199  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_numbits_V,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_numbits_V);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_numbits_V);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


reg AESL_REG_overrun_ap_vld = 0;
// The signal of port overrun
reg [0: 0] AESL_REG_overrun = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_overrun = 0; 
    else if(overrun_ap_vld) begin
        AESL_REG_overrun <= overrun;
        AESL_REG_overrun_ap_vld <= 1;
    end
end 

initial begin : write_file_process_overrun
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer overrun_count;
    reg [199:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_overrun_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_overrun_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_overrun_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_overrun);
        AESL_REG_overrun_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


reg AESL_REG_full_ap_vld = 0;
// The signal of port full
reg [0: 0] AESL_REG_full = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_full = 0; 
    else if(full_ap_vld) begin
        AESL_REG_full <= full;
        AESL_REG_full_ap_vld <= 1;
    end
end 

initial begin : write_file_process_full
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer full_count;
    reg [199:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_full_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_full_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_full_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_full);
        AESL_REG_full_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


// The signal of port write_r
reg [0: 0] AESL_REG_write_r = 0;
assign write_r = AESL_REG_write_r;
initial begin : read_file_process_write_r
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [199  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_write_r,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_write_r);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_write_r);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port deran_V
reg [1: 0] AESL_REG_deran_V = 0;
assign deran_V = AESL_REG_deran_V;
initial begin : read_file_process_deran_V
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [199  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_deran_V,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_deran_V);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_deran_V);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port mux
reg [0: 0] AESL_REG_mux = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_mux = 0; 
    else
        AESL_REG_mux <= mux;
end 

initial begin : write_file_process_mux
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer mux_count;
    reg [199:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_mux_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_mux_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
          $fdisplay(fp,"0x%x", AESL_REG_mux);
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


// The signal of port decode_done
reg [0: 0] AESL_REG_decode_done = 0;
assign decode_done = AESL_REG_decode_done;
initial begin : read_file_process_decode_done
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [199  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_decode_done,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_decode_done);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_decode_done);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


reg AESL_REG_decode_start_ap_vld = 0;
// The signal of port decode_start
reg [0: 0] AESL_REG_decode_start = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_decode_start = 0; 
    else if(decode_start_ap_vld) begin
        AESL_REG_decode_start <= decode_start;
        AESL_REG_decode_start_ap_vld <= 1;
    end
end 

initial begin : write_file_process_decode_start
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer decode_start_count;
    reg [199:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_decode_start_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_decode_start_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_decode_start_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_decode_start);
        AESL_REG_decode_start_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


// The signal of port decode_ready
reg [0: 0] AESL_REG_decode_ready = 0;
assign decode_ready = AESL_REG_decode_ready;
initial begin : read_file_process_decode_ready
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [199  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_decode_ready,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_decode_ready);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_decode_ready);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port decode_done_b
reg [0: 0] AESL_REG_decode_done_b = 0;
assign decode_done_b = AESL_REG_decode_done_b;
initial begin : read_file_process_decode_done_b
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [199  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_decode_done_b,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_decode_done_b);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_decode_done_b);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


reg AESL_REG_decode_start_b_ap_vld = 0;
// The signal of port decode_start_b
reg [0: 0] AESL_REG_decode_start_b = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_decode_start_b = 0; 
    else if(decode_start_b_ap_vld) begin
        AESL_REG_decode_start_b <= decode_start_b;
        AESL_REG_decode_start_b_ap_vld <= 1;
    end
end 

initial begin : write_file_process_decode_start_b
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer decode_start_b_count;
    reg [199:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_decode_start_b_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_decode_start_b_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_decode_start_b_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_decode_start_b);
        AESL_REG_decode_start_b_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


// The signal of port decode_ready_b
reg [0: 0] AESL_REG_decode_ready_b = 0;
assign decode_ready_b = AESL_REG_decode_ready_b;
initial begin : read_file_process_decode_ready_b
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [199  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_decode_ready_b,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_decode_ready_b);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_decode_ready_b);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


reg AESL_REG_deran_data_ap_vld = 0;
// The signal of port deran_data
reg [7: 0] AESL_REG_deran_data = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_deran_data = 0; 
    else if(deran_data_ap_vld) begin
        AESL_REG_deran_data <= deran_data;
        AESL_REG_deran_data_ap_vld <= 1;
    end
end 

initial begin : write_file_process_deran_data
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer deran_data_count;
    reg [199:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_deran_data_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_deran_data_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_deran_data_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_deran_data);
        AESL_REG_deran_data_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


reg AESL_REG_cur_write_pos_V_ap_vld = 0;
// The signal of port cur_write_pos_V
reg [15: 0] AESL_REG_cur_write_pos_V = 0;
always @(posedge AESL_clock)
begin
    if(AESL_reset)
        AESL_REG_cur_write_pos_V = 0; 
    else if(cur_write_pos_V_ap_vld) begin
        AESL_REG_cur_write_pos_V <= cur_write_pos_V;
        AESL_REG_cur_write_pos_V_ap_vld <= 1;
    end
end 

initial begin : write_file_process_cur_write_pos_V
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer proc_rand;
    integer cur_write_pos_V_count;
    reg [199:0] token;
    integer transaction_idx;
    reg [8 * 5:1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_cur_write_pos_V_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_cur_write_pos_V_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
          while(AESL_done !== 1) begin
              @(posedge AESL_clock);
          end
        # 0.4;
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
        if(AESL_REG_cur_write_pos_V_ap_vld)  begin
          $fdisplay(fp,"0x%x", AESL_REG_cur_write_pos_V);
        AESL_REG_cur_write_pos_V_ap_vld = 0;
        end
    transaction_idx = transaction_idx + 1;
      $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end


// The signal of port out_mux
reg [0: 0] AESL_REG_out_mux = 0;
assign out_mux = AESL_REG_out_mux;
initial begin : read_file_process_out_mux
    integer fp;
    integer err;
    integer ret;
    integer proc_rand;
    reg [199  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_out_mux,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_out_mux);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_out_mux);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 0);
    while(AESL_ready_cnt != AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

    event next_trigger_ready_cnt;
    
    initial begin : gen_ready_cnt
        ready_cnt = 0;
        wait (AESL_reset === 0);
        forever begin
            @ (posedge AESL_clock);
            if (ready == 1) begin
                if (ready_cnt < AUTOTB_TRANSACTION_NUM) begin
                    ready_cnt = ready_cnt + 1;
                end
            end
            -> next_trigger_ready_cnt;
        end
    end
    
    wire all_finish = (done_cnt == AUTOTB_TRANSACTION_NUM);
    
    // done_cnt
    always @ (posedge AESL_clock) begin
        if (AESL_reset) begin
            done_cnt <= 0;
        end else begin
            if (AESL_done == 1) begin
                if (done_cnt < AUTOTB_TRANSACTION_NUM) begin
                    done_cnt <= done_cnt + 1;
                end
            end
        end
    end
    
    initial begin : finish_simulation
        wait (all_finish == 1);
        // last transaction is saved at negedge right after last done
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        $finish;
    end
    
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_data_in;
reg [31:0] size_data_in;
reg [31:0] size_data_in_backup;
reg end_reset;
reg [31:0] size_reset;
reg [31:0] size_reset_backup;
reg end_raw_dat0;
reg [31:0] size_raw_dat0;
reg [31:0] size_raw_dat0_backup;
reg end_raw_dat1;
reg [31:0] size_raw_dat1;
reg [31:0] size_raw_dat1_backup;
reg end_raw_dat2;
reg [31:0] size_raw_dat2;
reg [31:0] size_raw_dat2_backup;
reg end_raw_dat3;
reg [31:0] size_raw_dat3;
reg [31:0] size_raw_dat3_backup;
reg end_raw_dat4;
reg [31:0] size_raw_dat4;
reg [31:0] size_raw_dat4_backup;
reg end_raw_dat5;
reg [31:0] size_raw_dat5;
reg [31:0] size_raw_dat5_backup;
reg end_raw_dat6;
reg [31:0] size_raw_dat6;
reg [31:0] size_raw_dat6_backup;
reg end_raw_dat7;
reg [31:0] size_raw_dat7;
reg [31:0] size_raw_dat7_backup;
reg end_raw_dat8;
reg [31:0] size_raw_dat8;
reg [31:0] size_raw_dat8_backup;
reg end_raw_dat9;
reg [31:0] size_raw_dat9;
reg [31:0] size_raw_dat9_backup;
reg end_raw_dat10;
reg [31:0] size_raw_dat10;
reg [31:0] size_raw_dat10_backup;
reg end_numbits_V;
reg [31:0] size_numbits_V;
reg [31:0] size_numbits_V_backup;
reg end_write_r;
reg [31:0] size_write_r;
reg [31:0] size_write_r_backup;
reg end_deran_V;
reg [31:0] size_deran_V;
reg [31:0] size_deran_V_backup;
reg end_decode_done;
reg [31:0] size_decode_done;
reg [31:0] size_decode_done_backup;
reg end_decode_ready;
reg [31:0] size_decode_ready;
reg [31:0] size_decode_ready_backup;
reg end_decode_done_b;
reg [31:0] size_decode_done_b;
reg [31:0] size_decode_done_b_backup;
reg end_decode_ready_b;
reg [31:0] size_decode_ready_b;
reg [31:0] size_decode_ready_b_backup;
reg end_out_mux;
reg [31:0] size_out_mux;
reg [31:0] size_out_mux_backup;
reg end_overrun;
reg [31:0] size_overrun;
reg [31:0] size_overrun_backup;
reg end_full;
reg [31:0] size_full;
reg [31:0] size_full_backup;
reg end_mux;
reg [31:0] size_mux;
reg [31:0] size_mux_backup;
reg end_decode_start;
reg [31:0] size_decode_start;
reg [31:0] size_decode_start_backup;
reg end_decode_start_b;
reg [31:0] size_decode_start_b;
reg [31:0] size_decode_start_b_backup;
reg end_deran_data;
reg [31:0] size_deran_data;
reg [31:0] size_deran_data_backup;
reg end_cur_write_pos_V;
reg [31:0] size_cur_write_pos_V;
reg [31:0] size_cur_write_pos_V_backup;

initial begin : initial_process
    integer proc_rand;
    rst = 1;
    # 100;
    repeat(3) @ (posedge AESL_clock);
    rst = 0;
end
initial begin : start_process
    integer proc_rand;
    reg [31:0] start_cnt;
    ce = 1;
    start = 0;
    start_cnt = 0;
    wait (AESL_reset === 0);
    @ (posedge AESL_clock);
    #0 start = 1;
    start_cnt = start_cnt + 1;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt >= AUTOTB_TRANSACTION_NUM) begin
            // keep pushing garbage in
            #0 start = 1;
        end
        if (AESL_ready) begin
            start_cnt = start_cnt + 1;
        end
    end
end

always @(AESL_done)
begin
    tb_continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end

reg dump_tvout_finish_raw_dat0;

initial begin : dump_tvout_runtime_sign_raw_dat0
    integer fp;
    dump_tvout_finish_raw_dat0 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat0_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat0_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat0_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat0_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat0 = 1;
end


reg dump_tvout_finish_raw_dat1;

initial begin : dump_tvout_runtime_sign_raw_dat1
    integer fp;
    dump_tvout_finish_raw_dat1 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat1_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat1_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat1_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat1_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat1 = 1;
end


reg dump_tvout_finish_raw_dat2;

initial begin : dump_tvout_runtime_sign_raw_dat2
    integer fp;
    dump_tvout_finish_raw_dat2 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat2_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat2_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat2_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat2_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat2 = 1;
end


reg dump_tvout_finish_raw_dat3;

initial begin : dump_tvout_runtime_sign_raw_dat3
    integer fp;
    dump_tvout_finish_raw_dat3 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat3_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat3_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat3_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat3_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat3 = 1;
end


reg dump_tvout_finish_raw_dat4;

initial begin : dump_tvout_runtime_sign_raw_dat4
    integer fp;
    dump_tvout_finish_raw_dat4 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat4_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat4_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat4_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat4_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat4 = 1;
end


reg dump_tvout_finish_raw_dat5;

initial begin : dump_tvout_runtime_sign_raw_dat5
    integer fp;
    dump_tvout_finish_raw_dat5 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat5_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat5_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat5_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat5_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat5 = 1;
end


reg dump_tvout_finish_raw_dat6;

initial begin : dump_tvout_runtime_sign_raw_dat6
    integer fp;
    dump_tvout_finish_raw_dat6 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat6_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat6_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat6_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat6_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat6 = 1;
end


reg dump_tvout_finish_raw_dat7;

initial begin : dump_tvout_runtime_sign_raw_dat7
    integer fp;
    dump_tvout_finish_raw_dat7 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat7_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat7_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat7_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat7_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat7 = 1;
end


reg dump_tvout_finish_raw_dat8;

initial begin : dump_tvout_runtime_sign_raw_dat8
    integer fp;
    dump_tvout_finish_raw_dat8 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat8_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat8_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat8_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat8_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat8 = 1;
end


reg dump_tvout_finish_raw_dat9;

initial begin : dump_tvout_runtime_sign_raw_dat9
    integer fp;
    dump_tvout_finish_raw_dat9 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat9_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat9_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat9_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat9_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat9 = 1;
end


reg dump_tvout_finish_raw_dat10;

initial begin : dump_tvout_runtime_sign_raw_dat10
    integer fp;
    dump_tvout_finish_raw_dat10 = 0;
    fp = $fopen(`AUTOTB_TVOUT_raw_dat10_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat10_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_raw_dat10_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_raw_dat10_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_raw_dat10 = 1;
end


////////////////////////////////////////////
// progress and performance
////////////////////////////////////////////

task wait_start();
    while (~AESL_start) begin
        @ (posedge AESL_clock);
    end
endtask

reg [31:0] clk_cnt = 0;
reg AESL_ready_p1;

always @ (posedge AESL_clock) begin
    clk_cnt <= clk_cnt + 1;
    AESL_ready_p1 <= AESL_ready;
end

reg [31:0] start_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] start_cnt;
reg [31:0] finish_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] finish_cnt;
event report_progress;

initial begin
    start_cnt = 0;
    finish_cnt = 0;
    wait (AESL_reset == 0);
    wait_start();
    start_timestamp[start_cnt] = clk_cnt;
    start_cnt = start_cnt + 1;
    if (AESL_done) begin
        finish_timestamp[finish_cnt] = clk_cnt;
        finish_cnt = finish_cnt + 1;
    end
    -> report_progress;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_start && AESL_ready_p1) begin
                start_timestamp[start_cnt] = clk_cnt;
                start_cnt = start_cnt + 1;
            end
        end
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                finish_timestamp[finish_cnt] = clk_cnt;
                finish_cnt = finish_cnt + 1;
            end
        end
        -> report_progress;
    end
end

reg [31:0] progress_timeout;

initial begin : simulation_progress
    real intra_progress;
    wait (AESL_reset == 0);
    progress_timeout = PROGRESS_TIMEOUT;
    $display("////////////////////////////////////////////////////////////////////////////////////");
    $display("// Inter-Transaction Progress: Completed Transaction / Total Transaction");
    $display("// Intra-Transaction Progress: Measured Latency / Latency Estimation * 100%%");
    $display("//");
    $display("// RTL Simulation : \"Inter-Transaction Progress\" [\"Intra-Transaction Progress\"] @ \"Simulation Time\"");
    $display("////////////////////////////////////////////////////////////////////////////////////");
    print_progress();
    while (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
        @ (report_progress);
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                print_progress();
                progress_timeout = PROGRESS_TIMEOUT;
            end else begin
                if (progress_timeout == 0) begin
                    print_progress();
                    progress_timeout = PROGRESS_TIMEOUT;
                end else begin
                    progress_timeout = progress_timeout - 1;
                end
            end
        end
    end
    print_progress();
    $display("////////////////////////////////////////////////////////////////////////////////////");
    calculate_performance();
end

task get_intra_progress(output real intra_progress);
    begin
        if (start_cnt > finish_cnt) begin
            intra_progress = clk_cnt - start_timestamp[finish_cnt];
        end else begin
            intra_progress = 0;
        end
        intra_progress = intra_progress / LATENCY_ESTIMATION;
    end
endtask

task print_progress();
    real intra_progress;
    begin
        if (LATENCY_ESTIMATION > 0) begin
            get_intra_progress(intra_progress);
            $display("// RTL Simulation : %0d / %0d [%2.2f%%] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, intra_progress * 100, $time);
        end else begin
            $display("// RTL Simulation : %0d / %0d [n/a] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, $time);
        end
    end
endtask

task calculate_performance();
    integer i;
    integer fp;
    reg [31:0] latency [0:AUTOTB_TRANSACTION_NUM - 1];
    reg [31:0] latency_min;
    reg [31:0] latency_max;
    reg [31:0] latency_total;
    reg [31:0] latency_average;
    reg [31:0] interval [0:AUTOTB_TRANSACTION_NUM - 2];
    reg [31:0] interval_min;
    reg [31:0] interval_max;
    reg [31:0] interval_total;
    reg [31:0] interval_average;
    begin
        latency_min = -1;
        latency_max = 0;
        latency_total = 0;
        interval_min = -1;
        interval_max = 0;
        interval_total = 0;

        for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
            // calculate latency
            latency[i] = finish_timestamp[i] - start_timestamp[i];
            if (latency[i] > latency_max) latency_max = latency[i];
            if (latency[i] < latency_min) latency_min = latency[i];
            latency_total = latency_total + latency[i];
            // calculate interval
            if (AUTOTB_TRANSACTION_NUM == 1) begin
                interval[i] = 0;
                interval_max = 0;
                interval_min = 0;
                interval_total = 0;
            end else if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                interval[i] = start_timestamp[i + 1] - start_timestamp[i];
                if (interval[i] > interval_max) interval_max = interval[i];
                if (interval[i] < interval_min) interval_min = interval[i];
                interval_total = interval_total + interval[i];
            end
        end

        latency_average = latency_total / AUTOTB_TRANSACTION_NUM;
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            interval_average = 0;
        end else begin
            interval_average = interval_total / (AUTOTB_TRANSACTION_NUM - 1);
        end

        fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

        $fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latency_max);
        $fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latency_min);
        $fdisplay(fp, "$AVER_LATENCY = \"%0d\"", latency_average);
        $fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", interval_max);
        $fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", interval_min);
        $fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", interval_average);

        $fclose(fp);

        fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");

        $fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            i = 0;
            $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
        end else begin
            for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
                if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                    $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
                end else begin
                    $fdisplay(fp, "transaction%8d:%16d               x", i, latency[i]);
                end
            end
        end

        $fclose(fp);
    end
endtask


////////////////////////////////////////////
// Dependence Check
////////////////////////////////////////////

`ifndef POST_SYN

`endif

endmodule
