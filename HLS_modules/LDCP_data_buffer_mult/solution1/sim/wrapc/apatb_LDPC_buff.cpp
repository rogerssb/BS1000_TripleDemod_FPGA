// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "data_in"
#define AUTOTB_TVIN_data_in  "../tv/cdatafile/c.LDPC_buff.autotvin_data_in.dat"
// wrapc file define: "reset"
#define AUTOTB_TVIN_reset  "../tv/cdatafile/c.LDPC_buff.autotvin_reset.dat"
// wrapc file define: "raw_dat0"
#define AUTOTB_TVOUT_raw_dat0  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat0.dat"
#define AUTOTB_TVIN_raw_dat0  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat0.dat"
// wrapc file define: "raw_dat1"
#define AUTOTB_TVOUT_raw_dat1  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat1.dat"
#define AUTOTB_TVIN_raw_dat1  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat1.dat"
// wrapc file define: "raw_dat2"
#define AUTOTB_TVOUT_raw_dat2  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat2.dat"
#define AUTOTB_TVIN_raw_dat2  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat2.dat"
// wrapc file define: "raw_dat3"
#define AUTOTB_TVOUT_raw_dat3  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat3.dat"
#define AUTOTB_TVIN_raw_dat3  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat3.dat"
// wrapc file define: "raw_dat4"
#define AUTOTB_TVOUT_raw_dat4  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat4.dat"
#define AUTOTB_TVIN_raw_dat4  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat4.dat"
// wrapc file define: "raw_dat5"
#define AUTOTB_TVOUT_raw_dat5  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat5.dat"
#define AUTOTB_TVIN_raw_dat5  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat5.dat"
// wrapc file define: "raw_dat6"
#define AUTOTB_TVOUT_raw_dat6  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat6.dat"
#define AUTOTB_TVIN_raw_dat6  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat6.dat"
// wrapc file define: "raw_dat7"
#define AUTOTB_TVOUT_raw_dat7  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat7.dat"
#define AUTOTB_TVIN_raw_dat7  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat7.dat"
// wrapc file define: "raw_dat8"
#define AUTOTB_TVOUT_raw_dat8  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat8.dat"
#define AUTOTB_TVIN_raw_dat8  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat8.dat"
// wrapc file define: "raw_dat9"
#define AUTOTB_TVOUT_raw_dat9  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat9.dat"
#define AUTOTB_TVIN_raw_dat9  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat9.dat"
// wrapc file define: "raw_dat10"
#define AUTOTB_TVOUT_raw_dat10  "../tv/cdatafile/c.LDPC_buff.autotvout_raw_dat10.dat"
#define AUTOTB_TVIN_raw_dat10  "../tv/cdatafile/c.LDPC_buff.autotvin_raw_dat10.dat"
// wrapc file define: "numbits_V"
#define AUTOTB_TVIN_numbits_V  "../tv/cdatafile/c.LDPC_buff.autotvin_numbits_V.dat"
// wrapc file define: "overrun"
#define AUTOTB_TVOUT_overrun  "../tv/cdatafile/c.LDPC_buff.autotvout_overrun.dat"
// wrapc file define: "full"
#define AUTOTB_TVOUT_full  "../tv/cdatafile/c.LDPC_buff.autotvout_full.dat"
// wrapc file define: "write_r"
#define AUTOTB_TVIN_write_r  "../tv/cdatafile/c.LDPC_buff.autotvin_write_r.dat"
// wrapc file define: "deran_V"
#define AUTOTB_TVIN_deran_V  "../tv/cdatafile/c.LDPC_buff.autotvin_deran_V.dat"
// wrapc file define: "mux"
#define AUTOTB_TVOUT_mux  "../tv/cdatafile/c.LDPC_buff.autotvout_mux.dat"
// wrapc file define: "decode_done"
#define AUTOTB_TVIN_decode_done  "../tv/cdatafile/c.LDPC_buff.autotvin_decode_done.dat"
// wrapc file define: "decode_start"
#define AUTOTB_TVOUT_decode_start  "../tv/cdatafile/c.LDPC_buff.autotvout_decode_start.dat"
// wrapc file define: "decode_ready"
#define AUTOTB_TVIN_decode_ready  "../tv/cdatafile/c.LDPC_buff.autotvin_decode_ready.dat"
// wrapc file define: "decode_done_b"
#define AUTOTB_TVIN_decode_done_b  "../tv/cdatafile/c.LDPC_buff.autotvin_decode_done_b.dat"
// wrapc file define: "decode_start_b"
#define AUTOTB_TVOUT_decode_start_b  "../tv/cdatafile/c.LDPC_buff.autotvout_decode_start_b.dat"
// wrapc file define: "decode_ready_b"
#define AUTOTB_TVIN_decode_ready_b  "../tv/cdatafile/c.LDPC_buff.autotvin_decode_ready_b.dat"
// wrapc file define: "deran_data"
#define AUTOTB_TVOUT_deran_data  "../tv/cdatafile/c.LDPC_buff.autotvout_deran_data.dat"
// wrapc file define: "cur_write_pos_V"
#define AUTOTB_TVOUT_cur_write_pos_V  "../tv/cdatafile/c.LDPC_buff.autotvout_cur_write_pos_V.dat"
// wrapc file define: "out_mux"
#define AUTOTB_TVIN_out_mux  "../tv/cdatafile/c.LDPC_buff.autotvin_out_mux.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "raw_dat0"
#define AUTOTB_TVOUT_PC_raw_dat0  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat0.dat"
// tvout file define: "raw_dat1"
#define AUTOTB_TVOUT_PC_raw_dat1  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat1.dat"
// tvout file define: "raw_dat2"
#define AUTOTB_TVOUT_PC_raw_dat2  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat2.dat"
// tvout file define: "raw_dat3"
#define AUTOTB_TVOUT_PC_raw_dat3  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat3.dat"
// tvout file define: "raw_dat4"
#define AUTOTB_TVOUT_PC_raw_dat4  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat4.dat"
// tvout file define: "raw_dat5"
#define AUTOTB_TVOUT_PC_raw_dat5  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat5.dat"
// tvout file define: "raw_dat6"
#define AUTOTB_TVOUT_PC_raw_dat6  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat6.dat"
// tvout file define: "raw_dat7"
#define AUTOTB_TVOUT_PC_raw_dat7  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat7.dat"
// tvout file define: "raw_dat8"
#define AUTOTB_TVOUT_PC_raw_dat8  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat8.dat"
// tvout file define: "raw_dat9"
#define AUTOTB_TVOUT_PC_raw_dat9  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat9.dat"
// tvout file define: "raw_dat10"
#define AUTOTB_TVOUT_PC_raw_dat10  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_raw_dat10.dat"
// tvout file define: "overrun"
#define AUTOTB_TVOUT_PC_overrun  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_overrun.dat"
// tvout file define: "full"
#define AUTOTB_TVOUT_PC_full  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_full.dat"
// tvout file define: "mux"
#define AUTOTB_TVOUT_PC_mux  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_mux.dat"
// tvout file define: "decode_start"
#define AUTOTB_TVOUT_PC_decode_start  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_decode_start.dat"
// tvout file define: "decode_start_b"
#define AUTOTB_TVOUT_PC_decode_start_b  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_decode_start_b.dat"
// tvout file define: "deran_data"
#define AUTOTB_TVOUT_PC_deran_data  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_deran_data.dat"
// tvout file define: "cur_write_pos_V"
#define AUTOTB_TVOUT_PC_cur_write_pos_V  "../tv/rtldatafile/rtl.LDPC_buff.autotvout_cur_write_pos_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			data_in_depth = 0;
			reset_depth = 0;
			raw_dat0_depth = 0;
			raw_dat1_depth = 0;
			raw_dat2_depth = 0;
			raw_dat3_depth = 0;
			raw_dat4_depth = 0;
			raw_dat5_depth = 0;
			raw_dat6_depth = 0;
			raw_dat7_depth = 0;
			raw_dat8_depth = 0;
			raw_dat9_depth = 0;
			raw_dat10_depth = 0;
			numbits_V_depth = 0;
			overrun_depth = 0;
			full_depth = 0;
			write_r_depth = 0;
			deran_V_depth = 0;
			mux_depth = 0;
			decode_done_depth = 0;
			decode_start_depth = 0;
			decode_ready_depth = 0;
			decode_done_b_depth = 0;
			decode_start_b_depth = 0;
			decode_ready_b_depth = 0;
			deran_data_depth = 0;
			cur_write_pos_V_depth = 0;
			out_mux_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{data_in " << data_in_depth << "}\n";
			total_list << "{reset " << reset_depth << "}\n";
			total_list << "{raw_dat0 " << raw_dat0_depth << "}\n";
			total_list << "{raw_dat1 " << raw_dat1_depth << "}\n";
			total_list << "{raw_dat2 " << raw_dat2_depth << "}\n";
			total_list << "{raw_dat3 " << raw_dat3_depth << "}\n";
			total_list << "{raw_dat4 " << raw_dat4_depth << "}\n";
			total_list << "{raw_dat5 " << raw_dat5_depth << "}\n";
			total_list << "{raw_dat6 " << raw_dat6_depth << "}\n";
			total_list << "{raw_dat7 " << raw_dat7_depth << "}\n";
			total_list << "{raw_dat8 " << raw_dat8_depth << "}\n";
			total_list << "{raw_dat9 " << raw_dat9_depth << "}\n";
			total_list << "{raw_dat10 " << raw_dat10_depth << "}\n";
			total_list << "{numbits_V " << numbits_V_depth << "}\n";
			total_list << "{overrun " << overrun_depth << "}\n";
			total_list << "{full " << full_depth << "}\n";
			total_list << "{write_r " << write_r_depth << "}\n";
			total_list << "{deran_V " << deran_V_depth << "}\n";
			total_list << "{mux " << mux_depth << "}\n";
			total_list << "{decode_done " << decode_done_depth << "}\n";
			total_list << "{decode_start " << decode_start_depth << "}\n";
			total_list << "{decode_ready " << decode_ready_depth << "}\n";
			total_list << "{decode_done_b " << decode_done_b_depth << "}\n";
			total_list << "{decode_start_b " << decode_start_b_depth << "}\n";
			total_list << "{decode_ready_b " << decode_ready_b_depth << "}\n";
			total_list << "{deran_data " << deran_data_depth << "}\n";
			total_list << "{cur_write_pos_V " << cur_write_pos_V_depth << "}\n";
			total_list << "{out_mux " << out_mux_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int data_in_depth;
		int reset_depth;
		int raw_dat0_depth;
		int raw_dat1_depth;
		int raw_dat2_depth;
		int raw_dat3_depth;
		int raw_dat4_depth;
		int raw_dat5_depth;
		int raw_dat6_depth;
		int raw_dat7_depth;
		int raw_dat8_depth;
		int raw_dat9_depth;
		int raw_dat10_depth;
		int numbits_V_depth;
		int overrun_depth;
		int full_depth;
		int write_r_depth;
		int deran_V_depth;
		int mux_depth;
		int decode_done_depth;
		int decode_start_depth;
		int decode_ready_depth;
		int decode_done_b_depth;
		int decode_start_b_depth;
		int decode_ready_b_depth;
		int deran_data_depth;
		int cur_write_pos_V_depth;
		int out_mux_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void LDPC_buff (
signed char data_in,
bool reset,
signed char raw_dat0[2048],
signed char raw_dat1[2048],
signed char raw_dat2[2048],
signed char raw_dat3[2048],
signed char raw_dat4[1024],
signed char raw_dat5[1024],
signed char raw_dat6[1024],
signed char raw_dat7[1024],
signed char raw_dat8[1024],
signed char raw_dat9[1024],
signed char raw_dat10[1024],
ap_uint<16> numbits,
bool* overrun,
bool* full,
bool write,
ap_uint<2> deran,
bool* mux,
bool decode_done,
bool* decode_start,
bool decode_ready,
bool decode_done_b,
bool* decode_start_b,
bool decode_ready_b,
signed char* deran_data,
ap_uint<16>* cur_write_pos,
bool out_mux);

void AESL_WRAP_LDPC_buff (
signed char data_in,
bool reset,
signed char raw_dat0[2048],
signed char raw_dat1[2048],
signed char raw_dat2[2048],
signed char raw_dat3[2048],
signed char raw_dat4[1024],
signed char raw_dat5[1024],
signed char raw_dat6[1024],
signed char raw_dat7[1024],
signed char raw_dat8[1024],
signed char raw_dat9[1024],
signed char raw_dat10[1024],
ap_uint<16> numbits,
bool* overrun,
bool* full,
bool write,
ap_uint<2> deran,
bool* mux,
bool decode_done,
bool* decode_start,
bool decode_ready,
bool decode_done_b,
bool* decode_start_b,
bool decode_ready_b,
signed char* deran_data,
ap_uint<16>* cur_write_pos,
bool out_mux)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "raw_dat0"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat0, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat0, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat0, AESL_token); // data

			sc_bv<8> *raw_dat0_pc_buffer = new sc_bv<8>[2048];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat0', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat0_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat0, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat0))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat0
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat0(7, 0)
						// {
							sc_lv<8>* raw_dat0_lv0_0_2047_1 = new sc_lv<8>[2048];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat0(7, 0)
						{
							// carray: (0) => (2047) @ (1)
							for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
							{
								if (&(raw_dat0[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat0_lv0_0_2047_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat0_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat0(7, 0)
						{
							// carray: (0) => (2047) @ (1)
							for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat0[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat0[0]
								// output_left_conversion : raw_dat0[i_0]
								// output_type_conversion : (raw_dat0_lv0_0_2047_1[hls_map_index++]).to_uint64()
								if (&(raw_dat0[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat0[i_0] = (raw_dat0_lv0_0_2047_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat0_pc_buffer;
		}

		// output port post check: "raw_dat1"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat1, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat1, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat1, AESL_token); // data

			sc_bv<8> *raw_dat1_pc_buffer = new sc_bv<8>[2048];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat1_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat1, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat1))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat1
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat1(7, 0)
						// {
							sc_lv<8>* raw_dat1_lv0_0_2047_1 = new sc_lv<8>[2048];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat1(7, 0)
						{
							// carray: (0) => (2047) @ (1)
							for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
							{
								if (&(raw_dat1[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat1_lv0_0_2047_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat1_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat1(7, 0)
						{
							// carray: (0) => (2047) @ (1)
							for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat1[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat1[0]
								// output_left_conversion : raw_dat1[i_0]
								// output_type_conversion : (raw_dat1_lv0_0_2047_1[hls_map_index++]).to_uint64()
								if (&(raw_dat1[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat1[i_0] = (raw_dat1_lv0_0_2047_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat1_pc_buffer;
		}

		// output port post check: "raw_dat2"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat2, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat2, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat2, AESL_token); // data

			sc_bv<8> *raw_dat2_pc_buffer = new sc_bv<8>[2048];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat2_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat2, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat2))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat2
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat2(7, 0)
						// {
							sc_lv<8>* raw_dat2_lv0_0_2047_1 = new sc_lv<8>[2048];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat2(7, 0)
						{
							// carray: (0) => (2047) @ (1)
							for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
							{
								if (&(raw_dat2[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat2_lv0_0_2047_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat2_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat2(7, 0)
						{
							// carray: (0) => (2047) @ (1)
							for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat2[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat2[0]
								// output_left_conversion : raw_dat2[i_0]
								// output_type_conversion : (raw_dat2_lv0_0_2047_1[hls_map_index++]).to_uint64()
								if (&(raw_dat2[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat2[i_0] = (raw_dat2_lv0_0_2047_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat2_pc_buffer;
		}

		// output port post check: "raw_dat3"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat3, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat3, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat3, AESL_token); // data

			sc_bv<8> *raw_dat3_pc_buffer = new sc_bv<8>[2048];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat3_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat3, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat3))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat3
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat3(7, 0)
						// {
							sc_lv<8>* raw_dat3_lv0_0_2047_1 = new sc_lv<8>[2048];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat3(7, 0)
						{
							// carray: (0) => (2047) @ (1)
							for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
							{
								if (&(raw_dat3[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat3_lv0_0_2047_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat3_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat3(7, 0)
						{
							// carray: (0) => (2047) @ (1)
							for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat3[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat3[0]
								// output_left_conversion : raw_dat3[i_0]
								// output_type_conversion : (raw_dat3_lv0_0_2047_1[hls_map_index++]).to_uint64()
								if (&(raw_dat3[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat3[i_0] = (raw_dat3_lv0_0_2047_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat3_pc_buffer;
		}

		// output port post check: "raw_dat4"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat4, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat4, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat4, AESL_token); // data

			sc_bv<8> *raw_dat4_pc_buffer = new sc_bv<8>[1024];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat4_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat4, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat4))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat4
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat4(7, 0)
						// {
							sc_lv<8>* raw_dat4_lv0_0_1023_1 = new sc_lv<8>[1024];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat4(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								if (&(raw_dat4[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat4_lv0_0_1023_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat4_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat4(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat4[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat4[0]
								// output_left_conversion : raw_dat4[i_0]
								// output_type_conversion : (raw_dat4_lv0_0_1023_1[hls_map_index++]).to_uint64()
								if (&(raw_dat4[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat4[i_0] = (raw_dat4_lv0_0_1023_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat4_pc_buffer;
		}

		// output port post check: "raw_dat5"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat5, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat5, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat5, AESL_token); // data

			sc_bv<8> *raw_dat5_pc_buffer = new sc_bv<8>[1024];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat5', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat5', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat5_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat5, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat5))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat5
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat5(7, 0)
						// {
							sc_lv<8>* raw_dat5_lv0_0_1023_1 = new sc_lv<8>[1024];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat5(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								if (&(raw_dat5[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat5_lv0_0_1023_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat5_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat5(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat5[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat5[0]
								// output_left_conversion : raw_dat5[i_0]
								// output_type_conversion : (raw_dat5_lv0_0_1023_1[hls_map_index++]).to_uint64()
								if (&(raw_dat5[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat5[i_0] = (raw_dat5_lv0_0_1023_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat5_pc_buffer;
		}

		// output port post check: "raw_dat6"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat6, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat6, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat6, AESL_token); // data

			sc_bv<8> *raw_dat6_pc_buffer = new sc_bv<8>[1024];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat6', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat6', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat6_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat6, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat6))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat6
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat6(7, 0)
						// {
							sc_lv<8>* raw_dat6_lv0_0_1023_1 = new sc_lv<8>[1024];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat6(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								if (&(raw_dat6[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat6_lv0_0_1023_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat6_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat6(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat6[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat6[0]
								// output_left_conversion : raw_dat6[i_0]
								// output_type_conversion : (raw_dat6_lv0_0_1023_1[hls_map_index++]).to_uint64()
								if (&(raw_dat6[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat6[i_0] = (raw_dat6_lv0_0_1023_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat6_pc_buffer;
		}

		// output port post check: "raw_dat7"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat7, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat7, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat7, AESL_token); // data

			sc_bv<8> *raw_dat7_pc_buffer = new sc_bv<8>[1024];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat7', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat7', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat7_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat7, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat7))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat7
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat7(7, 0)
						// {
							sc_lv<8>* raw_dat7_lv0_0_1023_1 = new sc_lv<8>[1024];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat7(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								if (&(raw_dat7[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat7_lv0_0_1023_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat7_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat7(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat7[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat7[0]
								// output_left_conversion : raw_dat7[i_0]
								// output_type_conversion : (raw_dat7_lv0_0_1023_1[hls_map_index++]).to_uint64()
								if (&(raw_dat7[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat7[i_0] = (raw_dat7_lv0_0_1023_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat7_pc_buffer;
		}

		// output port post check: "raw_dat8"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat8, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat8, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat8, AESL_token); // data

			sc_bv<8> *raw_dat8_pc_buffer = new sc_bv<8>[1024];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat8', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat8', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat8_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat8, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat8))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat8
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat8(7, 0)
						// {
							sc_lv<8>* raw_dat8_lv0_0_1023_1 = new sc_lv<8>[1024];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat8(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								if (&(raw_dat8[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat8_lv0_0_1023_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat8_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat8(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat8[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat8[0]
								// output_left_conversion : raw_dat8[i_0]
								// output_type_conversion : (raw_dat8_lv0_0_1023_1[hls_map_index++]).to_uint64()
								if (&(raw_dat8[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat8[i_0] = (raw_dat8_lv0_0_1023_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat8_pc_buffer;
		}

		// output port post check: "raw_dat9"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat9, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat9, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat9, AESL_token); // data

			sc_bv<8> *raw_dat9_pc_buffer = new sc_bv<8>[1024];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat9', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat9', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat9_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat9, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat9))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat9
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat9(7, 0)
						// {
							sc_lv<8>* raw_dat9_lv0_0_1023_1 = new sc_lv<8>[1024];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat9(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								if (&(raw_dat9[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat9_lv0_0_1023_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat9_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat9(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat9[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat9[0]
								// output_left_conversion : raw_dat9[i_0]
								// output_type_conversion : (raw_dat9_lv0_0_1023_1[hls_map_index++]).to_uint64()
								if (&(raw_dat9[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat9[i_0] = (raw_dat9_lv0_0_1023_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat9_pc_buffer;
		}

		// output port post check: "raw_dat10"
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat10, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat10, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat10, AESL_token); // data

			sc_bv<8> *raw_dat10_pc_buffer = new sc_bv<8>[1024];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat10', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'raw_dat10', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					raw_dat10_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_raw_dat10, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_raw_dat10))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: raw_dat10
				{
					// bitslice(7, 0)
					// {
						// celement: raw_dat10(7, 0)
						// {
							sc_lv<8>* raw_dat10_lv0_0_1023_1 = new sc_lv<8>[1024];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat10(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								if (&(raw_dat10[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat10_lv0_0_1023_1[hls_map_index++].range(7, 0) = sc_bv<8>(raw_dat10_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: raw_dat10(7, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : raw_dat10[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : raw_dat10[0]
								// output_left_conversion : raw_dat10[i_0]
								// output_type_conversion : (raw_dat10_lv0_0_1023_1[hls_map_index++]).to_uint64()
								if (&(raw_dat10[0]) != NULL) // check the null address if the c port is array or others
								{
									raw_dat10[i_0] = (raw_dat10_lv0_0_1023_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] raw_dat10_pc_buffer;
		}

		// output port post check: "overrun"
		aesl_fh.read(AUTOTB_TVOUT_PC_overrun, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_overrun, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_overrun, AESL_token); // data

			sc_bv<1> *overrun_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'overrun', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'overrun', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					overrun_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_overrun, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_overrun))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: overrun
				{
					// bitslice(0, 0)
					// {
						// celement: overrun(0, 0)
						// {
							sc_lv<1>* overrun_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: overrun(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(overrun[0]) != NULL) // check the null address if the c port is array or others
								{
									overrun_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(overrun_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: overrun(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : overrun[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : overrun[0]
								// output_left_conversion : overrun[i_0]
								// output_type_conversion : (overrun_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(overrun[0]) != NULL) // check the null address if the c port is array or others
								{
									overrun[i_0] = (overrun_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] overrun_pc_buffer;
		}

		// output port post check: "full"
		aesl_fh.read(AUTOTB_TVOUT_PC_full, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_full, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_full, AESL_token); // data

			sc_bv<1> *full_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'full', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'full', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					full_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_full, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_full))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: full
				{
					// bitslice(0, 0)
					// {
						// celement: full(0, 0)
						// {
							sc_lv<1>* full_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: full(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(full[0]) != NULL) // check the null address if the c port is array or others
								{
									full_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(full_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: full(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : full[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : full[0]
								// output_left_conversion : full[i_0]
								// output_type_conversion : (full_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(full[0]) != NULL) // check the null address if the c port is array or others
								{
									full[i_0] = (full_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] full_pc_buffer;
		}

		// output port post check: "mux"
		aesl_fh.read(AUTOTB_TVOUT_PC_mux, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_mux, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_mux, AESL_token); // data

			sc_bv<1> *mux_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'mux', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'mux', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					mux_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_mux, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_mux))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: mux
				{
					// bitslice(0, 0)
					// {
						// celement: mux(0, 0)
						// {
							sc_lv<1>* mux_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: mux(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(mux[0]) != NULL) // check the null address if the c port is array or others
								{
									mux_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(mux_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: mux(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : mux[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : mux[0]
								// output_left_conversion : mux[i_0]
								// output_type_conversion : (mux_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(mux[0]) != NULL) // check the null address if the c port is array or others
								{
									mux[i_0] = (mux_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] mux_pc_buffer;
		}

		// output port post check: "decode_start"
		aesl_fh.read(AUTOTB_TVOUT_PC_decode_start, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_decode_start, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_decode_start, AESL_token); // data

			sc_bv<1> *decode_start_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'decode_start', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'decode_start', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					decode_start_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_decode_start, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_decode_start))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: decode_start
				{
					// bitslice(0, 0)
					// {
						// celement: decode_start(0, 0)
						// {
							sc_lv<1>* decode_start_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: decode_start(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(decode_start[0]) != NULL) // check the null address if the c port is array or others
								{
									decode_start_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(decode_start_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: decode_start(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : decode_start[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : decode_start[0]
								// output_left_conversion : decode_start[i_0]
								// output_type_conversion : (decode_start_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(decode_start[0]) != NULL) // check the null address if the c port is array or others
								{
									decode_start[i_0] = (decode_start_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] decode_start_pc_buffer;
		}

		// output port post check: "decode_start_b"
		aesl_fh.read(AUTOTB_TVOUT_PC_decode_start_b, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_decode_start_b, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_decode_start_b, AESL_token); // data

			sc_bv<1> *decode_start_b_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'decode_start_b', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'decode_start_b', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					decode_start_b_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_decode_start_b, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_decode_start_b))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: decode_start_b
				{
					// bitslice(0, 0)
					// {
						// celement: decode_start_b(0, 0)
						// {
							sc_lv<1>* decode_start_b_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: decode_start_b(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(decode_start_b[0]) != NULL) // check the null address if the c port is array or others
								{
									decode_start_b_lv0_0_0_1[hls_map_index++].range(0, 0) = sc_bv<1>(decode_start_b_pc_buffer[hls_map_index].range(0, 0));
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: decode_start_b(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : decode_start_b[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : decode_start_b[0]
								// output_left_conversion : decode_start_b[i_0]
								// output_type_conversion : (decode_start_b_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(decode_start_b[0]) != NULL) // check the null address if the c port is array or others
								{
									decode_start_b[i_0] = (decode_start_b_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] decode_start_b_pc_buffer;
		}

		// output port post check: "deran_data"
		aesl_fh.read(AUTOTB_TVOUT_PC_deran_data, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_deran_data, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_deran_data, AESL_token); // data

			sc_bv<8> *deran_data_pc_buffer = new sc_bv<8>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'deran_data', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'deran_data', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					deran_data_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_deran_data, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_deran_data))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: deran_data
				{
					// bitslice(7, 0)
					// {
						// celement: deran_data(7, 0)
						// {
							sc_lv<8>* deran_data_lv0_0_0_1 = new sc_lv<8>[1];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: deran_data(7, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(deran_data[0]) != NULL) // check the null address if the c port is array or others
								{
									deran_data_lv0_0_0_1[hls_map_index++].range(7, 0) = sc_bv<8>(deran_data_pc_buffer[hls_map_index].range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: deran_data(7, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : deran_data[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : deran_data[0]
								// output_left_conversion : deran_data[i_0]
								// output_type_conversion : (deran_data_lv0_0_0_1[hls_map_index++]).to_uint64()
								if (&(deran_data[0]) != NULL) // check the null address if the c port is array or others
								{
									deran_data[i_0] = (deran_data_lv0_0_0_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] deran_data_pc_buffer;
		}

		// output port post check: "cur_write_pos_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_cur_write_pos_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_cur_write_pos_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_cur_write_pos_V, AESL_token); // data

			sc_bv<16> *cur_write_pos_V_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'cur_write_pos_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'cur_write_pos_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					cur_write_pos_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_cur_write_pos_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_cur_write_pos_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: cur_write_pos_V
				{
					// bitslice(15, 0)
					// {
						// celement: cur_write_pos.V(15, 0)
						// {
							sc_lv<16>* cur_write_pos_V_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: cur_write_pos.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(cur_write_pos[0]) != NULL) // check the null address if the c port is array or others
								{
									cur_write_pos_V_lv0_0_0_1[hls_map_index++].range(15, 0) = sc_bv<16>(cur_write_pos_V_pc_buffer[hls_map_index].range(15, 0));
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: cur_write_pos.V(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : cur_write_pos[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : cur_write_pos[0]
								// output_left_conversion : cur_write_pos[i_0]
								// output_type_conversion : (cur_write_pos_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(cur_write_pos[0]) != NULL) // check the null address if the c port is array or others
								{
									cur_write_pos[i_0] = (cur_write_pos_V_lv0_0_0_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] cur_write_pos_V_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "data_in"
		char* tvin_data_in = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_data_in);

		// "reset"
		char* tvin_reset = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_reset);

		// "raw_dat0"
		char* tvin_raw_dat0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat0);
		char* tvout_raw_dat0 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat0);

		// "raw_dat1"
		char* tvin_raw_dat1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat1);
		char* tvout_raw_dat1 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat1);

		// "raw_dat2"
		char* tvin_raw_dat2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat2);
		char* tvout_raw_dat2 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat2);

		// "raw_dat3"
		char* tvin_raw_dat3 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat3);
		char* tvout_raw_dat3 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat3);

		// "raw_dat4"
		char* tvin_raw_dat4 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat4);
		char* tvout_raw_dat4 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat4);

		// "raw_dat5"
		char* tvin_raw_dat5 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat5);
		char* tvout_raw_dat5 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat5);

		// "raw_dat6"
		char* tvin_raw_dat6 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat6);
		char* tvout_raw_dat6 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat6);

		// "raw_dat7"
		char* tvin_raw_dat7 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat7);
		char* tvout_raw_dat7 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat7);

		// "raw_dat8"
		char* tvin_raw_dat8 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat8);
		char* tvout_raw_dat8 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat8);

		// "raw_dat9"
		char* tvin_raw_dat9 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat9);
		char* tvout_raw_dat9 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat9);

		// "raw_dat10"
		char* tvin_raw_dat10 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_raw_dat10);
		char* tvout_raw_dat10 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_raw_dat10);

		// "numbits_V"
		char* tvin_numbits_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_numbits_V);

		// "overrun"
		char* tvout_overrun = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_overrun);

		// "full"
		char* tvout_full = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_full);

		// "write_r"
		char* tvin_write_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_write_r);

		// "deran_V"
		char* tvin_deran_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_deran_V);

		// "mux"
		char* tvout_mux = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_mux);

		// "decode_done"
		char* tvin_decode_done = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_decode_done);

		// "decode_start"
		char* tvout_decode_start = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_decode_start);

		// "decode_ready"
		char* tvin_decode_ready = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_decode_ready);

		// "decode_done_b"
		char* tvin_decode_done_b = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_decode_done_b);

		// "decode_start_b"
		char* tvout_decode_start_b = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_decode_start_b);

		// "decode_ready_b"
		char* tvin_decode_ready_b = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_decode_ready_b);

		// "deran_data"
		char* tvout_deran_data = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_deran_data);

		// "cur_write_pos_V"
		char* tvout_cur_write_pos_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_cur_write_pos_V);

		// "out_mux"
		char* tvin_out_mux = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_mux);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_data_in, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_data_in, tvin_data_in);

		sc_bv<8> data_in_tvin_wrapc_buffer;

		// RTL Name: data_in
		{
			// bitslice(7, 0)
			{
				// celement: data_in(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : data_in
						// sub_1st_elem          : 
						// ori_name_1st_elem     : data_in
						// regulate_c_name       : data_in
						// input_type_conversion : data_in
						if (&(data_in) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> data_in_tmp_mem;
							data_in_tmp_mem = data_in;
							data_in_tvin_wrapc_buffer.range(7, 0) = data_in_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_data_in, "%s\n", (data_in_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_data_in, tvin_data_in);
		}

		tcl_file.set_num(1, &tcl_file.data_in_depth);
		sprintf(tvin_data_in, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_data_in, tvin_data_in);

		// [[transaction]]
		sprintf(tvin_reset, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_reset, tvin_reset);

		sc_bv<1> reset_tvin_wrapc_buffer;

		// RTL Name: reset
		{
			// bitslice(0, 0)
			{
				// celement: reset(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : reset
						// sub_1st_elem          : 
						// ori_name_1st_elem     : reset
						// regulate_c_name       : reset
						// input_type_conversion : reset
						if (&(reset) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> reset_tmp_mem;
							reset_tmp_mem = reset;
							reset_tvin_wrapc_buffer.range(0, 0) = reset_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_reset, "%s\n", (reset_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_reset, tvin_reset);
		}

		tcl_file.set_num(1, &tcl_file.reset_depth);
		sprintf(tvin_reset, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_reset, tvin_reset);

		// [[transaction]]
		sprintf(tvin_raw_dat0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat0, tvin_raw_dat0);

		sc_bv<8>* raw_dat0_tvin_wrapc_buffer = new sc_bv<8>[2048];

		// RTL Name: raw_dat0
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat0(7, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat0[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat0[0]
						// regulate_c_name       : raw_dat0
						// input_type_conversion : raw_dat0[i_0]
						if (&(raw_dat0[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat0_tmp_mem;
							raw_dat0_tmp_mem = raw_dat0[i_0];
							raw_dat0_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat0_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvin_raw_dat0, "%s\n", (raw_dat0_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat0, tvin_raw_dat0);
		}

		tcl_file.set_num(2048, &tcl_file.raw_dat0_depth);
		sprintf(tvin_raw_dat0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat0, tvin_raw_dat0);

		// release memory allocation
		delete [] raw_dat0_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_raw_dat1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat1, tvin_raw_dat1);

		sc_bv<8>* raw_dat1_tvin_wrapc_buffer = new sc_bv<8>[2048];

		// RTL Name: raw_dat1
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat1(7, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat1[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat1[0]
						// regulate_c_name       : raw_dat1
						// input_type_conversion : raw_dat1[i_0]
						if (&(raw_dat1[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat1_tmp_mem;
							raw_dat1_tmp_mem = raw_dat1[i_0];
							raw_dat1_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat1_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvin_raw_dat1, "%s\n", (raw_dat1_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat1, tvin_raw_dat1);
		}

		tcl_file.set_num(2048, &tcl_file.raw_dat1_depth);
		sprintf(tvin_raw_dat1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat1, tvin_raw_dat1);

		// release memory allocation
		delete [] raw_dat1_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_raw_dat2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat2, tvin_raw_dat2);

		sc_bv<8>* raw_dat2_tvin_wrapc_buffer = new sc_bv<8>[2048];

		// RTL Name: raw_dat2
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat2(7, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat2[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat2[0]
						// regulate_c_name       : raw_dat2
						// input_type_conversion : raw_dat2[i_0]
						if (&(raw_dat2[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat2_tmp_mem;
							raw_dat2_tmp_mem = raw_dat2[i_0];
							raw_dat2_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat2_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvin_raw_dat2, "%s\n", (raw_dat2_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat2, tvin_raw_dat2);
		}

		tcl_file.set_num(2048, &tcl_file.raw_dat2_depth);
		sprintf(tvin_raw_dat2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat2, tvin_raw_dat2);

		// release memory allocation
		delete [] raw_dat2_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_raw_dat3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat3, tvin_raw_dat3);

		sc_bv<8>* raw_dat3_tvin_wrapc_buffer = new sc_bv<8>[2048];

		// RTL Name: raw_dat3
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat3(7, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat3[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat3[0]
						// regulate_c_name       : raw_dat3
						// input_type_conversion : raw_dat3[i_0]
						if (&(raw_dat3[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat3_tmp_mem;
							raw_dat3_tmp_mem = raw_dat3[i_0];
							raw_dat3_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat3_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvin_raw_dat3, "%s\n", (raw_dat3_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat3, tvin_raw_dat3);
		}

		tcl_file.set_num(2048, &tcl_file.raw_dat3_depth);
		sprintf(tvin_raw_dat3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat3, tvin_raw_dat3);

		// release memory allocation
		delete [] raw_dat3_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_raw_dat4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat4, tvin_raw_dat4);

		sc_bv<8>* raw_dat4_tvin_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat4
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat4(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat4[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat4[0]
						// regulate_c_name       : raw_dat4
						// input_type_conversion : raw_dat4[i_0]
						if (&(raw_dat4[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat4_tmp_mem;
							raw_dat4_tmp_mem = raw_dat4[i_0];
							raw_dat4_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat4_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_raw_dat4, "%s\n", (raw_dat4_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat4, tvin_raw_dat4);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat4_depth);
		sprintf(tvin_raw_dat4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat4, tvin_raw_dat4);

		// release memory allocation
		delete [] raw_dat4_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_raw_dat5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat5, tvin_raw_dat5);

		sc_bv<8>* raw_dat5_tvin_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat5
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat5(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat5[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat5[0]
						// regulate_c_name       : raw_dat5
						// input_type_conversion : raw_dat5[i_0]
						if (&(raw_dat5[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat5_tmp_mem;
							raw_dat5_tmp_mem = raw_dat5[i_0];
							raw_dat5_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat5_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_raw_dat5, "%s\n", (raw_dat5_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat5, tvin_raw_dat5);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat5_depth);
		sprintf(tvin_raw_dat5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat5, tvin_raw_dat5);

		// release memory allocation
		delete [] raw_dat5_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_raw_dat6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat6, tvin_raw_dat6);

		sc_bv<8>* raw_dat6_tvin_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat6
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat6(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat6[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat6[0]
						// regulate_c_name       : raw_dat6
						// input_type_conversion : raw_dat6[i_0]
						if (&(raw_dat6[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat6_tmp_mem;
							raw_dat6_tmp_mem = raw_dat6[i_0];
							raw_dat6_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat6_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_raw_dat6, "%s\n", (raw_dat6_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat6, tvin_raw_dat6);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat6_depth);
		sprintf(tvin_raw_dat6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat6, tvin_raw_dat6);

		// release memory allocation
		delete [] raw_dat6_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_raw_dat7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat7, tvin_raw_dat7);

		sc_bv<8>* raw_dat7_tvin_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat7
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat7(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat7[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat7[0]
						// regulate_c_name       : raw_dat7
						// input_type_conversion : raw_dat7[i_0]
						if (&(raw_dat7[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat7_tmp_mem;
							raw_dat7_tmp_mem = raw_dat7[i_0];
							raw_dat7_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat7_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_raw_dat7, "%s\n", (raw_dat7_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat7, tvin_raw_dat7);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat7_depth);
		sprintf(tvin_raw_dat7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat7, tvin_raw_dat7);

		// release memory allocation
		delete [] raw_dat7_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_raw_dat8, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat8, tvin_raw_dat8);

		sc_bv<8>* raw_dat8_tvin_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat8
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat8(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat8[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat8[0]
						// regulate_c_name       : raw_dat8
						// input_type_conversion : raw_dat8[i_0]
						if (&(raw_dat8[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat8_tmp_mem;
							raw_dat8_tmp_mem = raw_dat8[i_0];
							raw_dat8_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat8_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_raw_dat8, "%s\n", (raw_dat8_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat8, tvin_raw_dat8);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat8_depth);
		sprintf(tvin_raw_dat8, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat8, tvin_raw_dat8);

		// release memory allocation
		delete [] raw_dat8_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_raw_dat9, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat9, tvin_raw_dat9);

		sc_bv<8>* raw_dat9_tvin_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat9
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat9(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat9[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat9[0]
						// regulate_c_name       : raw_dat9
						// input_type_conversion : raw_dat9[i_0]
						if (&(raw_dat9[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat9_tmp_mem;
							raw_dat9_tmp_mem = raw_dat9[i_0];
							raw_dat9_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat9_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_raw_dat9, "%s\n", (raw_dat9_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat9, tvin_raw_dat9);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat9_depth);
		sprintf(tvin_raw_dat9, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat9, tvin_raw_dat9);

		// release memory allocation
		delete [] raw_dat9_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_raw_dat10, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_raw_dat10, tvin_raw_dat10);

		sc_bv<8>* raw_dat10_tvin_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat10
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat10(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat10[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat10[0]
						// regulate_c_name       : raw_dat10
						// input_type_conversion : raw_dat10[i_0]
						if (&(raw_dat10[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat10_tmp_mem;
							raw_dat10_tmp_mem = raw_dat10[i_0];
							raw_dat10_tvin_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat10_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_raw_dat10, "%s\n", (raw_dat10_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_raw_dat10, tvin_raw_dat10);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat10_depth);
		sprintf(tvin_raw_dat10, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_raw_dat10, tvin_raw_dat10);

		// release memory allocation
		delete [] raw_dat10_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_numbits_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_numbits_V, tvin_numbits_V);

		sc_bv<16> numbits_V_tvin_wrapc_buffer;

		// RTL Name: numbits_V
		{
			// bitslice(15, 0)
			{
				// celement: numbits.V(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : numbits
						// sub_1st_elem          : 
						// ori_name_1st_elem     : numbits
						// regulate_c_name       : numbits_V
						// input_type_conversion : (numbits).to_string(2).c_str()
						if (&(numbits) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> numbits_V_tmp_mem;
							numbits_V_tmp_mem = (numbits).to_string(2).c_str();
							numbits_V_tvin_wrapc_buffer.range(15, 0) = numbits_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_numbits_V, "%s\n", (numbits_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_numbits_V, tvin_numbits_V);
		}

		tcl_file.set_num(1, &tcl_file.numbits_V_depth);
		sprintf(tvin_numbits_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_numbits_V, tvin_numbits_V);

		// [[transaction]]
		sprintf(tvin_write_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_write_r, tvin_write_r);

		sc_bv<1> write_r_tvin_wrapc_buffer;

		// RTL Name: write_r
		{
			// bitslice(0, 0)
			{
				// celement: write(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : write
						// sub_1st_elem          : 
						// ori_name_1st_elem     : write
						// regulate_c_name       : write
						// input_type_conversion : write
						if (&(write) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> write_tmp_mem;
							write_tmp_mem = write;
							write_r_tvin_wrapc_buffer.range(0, 0) = write_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_write_r, "%s\n", (write_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_write_r, tvin_write_r);
		}

		tcl_file.set_num(1, &tcl_file.write_r_depth);
		sprintf(tvin_write_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_write_r, tvin_write_r);

		// [[transaction]]
		sprintf(tvin_deran_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_deran_V, tvin_deran_V);

		sc_bv<2> deran_V_tvin_wrapc_buffer;

		// RTL Name: deran_V
		{
			// bitslice(1, 0)
			{
				// celement: deran.V(1, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : deran
						// sub_1st_elem          : 
						// ori_name_1st_elem     : deran
						// regulate_c_name       : deran_V
						// input_type_conversion : (deran).to_string(2).c_str()
						if (&(deran) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> deran_V_tmp_mem;
							deran_V_tmp_mem = (deran).to_string(2).c_str();
							deran_V_tvin_wrapc_buffer.range(1, 0) = deran_V_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_deran_V, "%s\n", (deran_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_deran_V, tvin_deran_V);
		}

		tcl_file.set_num(1, &tcl_file.deran_V_depth);
		sprintf(tvin_deran_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_deran_V, tvin_deran_V);

		// [[transaction]]
		sprintf(tvin_decode_done, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_decode_done, tvin_decode_done);

		sc_bv<1> decode_done_tvin_wrapc_buffer;

		// RTL Name: decode_done
		{
			// bitslice(0, 0)
			{
				// celement: decode_done(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : decode_done
						// sub_1st_elem          : 
						// ori_name_1st_elem     : decode_done
						// regulate_c_name       : decode_done
						// input_type_conversion : decode_done
						if (&(decode_done) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> decode_done_tmp_mem;
							decode_done_tmp_mem = decode_done;
							decode_done_tvin_wrapc_buffer.range(0, 0) = decode_done_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_decode_done, "%s\n", (decode_done_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_decode_done, tvin_decode_done);
		}

		tcl_file.set_num(1, &tcl_file.decode_done_depth);
		sprintf(tvin_decode_done, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_decode_done, tvin_decode_done);

		// [[transaction]]
		sprintf(tvin_decode_ready, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_decode_ready, tvin_decode_ready);

		sc_bv<1> decode_ready_tvin_wrapc_buffer;

		// RTL Name: decode_ready
		{
			// bitslice(0, 0)
			{
				// celement: decode_ready(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : decode_ready
						// sub_1st_elem          : 
						// ori_name_1st_elem     : decode_ready
						// regulate_c_name       : decode_ready
						// input_type_conversion : decode_ready
						if (&(decode_ready) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> decode_ready_tmp_mem;
							decode_ready_tmp_mem = decode_ready;
							decode_ready_tvin_wrapc_buffer.range(0, 0) = decode_ready_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_decode_ready, "%s\n", (decode_ready_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_decode_ready, tvin_decode_ready);
		}

		tcl_file.set_num(1, &tcl_file.decode_ready_depth);
		sprintf(tvin_decode_ready, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_decode_ready, tvin_decode_ready);

		// [[transaction]]
		sprintf(tvin_decode_done_b, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_decode_done_b, tvin_decode_done_b);

		sc_bv<1> decode_done_b_tvin_wrapc_buffer;

		// RTL Name: decode_done_b
		{
			// bitslice(0, 0)
			{
				// celement: decode_done_b(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : decode_done_b
						// sub_1st_elem          : 
						// ori_name_1st_elem     : decode_done_b
						// regulate_c_name       : decode_done_b
						// input_type_conversion : decode_done_b
						if (&(decode_done_b) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> decode_done_b_tmp_mem;
							decode_done_b_tmp_mem = decode_done_b;
							decode_done_b_tvin_wrapc_buffer.range(0, 0) = decode_done_b_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_decode_done_b, "%s\n", (decode_done_b_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_decode_done_b, tvin_decode_done_b);
		}

		tcl_file.set_num(1, &tcl_file.decode_done_b_depth);
		sprintf(tvin_decode_done_b, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_decode_done_b, tvin_decode_done_b);

		// [[transaction]]
		sprintf(tvin_decode_ready_b, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_decode_ready_b, tvin_decode_ready_b);

		sc_bv<1> decode_ready_b_tvin_wrapc_buffer;

		// RTL Name: decode_ready_b
		{
			// bitslice(0, 0)
			{
				// celement: decode_ready_b(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : decode_ready_b
						// sub_1st_elem          : 
						// ori_name_1st_elem     : decode_ready_b
						// regulate_c_name       : decode_ready_b
						// input_type_conversion : decode_ready_b
						if (&(decode_ready_b) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> decode_ready_b_tmp_mem;
							decode_ready_b_tmp_mem = decode_ready_b;
							decode_ready_b_tvin_wrapc_buffer.range(0, 0) = decode_ready_b_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_decode_ready_b, "%s\n", (decode_ready_b_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_decode_ready_b, tvin_decode_ready_b);
		}

		tcl_file.set_num(1, &tcl_file.decode_ready_b_depth);
		sprintf(tvin_decode_ready_b, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_decode_ready_b, tvin_decode_ready_b);

		// [[transaction]]
		sprintf(tvin_out_mux, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_out_mux, tvin_out_mux);

		sc_bv<1> out_mux_tvin_wrapc_buffer;

		// RTL Name: out_mux
		{
			// bitslice(0, 0)
			{
				// celement: out_mux(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : out_mux
						// sub_1st_elem          : 
						// ori_name_1st_elem     : out_mux
						// regulate_c_name       : out_mux
						// input_type_conversion : out_mux
						if (&(out_mux) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> out_mux_tmp_mem;
							out_mux_tmp_mem = out_mux;
							out_mux_tvin_wrapc_buffer.range(0, 0) = out_mux_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_out_mux, "%s\n", (out_mux_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_out_mux, tvin_out_mux);
		}

		tcl_file.set_num(1, &tcl_file.out_mux_depth);
		sprintf(tvin_out_mux, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_out_mux, tvin_out_mux);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		LDPC_buff(data_in, reset, raw_dat0, raw_dat1, raw_dat2, raw_dat3, raw_dat4, raw_dat5, raw_dat6, raw_dat7, raw_dat8, raw_dat9, raw_dat10, numbits, overrun, full, write, deran, mux, decode_done, decode_start, decode_ready, decode_done_b, decode_start_b, decode_ready_b, deran_data, cur_write_pos, out_mux);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_raw_dat0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat0, tvout_raw_dat0);

		sc_bv<8>* raw_dat0_tvout_wrapc_buffer = new sc_bv<8>[2048];

		// RTL Name: raw_dat0
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat0(7, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat0[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat0[0]
						// regulate_c_name       : raw_dat0
						// input_type_conversion : raw_dat0[i_0]
						if (&(raw_dat0[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat0_tmp_mem;
							raw_dat0_tmp_mem = raw_dat0[i_0];
							raw_dat0_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat0_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvout_raw_dat0, "%s\n", (raw_dat0_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat0, tvout_raw_dat0);
		}

		tcl_file.set_num(2048, &tcl_file.raw_dat0_depth);
		sprintf(tvout_raw_dat0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat0, tvout_raw_dat0);

		// release memory allocation
		delete [] raw_dat0_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_raw_dat1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat1, tvout_raw_dat1);

		sc_bv<8>* raw_dat1_tvout_wrapc_buffer = new sc_bv<8>[2048];

		// RTL Name: raw_dat1
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat1(7, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat1[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat1[0]
						// regulate_c_name       : raw_dat1
						// input_type_conversion : raw_dat1[i_0]
						if (&(raw_dat1[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat1_tmp_mem;
							raw_dat1_tmp_mem = raw_dat1[i_0];
							raw_dat1_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat1_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvout_raw_dat1, "%s\n", (raw_dat1_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat1, tvout_raw_dat1);
		}

		tcl_file.set_num(2048, &tcl_file.raw_dat1_depth);
		sprintf(tvout_raw_dat1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat1, tvout_raw_dat1);

		// release memory allocation
		delete [] raw_dat1_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_raw_dat2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat2, tvout_raw_dat2);

		sc_bv<8>* raw_dat2_tvout_wrapc_buffer = new sc_bv<8>[2048];

		// RTL Name: raw_dat2
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat2(7, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat2[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat2[0]
						// regulate_c_name       : raw_dat2
						// input_type_conversion : raw_dat2[i_0]
						if (&(raw_dat2[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat2_tmp_mem;
							raw_dat2_tmp_mem = raw_dat2[i_0];
							raw_dat2_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat2_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvout_raw_dat2, "%s\n", (raw_dat2_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat2, tvout_raw_dat2);
		}

		tcl_file.set_num(2048, &tcl_file.raw_dat2_depth);
		sprintf(tvout_raw_dat2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat2, tvout_raw_dat2);

		// release memory allocation
		delete [] raw_dat2_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_raw_dat3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat3, tvout_raw_dat3);

		sc_bv<8>* raw_dat3_tvout_wrapc_buffer = new sc_bv<8>[2048];

		// RTL Name: raw_dat3
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat3(7, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat3[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat3[0]
						// regulate_c_name       : raw_dat3
						// input_type_conversion : raw_dat3[i_0]
						if (&(raw_dat3[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat3_tmp_mem;
							raw_dat3_tmp_mem = raw_dat3[i_0];
							raw_dat3_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat3_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvout_raw_dat3, "%s\n", (raw_dat3_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat3, tvout_raw_dat3);
		}

		tcl_file.set_num(2048, &tcl_file.raw_dat3_depth);
		sprintf(tvout_raw_dat3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat3, tvout_raw_dat3);

		// release memory allocation
		delete [] raw_dat3_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_raw_dat4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat4, tvout_raw_dat4);

		sc_bv<8>* raw_dat4_tvout_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat4
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat4(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat4[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat4[0]
						// regulate_c_name       : raw_dat4
						// input_type_conversion : raw_dat4[i_0]
						if (&(raw_dat4[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat4_tmp_mem;
							raw_dat4_tmp_mem = raw_dat4[i_0];
							raw_dat4_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat4_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvout_raw_dat4, "%s\n", (raw_dat4_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat4, tvout_raw_dat4);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat4_depth);
		sprintf(tvout_raw_dat4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat4, tvout_raw_dat4);

		// release memory allocation
		delete [] raw_dat4_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_raw_dat5, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat5, tvout_raw_dat5);

		sc_bv<8>* raw_dat5_tvout_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat5
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat5(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat5[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat5[0]
						// regulate_c_name       : raw_dat5
						// input_type_conversion : raw_dat5[i_0]
						if (&(raw_dat5[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat5_tmp_mem;
							raw_dat5_tmp_mem = raw_dat5[i_0];
							raw_dat5_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat5_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvout_raw_dat5, "%s\n", (raw_dat5_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat5, tvout_raw_dat5);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat5_depth);
		sprintf(tvout_raw_dat5, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat5, tvout_raw_dat5);

		// release memory allocation
		delete [] raw_dat5_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_raw_dat6, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat6, tvout_raw_dat6);

		sc_bv<8>* raw_dat6_tvout_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat6
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat6(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat6[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat6[0]
						// regulate_c_name       : raw_dat6
						// input_type_conversion : raw_dat6[i_0]
						if (&(raw_dat6[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat6_tmp_mem;
							raw_dat6_tmp_mem = raw_dat6[i_0];
							raw_dat6_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat6_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvout_raw_dat6, "%s\n", (raw_dat6_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat6, tvout_raw_dat6);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat6_depth);
		sprintf(tvout_raw_dat6, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat6, tvout_raw_dat6);

		// release memory allocation
		delete [] raw_dat6_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_raw_dat7, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat7, tvout_raw_dat7);

		sc_bv<8>* raw_dat7_tvout_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat7
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat7(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat7[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat7[0]
						// regulate_c_name       : raw_dat7
						// input_type_conversion : raw_dat7[i_0]
						if (&(raw_dat7[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat7_tmp_mem;
							raw_dat7_tmp_mem = raw_dat7[i_0];
							raw_dat7_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat7_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvout_raw_dat7, "%s\n", (raw_dat7_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat7, tvout_raw_dat7);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat7_depth);
		sprintf(tvout_raw_dat7, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat7, tvout_raw_dat7);

		// release memory allocation
		delete [] raw_dat7_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_raw_dat8, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat8, tvout_raw_dat8);

		sc_bv<8>* raw_dat8_tvout_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat8
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat8(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat8[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat8[0]
						// regulate_c_name       : raw_dat8
						// input_type_conversion : raw_dat8[i_0]
						if (&(raw_dat8[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat8_tmp_mem;
							raw_dat8_tmp_mem = raw_dat8[i_0];
							raw_dat8_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat8_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvout_raw_dat8, "%s\n", (raw_dat8_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat8, tvout_raw_dat8);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat8_depth);
		sprintf(tvout_raw_dat8, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat8, tvout_raw_dat8);

		// release memory allocation
		delete [] raw_dat8_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_raw_dat9, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat9, tvout_raw_dat9);

		sc_bv<8>* raw_dat9_tvout_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat9
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat9(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat9[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat9[0]
						// regulate_c_name       : raw_dat9
						// input_type_conversion : raw_dat9[i_0]
						if (&(raw_dat9[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat9_tmp_mem;
							raw_dat9_tmp_mem = raw_dat9[i_0];
							raw_dat9_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat9_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvout_raw_dat9, "%s\n", (raw_dat9_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat9, tvout_raw_dat9);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat9_depth);
		sprintf(tvout_raw_dat9, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat9, tvout_raw_dat9);

		// release memory allocation
		delete [] raw_dat9_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_raw_dat10, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_raw_dat10, tvout_raw_dat10);

		sc_bv<8>* raw_dat10_tvout_wrapc_buffer = new sc_bv<8>[1024];

		// RTL Name: raw_dat10
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: raw_dat10(7, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : raw_dat10[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : raw_dat10[0]
						// regulate_c_name       : raw_dat10
						// input_type_conversion : raw_dat10[i_0]
						if (&(raw_dat10[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> raw_dat10_tmp_mem;
							raw_dat10_tmp_mem = raw_dat10[i_0];
							raw_dat10_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = raw_dat10_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvout_raw_dat10, "%s\n", (raw_dat10_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_raw_dat10, tvout_raw_dat10);
		}

		tcl_file.set_num(1024, &tcl_file.raw_dat10_depth);
		sprintf(tvout_raw_dat10, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_raw_dat10, tvout_raw_dat10);

		// release memory allocation
		delete [] raw_dat10_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_overrun, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_overrun, tvout_overrun);

		sc_bv<1>* overrun_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: overrun
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: overrun(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : overrun[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : overrun[0]
						// regulate_c_name       : overrun
						// input_type_conversion : overrun[i_0]
						if (&(overrun[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> overrun_tmp_mem;
							overrun_tmp_mem = overrun[i_0];
							overrun_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = overrun_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_overrun, "%s\n", (overrun_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_overrun, tvout_overrun);
		}

		tcl_file.set_num(1, &tcl_file.overrun_depth);
		sprintf(tvout_overrun, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_overrun, tvout_overrun);

		// release memory allocation
		delete [] overrun_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_full, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_full, tvout_full);

		sc_bv<1>* full_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: full
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: full(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : full[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : full[0]
						// regulate_c_name       : full
						// input_type_conversion : full[i_0]
						if (&(full[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> full_tmp_mem;
							full_tmp_mem = full[i_0];
							full_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = full_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_full, "%s\n", (full_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_full, tvout_full);
		}

		tcl_file.set_num(1, &tcl_file.full_depth);
		sprintf(tvout_full, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_full, tvout_full);

		// release memory allocation
		delete [] full_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_mux, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_mux, tvout_mux);

		sc_bv<1>* mux_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: mux
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: mux(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : mux[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : mux[0]
						// regulate_c_name       : mux
						// input_type_conversion : mux[i_0]
						if (&(mux[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> mux_tmp_mem;
							mux_tmp_mem = mux[i_0];
							mux_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = mux_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_mux, "%s\n", (mux_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_mux, tvout_mux);
		}

		tcl_file.set_num(1, &tcl_file.mux_depth);
		sprintf(tvout_mux, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_mux, tvout_mux);

		// release memory allocation
		delete [] mux_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_decode_start, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_decode_start, tvout_decode_start);

		sc_bv<1>* decode_start_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: decode_start
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: decode_start(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : decode_start[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : decode_start[0]
						// regulate_c_name       : decode_start
						// input_type_conversion : decode_start[i_0]
						if (&(decode_start[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> decode_start_tmp_mem;
							decode_start_tmp_mem = decode_start[i_0];
							decode_start_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = decode_start_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_decode_start, "%s\n", (decode_start_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_decode_start, tvout_decode_start);
		}

		tcl_file.set_num(1, &tcl_file.decode_start_depth);
		sprintf(tvout_decode_start, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_decode_start, tvout_decode_start);

		// release memory allocation
		delete [] decode_start_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_decode_start_b, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_decode_start_b, tvout_decode_start_b);

		sc_bv<1>* decode_start_b_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: decode_start_b
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: decode_start_b(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : decode_start_b[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : decode_start_b[0]
						// regulate_c_name       : decode_start_b
						// input_type_conversion : decode_start_b[i_0]
						if (&(decode_start_b[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> decode_start_b_tmp_mem;
							decode_start_b_tmp_mem = decode_start_b[i_0];
							decode_start_b_tvout_wrapc_buffer[hls_map_index++].range(0, 0) = decode_start_b_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_decode_start_b, "%s\n", (decode_start_b_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_decode_start_b, tvout_decode_start_b);
		}

		tcl_file.set_num(1, &tcl_file.decode_start_b_depth);
		sprintf(tvout_decode_start_b, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_decode_start_b, tvout_decode_start_b);

		// release memory allocation
		delete [] decode_start_b_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_deran_data, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_deran_data, tvout_deran_data);

		sc_bv<8>* deran_data_tvout_wrapc_buffer = new sc_bv<8>[1];

		// RTL Name: deran_data
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: deran_data(7, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : deran_data[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : deran_data[0]
						// regulate_c_name       : deran_data
						// input_type_conversion : deran_data[i_0]
						if (&(deran_data[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> deran_data_tmp_mem;
							deran_data_tmp_mem = deran_data[i_0];
							deran_data_tvout_wrapc_buffer[hls_map_index++].range(7, 0) = deran_data_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_deran_data, "%s\n", (deran_data_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_deran_data, tvout_deran_data);
		}

		tcl_file.set_num(1, &tcl_file.deran_data_depth);
		sprintf(tvout_deran_data, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_deran_data, tvout_deran_data);

		// release memory allocation
		delete [] deran_data_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_cur_write_pos_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_cur_write_pos_V, tvout_cur_write_pos_V);

		sc_bv<16>* cur_write_pos_V_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: cur_write_pos_V
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: cur_write_pos.V(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : cur_write_pos[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : cur_write_pos[0]
						// regulate_c_name       : cur_write_pos_V
						// input_type_conversion : (cur_write_pos[i_0]).to_string(2).c_str()
						if (&(cur_write_pos[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> cur_write_pos_V_tmp_mem;
							cur_write_pos_V_tmp_mem = (cur_write_pos[i_0]).to_string(2).c_str();
							cur_write_pos_V_tvout_wrapc_buffer[hls_map_index++].range(15, 0) = cur_write_pos_V_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_cur_write_pos_V, "%s\n", (cur_write_pos_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_cur_write_pos_V, tvout_cur_write_pos_V);
		}

		tcl_file.set_num(1, &tcl_file.cur_write_pos_V_depth);
		sprintf(tvout_cur_write_pos_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_cur_write_pos_V, tvout_cur_write_pos_V);

		// release memory allocation
		delete [] cur_write_pos_V_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "data_in"
		delete [] tvin_data_in;
		// release memory allocation: "reset"
		delete [] tvin_reset;
		// release memory allocation: "raw_dat0"
		delete [] tvout_raw_dat0;
		delete [] tvin_raw_dat0;
		// release memory allocation: "raw_dat1"
		delete [] tvout_raw_dat1;
		delete [] tvin_raw_dat1;
		// release memory allocation: "raw_dat2"
		delete [] tvout_raw_dat2;
		delete [] tvin_raw_dat2;
		// release memory allocation: "raw_dat3"
		delete [] tvout_raw_dat3;
		delete [] tvin_raw_dat3;
		// release memory allocation: "raw_dat4"
		delete [] tvout_raw_dat4;
		delete [] tvin_raw_dat4;
		// release memory allocation: "raw_dat5"
		delete [] tvout_raw_dat5;
		delete [] tvin_raw_dat5;
		// release memory allocation: "raw_dat6"
		delete [] tvout_raw_dat6;
		delete [] tvin_raw_dat6;
		// release memory allocation: "raw_dat7"
		delete [] tvout_raw_dat7;
		delete [] tvin_raw_dat7;
		// release memory allocation: "raw_dat8"
		delete [] tvout_raw_dat8;
		delete [] tvin_raw_dat8;
		// release memory allocation: "raw_dat9"
		delete [] tvout_raw_dat9;
		delete [] tvin_raw_dat9;
		// release memory allocation: "raw_dat10"
		delete [] tvout_raw_dat10;
		delete [] tvin_raw_dat10;
		// release memory allocation: "numbits_V"
		delete [] tvin_numbits_V;
		// release memory allocation: "overrun"
		delete [] tvout_overrun;
		// release memory allocation: "full"
		delete [] tvout_full;
		// release memory allocation: "write_r"
		delete [] tvin_write_r;
		// release memory allocation: "deran_V"
		delete [] tvin_deran_V;
		// release memory allocation: "mux"
		delete [] tvout_mux;
		// release memory allocation: "decode_done"
		delete [] tvin_decode_done;
		// release memory allocation: "decode_start"
		delete [] tvout_decode_start;
		// release memory allocation: "decode_ready"
		delete [] tvin_decode_ready;
		// release memory allocation: "decode_done_b"
		delete [] tvin_decode_done_b;
		// release memory allocation: "decode_start_b"
		delete [] tvout_decode_start_b;
		// release memory allocation: "decode_ready_b"
		delete [] tvin_decode_ready_b;
		// release memory allocation: "deran_data"
		delete [] tvout_deran_data;
		// release memory allocation: "cur_write_pos_V"
		delete [] tvout_cur_write_pos_V;
		// release memory allocation: "out_mux"
		delete [] tvin_out_mux;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

