// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_next_12_4096 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_nt,
        a,
        a_ap_vld,
        b,
        b_ap_vld,
        c,
        c_ap_vld,
        d,
        d_ap_vld,
        e,
        e_ap_vld,
        f,
        f_ap_vld,
        m18A,
        m18A_ap_vld,
        n18A,
        n18A_ap_vld,
        o18A,
        o18A_ap_vld,
        p18A,
        p18A_ap_vld,
        q18A,
        q18A_ap_vld,
        r18A,
        r18A_ap_vld,
        m18A2,
        m18A2_ap_vld,
        n18A2,
        n18A2_ap_vld,
        o18A2,
        o18A2_ap_vld,
        p18A2,
        p18A2_ap_vld,
        q18A2,
        q18A2_ap_vld,
        r18A2,
        r18A2_ap_vld,
        m18B,
        m18B_ap_vld,
        n18B,
        n18B_ap_vld,
        o18B,
        o18B_ap_vld,
        p18B,
        p18B_ap_vld,
        q18B,
        q18B_ap_vld,
        r18B,
        r18B_ap_vld,
        m18B2,
        m18B2_ap_vld,
        n18B2,
        n18B2_ap_vld,
        o18B2,
        o18B2_ap_vld,
        p18B2,
        p18B2_ap_vld,
        q18B2,
        q18B2_ap_vld,
        r18B2,
        r18B2_ap_vld,
        a2,
        a2_ap_vld,
        b2,
        b2_ap_vld,
        c2,
        c2_ap_vld,
        d2,
        d2_ap_vld,
        e2,
        e2_ap_vld,
        f2,
        f2_ap_vld,
        m18A3,
        m18A3_ap_vld,
        n18A3,
        n18A3_ap_vld,
        o18A3,
        o18A3_ap_vld,
        p18A3,
        p18A3_ap_vld,
        q18A3,
        q18A3_ap_vld,
        r18A3,
        r18A3_ap_vld,
        m18A4,
        m18A4_ap_vld,
        n18A4,
        n18A4_ap_vld,
        o18A4,
        o18A4_ap_vld,
        p18A4,
        p18A4_ap_vld,
        q18A4,
        q18A4_ap_vld,
        r18A4,
        r18A4_ap_vld,
        m18B3,
        m18B3_ap_vld,
        n18B3,
        n18B3_ap_vld,
        o18B3,
        o18B3_ap_vld,
        p18B3,
        p18B3_ap_vld,
        q18B3,
        q18B3_ap_vld,
        r18B3,
        r18B3_ap_vld,
        m18B4,
        m18B4_ap_vld,
        n18B4,
        n18B4_ap_vld,
        o18B4,
        o18B4_ap_vld,
        p18B4,
        p18B4_ap_vld,
        q18B4,
        q18B4_ap_vld,
        r18B4,
        r18B4_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'b1;
parameter    ap_ST_fsm_state2 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv16_200 = 16'b1000000000;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_21 = 32'b100001;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] num_nt;
output  [15:0] a;
output   a_ap_vld;
output  [15:0] b;
output   b_ap_vld;
output  [15:0] c;
output   c_ap_vld;
output  [15:0] d;
output   d_ap_vld;
output  [15:0] e;
output   e_ap_vld;
output  [15:0] f;
output   f_ap_vld;
output  [15:0] m18A;
output   m18A_ap_vld;
output  [15:0] n18A;
output   n18A_ap_vld;
output  [15:0] o18A;
output   o18A_ap_vld;
output  [15:0] p18A;
output   p18A_ap_vld;
output  [15:0] q18A;
output   q18A_ap_vld;
output  [15:0] r18A;
output   r18A_ap_vld;
output  [15:0] m18A2;
output   m18A2_ap_vld;
output  [15:0] n18A2;
output   n18A2_ap_vld;
output  [15:0] o18A2;
output   o18A2_ap_vld;
output  [15:0] p18A2;
output   p18A2_ap_vld;
output  [15:0] q18A2;
output   q18A2_ap_vld;
output  [15:0] r18A2;
output   r18A2_ap_vld;
output  [15:0] m18B;
output   m18B_ap_vld;
output  [15:0] n18B;
output   n18B_ap_vld;
output  [15:0] o18B;
output   o18B_ap_vld;
output  [15:0] p18B;
output   p18B_ap_vld;
output  [15:0] q18B;
output   q18B_ap_vld;
output  [15:0] r18B;
output   r18B_ap_vld;
output  [15:0] m18B2;
output   m18B2_ap_vld;
output  [15:0] n18B2;
output   n18B2_ap_vld;
output  [15:0] o18B2;
output   o18B2_ap_vld;
output  [15:0] p18B2;
output   p18B2_ap_vld;
output  [15:0] q18B2;
output   q18B2_ap_vld;
output  [15:0] r18B2;
output   r18B2_ap_vld;
output  [15:0] a2;
output   a2_ap_vld;
output  [15:0] b2;
output   b2_ap_vld;
output  [15:0] c2;
output   c2_ap_vld;
output  [15:0] d2;
output   d2_ap_vld;
output  [15:0] e2;
output   e2_ap_vld;
output  [15:0] f2;
output   f2_ap_vld;
output  [15:0] m18A3;
output   m18A3_ap_vld;
output  [15:0] n18A3;
output   n18A3_ap_vld;
output  [15:0] o18A3;
output   o18A3_ap_vld;
output  [15:0] p18A3;
output   p18A3_ap_vld;
output  [15:0] q18A3;
output   q18A3_ap_vld;
output  [15:0] r18A3;
output   r18A3_ap_vld;
output  [15:0] m18A4;
output   m18A4_ap_vld;
output  [15:0] n18A4;
output   n18A4_ap_vld;
output  [15:0] o18A4;
output   o18A4_ap_vld;
output  [15:0] p18A4;
output   p18A4_ap_vld;
output  [15:0] q18A4;
output   q18A4_ap_vld;
output  [15:0] r18A4;
output   r18A4_ap_vld;
output  [15:0] m18B3;
output   m18B3_ap_vld;
output  [15:0] n18B3;
output   n18B3_ap_vld;
output  [15:0] o18B3;
output   o18B3_ap_vld;
output  [15:0] p18B3;
output   p18B3_ap_vld;
output  [15:0] q18B3;
output   q18B3_ap_vld;
output  [15:0] r18B3;
output   r18B3_ap_vld;
output  [15:0] m18B4;
output   m18B4_ap_vld;
output  [15:0] n18B4;
output   n18B4_ap_vld;
output  [15:0] o18B4;
output   o18B4_ap_vld;
output  [15:0] p18B4;
output   p18B4_ap_vld;
output  [15:0] q18B4;
output   q18B4_ap_vld;
output  [15:0] r18B4;
output   r18B4_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ap_vld;
reg b_ap_vld;
reg c_ap_vld;
reg d_ap_vld;
reg e_ap_vld;
reg f_ap_vld;
reg m18A_ap_vld;
reg n18A_ap_vld;
reg o18A_ap_vld;
reg p18A_ap_vld;
reg q18A_ap_vld;
reg r18A_ap_vld;
reg m18A2_ap_vld;
reg n18A2_ap_vld;
reg o18A2_ap_vld;
reg p18A2_ap_vld;
reg q18A2_ap_vld;
reg r18A2_ap_vld;
reg m18B_ap_vld;
reg n18B_ap_vld;
reg o18B_ap_vld;
reg p18B_ap_vld;
reg q18B_ap_vld;
reg r18B_ap_vld;
reg m18B2_ap_vld;
reg n18B2_ap_vld;
reg o18B2_ap_vld;
reg p18B2_ap_vld;
reg q18B2_ap_vld;
reg r18B2_ap_vld;
reg a2_ap_vld;
reg b2_ap_vld;
reg c2_ap_vld;
reg d2_ap_vld;
reg e2_ap_vld;
reg f2_ap_vld;
reg m18A3_ap_vld;
reg n18A3_ap_vld;
reg o18A3_ap_vld;
reg p18A3_ap_vld;
reg q18A3_ap_vld;
reg r18A3_ap_vld;
reg m18A4_ap_vld;
reg n18A4_ap_vld;
reg o18A4_ap_vld;
reg p18A4_ap_vld;
reg q18A4_ap_vld;
reg r18A4_ap_vld;
reg m18B3_ap_vld;
reg n18B3_ap_vld;
reg o18B3_ap_vld;
reg p18B3_ap_vld;
reg q18B3_ap_vld;
reg r18B3_ap_vld;
reg m18B4_ap_vld;
reg n18B4_ap_vld;
reg o18B4_ap_vld;
reg p18B4_ap_vld;
reg q18B4_ap_vld;
reg r18B4_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [9:0] varinx3_4096_12_address0;
reg    varinx3_4096_12_ce0;
wire   [33:0] varinx3_4096_12_q0;
wire   [9:0] varinx3_4096_12_address1;
reg    varinx3_4096_12_ce1;
wire   [33:0] varinx3_4096_12_q1;
wire   [9:0] varinx6A_4096_a_address0;
reg    varinx6A_4096_a_ce0;
wire   [33:0] varinx6A_4096_a_q0;
wire   [9:0] varinx6A_4096_a_address1;
reg    varinx6A_4096_a_ce1;
wire   [33:0] varinx6A_4096_a_q1;
wire   [9:0] varinx6A_4096_b_address0;
reg    varinx6A_4096_b_ce0;
wire   [33:0] varinx6A_4096_b_q0;
wire   [9:0] varinx6A_4096_b_address1;
reg    varinx6A_4096_b_ce1;
wire   [33:0] varinx6A_4096_b_q1;
wire   [9:0] varinx6B_4096_a_address0;
reg    varinx6B_4096_a_ce0;
wire   [33:0] varinx6B_4096_a_q0;
wire   [9:0] varinx6B_4096_a_address1;
reg    varinx6B_4096_a_ce1;
wire   [33:0] varinx6B_4096_a_q1;
wire   [9:0] varinx6B_4096_b_address0;
reg    varinx6B_4096_b_ce0;
wire   [33:0] varinx6B_4096_b_q0;
wire   [9:0] varinx6B_4096_b_address1;
reg    varinx6B_4096_b_ce1;
wire   [33:0] varinx6B_4096_b_q1;
wire   [9:0] varinx3_4096_12_Bot_address0;
reg    varinx3_4096_12_Bot_ce0;
wire   [33:0] varinx3_4096_12_Bot_q0;
wire   [9:0] varinx3_4096_12_Bot_address1;
reg    varinx3_4096_12_Bot_ce1;
wire   [33:0] varinx3_4096_12_Bot_q1;
wire   [9:0] varinx6A_4096_a_Bot_address0;
reg    varinx6A_4096_a_Bot_ce0;
wire   [33:0] varinx6A_4096_a_Bot_q0;
wire   [9:0] varinx6A_4096_a_Bot_address1;
reg    varinx6A_4096_a_Bot_ce1;
wire   [33:0] varinx6A_4096_a_Bot_q1;
wire   [9:0] varinx6A_4096_b_Bot_address0;
reg    varinx6A_4096_b_Bot_ce0;
wire   [33:0] varinx6A_4096_b_Bot_q0;
wire   [9:0] varinx6A_4096_b_Bot_address1;
reg    varinx6A_4096_b_Bot_ce1;
wire   [33:0] varinx6A_4096_b_Bot_q1;
wire   [9:0] varinx6B_4096_a_Bot_address0;
reg    varinx6B_4096_a_Bot_ce0;
wire   [33:0] varinx6B_4096_a_Bot_q0;
wire   [9:0] varinx6B_4096_a_Bot_address1;
reg    varinx6B_4096_a_Bot_ce1;
wire   [33:0] varinx6B_4096_a_Bot_q1;
wire   [9:0] varinx6B_4096_b_Bot_address0;
reg    varinx6B_4096_b_Bot_ce0;
wire   [33:0] varinx6B_4096_b_Bot_q0;
wire   [9:0] varinx6B_4096_b_Bot_address1;
reg    varinx6B_4096_b_Bot_ce1;
wire   [33:0] varinx6B_4096_b_Bot_q1;
wire   [31:0] tmp_fu_402_p1;
wire  signed [31:0] tmp_326_fu_416_p1;
wire   [0:0] ap_CS_fsm_state2;
wire   [15:0] inx1_fu_396_p2;
wire   [11:0] tmp_517_fu_430_p1;
wire   [11:0] varinx3_4096_12_inx2_1_1_fu_444_p4;
wire   [9:0] tmp_256_fu_464_p4;
wire   [11:0] tmp_518_fu_484_p1;
wire   [11:0] varinx3_4096_12_inx2_1_fu_498_p4;
wire   [9:0] tmp_257_fu_518_p4;
wire   [11:0] tmp_519_fu_538_p1;
wire   [11:0] varinx6A_4096_a_inx2_1_1_fu_552_p4;
wire   [9:0] tmp_258_fu_572_p4;
wire   [11:0] tmp_520_fu_592_p1;
wire   [11:0] varinx6A_4096_b_inx2_1_1_fu_606_p4;
wire   [9:0] tmp_259_fu_626_p4;
wire   [11:0] tmp_521_fu_646_p1;
wire   [11:0] varinx6A_4096_a_inx2_1_fu_660_p4;
wire   [9:0] tmp_260_fu_680_p4;
wire   [11:0] tmp_522_fu_700_p1;
wire   [11:0] varinx6A_4096_b_inx2_1_fu_714_p4;
wire   [9:0] tmp_261_fu_734_p4;
wire   [11:0] tmp_523_fu_754_p1;
wire   [11:0] varinx6B_4096_a_inx2_1_1_fu_768_p4;
wire   [9:0] tmp_262_fu_788_p4;
wire   [11:0] tmp_524_fu_808_p1;
wire   [11:0] varinx6B_4096_b_inx2_1_1_fu_822_p4;
wire   [9:0] tmp_263_fu_842_p4;
wire   [11:0] tmp_525_fu_862_p1;
wire   [11:0] varinx6B_4096_a_inx2_1_fu_876_p4;
wire   [9:0] tmp_264_fu_896_p4;
wire   [11:0] tmp_526_fu_916_p1;
wire   [11:0] varinx6B_4096_b_inx2_1_fu_930_p4;
wire   [9:0] tmp_265_fu_950_p4;
wire   [11:0] tmp_527_fu_970_p1;
wire   [11:0] varinx3_4096_12_Bot_7_fu_984_p4;
wire   [9:0] tmp_266_fu_1004_p4;
wire   [11:0] tmp_528_fu_1024_p1;
wire   [11:0] varinx3_4096_12_Bot_6_fu_1038_p4;
wire   [9:0] tmp_267_fu_1058_p4;
wire   [11:0] tmp_529_fu_1078_p1;
wire   [11:0] varinx6A_4096_a_Bot_7_fu_1092_p4;
wire   [9:0] tmp_268_fu_1112_p4;
wire   [11:0] tmp_530_fu_1132_p1;
wire   [11:0] varinx6A_4096_b_Bot_7_fu_1146_p4;
wire   [9:0] tmp_269_fu_1166_p4;
wire   [11:0] tmp_531_fu_1186_p1;
wire   [11:0] varinx6A_4096_a_Bot_6_fu_1200_p4;
wire   [9:0] tmp_270_fu_1220_p4;
wire   [11:0] tmp_532_fu_1240_p1;
wire   [11:0] varinx6A_4096_b_Bot_6_fu_1254_p4;
wire   [9:0] tmp_271_fu_1274_p4;
wire   [11:0] tmp_533_fu_1294_p1;
wire   [11:0] varinx6B_4096_a_Bot_7_fu_1308_p4;
wire   [9:0] tmp_272_fu_1328_p4;
wire   [11:0] tmp_534_fu_1348_p1;
wire   [11:0] varinx6B_4096_b_Bot_7_fu_1362_p4;
wire   [9:0] tmp_273_fu_1382_p4;
wire   [11:0] tmp_535_fu_1402_p1;
wire   [11:0] varinx6B_4096_a_Bot_6_fu_1416_p4;
wire   [9:0] tmp_274_fu_1436_p4;
wire   [11:0] tmp_536_fu_1456_p1;
wire   [11:0] varinx6B_4096_b_Bot_6_fu_1470_p4;
wire   [9:0] tmp_275_fu_1490_p4;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
end

load_next_12_4096bkb #(
    .DataWidth( 34 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
varinx3_4096_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(varinx3_4096_12_address0),
    .ce0(varinx3_4096_12_ce0),
    .q0(varinx3_4096_12_q0),
    .address1(varinx3_4096_12_address1),
    .ce1(varinx3_4096_12_ce1),
    .q1(varinx3_4096_12_q1)
);

load_next_12_4096cud #(
    .DataWidth( 34 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
varinx6A_4096_a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(varinx6A_4096_a_address0),
    .ce0(varinx6A_4096_a_ce0),
    .q0(varinx6A_4096_a_q0),
    .address1(varinx6A_4096_a_address1),
    .ce1(varinx6A_4096_a_ce1),
    .q1(varinx6A_4096_a_q1)
);

load_next_12_4096dEe #(
    .DataWidth( 34 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
varinx6A_4096_b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(varinx6A_4096_b_address0),
    .ce0(varinx6A_4096_b_ce0),
    .q0(varinx6A_4096_b_q0),
    .address1(varinx6A_4096_b_address1),
    .ce1(varinx6A_4096_b_ce1),
    .q1(varinx6A_4096_b_q1)
);

load_next_12_4096eOg #(
    .DataWidth( 34 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
varinx6B_4096_a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(varinx6B_4096_a_address0),
    .ce0(varinx6B_4096_a_ce0),
    .q0(varinx6B_4096_a_q0),
    .address1(varinx6B_4096_a_address1),
    .ce1(varinx6B_4096_a_ce1),
    .q1(varinx6B_4096_a_q1)
);

load_next_12_4096fYi #(
    .DataWidth( 34 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
varinx6B_4096_b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(varinx6B_4096_b_address0),
    .ce0(varinx6B_4096_b_ce0),
    .q0(varinx6B_4096_b_q0),
    .address1(varinx6B_4096_b_address1),
    .ce1(varinx6B_4096_b_ce1),
    .q1(varinx6B_4096_b_q1)
);

load_next_12_4096g8j #(
    .DataWidth( 34 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
varinx3_4096_12_Bot_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(varinx3_4096_12_Bot_address0),
    .ce0(varinx3_4096_12_Bot_ce0),
    .q0(varinx3_4096_12_Bot_q0),
    .address1(varinx3_4096_12_Bot_address1),
    .ce1(varinx3_4096_12_Bot_ce1),
    .q1(varinx3_4096_12_Bot_q1)
);

load_next_12_4096cud #(
    .DataWidth( 34 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
varinx6A_4096_a_Bot_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(varinx6A_4096_a_Bot_address0),
    .ce0(varinx6A_4096_a_Bot_ce0),
    .q0(varinx6A_4096_a_Bot_q0),
    .address1(varinx6A_4096_a_Bot_address1),
    .ce1(varinx6A_4096_a_Bot_ce1),
    .q1(varinx6A_4096_a_Bot_q1)
);

load_next_12_4096ibs #(
    .DataWidth( 34 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
varinx6A_4096_b_Bot_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(varinx6A_4096_b_Bot_address0),
    .ce0(varinx6A_4096_b_Bot_ce0),
    .q0(varinx6A_4096_b_Bot_q0),
    .address1(varinx6A_4096_b_Bot_address1),
    .ce1(varinx6A_4096_b_Bot_ce1),
    .q1(varinx6A_4096_b_Bot_q1)
);

load_next_12_4096jbC #(
    .DataWidth( 34 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
varinx6B_4096_a_Bot_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(varinx6B_4096_a_Bot_address0),
    .ce0(varinx6B_4096_a_Bot_ce0),
    .q0(varinx6B_4096_a_Bot_q0),
    .address1(varinx6B_4096_a_Bot_address1),
    .ce1(varinx6B_4096_a_Bot_ce1),
    .q1(varinx6B_4096_a_Bot_q1)
);

load_next_12_4096kbM #(
    .DataWidth( 34 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
varinx6B_4096_b_Bot_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(varinx6B_4096_b_Bot_address0),
    .ce0(varinx6B_4096_b_Bot_ce0),
    .q0(varinx6B_4096_b_Bot_q0),
    .address1(varinx6B_4096_b_Bot_address1),
    .ce1(varinx6B_4096_b_Bot_ce1),
    .q1(varinx6B_4096_b_Bot_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a2_ap_vld = 1'b1;
    end else begin
        a2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_ap_vld = 1'b1;
    end else begin
        a_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b2_ap_vld = 1'b1;
    end else begin
        b2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_ap_vld = 1'b1;
    end else begin
        b_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c2_ap_vld = 1'b1;
    end else begin
        c2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_ap_vld = 1'b1;
    end else begin
        c_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d2_ap_vld = 1'b1;
    end else begin
        d2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_ap_vld = 1'b1;
    end else begin
        d_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        e2_ap_vld = 1'b1;
    end else begin
        e2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        e_ap_vld = 1'b1;
    end else begin
        e_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f2_ap_vld = 1'b1;
    end else begin
        f2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_ap_vld = 1'b1;
    end else begin
        f_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m18A2_ap_vld = 1'b1;
    end else begin
        m18A2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m18A3_ap_vld = 1'b1;
    end else begin
        m18A3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m18A4_ap_vld = 1'b1;
    end else begin
        m18A4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m18A_ap_vld = 1'b1;
    end else begin
        m18A_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m18B2_ap_vld = 1'b1;
    end else begin
        m18B2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m18B3_ap_vld = 1'b1;
    end else begin
        m18B3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m18B4_ap_vld = 1'b1;
    end else begin
        m18B4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m18B_ap_vld = 1'b1;
    end else begin
        m18B_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n18A2_ap_vld = 1'b1;
    end else begin
        n18A2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n18A3_ap_vld = 1'b1;
    end else begin
        n18A3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n18A4_ap_vld = 1'b1;
    end else begin
        n18A4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n18A_ap_vld = 1'b1;
    end else begin
        n18A_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n18B2_ap_vld = 1'b1;
    end else begin
        n18B2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n18B3_ap_vld = 1'b1;
    end else begin
        n18B3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n18B4_ap_vld = 1'b1;
    end else begin
        n18B4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n18B_ap_vld = 1'b1;
    end else begin
        n18B_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o18A2_ap_vld = 1'b1;
    end else begin
        o18A2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o18A3_ap_vld = 1'b1;
    end else begin
        o18A3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o18A4_ap_vld = 1'b1;
    end else begin
        o18A4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o18A_ap_vld = 1'b1;
    end else begin
        o18A_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o18B2_ap_vld = 1'b1;
    end else begin
        o18B2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o18B3_ap_vld = 1'b1;
    end else begin
        o18B3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o18B4_ap_vld = 1'b1;
    end else begin
        o18B4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o18B_ap_vld = 1'b1;
    end else begin
        o18B_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p18A2_ap_vld = 1'b1;
    end else begin
        p18A2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p18A3_ap_vld = 1'b1;
    end else begin
        p18A3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p18A4_ap_vld = 1'b1;
    end else begin
        p18A4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p18A_ap_vld = 1'b1;
    end else begin
        p18A_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p18B2_ap_vld = 1'b1;
    end else begin
        p18B2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p18B3_ap_vld = 1'b1;
    end else begin
        p18B3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p18B4_ap_vld = 1'b1;
    end else begin
        p18B4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p18B_ap_vld = 1'b1;
    end else begin
        p18B_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q18A2_ap_vld = 1'b1;
    end else begin
        q18A2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q18A3_ap_vld = 1'b1;
    end else begin
        q18A3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q18A4_ap_vld = 1'b1;
    end else begin
        q18A4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q18A_ap_vld = 1'b1;
    end else begin
        q18A_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q18B2_ap_vld = 1'b1;
    end else begin
        q18B2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q18B3_ap_vld = 1'b1;
    end else begin
        q18B3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q18B4_ap_vld = 1'b1;
    end else begin
        q18B4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        q18B_ap_vld = 1'b1;
    end else begin
        q18B_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r18A2_ap_vld = 1'b1;
    end else begin
        r18A2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r18A3_ap_vld = 1'b1;
    end else begin
        r18A3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r18A4_ap_vld = 1'b1;
    end else begin
        r18A4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r18A_ap_vld = 1'b1;
    end else begin
        r18A_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r18B2_ap_vld = 1'b1;
    end else begin
        r18B2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r18B3_ap_vld = 1'b1;
    end else begin
        r18B3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r18B4_ap_vld = 1'b1;
    end else begin
        r18B4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r18B_ap_vld = 1'b1;
    end else begin
        r18B_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx3_4096_12_Bot_ce0 = 1'b1;
    end else begin
        varinx3_4096_12_Bot_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx3_4096_12_Bot_ce1 = 1'b1;
    end else begin
        varinx3_4096_12_Bot_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx3_4096_12_ce0 = 1'b1;
    end else begin
        varinx3_4096_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx3_4096_12_ce1 = 1'b1;
    end else begin
        varinx3_4096_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6A_4096_a_Bot_ce0 = 1'b1;
    end else begin
        varinx6A_4096_a_Bot_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6A_4096_a_Bot_ce1 = 1'b1;
    end else begin
        varinx6A_4096_a_Bot_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6A_4096_a_ce0 = 1'b1;
    end else begin
        varinx6A_4096_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6A_4096_a_ce1 = 1'b1;
    end else begin
        varinx6A_4096_a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6A_4096_b_Bot_ce0 = 1'b1;
    end else begin
        varinx6A_4096_b_Bot_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6A_4096_b_Bot_ce1 = 1'b1;
    end else begin
        varinx6A_4096_b_Bot_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6A_4096_b_ce0 = 1'b1;
    end else begin
        varinx6A_4096_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6A_4096_b_ce1 = 1'b1;
    end else begin
        varinx6A_4096_b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6B_4096_a_Bot_ce0 = 1'b1;
    end else begin
        varinx6B_4096_a_Bot_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6B_4096_a_Bot_ce1 = 1'b1;
    end else begin
        varinx6B_4096_a_Bot_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6B_4096_a_ce0 = 1'b1;
    end else begin
        varinx6B_4096_a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6B_4096_a_ce1 = 1'b1;
    end else begin
        varinx6B_4096_a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6B_4096_b_Bot_ce0 = 1'b1;
    end else begin
        varinx6B_4096_b_Bot_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6B_4096_b_Bot_ce1 = 1'b1;
    end else begin
        varinx6B_4096_b_Bot_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6B_4096_b_ce0 = 1'b1;
    end else begin
        varinx6B_4096_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        varinx6B_4096_b_ce1 = 1'b1;
    end else begin
        varinx6B_4096_b_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a = $signed(tmp_517_fu_430_p1);

assign a2 = $signed(tmp_527_fu_970_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign b = $signed(varinx3_4096_12_inx2_1_1_fu_444_p4);

assign b2 = $signed(varinx3_4096_12_Bot_7_fu_984_p4);

assign c = tmp_256_fu_464_p4;

assign c2 = tmp_266_fu_1004_p4;

assign d = $signed(tmp_518_fu_484_p1);

assign d2 = $signed(tmp_528_fu_1024_p1);

assign e = $signed(varinx3_4096_12_inx2_1_fu_498_p4);

assign e2 = $signed(varinx3_4096_12_Bot_6_fu_1038_p4);

assign f = tmp_257_fu_518_p4;

assign f2 = tmp_267_fu_1058_p4;

assign inx1_fu_396_p2 = (ap_const_lv16_200 + num_nt);

assign m18A = $signed(tmp_519_fu_538_p1);

assign m18A2 = $signed(tmp_521_fu_646_p1);

assign m18A3 = $signed(tmp_529_fu_1078_p1);

assign m18A4 = $signed(tmp_531_fu_1186_p1);

assign m18B = $signed(tmp_523_fu_754_p1);

assign m18B2 = $signed(tmp_525_fu_862_p1);

assign m18B3 = $signed(tmp_533_fu_1294_p1);

assign m18B4 = $signed(tmp_535_fu_1402_p1);

assign n18A = $signed(varinx6A_4096_a_inx2_1_1_fu_552_p4);

assign n18A2 = $signed(varinx6A_4096_a_inx2_1_fu_660_p4);

assign n18A3 = $signed(varinx6A_4096_a_Bot_7_fu_1092_p4);

assign n18A4 = $signed(varinx6A_4096_a_Bot_6_fu_1200_p4);

assign n18B = $signed(varinx6B_4096_a_inx2_1_1_fu_768_p4);

assign n18B2 = $signed(varinx6B_4096_a_inx2_1_fu_876_p4);

assign n18B3 = $signed(varinx6B_4096_a_Bot_7_fu_1308_p4);

assign n18B4 = $signed(varinx6B_4096_a_Bot_6_fu_1416_p4);

assign o18A = tmp_258_fu_572_p4;

assign o18A2 = tmp_260_fu_680_p4;

assign o18A3 = tmp_268_fu_1112_p4;

assign o18A4 = tmp_270_fu_1220_p4;

assign o18B = tmp_262_fu_788_p4;

assign o18B2 = tmp_264_fu_896_p4;

assign o18B3 = tmp_272_fu_1328_p4;

assign o18B4 = tmp_274_fu_1436_p4;

assign p18A = $signed(tmp_520_fu_592_p1);

assign p18A2 = $signed(tmp_522_fu_700_p1);

assign p18A3 = $signed(tmp_530_fu_1132_p1);

assign p18A4 = $signed(tmp_532_fu_1240_p1);

assign p18B = $signed(tmp_524_fu_808_p1);

assign p18B2 = $signed(tmp_526_fu_916_p1);

assign p18B3 = $signed(tmp_534_fu_1348_p1);

assign p18B4 = $signed(tmp_536_fu_1456_p1);

assign q18A = $signed(varinx6A_4096_b_inx2_1_1_fu_606_p4);

assign q18A2 = $signed(varinx6A_4096_b_inx2_1_fu_714_p4);

assign q18A3 = $signed(varinx6A_4096_b_Bot_7_fu_1146_p4);

assign q18A4 = $signed(varinx6A_4096_b_Bot_6_fu_1254_p4);

assign q18B = $signed(varinx6B_4096_b_inx2_1_1_fu_822_p4);

assign q18B2 = $signed(varinx6B_4096_b_inx2_1_fu_930_p4);

assign q18B3 = $signed(varinx6B_4096_b_Bot_7_fu_1362_p4);

assign q18B4 = $signed(varinx6B_4096_b_Bot_6_fu_1470_p4);

assign r18A = tmp_259_fu_626_p4;

assign r18A2 = tmp_261_fu_734_p4;

assign r18A3 = tmp_269_fu_1166_p4;

assign r18A4 = tmp_271_fu_1274_p4;

assign r18B = tmp_263_fu_842_p4;

assign r18B2 = tmp_265_fu_950_p4;

assign r18B3 = tmp_273_fu_1382_p4;

assign r18B4 = tmp_275_fu_1490_p4;

assign tmp_256_fu_464_p4 = {{varinx3_4096_12_q0[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_257_fu_518_p4 = {{varinx3_4096_12_q1[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_258_fu_572_p4 = {{varinx6A_4096_a_q0[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_259_fu_626_p4 = {{varinx6A_4096_b_q0[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_260_fu_680_p4 = {{varinx6A_4096_a_q1[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_261_fu_734_p4 = {{varinx6A_4096_b_q1[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_262_fu_788_p4 = {{varinx6B_4096_a_q0[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_263_fu_842_p4 = {{varinx6B_4096_b_q0[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_264_fu_896_p4 = {{varinx6B_4096_a_q1[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_265_fu_950_p4 = {{varinx6B_4096_b_q1[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_266_fu_1004_p4 = {{varinx3_4096_12_Bot_q0[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_267_fu_1058_p4 = {{varinx3_4096_12_Bot_q1[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_268_fu_1112_p4 = {{varinx6A_4096_a_Bot_q0[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_269_fu_1166_p4 = {{varinx6A_4096_b_Bot_q0[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_270_fu_1220_p4 = {{varinx6A_4096_a_Bot_q1[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_271_fu_1274_p4 = {{varinx6A_4096_b_Bot_q1[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_272_fu_1328_p4 = {{varinx6B_4096_a_Bot_q0[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_273_fu_1382_p4 = {{varinx6B_4096_b_Bot_q0[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_274_fu_1436_p4 = {{varinx6B_4096_a_Bot_q1[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_275_fu_1490_p4 = {{varinx6B_4096_b_Bot_q1[ap_const_lv32_21 : ap_const_lv32_18]}};

assign tmp_326_fu_416_p1 = $signed(inx1_fu_396_p2);

assign tmp_517_fu_430_p1 = varinx3_4096_12_q0[11:0];

assign tmp_518_fu_484_p1 = varinx3_4096_12_q1[11:0];

assign tmp_519_fu_538_p1 = varinx6A_4096_a_q0[11:0];

assign tmp_520_fu_592_p1 = varinx6A_4096_b_q0[11:0];

assign tmp_521_fu_646_p1 = varinx6A_4096_a_q1[11:0];

assign tmp_522_fu_700_p1 = varinx6A_4096_b_q1[11:0];

assign tmp_523_fu_754_p1 = varinx6B_4096_a_q0[11:0];

assign tmp_524_fu_808_p1 = varinx6B_4096_b_q0[11:0];

assign tmp_525_fu_862_p1 = varinx6B_4096_a_q1[11:0];

assign tmp_526_fu_916_p1 = varinx6B_4096_b_q1[11:0];

assign tmp_527_fu_970_p1 = varinx3_4096_12_Bot_q0[11:0];

assign tmp_528_fu_1024_p1 = varinx3_4096_12_Bot_q1[11:0];

assign tmp_529_fu_1078_p1 = varinx6A_4096_a_Bot_q0[11:0];

assign tmp_530_fu_1132_p1 = varinx6A_4096_b_Bot_q0[11:0];

assign tmp_531_fu_1186_p1 = varinx6A_4096_a_Bot_q1[11:0];

assign tmp_532_fu_1240_p1 = varinx6A_4096_b_Bot_q1[11:0];

assign tmp_533_fu_1294_p1 = varinx6B_4096_a_Bot_q0[11:0];

assign tmp_534_fu_1348_p1 = varinx6B_4096_b_Bot_q0[11:0];

assign tmp_535_fu_1402_p1 = varinx6B_4096_a_Bot_q1[11:0];

assign tmp_536_fu_1456_p1 = varinx6B_4096_b_Bot_q1[11:0];

assign tmp_fu_402_p1 = num_nt;

assign varinx3_4096_12_Bot_6_fu_1038_p4 = {{varinx3_4096_12_Bot_q1[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx3_4096_12_Bot_7_fu_984_p4 = {{varinx3_4096_12_Bot_q0[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx3_4096_12_Bot_address0 = tmp_fu_402_p1;

assign varinx3_4096_12_Bot_address1 = tmp_326_fu_416_p1;

assign varinx3_4096_12_address0 = tmp_fu_402_p1;

assign varinx3_4096_12_address1 = tmp_326_fu_416_p1;

assign varinx3_4096_12_inx2_1_1_fu_444_p4 = {{varinx3_4096_12_q0[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx3_4096_12_inx2_1_fu_498_p4 = {{varinx3_4096_12_q1[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6A_4096_a_Bot_6_fu_1200_p4 = {{varinx6A_4096_a_Bot_q1[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6A_4096_a_Bot_7_fu_1092_p4 = {{varinx6A_4096_a_Bot_q0[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6A_4096_a_Bot_address0 = tmp_fu_402_p1;

assign varinx6A_4096_a_Bot_address1 = tmp_326_fu_416_p1;

assign varinx6A_4096_a_address0 = tmp_fu_402_p1;

assign varinx6A_4096_a_address1 = tmp_326_fu_416_p1;

assign varinx6A_4096_a_inx2_1_1_fu_552_p4 = {{varinx6A_4096_a_q0[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6A_4096_a_inx2_1_fu_660_p4 = {{varinx6A_4096_a_q1[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6A_4096_b_Bot_6_fu_1254_p4 = {{varinx6A_4096_b_Bot_q1[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6A_4096_b_Bot_7_fu_1146_p4 = {{varinx6A_4096_b_Bot_q0[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6A_4096_b_Bot_address0 = tmp_fu_402_p1;

assign varinx6A_4096_b_Bot_address1 = tmp_326_fu_416_p1;

assign varinx6A_4096_b_address0 = tmp_fu_402_p1;

assign varinx6A_4096_b_address1 = tmp_326_fu_416_p1;

assign varinx6A_4096_b_inx2_1_1_fu_606_p4 = {{varinx6A_4096_b_q0[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6A_4096_b_inx2_1_fu_714_p4 = {{varinx6A_4096_b_q1[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6B_4096_a_Bot_6_fu_1416_p4 = {{varinx6B_4096_a_Bot_q1[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6B_4096_a_Bot_7_fu_1308_p4 = {{varinx6B_4096_a_Bot_q0[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6B_4096_a_Bot_address0 = tmp_fu_402_p1;

assign varinx6B_4096_a_Bot_address1 = tmp_326_fu_416_p1;

assign varinx6B_4096_a_address0 = tmp_fu_402_p1;

assign varinx6B_4096_a_address1 = tmp_326_fu_416_p1;

assign varinx6B_4096_a_inx2_1_1_fu_768_p4 = {{varinx6B_4096_a_q0[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6B_4096_a_inx2_1_fu_876_p4 = {{varinx6B_4096_a_q1[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6B_4096_b_Bot_6_fu_1470_p4 = {{varinx6B_4096_b_Bot_q1[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6B_4096_b_Bot_7_fu_1362_p4 = {{varinx6B_4096_b_Bot_q0[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6B_4096_b_Bot_address0 = tmp_fu_402_p1;

assign varinx6B_4096_b_Bot_address1 = tmp_326_fu_416_p1;

assign varinx6B_4096_b_address0 = tmp_fu_402_p1;

assign varinx6B_4096_b_address1 = tmp_326_fu_416_p1;

assign varinx6B_4096_b_inx2_1_1_fu_822_p4 = {{varinx6B_4096_b_q0[ap_const_lv32_17 : ap_const_lv32_C]}};

assign varinx6B_4096_b_inx2_1_fu_930_p4 = {{varinx6B_4096_b_q1[ap_const_lv32_17 : ap_const_lv32_C]}};

endmodule //load_next_12_4096
