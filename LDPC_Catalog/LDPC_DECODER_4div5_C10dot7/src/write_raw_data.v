// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_raw_data (
        dat,
        r_dat0_address0,
        r_dat0_ce0,
        r_dat0_we0,
        r_dat0_d0,
        r_dat1_address0,
        r_dat1_ce0,
        r_dat1_we0,
        r_dat1_d0,
        r_dat2_address0,
        r_dat2_ce0,
        r_dat2_we0,
        r_dat2_d0,
        r_dat3_address0,
        r_dat3_ce0,
        r_dat3_we0,
        r_dat3_d0,
        r_dat4_address0,
        r_dat4_ce0,
        r_dat4_we0,
        r_dat4_d0,
        r_dat5_address0,
        r_dat5_ce0,
        r_dat5_we0,
        r_dat5_d0,
        r_dat6_address0,
        r_dat6_ce0,
        r_dat6_we0,
        r_dat6_d0,
        r_dat7_address0,
        r_dat7_ce0,
        r_dat7_we0,
        r_dat7_d0,
        r_dat8_address0,
        r_dat8_ce0,
        r_dat8_we0,
        r_dat8_d0,
        r_dat9_address0,
        r_dat9_ce0,
        r_dat9_we0,
        r_dat9_d0,
        r_dat10_address0,
        r_dat10_ce0,
        r_dat10_we0,
        r_dat10_d0,
        mem_i,
        mem_o,
        mem_o_ap_vld,
        pos_r_i,
        pos_r_o,
        pos_r_o_ap_vld,
        trig
);

parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_A = 16'b1010;
parameter    ap_const_lv16_9 = 16'b1001;
parameter    ap_const_lv16_8 = 16'b1000;
parameter    ap_const_lv16_7 = 16'b111;
parameter    ap_const_lv16_6 = 16'b110;
parameter    ap_const_lv16_5 = 16'b101;
parameter    ap_const_lv16_4 = 16'b100;
parameter    ap_const_lv16_3 = 16'b11;
parameter    ap_const_lv16_2 = 16'b10;
parameter    ap_const_lv16_1 = 16'b1;

input  [7:0] dat;
output  [10:0] r_dat0_address0;
output   r_dat0_ce0;
output   r_dat0_we0;
output  [7:0] r_dat0_d0;
output  [10:0] r_dat1_address0;
output   r_dat1_ce0;
output   r_dat1_we0;
output  [7:0] r_dat1_d0;
output  [10:0] r_dat2_address0;
output   r_dat2_ce0;
output   r_dat2_we0;
output  [7:0] r_dat2_d0;
output  [10:0] r_dat3_address0;
output   r_dat3_ce0;
output   r_dat3_we0;
output  [7:0] r_dat3_d0;
output  [9:0] r_dat4_address0;
output   r_dat4_ce0;
output   r_dat4_we0;
output  [7:0] r_dat4_d0;
output  [9:0] r_dat5_address0;
output   r_dat5_ce0;
output   r_dat5_we0;
output  [7:0] r_dat5_d0;
output  [9:0] r_dat6_address0;
output   r_dat6_ce0;
output   r_dat6_we0;
output  [7:0] r_dat6_d0;
output  [9:0] r_dat7_address0;
output   r_dat7_ce0;
output   r_dat7_we0;
output  [7:0] r_dat7_d0;
output  [9:0] r_dat8_address0;
output   r_dat8_ce0;
output   r_dat8_we0;
output  [7:0] r_dat8_d0;
output  [9:0] r_dat9_address0;
output   r_dat9_ce0;
output   r_dat9_we0;
output  [7:0] r_dat9_d0;
output  [9:0] r_dat10_address0;
output   r_dat10_ce0;
output   r_dat10_we0;
output  [7:0] r_dat10_d0;
input  [15:0] mem_i;
output  [15:0] mem_o;
output   mem_o_ap_vld;
input  [15:0] pos_r_i;
output  [15:0] pos_r_o;
output   pos_r_o_ap_vld;
input  [11:0] trig;

reg r_dat0_we0;
reg r_dat1_we0;
reg r_dat2_we0;
reg r_dat3_we0;
reg r_dat4_we0;
reg r_dat5_we0;
reg r_dat6_we0;
reg r_dat7_we0;
reg r_dat8_we0;
reg r_dat9_we0;
reg r_dat10_we0;
reg[15:0] mem_o;
reg mem_o_ap_vld;
reg[15:0] pos_r_o;

reg   [15:0] pos_new_phi_fu_208_p4;
wire   [0:0] tmp_12_fu_293_p2;
wire   [15:0] tmp_11_fu_278_p2;
wire  signed [31:0] tmp_10_fu_223_p1;
wire   [15:0] mem_load_load_fu_215_p1;
wire  signed [31:0] tmp_s_fu_228_p1;
wire  signed [31:0] tmp_9_fu_233_p1;
wire  signed [31:0] tmp_8_fu_238_p1;
wire  signed [31:0] tmp_7_fu_243_p1;
wire  signed [31:0] tmp_6_fu_248_p1;
wire  signed [31:0] tmp_5_fu_253_p1;
wire  signed [31:0] tmp_4_fu_258_p1;
wire  signed [31:0] tmp_3_fu_263_p1;
wire  signed [31:0] tmp_2_fu_268_p1;
wire  signed [31:0] tmp_1_fu_273_p1;
wire   [15:0] tmp_13_fu_299_p2;
wire   [15:0] extLd_fu_289_p1;

always @ (*) begin
    if (~(tmp_12_fu_293_p2 == 1'b0)) begin
        mem_o = tmp_13_fu_299_p2;
    end else begin
        mem_o = mem_i;
    end
end

always @ (*) begin
    if (~(tmp_12_fu_293_p2 == 1'b0)) begin
        mem_o_ap_vld = 1'b1;
    end else begin
        mem_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_12_fu_293_p2 == 1'b0)) begin
        pos_new_phi_fu_208_p4 = tmp_11_fu_278_p2;
    end else if (~(tmp_12_fu_293_p2 == 1'b0)) begin
        pos_new_phi_fu_208_p4 = ap_const_lv16_0;
    end else begin
        pos_new_phi_fu_208_p4 = 'bx;
    end
end

always @ (*) begin
    pos_r_o = pos_new_phi_fu_208_p4;
end

assign pos_r_o_ap_vld = 1'b1;

assign r_dat0_ce0 = 1'b1;

always @ (*) begin
    if ((ap_const_lv16_0 == mem_load_load_fu_215_p1)) begin
        r_dat0_we0 = 1'b1;
    end else begin
        r_dat0_we0 = 1'b0;
    end
end

assign r_dat10_ce0 = 1'b1;

always @ (*) begin
    if ((mem_load_load_fu_215_p1 == ap_const_lv16_A)) begin
        r_dat10_we0 = 1'b1;
    end else begin
        r_dat10_we0 = 1'b0;
    end
end

assign r_dat1_ce0 = 1'b1;

always @ (*) begin
    if ((mem_load_load_fu_215_p1 == ap_const_lv16_1)) begin
        r_dat1_we0 = 1'b1;
    end else begin
        r_dat1_we0 = 1'b0;
    end
end

assign r_dat2_ce0 = 1'b1;

always @ (*) begin
    if ((mem_load_load_fu_215_p1 == ap_const_lv16_2)) begin
        r_dat2_we0 = 1'b1;
    end else begin
        r_dat2_we0 = 1'b0;
    end
end

assign r_dat3_ce0 = 1'b1;

always @ (*) begin
    if ((mem_load_load_fu_215_p1 == ap_const_lv16_3)) begin
        r_dat3_we0 = 1'b1;
    end else begin
        r_dat3_we0 = 1'b0;
    end
end

assign r_dat4_ce0 = 1'b1;

always @ (*) begin
    if ((mem_load_load_fu_215_p1 == ap_const_lv16_4)) begin
        r_dat4_we0 = 1'b1;
    end else begin
        r_dat4_we0 = 1'b0;
    end
end

assign r_dat5_ce0 = 1'b1;

always @ (*) begin
    if ((mem_load_load_fu_215_p1 == ap_const_lv16_5)) begin
        r_dat5_we0 = 1'b1;
    end else begin
        r_dat5_we0 = 1'b0;
    end
end

assign r_dat6_ce0 = 1'b1;

always @ (*) begin
    if ((mem_load_load_fu_215_p1 == ap_const_lv16_6)) begin
        r_dat6_we0 = 1'b1;
    end else begin
        r_dat6_we0 = 1'b0;
    end
end

assign r_dat7_ce0 = 1'b1;

always @ (*) begin
    if ((mem_load_load_fu_215_p1 == ap_const_lv16_7)) begin
        r_dat7_we0 = 1'b1;
    end else begin
        r_dat7_we0 = 1'b0;
    end
end

assign r_dat8_ce0 = 1'b1;

always @ (*) begin
    if ((mem_load_load_fu_215_p1 == ap_const_lv16_8)) begin
        r_dat8_we0 = 1'b1;
    end else begin
        r_dat8_we0 = 1'b0;
    end
end

assign r_dat9_ce0 = 1'b1;

always @ (*) begin
    if ((mem_load_load_fu_215_p1 == ap_const_lv16_9)) begin
        r_dat9_we0 = 1'b1;
    end else begin
        r_dat9_we0 = 1'b0;
    end
end

assign extLd_fu_289_p1 = trig;

assign mem_load_load_fu_215_p1 = mem_i;

assign r_dat0_address0 = tmp_1_fu_273_p1;

assign r_dat0_d0 = dat;

assign r_dat10_address0 = tmp_10_fu_223_p1;

assign r_dat10_d0 = dat;

assign r_dat1_address0 = tmp_2_fu_268_p1;

assign r_dat1_d0 = dat;

assign r_dat2_address0 = tmp_3_fu_263_p1;

assign r_dat2_d0 = dat;

assign r_dat3_address0 = tmp_4_fu_258_p1;

assign r_dat3_d0 = dat;

assign r_dat4_address0 = tmp_5_fu_253_p1;

assign r_dat4_d0 = dat;

assign r_dat5_address0 = tmp_6_fu_248_p1;

assign r_dat5_d0 = dat;

assign r_dat6_address0 = tmp_7_fu_243_p1;

assign r_dat6_d0 = dat;

assign r_dat7_address0 = tmp_8_fu_238_p1;

assign r_dat7_d0 = dat;

assign r_dat8_address0 = tmp_9_fu_233_p1;

assign r_dat8_d0 = dat;

assign r_dat9_address0 = tmp_s_fu_228_p1;

assign r_dat9_d0 = dat;

assign tmp_10_fu_223_p1 = $signed(pos_r_i);

assign tmp_11_fu_278_p2 = (pos_r_i + ap_const_lv16_1);

assign tmp_12_fu_293_p2 = ((tmp_11_fu_278_p2 == extLd_fu_289_p1) ? 1'b1 : 1'b0);

assign tmp_13_fu_299_p2 = (mem_i + ap_const_lv16_1);

assign tmp_1_fu_273_p1 = $signed(pos_r_i);

assign tmp_2_fu_268_p1 = $signed(pos_r_i);

assign tmp_3_fu_263_p1 = $signed(pos_r_i);

assign tmp_4_fu_258_p1 = $signed(pos_r_i);

assign tmp_5_fu_253_p1 = $signed(pos_r_i);

assign tmp_6_fu_248_p1 = $signed(pos_r_i);

assign tmp_7_fu_243_p1 = $signed(pos_r_i);

assign tmp_8_fu_238_p1 = $signed(pos_r_i);

assign tmp_9_fu_233_p1 = $signed(pos_r_i);

assign tmp_s_fu_228_p1 = $signed(pos_r_i);

endmodule //write_raw_data
