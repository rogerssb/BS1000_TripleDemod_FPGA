// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="LDPC_Div,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg676-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.779000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=39,HLS_SYN_LUT=134}" *)

module LDPC_Div (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        reset,
        rd_clk_out,
        rd_clk_out_ap_vld,
        clk_div,
        block_V
);

parameter    ap_ST_fsm_state1 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv16_400 = 16'b10000000000;
parameter    ap_const_lv16_1000 = 16'b1000000000000;
parameter    ap_const_lv16_1 = 16'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   reset;
output   rd_clk_out;
output   rd_clk_out_ap_vld;
input  [15:0] clk_div;
input  [1:0] block_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rd_clk_out;
reg rd_clk_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [15:0] out_count;
reg   [15:0] count;
reg   [15:0] max;
reg   [0:0] out_count_flag_1_phi_fu_72_p4;
wire   [0:0] or_cond_fu_185_p2;
wire   [0:0] not_or_cond3_fu_123_p2;
wire   [15:0] tmp_5_fu_191_p2;
reg   [15:0] out_count_new_1_phi_fu_82_p4;
reg   [15:0] count_new_phi_fu_92_p4;
wire   [15:0] tmp_2_fu_164_p3;
wire   [0:0] or_cond3_fu_117_p2;
wire   [15:0] storemerge_cast_cast_fu_144_p3;
wire   [0:0] tmp_fu_111_p2;
wire   [0:0] or_cond3_fu_117_p1;
wire   [0:0] tmp_1_fu_138_p2;
wire   [15:0] count_load_op_fu_158_p2;
wire   [15:0] out_count_load_s_fu_130_p3;
wire   [0:0] tmp_3_fu_173_p2;
wire   [0:0] tmp_4_fu_179_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'b1;
#0 out_count = 16'b0000000000000000;
#0 count = 16'b0000000000000000;
#0 max = 16'b1001110001000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        count <= count_new_phi_fu_92_p4;
        max[3] <= storemerge_cast_cast_fu_144_p3[3];
max[10 : 7] <= storemerge_cast_cast_fu_144_p3[10 : 7];
max[12] <= storemerge_cast_cast_fu_144_p3[12];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(out_count_flag_1_phi_fu_72_p4 == 1'b0))) begin
        out_count <= out_count_new_1_phi_fu_82_p4;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        if ((or_cond_fu_185_p2 == 1'b0)) begin
            count_new_phi_fu_92_p4 = tmp_2_fu_164_p3;
        end else if (~(or_cond_fu_185_p2 == 1'b0)) begin
            count_new_phi_fu_92_p4 = ap_const_lv16_0;
        end else begin
            count_new_phi_fu_92_p4 = 'bx;
        end
    end else begin
        count_new_phi_fu_92_p4 = 'bx;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        if ((or_cond_fu_185_p2 == 1'b0)) begin
            out_count_flag_1_phi_fu_72_p4 = not_or_cond3_fu_123_p2;
        end else if (~(or_cond_fu_185_p2 == 1'b0)) begin
            out_count_flag_1_phi_fu_72_p4 = 1'b1;
        end else begin
            out_count_flag_1_phi_fu_72_p4 = 'bx;
        end
    end else begin
        out_count_flag_1_phi_fu_72_p4 = 'bx;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        if ((or_cond_fu_185_p2 == 1'b0)) begin
            out_count_new_1_phi_fu_82_p4 = ap_const_lv16_0;
        end else if (~(or_cond_fu_185_p2 == 1'b0)) begin
            out_count_new_1_phi_fu_82_p4 = tmp_5_fu_191_p2;
        end else begin
            out_count_new_1_phi_fu_82_p4 = 'bx;
        end
    end else begin
        out_count_new_1_phi_fu_82_p4 = 'bx;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        if (~(or_cond_fu_185_p2 == 1'b0)) begin
            rd_clk_out = 1'b1;
        end else if ((or_cond_fu_185_p2 == 1'b0)) begin
            rd_clk_out = 1'b0;
        end else begin
            rd_clk_out = 'bx;
        end
    end else begin
        rd_clk_out = 'bx;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~(or_cond_fu_185_p2 == 1'b0)) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & (or_cond_fu_185_p2 == 1'b0)))) begin
        rd_clk_out_ap_vld = 1'b1;
    end else begin
        rd_clk_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign count_load_op_fu_158_p2 = (count + ap_const_lv16_1);

assign not_or_cond3_fu_123_p2 = (or_cond3_fu_117_p2 ^ 1'b1);

assign or_cond3_fu_117_p1 = reset;

assign or_cond3_fu_117_p2 = (tmp_fu_111_p2 | or_cond3_fu_117_p1);

assign or_cond_fu_185_p2 = (tmp_3_fu_173_p2 & tmp_4_fu_179_p2);

assign out_count_load_s_fu_130_p3 = ((or_cond3_fu_117_p2[0:0] === 1'b1) ? out_count : ap_const_lv16_0);

assign storemerge_cast_cast_fu_144_p3 = ((tmp_1_fu_138_p2[0:0] === 1'b1) ? ap_const_lv16_400 : ap_const_lv16_1000);

assign tmp_1_fu_138_p2 = ((block_V == ap_const_lv2_1) ? 1'b1 : 1'b0);

assign tmp_2_fu_164_p3 = ((or_cond3_fu_117_p2[0:0] === 1'b1) ? count_load_op_fu_158_p2 : ap_const_lv16_1);

assign tmp_3_fu_173_p2 = ((tmp_2_fu_164_p3 == clk_div) ? 1'b1 : 1'b0);

assign tmp_4_fu_179_p2 = (($signed(out_count_load_s_fu_130_p3) < $signed(storemerge_cast_cast_fu_144_p3)) ? 1'b1 : 1'b0);

assign tmp_5_fu_191_p2 = (out_count_load_s_fu_130_p3 + ap_const_lv16_1);

assign tmp_fu_111_p2 = (($signed(out_count) < $signed(max)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    max[2:0] <= 3'b000;
    max[6:4] <= 3'b000;
    max[11:11] <= 1'b0;
    max[15:13] <= 3'b000;
end

endmodule //LDPC_Div
